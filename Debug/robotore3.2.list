
robotore3.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08009250  08009250  00019250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800964c  0800964c  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800964c  0800964c  0001964c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009654  08009654  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009654  08009654  00019654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009658  08009658  00019658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800965c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020218  2**0
                  CONTENTS
 10 .bss          00000424  20000218  20000218  00020218  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000063c  2000063c  00020218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c8b  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c5f  00000000  00000000  00035ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  00038b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001288  00000000  00000000  00039ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023084  00000000  00000000  0003b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001868b  00000000  00000000  0005e1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3897  00000000  00000000  00076867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a0fe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063dc  00000000  00000000  0014a150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009238 	.word	0x08009238

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08009238 	.word	0x08009238

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <LED_RGB>:
//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3


void LED_RGB(int i){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

	switch (i)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	2b06      	cmp	r3, #6
 8000f9a:	f200 8088 	bhi.w	80010ae <LED_RGB+0x122>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <LED_RGB+0x18>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08000fc1 	.word	0x08000fc1
 8000fa8:	08000fe3 	.word	0x08000fe3
 8000fac:	08001005 	.word	0x08001005
 8000fb0:	08001027 	.word	0x08001027
 8000fb4:	08001049 	.word	0x08001049
 8000fb8:	0800106b 	.word	0x0800106b
 8000fbc:	0800108d 	.word	0x0800108d
	            {
	            case 1://R
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	4844      	ldr	r0, [pc, #272]	; (80010d8 <LED_RGB+0x14c>)
 8000fc6:	f003 fa2b 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2110      	movs	r1, #16
 8000fce:	4842      	ldr	r0, [pc, #264]	; (80010d8 <LED_RGB+0x14c>)
 8000fd0:	f003 fa26 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fda:	4840      	ldr	r0, [pc, #256]	; (80010dc <LED_RGB+0x150>)
 8000fdc:	f003 fa20 	bl	8004420 <HAL_GPIO_WritePin>

	                break;
 8000fe0:	e076      	b.n	80010d0 <LED_RGB+0x144>

	            case 2://G
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2120      	movs	r1, #32
 8000fe6:	483c      	ldr	r0, [pc, #240]	; (80010d8 <LED_RGB+0x14c>)
 8000fe8:	f003 fa1a 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8000fec:	2200      	movs	r2, #0
 8000fee:	2110      	movs	r1, #16
 8000ff0:	4839      	ldr	r0, [pc, #228]	; (80010d8 <LED_RGB+0x14c>)
 8000ff2:	f003 fa15 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffc:	4837      	ldr	r0, [pc, #220]	; (80010dc <LED_RGB+0x150>)
 8000ffe:	f003 fa0f 	bl	8004420 <HAL_GPIO_WritePin>

	                break;
 8001002:	e065      	b.n	80010d0 <LED_RGB+0x144>

	            case 3://B
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 8001004:	2201      	movs	r2, #1
 8001006:	2120      	movs	r1, #32
 8001008:	4833      	ldr	r0, [pc, #204]	; (80010d8 <LED_RGB+0x14c>)
 800100a:	f003 fa09 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 800100e:	2201      	movs	r2, #1
 8001010:	2110      	movs	r1, #16
 8001012:	4831      	ldr	r0, [pc, #196]	; (80010d8 <LED_RGB+0x14c>)
 8001014:	f003 fa04 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101e:	482f      	ldr	r0, [pc, #188]	; (80010dc <LED_RGB+0x150>)
 8001020:	f003 f9fe 	bl	8004420 <HAL_GPIO_WritePin>

	                break;
 8001024:	e054      	b.n	80010d0 <LED_RGB+0x144>

	            case 4://y
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 8001026:	2200      	movs	r2, #0
 8001028:	2120      	movs	r1, #32
 800102a:	482b      	ldr	r0, [pc, #172]	; (80010d8 <LED_RGB+0x14c>)
 800102c:	f003 f9f8 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8001030:	2200      	movs	r2, #0
 8001032:	2110      	movs	r1, #16
 8001034:	4828      	ldr	r0, [pc, #160]	; (80010d8 <LED_RGB+0x14c>)
 8001036:	f003 f9f3 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001040:	4826      	ldr	r0, [pc, #152]	; (80010dc <LED_RGB+0x150>)
 8001042:	f003 f9ed 	bl	8004420 <HAL_GPIO_WritePin>

	                break;
 8001046:	e043      	b.n	80010d0 <LED_RGB+0x144>

	            case 5://pink
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 8001048:	2200      	movs	r2, #0
 800104a:	2120      	movs	r1, #32
 800104c:	4822      	ldr	r0, [pc, #136]	; (80010d8 <LED_RGB+0x14c>)
 800104e:	f003 f9e7 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 8001052:	2201      	movs	r2, #1
 8001054:	2110      	movs	r1, #16
 8001056:	4820      	ldr	r0, [pc, #128]	; (80010d8 <LED_RGB+0x14c>)
 8001058:	f003 f9e2 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001062:	481e      	ldr	r0, [pc, #120]	; (80010dc <LED_RGB+0x150>)
 8001064:	f003 f9dc 	bl	8004420 <HAL_GPIO_WritePin>

	                break;
 8001068:	e032      	b.n	80010d0 <LED_RGB+0x144>

	            case 6://white
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 800106a:	2200      	movs	r2, #0
 800106c:	2120      	movs	r1, #32
 800106e:	481a      	ldr	r0, [pc, #104]	; (80010d8 <LED_RGB+0x14c>)
 8001070:	f003 f9d6 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	4817      	ldr	r0, [pc, #92]	; (80010d8 <LED_RGB+0x14c>)
 800107a:	f003 f9d1 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001084:	4815      	ldr	r0, [pc, #84]	; (80010dc <LED_RGB+0x150>)
 8001086:	f003 f9cb 	bl	8004420 <HAL_GPIO_WritePin>

	                break;
 800108a:	e021      	b.n	80010d0 <LED_RGB+0x144>

	            case 7://Cyan
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 800108c:	2201      	movs	r2, #1
 800108e:	2120      	movs	r1, #32
 8001090:	4811      	ldr	r0, [pc, #68]	; (80010d8 <LED_RGB+0x14c>)
 8001092:	f003 f9c5 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8001096:	2200      	movs	r2, #0
 8001098:	2110      	movs	r1, #16
 800109a:	480f      	ldr	r0, [pc, #60]	; (80010d8 <LED_RGB+0x14c>)
 800109c:	f003 f9c0 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <LED_RGB+0x150>)
 80010a8:	f003 f9ba 	bl	8004420 <HAL_GPIO_WritePin>

	                break;
 80010ac:	e010      	b.n	80010d0 <LED_RGB+0x144>

	            default:
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 80010ae:	2201      	movs	r2, #1
 80010b0:	2120      	movs	r1, #32
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <LED_RGB+0x14c>)
 80010b4:	f003 f9b4 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 80010b8:	2201      	movs	r2, #1
 80010ba:	2110      	movs	r1, #16
 80010bc:	4806      	ldr	r0, [pc, #24]	; (80010d8 <LED_RGB+0x14c>)
 80010be:	f003 f9af 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <LED_RGB+0x150>)
 80010ca:	f003 f9a9 	bl	8004420 <HAL_GPIO_WritePin>
	                break;
 80010ce:	bf00      	nop
	            }


}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40020000 	.word	0x40020000

080010e0 <LED_RGB_2>:

void LED_RGB_2(int n){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

	switch (n)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	2b06      	cmp	r3, #6
 80010ee:	f200 8095 	bhi.w	800121c <LED_RGB_2+0x13c>
 80010f2:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <LED_RGB_2+0x18>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	08001115 	.word	0x08001115
 80010fc:	08001139 	.word	0x08001139
 8001100:	0800115f 	.word	0x0800115f
 8001104:	08001185 	.word	0x08001185
 8001108:	080011ab 	.word	0x080011ab
 800110c:	080011d1 	.word	0x080011d1
 8001110:	080011f7 	.word	0x080011f7
	            {
	            case 1://R
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111a:	484c      	ldr	r0, [pc, #304]	; (800124c <LED_RGB_2+0x16c>)
 800111c:	f003 f980 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_2-4
 8001120:	2201      	movs	r2, #1
 8001122:	2110      	movs	r1, #16
 8001124:	4849      	ldr	r0, [pc, #292]	; (800124c <LED_RGB_2+0x16c>)
 8001126:	f003 f97b 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001130:	4846      	ldr	r0, [pc, #280]	; (800124c <LED_RGB_2+0x16c>)
 8001132:	f003 f975 	bl	8004420 <HAL_GPIO_WritePin>

	                break;
 8001136:	e084      	b.n	8001242 <LED_RGB_2+0x162>

	            case 2://G
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113e:	4843      	ldr	r0, [pc, #268]	; (800124c <LED_RGB_2+0x16c>)
 8001140:	f003 f96e 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114a:	4840      	ldr	r0, [pc, #256]	; (800124c <LED_RGB_2+0x16c>)
 800114c:	f003 f968 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001156:	483d      	ldr	r0, [pc, #244]	; (800124c <LED_RGB_2+0x16c>)
 8001158:	f003 f962 	bl	8004420 <HAL_GPIO_WritePin>
	                break;
 800115c:	e071      	b.n	8001242 <LED_RGB_2+0x162>

	            case 3://B
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001164:	4839      	ldr	r0, [pc, #228]	; (800124c <LED_RGB_2+0x16c>)
 8001166:	f003 f95b 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001170:	4836      	ldr	r0, [pc, #216]	; (800124c <LED_RGB_2+0x16c>)
 8001172:	f003 f955 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117c:	4833      	ldr	r0, [pc, #204]	; (800124c <LED_RGB_2+0x16c>)
 800117e:	f003 f94f 	bl	8004420 <HAL_GPIO_WritePin>
	                break;
 8001182:	e05e      	b.n	8001242 <LED_RGB_2+0x162>

	            case 4://y
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118a:	4830      	ldr	r0, [pc, #192]	; (800124c <LED_RGB_2+0x16c>)
 800118c:	f003 f948 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	482d      	ldr	r0, [pc, #180]	; (800124c <LED_RGB_2+0x16c>)
 8001198:	f003 f942 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a2:	482a      	ldr	r0, [pc, #168]	; (800124c <LED_RGB_2+0x16c>)
 80011a4:	f003 f93c 	bl	8004420 <HAL_GPIO_WritePin>

	                break;
 80011a8:	e04b      	b.n	8001242 <LED_RGB_2+0x162>

	            case 5://pink
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b0:	4826      	ldr	r0, [pc, #152]	; (800124c <LED_RGB_2+0x16c>)
 80011b2:	f003 f935 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011bc:	4823      	ldr	r0, [pc, #140]	; (800124c <LED_RGB_2+0x16c>)
 80011be:	f003 f92f 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c8:	4820      	ldr	r0, [pc, #128]	; (800124c <LED_RGB_2+0x16c>)
 80011ca:	f003 f929 	bl	8004420 <HAL_GPIO_WritePin>

	                break;
 80011ce:	e038      	b.n	8001242 <LED_RGB_2+0x162>

	            case 6://white
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d6:	481d      	ldr	r0, [pc, #116]	; (800124c <LED_RGB_2+0x16c>)
 80011d8:	f003 f922 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e2:	481a      	ldr	r0, [pc, #104]	; (800124c <LED_RGB_2+0x16c>)
 80011e4:	f003 f91c 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ee:	4817      	ldr	r0, [pc, #92]	; (800124c <LED_RGB_2+0x16c>)
 80011f0:	f003 f916 	bl	8004420 <HAL_GPIO_WritePin>
	                break;
 80011f4:	e025      	b.n	8001242 <LED_RGB_2+0x162>

	            case 7://Cyan
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011fc:	4813      	ldr	r0, [pc, #76]	; (800124c <LED_RGB_2+0x16c>)
 80011fe:	f003 f90f 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001208:	4810      	ldr	r0, [pc, #64]	; (800124c <LED_RGB_2+0x16c>)
 800120a:	f003 f909 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <LED_RGB_2+0x16c>)
 8001216:	f003 f903 	bl	8004420 <HAL_GPIO_WritePin>

	                break;
 800121a:	e012      	b.n	8001242 <LED_RGB_2+0x162>

	            default:
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001222:	480a      	ldr	r0, [pc, #40]	; (800124c <LED_RGB_2+0x16c>)
 8001224:	f003 f8fc 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <LED_RGB_2+0x16c>)
 8001230:	f003 f8f6 	bl	8004420 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <LED_RGB_2+0x16c>)
 800123c:	f003 f8f0 	bl	8004420 <HAL_GPIO_WritePin>
	                break;
 8001240:	bf00      	nop
	            }


}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40020400 	.word	0x40020400

08001250 <ButtonPress>:

int mode =0;
int calibrate_count =0;
//int mode_processed;

void ButtonPress(void){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_RESET)//SW1
 8001254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001258:	480d      	ldr	r0, [pc, #52]	; (8001290 <ButtonPress+0x40>)
 800125a:	f003 f8c9 	bl	80043f0 <HAL_GPIO_ReadPin>
//        mode++;
////        mode_processed = 0;
//        LED_RGB(0);
    }

    if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15) == GPIO_PIN_RESET)//SW2
 800125e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001262:	480c      	ldr	r0, [pc, #48]	; (8001294 <ButtonPress+0x44>)
 8001264:	f003 f8c4 	bl	80043f0 <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10d      	bne.n	800128a <ButtonPress+0x3a>
    {
    	LED_RGB(6);
 800126e:	2006      	movs	r0, #6
 8001270:	f7ff fe8c 	bl	8000f8c <LED_RGB>
		HAL_Delay(200);
 8001274:	20c8      	movs	r0, #200	; 0xc8
 8001276:	f001 fe71 	bl	8002f5c <HAL_Delay>
        mode++;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <ButtonPress+0x48>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	4a05      	ldr	r2, [pc, #20]	; (8001298 <ButtonPress+0x48>)
 8001282:	6013      	str	r3, [r2, #0]
//        mode_processed = 0;
        LED_RGB(0);
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff fe81 	bl	8000f8c <LED_RGB>
    }

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40020800 	.word	0x40020800
 8001294:	40020400 	.word	0x40020400
 8001298:	20000234 	.word	0x20000234

0800129c <mode_test>:



void mode_test(void){
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0

  switch(mode)
 80012a0:	4b31      	ldr	r3, [pc, #196]	; (8001368 <mode_test+0xcc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d853      	bhi.n	8001352 <mode_test+0xb6>
 80012aa:	a201      	add	r2, pc, #4	; (adr r2, 80012b0 <mode_test+0x14>)
 80012ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b0:	080012c5 	.word	0x080012c5
 80012b4:	080012eb 	.word	0x080012eb
 80012b8:	0800130b 	.word	0x0800130b
 80012bc:	08001323 	.word	0x08001323
 80012c0:	0800133b 	.word	0x0800133b
	  {
	  case 1:
		  LED_RGB(mode);
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <mode_test+0xcc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fe5f 	bl	8000f8c <LED_RGB>
		  if(calibrate_count == 0){
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <mode_test+0xd0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d104      	bne.n	80012e0 <mode_test+0x44>
			  calibrate_sensors();
 80012d6:	f000 ff21 	bl	800211c <calibrate_sensors>
			  calibrate_count = 1;
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <mode_test+0xd0>)
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]
		  }
//		  LED_RGB(0);
		  base_speed1=0;
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <mode_test+0xd4>)
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]



		  break;
 80012e8:	e03b      	b.n	8001362 <mode_test+0xc6>

	  case 2:
		  LED_RGB(mode);
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <mode_test+0xcc>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fe4c 	bl	8000f8c <LED_RGB>
		  HAL_TIM_Base_Start_IT(&htim6);
 80012f4:	481f      	ldr	r0, [pc, #124]	; (8001374 <mode_test+0xd8>)
 80012f6:	f003 ff21 	bl	800513c <HAL_TIM_Base_Start_IT>
		  LED_RGB(0);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff fe46 	bl	8000f8c <LED_RGB>
		  base_speed1=0;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <mode_test+0xd4>)
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	601a      	str	r2, [r3, #0]




		  break;
 8001308:	e02b      	b.n	8001362 <mode_test+0xc6>


	  case 3:
		  LED_RGB(mode);
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <mode_test+0xcc>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fe3c 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff fe39 	bl	8000f8c <LED_RGB>



		  base_speed1=-125;
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <mode_test+0xd4>)
 800131c:	4a16      	ldr	r2, [pc, #88]	; (8001378 <mode_test+0xdc>)
 800131e:	601a      	str	r2, [r3, #0]


		  break;
 8001320:	e01f      	b.n	8001362 <mode_test+0xc6>

	  case 4:
		  LED_RGB(mode);
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <mode_test+0xcc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fe30 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fe2d 	bl	8000f8c <LED_RGB>



		  base_speed1=-127;
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <mode_test+0xd4>)
 8001334:	4a11      	ldr	r2, [pc, #68]	; (800137c <mode_test+0xe0>)
 8001336:	601a      	str	r2, [r3, #0]
		  break;
 8001338:	e013      	b.n	8001362 <mode_test+0xc6>


	  case 5:
		  LED_RGB(mode);
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <mode_test+0xcc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fe24 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fe21 	bl	8000f8c <LED_RGB>



		  base_speed1=-129;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <mode_test+0xd4>)
 800134c:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <mode_test+0xe4>)
 800134e:	601a      	str	r2, [r3, #0]

		  break;
 8001350:	e007      	b.n	8001362 <mode_test+0xc6>

	  default:
		  LED_RGB(7);
 8001352:	2007      	movs	r0, #7
 8001354:	f7ff fe1a 	bl	8000f8c <LED_RGB>
		  base_speed1=0;
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <mode_test+0xd4>)
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	601a      	str	r2, [r3, #0]


		  break;
 8001360:	bf00      	nop

	  }
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000234 	.word	0x20000234
 800136c:	20000238 	.word	0x20000238
 8001370:	20000620 	.word	0x20000620
 8001374:	200004b4 	.word	0x200004b4
 8001378:	c2fa0000 	.word	0xc2fa0000
 800137c:	c2fe0000 	.word	0xc2fe0000
 8001380:	c3010000 	.word	0xc3010000

08001384 <ControlMotor>:
//#define REDUCTION_RATIO 0.4 // 減速比
//#define DISTANCE_PER_CNT (M_PI * TIRE * REDUCTION_RATIO / ENCODER_CPR) //[mm per cnt]
//float distance_1ms,distance_1ms_L,distance_1ms_R;


void ControlMotor(double duty_L, double duty_R){
 8001384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	ed87 0b04 	vstr	d0, [r7, #16]
 800138e:	ed87 1b02 	vstr	d1, [r7, #8]

    if (duty_L >= 0) {
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800139e:	f7ff fbb1 	bl	8000b04 <__aeabi_dcmpge>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00e      	beq.n	80013c6 <ControlMotor+0x42>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // PH-HIGH(+)
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ae:	4828      	ldr	r0, [pc, #160]	; (8001450 <ControlMotor+0xcc>)
 80013b0:	f003 f836 	bl	8004420 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim8,TIM_CHANNEL_4, duty_L);
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <ControlMotor+0xd0>)
 80013b6:	681e      	ldr	r6, [r3, #0]
 80013b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013bc:	f7ff fbf4 	bl	8000ba8 <__aeabi_d2uiz>
 80013c0:	4603      	mov	r3, r0
 80013c2:	6433      	str	r3, [r6, #64]	; 0x40
 80013c4:	e013      	b.n	80013ee <ControlMotor+0x6a>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // PH-LOW(-)
 80013c6:	2200      	movs	r2, #0
 80013c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013cc:	4820      	ldr	r0, [pc, #128]	; (8001450 <ControlMotor+0xcc>)
 80013ce:	f003 f827 	bl	8004420 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim8,TIM_CHANNEL_4, -duty_L);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <ControlMotor+0xd0>)
 80013e0:	681e      	ldr	r6, [r3, #0]
 80013e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013e6:	f7ff fbdf 	bl	8000ba8 <__aeabi_d2uiz>
 80013ea:	4603      	mov	r3, r0
 80013ec:	6433      	str	r3, [r6, #64]	; 0x40
    }
    if (duty_R >= 0) {
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013fa:	f7ff fb83 	bl	8000b04 <__aeabi_dcmpge>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00e      	beq.n	8001422 <ControlMotor+0x9e>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // PH-HIGH(+)
 8001404:	2201      	movs	r2, #1
 8001406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140a:	4813      	ldr	r0, [pc, #76]	; (8001458 <ControlMotor+0xd4>)
 800140c:	f003 f808 	bl	8004420 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim1,TIM_CHANNEL_2, duty_R);
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <ControlMotor+0xd8>)
 8001412:	681c      	ldr	r4, [r3, #0]
 8001414:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001418:	f7ff fbc6 	bl	8000ba8 <__aeabi_d2uiz>
 800141c:	4603      	mov	r3, r0
 800141e:	63a3      	str	r3, [r4, #56]	; 0x38
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // PH-LOW(-)
        __HAL_TIM_SET_COMPARE( &htim1,TIM_CHANNEL_2, -duty_R);
        }
}
 8001420:	e011      	b.n	8001446 <ControlMotor+0xc2>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // PH-LOW(-)
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001428:	480b      	ldr	r0, [pc, #44]	; (8001458 <ControlMotor+0xd4>)
 800142a:	f002 fff9 	bl	8004420 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim1,TIM_CHANNEL_2, -duty_R);
 800142e:	68bc      	ldr	r4, [r7, #8]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <ControlMotor+0xd8>)
 8001438:	681e      	ldr	r6, [r3, #0]
 800143a:	4620      	mov	r0, r4
 800143c:	4629      	mov	r1, r5
 800143e:	f7ff fbb3 	bl	8000ba8 <__aeabi_d2uiz>
 8001442:	4603      	mov	r3, r0
 8001444:	63b3      	str	r3, [r6, #56]	; 0x38
}
 8001446:	bf00      	nop
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800144e:	bf00      	nop
 8001450:	40020800 	.word	0x40020800
 8001454:	200004fc 	.word	0x200004fc
 8001458:	40020000 	.word	0x40020000
 800145c:	20000394 	.word	0x20000394

08001460 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	SpeedControl_NoENC();
 8001468:	f000 ffea 	bl	8002440 <SpeedControl_NoENC>
//	calculateEncoderSpeed();

}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {//ADC後にこ�???��?��関数が呼ばれる
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	//ADC後�???��?��処??��?��?
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <change_mode.0>:

	ControlMotor(0, 0);

	test_flag = 0;

	void change_mode(){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	f8c7 c004 	str.w	ip, [r7, #4]
		ButtonPress();
 8001492:	f7ff fedd 	bl	8001250 <ButtonPress>
		mode_test();
 8001496:	f7ff ff01 	bl	800129c <mode_test>
//		calculateEncoderSpeed();

	}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	0000      	movs	r0, r0
 80014a4:	0000      	movs	r0, r0
	...

080014a8 <main>:
int main(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	607b      	str	r3, [r7, #4]
	HAL_Init();
 80014b4:	f001 fce0 	bl	8002e78 <HAL_Init>
	SystemClock_Config();
 80014b8:	f000 f8ea 	bl	8001690 <SystemClock_Config>
	MX_GPIO_Init();
 80014bc:	f000 fd36 	bl	8001f2c <MX_GPIO_Init>
	MX_DMA_Init();
 80014c0:	f000 fd14 	bl	8001eec <MX_DMA_Init>
	MX_ADC1_Init();
 80014c4:	f000 f94e 	bl	8001764 <MX_ADC1_Init>
	MX_TIM1_Init();
 80014c8:	f000 faaa 	bl	8001a20 <MX_TIM1_Init>
	MX_TIM2_Init();
 80014cc:	f000 fb2c 	bl	8001b28 <MX_TIM2_Init>
	MX_TIM4_Init();
 80014d0:	f000 fbd6 	bl	8001c80 <MX_TIM4_Init>
	MX_TIM8_Init();
 80014d4:	f000 fc5e 	bl	8001d94 <MX_TIM8_Init>
	MX_TIM3_Init();
 80014d8:	f000 fb7e 	bl	8001bd8 <MX_TIM3_Init>
	MX_I2C1_Init();
 80014dc:	f000 fa3c 	bl	8001958 <MX_I2C1_Init>
	MX_SPI3_Init();
 80014e0:	f000 fa68 	bl	80019b4 <MX_SPI3_Init>
	MX_USART6_UART_Init();
 80014e4:	f000 fcd8 	bl	8001e98 <MX_USART6_UART_Init>
	MX_TIM6_Init();
 80014e8:	f000 fc1e 	bl	8001d28 <MX_TIM6_Init>
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) Line_sens, 13) != HAL_OK) {
 80014ec:	220d      	movs	r2, #13
 80014ee:	495c      	ldr	r1, [pc, #368]	; (8001660 <main+0x1b8>)
 80014f0:	485c      	ldr	r0, [pc, #368]	; (8001664 <main+0x1bc>)
 80014f2:	f001 fd9b 	bl	800302c <HAL_ADC_Start_DMA>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <main+0x58>
		Error_Handler();
 80014fc:	f000 fde2 	bl	80020c4 <Error_Handler>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);	//ENC1
 8001500:	213c      	movs	r1, #60	; 0x3c
 8001502:	4859      	ldr	r0, [pc, #356]	; (8001668 <main+0x1c0>)
 8001504:	f004 f896 	bl	8005634 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);	//ENC2
 8001508:	213c      	movs	r1, #60	; 0x3c
 800150a:	4858      	ldr	r0, [pc, #352]	; (800166c <main+0x1c4>)
 800150c:	f004 f892 	bl	8005634 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);	//DRVR
 8001510:	2104      	movs	r1, #4
 8001512:	4857      	ldr	r0, [pc, #348]	; (8001670 <main+0x1c8>)
 8001514:	f003 fed2 	bl	80052bc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4);	//DRVL
 8001518:	210c      	movs	r1, #12
 800151a:	4856      	ldr	r0, [pc, #344]	; (8001674 <main+0x1cc>)
 800151c:	f003 fece 	bl	80052bc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);	//fan
 8001520:	2108      	movs	r1, #8
 8001522:	4855      	ldr	r0, [pc, #340]	; (8001678 <main+0x1d0>)
 8001524:	f003 feca 	bl	80052bc <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001528:	4b51      	ldr	r3, [pc, #324]	; (8001670 <main+0x1c8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2200      	movs	r2, #0
 800152e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8001530:	4b50      	ldr	r3, [pc, #320]	; (8001674 <main+0x1cc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001538:	4b4f      	ldr	r3, [pc, #316]	; (8001678 <main+0x1d0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);	//LED1
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001546:	484d      	ldr	r0, [pc, #308]	; (800167c <main+0x1d4>)
 8001548:	f002 ff6a 	bl	8004420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);	//LED2
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001552:	484a      	ldr	r0, [pc, #296]	; (800167c <main+0x1d4>)
 8001554:	f002 ff64 	bl	8004420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);	//LED3
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800155e:	4847      	ldr	r0, [pc, #284]	; (800167c <main+0x1d4>)
 8001560:	f002 ff5e 	bl	8004420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);	//R_1-2
 8001564:	2200      	movs	r2, #0
 8001566:	2120      	movs	r1, #32
 8001568:	4845      	ldr	r0, [pc, #276]	; (8001680 <main+0x1d8>)
 800156a:	f002 ff59 	bl	8004420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);	//G_1-3
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001574:	4841      	ldr	r0, [pc, #260]	; (800167c <main+0x1d4>)
 8001576:	f002 ff53 	bl	8004420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);	//B_1-4
 800157a:	2201      	movs	r2, #1
 800157c:	2110      	movs	r1, #16
 800157e:	4840      	ldr	r0, [pc, #256]	; (8001680 <main+0x1d8>)
 8001580:	f002 ff4e 	bl	8004420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);	//R_2-2
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800158a:	483d      	ldr	r0, [pc, #244]	; (8001680 <main+0x1d8>)
 800158c:	f002 ff48 	bl	8004420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	//G_2-3
 8001590:	2201      	movs	r2, #1
 8001592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001596:	483a      	ldr	r0, [pc, #232]	; (8001680 <main+0x1d8>)
 8001598:	f002 ff42 	bl	8004420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);	//B_2-4
 800159c:	2201      	movs	r2, #1
 800159e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a2:	4837      	ldr	r0, [pc, #220]	; (8001680 <main+0x1d8>)
 80015a4:	f002 ff3c 	bl	8004420 <HAL_GPIO_WritePin>
	ControlMotor(0, 0);
 80015a8:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8001658 <main+0x1b0>
 80015ac:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8001658 <main+0x1b0>
 80015b0:	f7ff fee8 	bl	8001384 <ControlMotor>
	test_flag = 0;
 80015b4:	4b33      	ldr	r3, [pc, #204]	; (8001684 <main+0x1dc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	801a      	strh	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (Line3_sens[1] == 0) {
 80015ba:	e003      	b.n	80015c4 <main+0x11c>
		change_mode();
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	469c      	mov	ip, r3
 80015c0:	f7ff ff62 	bl	8001488 <change_mode.0>
	while (Line3_sens[1] == 0) {
 80015c4:	4b30      	ldr	r3, [pc, #192]	; (8001688 <main+0x1e0>)
 80015c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d2:	d0f3      	beq.n	80015bc <main+0x114>
	}
	while (1) {
//		test_flag = 1;

		change_mode();
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	469c      	mov	ip, r3
 80015d8:	f7ff ff56 	bl	8001488 <change_mode.0>

		if (Line3_sens[1] == 0) {
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <main+0x1e0>)
 80015de:	edd3 7a01 	vldr	s15, [r3, #4]
 80015e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	d113      	bne.n	8001614 <main+0x16c>
			while (1) {
				change_mode();
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	469c      	mov	ip, r3
 80015f0:	f7ff ff4a 	bl	8001488 <change_mode.0>
				if (Line3_sens[1] == 1) {
 80015f4:	4b24      	ldr	r3, [pc, #144]	; (8001688 <main+0x1e0>)
 80015f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80015fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015fe:	eef4 7a47 	vcmp.f32	s15, s14
 8001602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001606:	d1f1      	bne.n	80015ec <main+0x144>
					test_flag++;
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <main+0x1dc>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <main+0x1dc>)
 8001612:	801a      	strh	r2, [r3, #0]
					break;
				}
			}
		}

		if (test_flag >= 2) {
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <main+0x1dc>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d9db      	bls.n	80015d4 <main+0x12c>
			LED_RGB_2(7);
 800161c:	2007      	movs	r0, #7
 800161e:	f7ff fd5f 	bl	80010e0 <LED_RGB_2>
//			HAL_TIM_Base_Stop_IT(&htim6);
			ControlMotor(0, 0);
 8001622:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8001658 <main+0x1b0>
 8001626:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001658 <main+0x1b0>
 800162a:	f7ff feab 	bl	8001384 <ControlMotor>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)	//SW1
 800162e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001632:	4816      	ldr	r0, [pc, #88]	; (800168c <main+0x1e4>)
 8001634:	f002 fedc 	bl	80043f0 <HAL_GPIO_ReadPin>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ca      	bne.n	80015d4 <main+0x12c>
					{
				LED_RGB_2(0);
 800163e:	2000      	movs	r0, #0
 8001640:	f7ff fd4e 	bl	80010e0 <LED_RGB_2>
				HAL_Delay(300);
 8001644:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001648:	f001 fc88 	bl	8002f5c <HAL_Delay>
				test_flag = 0;
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <main+0x1dc>)
 800164e:	2200      	movs	r2, #0
 8001650:	801a      	strh	r2, [r3, #0]
		change_mode();
 8001652:	e7bf      	b.n	80015d4 <main+0x12c>
 8001654:	f3af 8000 	nop.w
	...
 8001660:	20000590 	.word	0x20000590
 8001664:	20000240 	.word	0x20000240
 8001668:	20000424 	.word	0x20000424
 800166c:	2000046c 	.word	0x2000046c
 8001670:	20000394 	.word	0x20000394
 8001674:	200004fc 	.word	0x200004fc
 8001678:	200003dc 	.word	0x200003dc
 800167c:	40020000 	.word	0x40020000
 8001680:	40020400 	.word	0x40020400
 8001684:	2000023c 	.word	0x2000023c
 8001688:	20000588 	.word	0x20000588
 800168c:	40020800 	.word	0x40020800

08001690 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b094      	sub	sp, #80	; 0x50
 8001694:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001696:	f107 0320 	add.w	r3, r7, #32
 800169a:	2230      	movs	r2, #48	; 0x30
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f005 f8ac 	bl	80067fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	4b28      	ldr	r3, [pc, #160]	; (800175c <SystemClock_Config+0xcc>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	4a27      	ldr	r2, [pc, #156]	; (800175c <SystemClock_Config+0xcc>)
 80016be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c2:	6413      	str	r3, [r2, #64]	; 0x40
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <SystemClock_Config+0xcc>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d0:	2300      	movs	r3, #0
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	4b22      	ldr	r3, [pc, #136]	; (8001760 <SystemClock_Config+0xd0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a21      	ldr	r2, [pc, #132]	; (8001760 <SystemClock_Config+0xd0>)
 80016da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <SystemClock_Config+0xd0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ec:	2302      	movs	r3, #2
 80016ee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f0:	2301      	movs	r3, #1
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f4:	2310      	movs	r3, #16
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f8:	2302      	movs	r3, #2
 80016fa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016fc:	2300      	movs	r3, #0
 80016fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001700:	2308      	movs	r3, #8
 8001702:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001704:	23a8      	movs	r3, #168	; 0xa8
 8001706:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001708:	2302      	movs	r3, #2
 800170a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800170c:	2304      	movs	r3, #4
 800170e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001710:	f107 0320 	add.w	r3, r7, #32
 8001714:	4618      	mov	r0, r3
 8001716:	f002 ffe1 	bl	80046dc <HAL_RCC_OscConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SystemClock_Config+0x94>
		Error_Handler();
 8001720:	f000 fcd0 	bl	80020c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001724:	230f      	movs	r3, #15
 8001726:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001728:	2302      	movs	r3, #2
 800172a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001730:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001734:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	2105      	movs	r1, #5
 8001742:	4618      	mov	r0, r3
 8001744:	f003 fa42 	bl	8004bcc <HAL_RCC_ClockConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0xc2>
		Error_Handler();
 800174e:	f000 fcb9 	bl	80020c4 <Error_Handler>
	}
}
 8001752:	bf00      	nop
 8001754:	3750      	adds	r7, #80	; 0x50
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40007000 	.word	0x40007000

08001764 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */
	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800176a:	463b      	mov	r3, r7
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */
	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001776:	4b75      	ldr	r3, [pc, #468]	; (800194c <MX_ADC1_Init+0x1e8>)
 8001778:	4a75      	ldr	r2, [pc, #468]	; (8001950 <MX_ADC1_Init+0x1ec>)
 800177a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800177c:	4b73      	ldr	r3, [pc, #460]	; (800194c <MX_ADC1_Init+0x1e8>)
 800177e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001782:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001784:	4b71      	ldr	r3, [pc, #452]	; (800194c <MX_ADC1_Init+0x1e8>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800178a:	4b70      	ldr	r3, [pc, #448]	; (800194c <MX_ADC1_Init+0x1e8>)
 800178c:	2201      	movs	r2, #1
 800178e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001790:	4b6e      	ldr	r3, [pc, #440]	; (800194c <MX_ADC1_Init+0x1e8>)
 8001792:	2201      	movs	r2, #1
 8001794:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001796:	4b6d      	ldr	r3, [pc, #436]	; (800194c <MX_ADC1_Init+0x1e8>)
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800179e:	4b6b      	ldr	r3, [pc, #428]	; (800194c <MX_ADC1_Init+0x1e8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017a4:	4b69      	ldr	r3, [pc, #420]	; (800194c <MX_ADC1_Init+0x1e8>)
 80017a6:	4a6b      	ldr	r2, [pc, #428]	; (8001954 <MX_ADC1_Init+0x1f0>)
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017aa:	4b68      	ldr	r3, [pc, #416]	; (800194c <MX_ADC1_Init+0x1e8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 13;
 80017b0:	4b66      	ldr	r3, [pc, #408]	; (800194c <MX_ADC1_Init+0x1e8>)
 80017b2:	220d      	movs	r2, #13
 80017b4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80017b6:	4b65      	ldr	r3, [pc, #404]	; (800194c <MX_ADC1_Init+0x1e8>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017be:	4b63      	ldr	r3, [pc, #396]	; (800194c <MX_ADC1_Init+0x1e8>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80017c4:	4861      	ldr	r0, [pc, #388]	; (800194c <MX_ADC1_Init+0x1e8>)
 80017c6:	f001 fbed 	bl	8002fa4 <HAL_ADC_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_ADC1_Init+0x70>
		Error_Handler();
 80017d0:	f000 fc78 	bl	80020c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80017d4:	2309      	movs	r3, #9
 80017d6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80017d8:	2301      	movs	r3, #1
 80017da:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80017dc:	2307      	movs	r3, #7
 80017de:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80017e0:	463b      	mov	r3, r7
 80017e2:	4619      	mov	r1, r3
 80017e4:	4859      	ldr	r0, [pc, #356]	; (800194c <MX_ADC1_Init+0x1e8>)
 80017e6:	f001 fd45 	bl	8003274 <HAL_ADC_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_ADC1_Init+0x90>
		Error_Handler();
 80017f0:	f000 fc68 	bl	80020c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80017f4:	2308      	movs	r3, #8
 80017f6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80017fc:	463b      	mov	r3, r7
 80017fe:	4619      	mov	r1, r3
 8001800:	4852      	ldr	r0, [pc, #328]	; (800194c <MX_ADC1_Init+0x1e8>)
 8001802:	f001 fd37 	bl	8003274 <HAL_ADC_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_ADC1_Init+0xac>
		Error_Handler();
 800180c:	f000 fc5a 	bl	80020c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8001810:	230f      	movs	r3, #15
 8001812:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8001814:	2303      	movs	r3, #3
 8001816:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001818:	463b      	mov	r3, r7
 800181a:	4619      	mov	r1, r3
 800181c:	484b      	ldr	r0, [pc, #300]	; (800194c <MX_ADC1_Init+0x1e8>)
 800181e:	f001 fd29 	bl	8003274 <HAL_ADC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_ADC1_Init+0xc8>
		Error_Handler();
 8001828:	f000 fc4c 	bl	80020c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 800182c:	230e      	movs	r3, #14
 800182e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 8001830:	2304      	movs	r3, #4
 8001832:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001834:	463b      	mov	r3, r7
 8001836:	4619      	mov	r1, r3
 8001838:	4844      	ldr	r0, [pc, #272]	; (800194c <MX_ADC1_Init+0x1e8>)
 800183a:	f001 fd1b 	bl	8003274 <HAL_ADC_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_ADC1_Init+0xe4>
		Error_Handler();
 8001844:	f000 fc3e 	bl	80020c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001848:	2305      	movs	r3, #5
 800184a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 5;
 800184c:	2305      	movs	r3, #5
 800184e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001850:	463b      	mov	r3, r7
 8001852:	4619      	mov	r1, r3
 8001854:	483d      	ldr	r0, [pc, #244]	; (800194c <MX_ADC1_Init+0x1e8>)
 8001856:	f001 fd0d 	bl	8003274 <HAL_ADC_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC1_Init+0x100>
		Error_Handler();
 8001860:	f000 fc30 	bl	80020c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001864:	2304      	movs	r3, #4
 8001866:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 6;
 8001868:	2306      	movs	r3, #6
 800186a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800186c:	463b      	mov	r3, r7
 800186e:	4619      	mov	r1, r3
 8001870:	4836      	ldr	r0, [pc, #216]	; (800194c <MX_ADC1_Init+0x1e8>)
 8001872:	f001 fcff 	bl	8003274 <HAL_ADC_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_ADC1_Init+0x11c>
		Error_Handler();
 800187c:	f000 fc22 	bl	80020c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001880:	2303      	movs	r3, #3
 8001882:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 7;
 8001884:	2307      	movs	r3, #7
 8001886:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001888:	463b      	mov	r3, r7
 800188a:	4619      	mov	r1, r3
 800188c:	482f      	ldr	r0, [pc, #188]	; (800194c <MX_ADC1_Init+0x1e8>)
 800188e:	f001 fcf1 	bl	8003274 <HAL_ADC_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_ADC1_Init+0x138>
		Error_Handler();
 8001898:	f000 fc14 	bl	80020c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 800189c:	2302      	movs	r3, #2
 800189e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 8;
 80018a0:	2308      	movs	r3, #8
 80018a2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80018a4:	463b      	mov	r3, r7
 80018a6:	4619      	mov	r1, r3
 80018a8:	4828      	ldr	r0, [pc, #160]	; (800194c <MX_ADC1_Init+0x1e8>)
 80018aa:	f001 fce3 	bl	8003274 <HAL_ADC_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_ADC1_Init+0x154>
		Error_Handler();
 80018b4:	f000 fc06 	bl	80020c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 9;
 80018bc:	2309      	movs	r3, #9
 80018be:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80018c0:	463b      	mov	r3, r7
 80018c2:	4619      	mov	r1, r3
 80018c4:	4821      	ldr	r0, [pc, #132]	; (800194c <MX_ADC1_Init+0x1e8>)
 80018c6:	f001 fcd5 	bl	8003274 <HAL_ADC_ConfigChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_ADC1_Init+0x170>
		Error_Handler();
 80018d0:	f000 fbf8 	bl	80020c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 10;
 80018d8:	230a      	movs	r3, #10
 80018da:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80018dc:	463b      	mov	r3, r7
 80018de:	4619      	mov	r1, r3
 80018e0:	481a      	ldr	r0, [pc, #104]	; (800194c <MX_ADC1_Init+0x1e8>)
 80018e2:	f001 fcc7 	bl	8003274 <HAL_ADC_ConfigChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_ADC1_Init+0x18c>
		Error_Handler();
 80018ec:	f000 fbea 	bl	80020c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 80018f0:	230d      	movs	r3, #13
 80018f2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 11;
 80018f4:	230b      	movs	r3, #11
 80018f6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80018f8:	463b      	mov	r3, r7
 80018fa:	4619      	mov	r1, r3
 80018fc:	4813      	ldr	r0, [pc, #76]	; (800194c <MX_ADC1_Init+0x1e8>)
 80018fe:	f001 fcb9 	bl	8003274 <HAL_ADC_ConfigChannel>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_ADC1_Init+0x1a8>
		Error_Handler();
 8001908:	f000 fbdc 	bl	80020c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 800190c:	230c      	movs	r3, #12
 800190e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 12;
 8001910:	230c      	movs	r3, #12
 8001912:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001914:	463b      	mov	r3, r7
 8001916:	4619      	mov	r1, r3
 8001918:	480c      	ldr	r0, [pc, #48]	; (800194c <MX_ADC1_Init+0x1e8>)
 800191a:	f001 fcab 	bl	8003274 <HAL_ADC_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_ADC1_Init+0x1c4>
		Error_Handler();
 8001924:	f000 fbce 	bl	80020c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8001928:	230b      	movs	r3, #11
 800192a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 13;
 800192c:	230d      	movs	r3, #13
 800192e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001930:	463b      	mov	r3, r7
 8001932:	4619      	mov	r1, r3
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_ADC1_Init+0x1e8>)
 8001936:	f001 fc9d 	bl	8003274 <HAL_ADC_ConfigChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_ADC1_Init+0x1e0>
		Error_Handler();
 8001940:	f000 fbc0 	bl	80020c4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	/* USER CODE END ADC1_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000240 	.word	0x20000240
 8001950:	40012000 	.word	0x40012000
 8001954:	0f000001 	.word	0x0f000001

08001958 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_Init 0 */
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */
	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_I2C1_Init+0x50>)
 800195e:	4a13      	ldr	r2, [pc, #76]	; (80019ac <MX_I2C1_Init+0x54>)
 8001960:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_I2C1_Init+0x50>)
 8001964:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <MX_I2C1_Init+0x58>)
 8001966:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_I2C1_Init+0x50>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_I2C1_Init+0x50>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_I2C1_Init+0x50>)
 8001976:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800197a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <MX_I2C1_Init+0x50>)
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_I2C1_Init+0x50>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <MX_I2C1_Init+0x50>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_I2C1_Init+0x50>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <MX_I2C1_Init+0x50>)
 8001996:	f002 fd5d 	bl	8004454 <HAL_I2C_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80019a0:	f000 fb90 	bl	80020c4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	/* USER CODE END I2C1_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200002e8 	.word	0x200002e8
 80019ac:	40005400 	.word	0x40005400
 80019b0:	000186a0 	.word	0x000186a0

080019b4 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	/* USER CODE END SPI3_Init 0 */

	/* USER CODE BEGIN SPI3_Init 1 */
	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019ba:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <MX_SPI3_Init+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80019be:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019c4:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e4:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_SPI3_Init+0x64>)
 8001a00:	220a      	movs	r2, #10
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <MX_SPI3_Init+0x64>)
 8001a06:	f003 fac1 	bl	8004f8c <HAL_SPI_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_SPI3_Init+0x60>
		Error_Handler();
 8001a10:	f000 fb58 	bl	80020c4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */
	/* USER CODE END SPI3_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	2000033c 	.word	0x2000033c
 8001a1c:	40003c00 	.word	0x40003c00

08001a20 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b092      	sub	sp, #72	; 0x48
 8001a24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */
	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	615a      	str	r2, [r3, #20]
 8001a42:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2220      	movs	r2, #32
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f004 fed6 	bl	80067fc <memset>

	/* USER CODE BEGIN TIM1_Init 1 */
	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001a50:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <MX_TIM1_Init+0x100>)
 8001a52:	4a34      	ldr	r2, [pc, #208]	; (8001b24 <MX_TIM1_Init+0x104>)
 8001a54:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001a56:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <MX_TIM1_Init+0x100>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5c:	4b30      	ldr	r3, [pc, #192]	; (8001b20 <MX_TIM1_Init+0x100>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 499;
 8001a62:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <MX_TIM1_Init+0x100>)
 8001a64:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001a68:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6a:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <MX_TIM1_Init+0x100>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001a70:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <MX_TIM1_Init+0x100>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a76:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <MX_TIM1_Init+0x100>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001a7c:	4828      	ldr	r0, [pc, #160]	; (8001b20 <MX_TIM1_Init+0x100>)
 8001a7e:	f003 fbcd 	bl	800521c <HAL_TIM_PWM_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM1_Init+0x6c>
		Error_Handler();
 8001a88:	f000 fb1c 	bl	80020c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001a94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4821      	ldr	r0, [pc, #132]	; (8001b20 <MX_TIM1_Init+0x100>)
 8001a9c:	f004 fae0 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001aa6:	f000 fb0d 	bl	80020c4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aaa:	2360      	movs	r3, #96	; 0x60
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8001ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aca:	2204      	movs	r2, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	4814      	ldr	r0, [pc, #80]	; (8001b20 <MX_TIM1_Init+0x100>)
 8001ad0:	f003 ff66 	bl	80059a0 <HAL_TIM_PWM_ConfigChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 8001ada:	f000 faf3 	bl	80020c4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001af2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4619      	mov	r1, r3
 8001b00:	4807      	ldr	r0, [pc, #28]	; (8001b20 <MX_TIM1_Init+0x100>)
 8001b02:	f004 fb29 	bl	8006158 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8001b0c:	f000 fada 	bl	80020c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */
	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001b10:	4803      	ldr	r0, [pc, #12]	; (8001b20 <MX_TIM1_Init+0x100>)
 8001b12:	f000 ff9f 	bl	8002a54 <HAL_TIM_MspPostInit>

}
 8001b16:	bf00      	nop
 8001b18:	3748      	adds	r7, #72	; 0x48
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000394 	.word	0x20000394
 8001b24:	40010000 	.word	0x40010000

08001b28 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */
	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b2e:	f107 0320 	add.w	r3, r7, #32
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	615a      	str	r2, [r3, #20]
 8001b48:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */
	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <MX_TIM2_Init+0xac>)
 8001b4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b50:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <MX_TIM2_Init+0xac>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <MX_TIM2_Init+0xac>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4095;
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <MX_TIM2_Init+0xac>)
 8001b60:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001b64:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <MX_TIM2_Init+0xac>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <MX_TIM2_Init+0xac>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001b72:	4818      	ldr	r0, [pc, #96]	; (8001bd4 <MX_TIM2_Init+0xac>)
 8001b74:	f003 fb52 	bl	800521c <HAL_TIM_PWM_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM2_Init+0x5a>
		Error_Handler();
 8001b7e:	f000 faa1 	bl	80020c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001b8a:	f107 0320 	add.w	r3, r7, #32
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4810      	ldr	r0, [pc, #64]	; (8001bd4 <MX_TIM2_Init+0xac>)
 8001b92:	f004 fa65 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8001b9c:	f000 fa92 	bl	80020c4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba0:	2360      	movs	r3, #96	; 0x60
 8001ba2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	2208      	movs	r2, #8
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <MX_TIM2_Init+0xac>)
 8001bb8:	f003 fef2 	bl	80059a0 <HAL_TIM_PWM_ConfigChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8001bc2:	f000 fa7f 	bl	80020c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001bc6:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <MX_TIM2_Init+0xac>)
 8001bc8:	f000 ff44 	bl	8002a54 <HAL_TIM_MspPostInit>

}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200003dc 	.word	0x200003dc

08001bd8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	; 0x30
 8001bdc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */
	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	2224      	movs	r2, #36	; 0x24
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 fe08 	bl	80067fc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */
	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001bf6:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <MX_TIM3_Init+0xa4>)
 8001bf8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c0c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c22:	2301      	movs	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c32:	2301      	movs	r3, #1
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	4619      	mov	r1, r3
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001c46:	f003 fc4f 	bl	80054e8 <HAL_TIM_Encoder_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM3_Init+0x7c>
		Error_Handler();
 8001c50:	f000 fa38 	bl	80020c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001c62:	f004 f9fd 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001c6c:	f000 fa2a 	bl	80020c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	/* USER CODE END TIM3_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	3730      	adds	r7, #48	; 0x30
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000424 	.word	0x20000424
 8001c7c:	40000400 	.word	0x40000400

08001c80 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08c      	sub	sp, #48	; 0x30
 8001c84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */
	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	2224      	movs	r2, #36	; 0x24
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 fdb4 	bl	80067fc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */
	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001c9c:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <MX_TIM4_Init+0xa0>)
 8001c9e:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <MX_TIM4_Init+0xa4>)
 8001ca0:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <MX_TIM4_Init+0xa0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <MX_TIM4_Init+0xa0>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <MX_TIM4_Init+0xa0>)
 8001cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb4:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <MX_TIM4_Init+0xa0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <MX_TIM4_Init+0xa0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	4619      	mov	r1, r3
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <MX_TIM4_Init+0xa0>)
 8001cee:	f003 fbfb 	bl	80054e8 <HAL_TIM_Encoder_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM4_Init+0x7c>
		Error_Handler();
 8001cf8:	f000 f9e4 	bl	80020c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	4619      	mov	r1, r3
 8001d08:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_TIM4_Init+0xa0>)
 8001d0a:	f004 f9a9 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM4_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001d14:	f000 f9d6 	bl	80020c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	/* USER CODE END TIM4_Init 2 */

}
 8001d18:	bf00      	nop
 8001d1a:	3730      	adds	r7, #48	; 0x30
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	2000046c 	.word	0x2000046c
 8001d24:	40000800 	.word	0x40000800

08001d28 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */
	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d2e:	463b      	mov	r3, r7
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */
	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <MX_TIM6_Init+0x64>)
 8001d38:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <MX_TIM6_Init+0x68>)
 8001d3a:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 83;
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <MX_TIM6_Init+0x64>)
 8001d3e:	2253      	movs	r2, #83	; 0x53
 8001d40:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_TIM6_Init+0x64>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 999;
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <MX_TIM6_Init+0x64>)
 8001d4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d4e:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_TIM6_Init+0x64>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001d56:	480d      	ldr	r0, [pc, #52]	; (8001d8c <MX_TIM6_Init+0x64>)
 8001d58:	f003 f9a1 	bl	800509e <HAL_TIM_Base_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM6_Init+0x3e>
		Error_Handler();
 8001d62:	f000 f9af 	bl	80020c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8001d6e:	463b      	mov	r3, r7
 8001d70:	4619      	mov	r1, r3
 8001d72:	4806      	ldr	r0, [pc, #24]	; (8001d8c <MX_TIM6_Init+0x64>)
 8001d74:	f004 f974 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM6_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8001d7e:	f000 f9a1 	bl	80020c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */
	/* USER CODE END TIM6_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200004b4 	.word	0x200004b4
 8001d90:	40001000 	.word	0x40001000

08001d94 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b092      	sub	sp, #72	; 0x48
 8001d98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */
	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
 8001db4:	615a      	str	r2, [r3, #20]
 8001db6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	2220      	movs	r2, #32
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f004 fd1c 	bl	80067fc <memset>

	/* USER CODE BEGIN TIM8_Init 1 */
	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001dc4:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001dc6:	4a33      	ldr	r2, [pc, #204]	; (8001e94 <MX_TIM8_Init+0x100>)
 8001dc8:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001dca:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd0:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 499;
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001dd8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001ddc:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dde:	4b2c      	ldr	r3, [pc, #176]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001de4:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dea:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001df0:	4827      	ldr	r0, [pc, #156]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001df2:	f003 fa13 	bl	800521c <HAL_TIM_PWM_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM8_Init+0x6c>
		Error_Handler();
 8001dfc:	f000 f962 	bl	80020c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e00:	2300      	movs	r3, #0
 8001e02:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8001e08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4820      	ldr	r0, [pc, #128]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001e10:	f004 f926 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM8_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001e1a:	f000 f953 	bl	80020c4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e1e:	2360      	movs	r3, #96	; 0x60
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 8001e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4814      	ldr	r0, [pc, #80]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001e40:	f003 fdae 	bl	80059a0 <HAL_TIM_PWM_ConfigChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM8_Init+0xba>
			!= HAL_OK) {
		Error_Handler();
 8001e4a:	f000 f93b 	bl	80020c4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e66:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4807      	ldr	r0, [pc, #28]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001e72:	f004 f971 	bl	8006158 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM8_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8001e7c:	f000 f922 	bl	80020c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */
	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8001e80:	4803      	ldr	r0, [pc, #12]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001e82:	f000 fde7 	bl	8002a54 <HAL_TIM_MspPostInit>

}
 8001e86:	bf00      	nop
 8001e88:	3748      	adds	r7, #72	; 0x48
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200004fc 	.word	0x200004fc
 8001e94:	40010400 	.word	0x40010400

08001e98 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART6_Init 0 */
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */
	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <MX_USART6_UART_Init+0x4c>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <MX_USART6_UART_Init+0x50>)
 8001ea0:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <MX_USART6_UART_Init+0x4c>)
 8001ea4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ea8:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <MX_USART6_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <MX_USART6_UART_Init+0x4c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <MX_USART6_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <MX_USART6_UART_Init+0x4c>)
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <MX_USART6_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <MX_USART6_UART_Init+0x4c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_USART6_UART_Init+0x4c>)
 8001ed0:	f004 f9a8 	bl	8006224 <HAL_UART_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8001eda:	f000 f8f3 	bl	80020c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */
	/* USER CODE END USART6_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000544 	.word	0x20000544
 8001ee8:	40011400 	.word	0x40011400

08001eec <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <MX_DMA_Init+0x3c>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <MX_DMA_Init+0x3c>)
 8001efc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <MX_DMA_Init+0x3c>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	2038      	movs	r0, #56	; 0x38
 8001f14:	f001 fd29 	bl	800396a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f18:	2038      	movs	r0, #56	; 0x38
 8001f1a:	f001 fd42 	bl	80039a2 <HAL_NVIC_EnableIRQ>

}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
 8001f40:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	4b5a      	ldr	r3, [pc, #360]	; (80020b0 <MX_GPIO_Init+0x184>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a59      	ldr	r2, [pc, #356]	; (80020b0 <MX_GPIO_Init+0x184>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b57      	ldr	r3, [pc, #348]	; (80020b0 <MX_GPIO_Init+0x184>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b53      	ldr	r3, [pc, #332]	; (80020b0 <MX_GPIO_Init+0x184>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a52      	ldr	r2, [pc, #328]	; (80020b0 <MX_GPIO_Init+0x184>)
 8001f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <MX_GPIO_Init+0x184>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	4b4c      	ldr	r3, [pc, #304]	; (80020b0 <MX_GPIO_Init+0x184>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a4b      	ldr	r2, [pc, #300]	; (80020b0 <MX_GPIO_Init+0x184>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b49      	ldr	r3, [pc, #292]	; (80020b0 <MX_GPIO_Init+0x184>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	4b45      	ldr	r3, [pc, #276]	; (80020b0 <MX_GPIO_Init+0x184>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a44      	ldr	r2, [pc, #272]	; (80020b0 <MX_GPIO_Init+0x184>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <MX_GPIO_Init+0x184>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	4b3e      	ldr	r3, [pc, #248]	; (80020b0 <MX_GPIO_Init+0x184>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a3d      	ldr	r2, [pc, #244]	; (80020b0 <MX_GPIO_Init+0x184>)
 8001fbc:	f043 0308 	orr.w	r3, r3, #8
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <MX_GPIO_Init+0x184>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f247 0130 	movw	r1, #28720	; 0x7030
 8001fd4:	4837      	ldr	r0, [pc, #220]	; (80020b4 <MX_GPIO_Init+0x188>)
 8001fd6:	f002 fa23 	bl	8004420 <HAL_GPIO_WritePin>
			LED2_ARGB3_GPIO_OUT_Pin | LED2_ARGB4_GPIO_OUT_Pin
					| LED2_ARGB2_GPIO_OUT_Pin | LED_ARGB4_GPIO_OUT_Pin
					| LED_ARGB2_GPIO_OUT_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DRVL_IN2_GPIO_GPIO_Port, DRVL_IN2_GPIO_Pin,
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe0:	4835      	ldr	r0, [pc, #212]	; (80020b8 <MX_GPIO_Init+0x18c>)
 8001fe2:	f002 fa1d 	bl	8004420 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f44f 411d 	mov.w	r1, #40192	; 0x9d00
 8001fec:	4833      	ldr	r0, [pc, #204]	; (80020bc <MX_GPIO_Init+0x190>)
 8001fee:	f002 fa17 	bl	8004420 <HAL_GPIO_WritePin>
			DRVR_IN2_GPIO_OUT_Pin | LED3_GPIO_OUT_Pin | LED2_GPIO_OUT_Pin
					| LED1_GPIO_OUT_Pin | LED_ARGB3_GPIO_OUT_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(NCS_GPIO_OUT_GPIO_Port, NCS_GPIO_OUT_Pin, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2104      	movs	r1, #4
 8001ff6:	4832      	ldr	r0, [pc, #200]	; (80020c0 <MX_GPIO_Init+0x194>)
 8001ff8:	f002 fa12 	bl	8004420 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : SW1_GPIO_IN_Pin SIDE_SENSOR_R_GPIO_IN_Pin */
	GPIO_InitStruct.Pin = SW1_GPIO_IN_Pin | SIDE_SENSOR_R_GPIO_IN_Pin;
 8001ffc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002000:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	4829      	ldr	r0, [pc, #164]	; (80020b8 <MX_GPIO_Init+0x18c>)
 8002012:	f002 f851 	bl	80040b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : SIDE_SENSOR_L_GPIO_IN_Pin SW2_GPIO_IN_Pin */
	GPIO_InitStruct.Pin = SIDE_SENSOR_L_GPIO_IN_Pin | SW2_GPIO_IN_Pin;
 8002016:	f248 0304 	movw	r3, #32772	; 0x8004
 800201a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4619      	mov	r1, r3
 800202a:	4822      	ldr	r0, [pc, #136]	; (80020b4 <MX_GPIO_Init+0x188>)
 800202c:	f002 f844 	bl	80040b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_ARGB3_GPIO_OUT_Pin LED2_ARGB4_GPIO_OUT_Pin LED2_ARGB2_GPIO_OUT_Pin LED_ARGB4_GPIO_OUT_Pin
	 LED_ARGB2_GPIO_OUT_Pin */
	GPIO_InitStruct.Pin = LED2_ARGB3_GPIO_OUT_Pin | LED2_ARGB4_GPIO_OUT_Pin
 8002030:	f247 0330 	movw	r3, #28720	; 0x7030
 8002034:	617b      	str	r3, [r7, #20]
			| LED2_ARGB2_GPIO_OUT_Pin | LED_ARGB4_GPIO_OUT_Pin
			| LED_ARGB2_GPIO_OUT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	2301      	movs	r3, #1
 8002038:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	481a      	ldr	r0, [pc, #104]	; (80020b4 <MX_GPIO_Init+0x188>)
 800204a:	f002 f835 	bl	80040b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRVL_IN2_GPIO_Pin */
	GPIO_InitStruct.Pin = DRVL_IN2_GPIO_Pin;
 800204e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002052:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002054:	2301      	movs	r3, #1
 8002056:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DRVL_IN2_GPIO_GPIO_Port, &GPIO_InitStruct);
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	4619      	mov	r1, r3
 8002066:	4814      	ldr	r0, [pc, #80]	; (80020b8 <MX_GPIO_Init+0x18c>)
 8002068:	f002 f826 	bl	80040b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : DRVR_IN2_GPIO_OUT_Pin LED3_GPIO_OUT_Pin LED2_GPIO_OUT_Pin LED1_GPIO_OUT_Pin
	 LED_ARGB3_GPIO_OUT_Pin */
	GPIO_InitStruct.Pin = DRVR_IN2_GPIO_OUT_Pin | LED3_GPIO_OUT_Pin
 800206c:	f44f 431d 	mov.w	r3, #40192	; 0x9d00
 8002070:	617b      	str	r3, [r7, #20]
			| LED2_GPIO_OUT_Pin | LED1_GPIO_OUT_Pin | LED_ARGB3_GPIO_OUT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	480d      	ldr	r0, [pc, #52]	; (80020bc <MX_GPIO_Init+0x190>)
 8002086:	f002 f817 	bl	80040b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : NCS_GPIO_OUT_Pin */
	GPIO_InitStruct.Pin = NCS_GPIO_OUT_Pin;
 800208a:	2304      	movs	r3, #4
 800208c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208e:	2301      	movs	r3, #1
 8002090:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(NCS_GPIO_OUT_GPIO_Port, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4807      	ldr	r0, [pc, #28]	; (80020c0 <MX_GPIO_Init+0x194>)
 80020a2:	f002 f809 	bl	80040b8 <HAL_GPIO_Init>

}
 80020a6:	bf00      	nop
 80020a8:	3728      	adds	r7, #40	; 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40020400 	.word	0x40020400
 80020b8:	40020800 	.word	0x40020800
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40020c00 	.word	0x40020c00

080020c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* USER CODE END Error_Handler_Debug */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <readSens2>:

    }
}


void readSens2(){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	Line3_sens[0] = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2);//L
 80020d8:	2104      	movs	r1, #4
 80020da:	480d      	ldr	r0, [pc, #52]	; (8002110 <readSens2+0x3c>)
 80020dc:	f002 f988 	bl	80043f0 <HAL_GPIO_ReadPin>
 80020e0:	4603      	mov	r3, r0
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <readSens2+0x40>)
 80020ec:	edc3 7a00 	vstr	s15, [r3]
    Line3_sens[1] = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);//R
 80020f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020f4:	4808      	ldr	r0, [pc, #32]	; (8002118 <readSens2+0x44>)
 80020f6:	f002 f97b 	bl	80043f0 <HAL_GPIO_ReadPin>
 80020fa:	4603      	mov	r3, r0
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <readSens2+0x40>)
 8002106:	edc3 7a01 	vstr	s15, [r3, #4]

}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40020400 	.word	0x40020400
 8002114:	20000588 	.word	0x20000588
 8002118:	40020800 	.word	0x40020800

0800211c <calibrate_sensors>:


void calibrate_sensors(void){    
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0

    for (int k = 0; k < SENSOR_COUNT; k++) {
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	e00f      	b.n	8002148 <calibrate_sensors+0x2c>
        Line_min[k] = 3000.0;  // 初期値
 8002128:	4a3a      	ldr	r2, [pc, #232]	; (8002214 <calibrate_sensors+0xf8>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	4a39      	ldr	r2, [pc, #228]	; (8002218 <calibrate_sensors+0xfc>)
 8002132:	601a      	str	r2, [r3, #0]
        Line_max[k] = 0.0;     // 初期値
 8002134:	4a39      	ldr	r2, [pc, #228]	; (800221c <calibrate_sensors+0x100>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
    for (int k = 0; k < SENSOR_COUNT; k++) {
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3301      	adds	r3, #1
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b0c      	cmp	r3, #12
 800214c:	ddec      	ble.n	8002128 <calibrate_sensors+0xc>
    }
HAL_Delay(500);
 800214e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002152:	f000 ff03 	bl	8002f5c <HAL_Delay>
       while(1){//SW1

    	   if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_RESET){
 8002156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800215a:	4831      	ldr	r0, [pc, #196]	; (8002220 <calibrate_sensors+0x104>)
 800215c:	f002 f948 	bl	80043f0 <HAL_GPIO_ReadPin>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d04e      	beq.n	8002204 <calibrate_sensors+0xe8>
    		   break;
    	   }
           //readSens();
           LED_RGB_2(2);
 8002166:	2002      	movs	r0, #2
 8002168:	f7fe ffba 	bl	80010e0 <LED_RGB_2>

           for(int k = 0; k < SENSOR_COUNT; k++){
 800216c:	2300      	movs	r3, #0
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	e044      	b.n	80021fc <calibrate_sensors+0xe0>
        	   if(Line_sens[k] < Line_min[k]){
 8002172:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <calibrate_sensors+0x108>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002182:	4a24      	ldr	r2, [pc, #144]	; (8002214 <calibrate_sensors+0xf8>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002196:	d50d      	bpl.n	80021b4 <calibrate_sensors+0x98>
        		   Line_min[k] = Line_sens[k];
 8002198:	4a22      	ldr	r2, [pc, #136]	; (8002224 <calibrate_sensors+0x108>)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021a0:	ee07 3a90 	vmov	s15, r3
 80021a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021a8:	4a1a      	ldr	r2, [pc, #104]	; (8002214 <calibrate_sensors+0xf8>)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	edc3 7a00 	vstr	s15, [r3]
        	   }
        	   if(Line_sens[k] > Line_max[k] ){
 80021b4:	4a1b      	ldr	r2, [pc, #108]	; (8002224 <calibrate_sensors+0x108>)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021bc:	ee07 3a90 	vmov	s15, r3
 80021c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021c4:	4a15      	ldr	r2, [pc, #84]	; (800221c <calibrate_sensors+0x100>)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d8:	dd0d      	ble.n	80021f6 <calibrate_sensors+0xda>
        		   Line_max[k] = Line_sens[k];
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <calibrate_sensors+0x108>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021e2:	ee07 3a90 	vmov	s15, r3
 80021e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ea:	4a0c      	ldr	r2, [pc, #48]	; (800221c <calibrate_sensors+0x100>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	edc3 7a00 	vstr	s15, [r3]
           for(int k = 0; k < SENSOR_COUNT; k++){
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2b0c      	cmp	r3, #12
 8002200:	ddb7      	ble.n	8002172 <calibrate_sensors+0x56>
    	   if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_RESET){
 8002202:	e7a8      	b.n	8002156 <calibrate_sensors+0x3a>
    		   break;
 8002204:	bf00      	nop
			   }
		   }
	   }

       LED_RGB_2(0);
 8002206:	2000      	movs	r0, #0
 8002208:	f7fe ff6a 	bl	80010e0 <LED_RGB_2>

	}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000000 	.word	0x20000000
 8002218:	453b8000 	.word	0x453b8000
 800221c:	200005ac 	.word	0x200005ac
 8002220:	40020800 	.word	0x40020800
 8002224:	20000590 	.word	0x20000590

08002228 <sens_get>:


float sens_get(void){
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
	float Line1_sum = 0.0;
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
	float Line2_sum = 0.0;
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
//	static const int g1[SENSOR_COUNT] = {1,1,1,1,1,1,1,1,1,1,1,1,1};//L
//	static const int g2[] = {1,1,1,1,1,1};


	for (int i = 0; i < SENSOR_COUNT; i++){
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	e076      	b.n	800232e <sens_get+0x106>
		float range = Line_max[i] - Line_min[i];
 8002240:	4a76      	ldr	r2, [pc, #472]	; (800241c <sens_get+0x1f4>)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	ed93 7a00 	vldr	s14, [r3]
 800224c:	4a74      	ldr	r2, [pc, #464]	; (8002420 <sens_get+0x1f8>)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800225c:	edc7 7a04 	vstr	s15, [r7, #16]
			if(range == 0){
 8002260:	edd7 7a04 	vldr	s15, [r7, #16]
 8002264:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226c:	d102      	bne.n	8002274 <sens_get+0x4c>
				range = 1;
 800226e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002272:	613b      	str	r3, [r7, #16]
			}
			if(Line_min[i] >=Line_sens[i]){
 8002274:	4a6a      	ldr	r2, [pc, #424]	; (8002420 <sens_get+0x1f8>)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	ed93 7a00 	vldr	s14, [r3]
 8002280:	4a68      	ldr	r2, [pc, #416]	; (8002424 <sens_get+0x1fc>)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002288:	ee07 3a90 	vmov	s15, r3
 800228c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002290:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002298:	db0e      	blt.n	80022b8 <sens_get+0x90>
				Line_sens[i] = Line_min[i];
 800229a:	4a61      	ldr	r2, [pc, #388]	; (8002420 <sens_get+0x1f8>)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	edd3 7a00 	vldr	s15, [r3]
 80022a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022aa:	ee17 3a90 	vmov	r3, s15
 80022ae:	b299      	uxth	r1, r3
 80022b0:	4a5c      	ldr	r2, [pc, #368]	; (8002424 <sens_get+0x1fc>)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		Line_sum[i] =0.0;
 80022b8:	4a5b      	ldr	r2, [pc, #364]	; (8002428 <sens_get+0x200>)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
		//Line_sum[i] = (Line_sens[i]/ Line_max[i])*1000;
		Line_sum[i]=((Line_sens[i]-Line_min[i] )/range)*1000;
 80022c6:	4a57      	ldr	r2, [pc, #348]	; (8002424 <sens_get+0x1fc>)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022d6:	4a52      	ldr	r2, [pc, #328]	; (8002420 <sens_get+0x1f8>)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80022ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022ee:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800242c <sens_get+0x204>
 80022f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f6:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <sens_get+0x200>)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	edc3 7a00 	vstr	s15, [r3]
		if(Line_sum[i]>1000)Line_sum[i]=1000;
 8002302:	4a49      	ldr	r2, [pc, #292]	; (8002428 <sens_get+0x200>)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800242c <sens_get+0x204>
 8002312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231a:	dd05      	ble.n	8002328 <sens_get+0x100>
 800231c:	4a42      	ldr	r2, [pc, #264]	; (8002428 <sens_get+0x200>)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	4a42      	ldr	r2, [pc, #264]	; (8002430 <sens_get+0x208>)
 8002326:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < SENSOR_COUNT; i++){
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3301      	adds	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b0c      	cmp	r3, #12
 8002332:	dd85      	ble.n	8002240 <sens_get+0x18>
//	for(int k = 1; k < 6;k++){
//		Line1_sum +=Line_sum[k];
//		Line2_sum +=Line_sum[k+6];
//
//	}
		Line1_sum =Line_sum[1]+Line_sum[2]+Line_sum[3]+Line_sum[4]+Line_sum[5];
 8002334:	4b3c      	ldr	r3, [pc, #240]	; (8002428 <sens_get+0x200>)
 8002336:	ed93 7a01 	vldr	s14, [r3, #4]
 800233a:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <sens_get+0x200>)
 800233c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002340:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002344:	4b38      	ldr	r3, [pc, #224]	; (8002428 <sens_get+0x200>)
 8002346:	edd3 7a03 	vldr	s15, [r3, #12]
 800234a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800234e:	4b36      	ldr	r3, [pc, #216]	; (8002428 <sens_get+0x200>)
 8002350:	edd3 7a04 	vldr	s15, [r3, #16]
 8002354:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002358:	4b33      	ldr	r3, [pc, #204]	; (8002428 <sens_get+0x200>)
 800235a:	edd3 7a05 	vldr	s15, [r3, #20]
 800235e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002362:	edc7 7a03 	vstr	s15, [r7, #12]
		Line2_sum =Line_sum[7]+Line_sum[8]+Line_sum[9]+Line_sum[10]+Line_sum[11];
 8002366:	4b30      	ldr	r3, [pc, #192]	; (8002428 <sens_get+0x200>)
 8002368:	ed93 7a07 	vldr	s14, [r3, #28]
 800236c:	4b2e      	ldr	r3, [pc, #184]	; (8002428 <sens_get+0x200>)
 800236e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002372:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002376:	4b2c      	ldr	r3, [pc, #176]	; (8002428 <sens_get+0x200>)
 8002378:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800237c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002380:	4b29      	ldr	r3, [pc, #164]	; (8002428 <sens_get+0x200>)
 8002382:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002386:	ee37 7a27 	vadd.f32	s14, s14, s15
 800238a:	4b27      	ldr	r3, [pc, #156]	; (8002428 <sens_get+0x200>)
 800238c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002394:	edc7 7a02 	vstr	s15, [r7, #8]


		uint16_t  average_cross = Line_sum[2] + Line_sum[10];
 8002398:	4b23      	ldr	r3, [pc, #140]	; (8002428 <sens_get+0x200>)
 800239a:	ed93 7a02 	vldr	s14, [r3, #8]
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <sens_get+0x200>)
 80023a0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80023a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ac:	ee17 3a90 	vmov	r3, s15
 80023b0:	80fb      	strh	r3, [r7, #6]
		if(average_cross <600){
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80023b8:	d207      	bcs.n	80023ca <sens_get+0x1a2>
			 cross_flag = 1;
 80023ba:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <sens_get+0x20c>)
 80023bc:	2201      	movs	r2, #1
 80023be:	601a      	str	r2, [r3, #0]
			 start_time = HAL_GetTick();
 80023c0:	f000 fdc0 	bl	8002f44 <HAL_GetTick>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <sens_get+0x210>)
 80023c8:	6013      	str	r3, [r2, #0]
		}

		if(cross_flag == 1){
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <sens_get+0x20c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d116      	bne.n	8002400 <sens_get+0x1d8>
			LED_RGB(4);
 80023d2:	2004      	movs	r0, #4
 80023d4:	f7fe fdda 	bl	8000f8c <LED_RGB>
			if((HAL_GetTick() - start_time) < 400){
 80023d8:	f000 fdb4 	bl	8002f44 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b16      	ldr	r3, [pc, #88]	; (8002438 <sens_get+0x210>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80023e8:	d203      	bcs.n	80023f2 <sens_get+0x1ca>
				LED_RGB(2);
 80023ea:	2002      	movs	r0, #2
 80023ec:	f7fe fdce 	bl	8000f8c <LED_RGB>
 80023f0:	e008      	b.n	8002404 <sens_get+0x1dc>
			}else{
			cross_flag = 0;
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <sens_get+0x20c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
			LED_RGB(1);
 80023f8:	2001      	movs	r0, #1
 80023fa:	f7fe fdc7 	bl	8000f8c <LED_RGB>
 80023fe:	e001      	b.n	8002404 <sens_get+0x1dc>
			}

		}else{
			readSens2();
 8002400:	f7ff fe68 	bl	80020d4 <readSens2>
		}


	return  Line1_sum - Line2_sum;
 8002404:	ed97 7a03 	vldr	s14, [r7, #12]
 8002408:	edd7 7a02 	vldr	s15, [r7, #8]
 800240c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002410:	eeb0 0a67 	vmov.f32	s0, s15
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200005ac 	.word	0x200005ac
 8002420:	20000000 	.word	0x20000000
 8002424:	20000590 	.word	0x20000590
 8002428:	200005e0 	.word	0x200005e0
 800242c:	447a0000 	.word	0x447a0000
 8002430:	447a0000 	.word	0x447a0000
 8002434:	20000618 	.word	0x20000618
 8002438:	2000061c 	.word	0x2000061c
 800243c:	00000000 	.word	0x00000000

08002440 <SpeedControl_NoENC>:
//    TIM3 -> CNT = OFFSET;
}



void SpeedControl_NoENC() {
 8002440:	b5b0      	push	{r4, r5, r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0

//		readSens2();

	     float error = sens_get();
 8002446:	f7ff feef 	bl	8002228 <sens_get>
 800244a:	ed87 0a07 	vstr	s0, [r7, #28]
	     // PD
	     float derivative = (error - previous_error) / dt;
 800244e:	4b4c      	ldr	r3, [pc, #304]	; (8002580 <SpeedControl_NoENC+0x140>)
 8002450:	edd3 7a00 	vldr	s15, [r3]
 8002454:	ed97 7a07 	vldr	s14, [r7, #28]
 8002458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800245c:	ee17 0a90 	vmov	r0, s15
 8002460:	f7fe f872 	bl	8000548 <__aeabi_f2d>
 8002464:	a344      	add	r3, pc, #272	; (adr r3, 8002578 <SpeedControl_NoENC+0x138>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fe f9ef 	bl	800084c <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe fbb7 	bl	8000be8 <__aeabi_d2f>
 800247a:	4603      	mov	r3, r0
 800247c:	61bb      	str	r3, [r7, #24]

	     float P =Kp * error;
 800247e:	4b41      	ldr	r3, [pc, #260]	; (8002584 <SpeedControl_NoENC+0x144>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	ed97 7a07 	vldr	s14, [r7, #28]
 8002488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248c:	edc7 7a05 	vstr	s15, [r7, #20]
	     float D =Kd * derivative;
 8002490:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <SpeedControl_NoENC+0x148>)
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	ed97 7a06 	vldr	s14, [r7, #24]
 800249a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249e:	edc7 7a04 	vstr	s15, [r7, #16]

	     float output = P + D;
 80024a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80024a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80024aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ae:	edc7 7a03 	vstr	s15, [r7, #12]
	     previous_error = error;
 80024b2:	4a33      	ldr	r2, [pc, #204]	; (8002580 <SpeedControl_NoENC+0x140>)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	6013      	str	r3, [r2, #0]

//	     float duty_L = 80 - output;
//	     float duty_R = 80 + output;
		     float duty_L =- output+base_speed1;
 80024b8:	4b34      	ldr	r3, [pc, #208]	; (800258c <SpeedControl_NoENC+0x14c>)
 80024ba:	ed93 7a00 	vldr	s14, [r3]
 80024be:	edd7 7a03 	vldr	s15, [r7, #12]
 80024c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c6:	edc7 7a02 	vstr	s15, [r7, #8]
		     float duty_R = output+base_speed1;
 80024ca:	4b30      	ldr	r3, [pc, #192]	; (800258c <SpeedControl_NoENC+0x14c>)
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80024d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d8:	edc7 7a01 	vstr	s15, [r7, #4]

//	     float duty_L =base_speed1;
//	     float duty_R = base_speed1;

	     float motor_L = -1*(duty_L);
 80024dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80024e0:	eef1 7a67 	vneg.f32	s15, s15
 80024e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	     float motor_R = -1*(duty_R);
 80024e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ec:	eef1 7a67 	vneg.f32	s15, s15
 80024f0:	edc7 7a08 	vstr	s15, [r7, #32]



	     if (motor_L > 350) motor_L = 350;
 80024f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024f8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002590 <SpeedControl_NoENC+0x150>
 80024fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002504:	dd01      	ble.n	800250a <SpeedControl_NoENC+0xca>
 8002506:	4b23      	ldr	r3, [pc, #140]	; (8002594 <SpeedControl_NoENC+0x154>)
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
	     if (motor_L < -350) motor_L = -350;
 800250a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800250e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002598 <SpeedControl_NoENC+0x158>
 8002512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251a:	d501      	bpl.n	8002520 <SpeedControl_NoENC+0xe0>
 800251c:	4b1f      	ldr	r3, [pc, #124]	; (800259c <SpeedControl_NoENC+0x15c>)
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
	     if (motor_R > 350) motor_R = 350;
 8002520:	edd7 7a08 	vldr	s15, [r7, #32]
 8002524:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002590 <SpeedControl_NoENC+0x150>
 8002528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002530:	dd01      	ble.n	8002536 <SpeedControl_NoENC+0xf6>
 8002532:	4b18      	ldr	r3, [pc, #96]	; (8002594 <SpeedControl_NoENC+0x154>)
 8002534:	623b      	str	r3, [r7, #32]
	     if (motor_R < -350) motor_R = -350;
 8002536:	edd7 7a08 	vldr	s15, [r7, #32]
 800253a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002598 <SpeedControl_NoENC+0x158>
 800253e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002546:	d501      	bpl.n	800254c <SpeedControl_NoENC+0x10c>
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <SpeedControl_NoENC+0x15c>)
 800254a:	623b      	str	r3, [r7, #32]


	     // モータ
	     ControlMotor(motor_L, motor_R);
 800254c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800254e:	f7fd fffb 	bl	8000548 <__aeabi_f2d>
 8002552:	4604      	mov	r4, r0
 8002554:	460d      	mov	r5, r1
 8002556:	6a38      	ldr	r0, [r7, #32]
 8002558:	f7fd fff6 	bl	8000548 <__aeabi_f2d>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	ec43 2b11 	vmov	d1, r2, r3
 8002564:	ec45 4b10 	vmov	d0, r4, r5
 8002568:	f7fe ff0c 	bl	8001384 <ControlMotor>
}
 800256c:	bf00      	nop
 800256e:	3728      	adds	r7, #40	; 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bdb0      	pop	{r4, r5, r7, pc}
 8002574:	f3af 8000 	nop.w
 8002578:	d2f1a9fc 	.word	0xd2f1a9fc
 800257c:	3f50624d 	.word	0x3f50624d
 8002580:	20000614 	.word	0x20000614
 8002584:	20000034 	.word	0x20000034
 8002588:	20000038 	.word	0x20000038
 800258c:	20000620 	.word	0x20000620
 8002590:	43af0000 	.word	0x43af0000
 8002594:	43af0000 	.word	0x43af0000
 8002598:	c3af0000 	.word	0xc3af0000
 800259c:	c3af0000 	.word	0xc3af0000

080025a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_MspInit+0x4c>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	4a0f      	ldr	r2, [pc, #60]	; (80025ec <HAL_MspInit+0x4c>)
 80025b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b4:	6453      	str	r3, [r2, #68]	; 0x44
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <HAL_MspInit+0x4c>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	603b      	str	r3, [r7, #0]
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_MspInit+0x4c>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a08      	ldr	r2, [pc, #32]	; (80025ec <HAL_MspInit+0x4c>)
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_MspInit+0x4c>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800

080025f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08c      	sub	sp, #48	; 0x30
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 031c 	add.w	r3, r7, #28
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a49      	ldr	r2, [pc, #292]	; (8002734 <HAL_ADC_MspInit+0x144>)
 800260e:	4293      	cmp	r3, r2
 8002610:	f040 808c 	bne.w	800272c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002614:	2300      	movs	r3, #0
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_ADC_MspInit+0x148>)
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	4a46      	ldr	r2, [pc, #280]	; (8002738 <HAL_ADC_MspInit+0x148>)
 800261e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002622:	6453      	str	r3, [r2, #68]	; 0x44
 8002624:	4b44      	ldr	r3, [pc, #272]	; (8002738 <HAL_ADC_MspInit+0x148>)
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	4b40      	ldr	r3, [pc, #256]	; (8002738 <HAL_ADC_MspInit+0x148>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	4a3f      	ldr	r2, [pc, #252]	; (8002738 <HAL_ADC_MspInit+0x148>)
 800263a:	f043 0304 	orr.w	r3, r3, #4
 800263e:	6313      	str	r3, [r2, #48]	; 0x30
 8002640:	4b3d      	ldr	r3, [pc, #244]	; (8002738 <HAL_ADC_MspInit+0x148>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	4b39      	ldr	r3, [pc, #228]	; (8002738 <HAL_ADC_MspInit+0x148>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	4a38      	ldr	r2, [pc, #224]	; (8002738 <HAL_ADC_MspInit+0x148>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6313      	str	r3, [r2, #48]	; 0x30
 800265c:	4b36      	ldr	r3, [pc, #216]	; (8002738 <HAL_ADC_MspInit+0x148>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_ADC_MspInit+0x148>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	4a31      	ldr	r2, [pc, #196]	; (8002738 <HAL_ADC_MspInit+0x148>)
 8002672:	f043 0302 	orr.w	r3, r3, #2
 8002676:	6313      	str	r3, [r2, #48]	; 0x30
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <HAL_ADC_MspInit+0x148>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LINE_Sens13_ADC1_in11_Pin|LINE_Sens12_ADC1_in12_Pin|LINE_Sens11_ADC1_in13_Pin|LINE_Sens4_ADC1_in14_Pin
 8002684:	233e      	movs	r3, #62	; 0x3e
 8002686:	61fb      	str	r3, [r7, #28]
                          |LINE_Sens3_ADC1_in15_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002688:	2303      	movs	r3, #3
 800268a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002690:	f107 031c 	add.w	r3, r7, #28
 8002694:	4619      	mov	r1, r3
 8002696:	4829      	ldr	r0, [pc, #164]	; (800273c <HAL_ADC_MspInit+0x14c>)
 8002698:	f001 fd0e 	bl	80040b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LINE_Sens10_ADC1_in0_Pin|LINE_Sens9_ADC1_in1_Pin|LINE_Sens8_ADC1_in2_Pin|LINE_Sens7_ADC1_in3_Pin
 800269c:	233f      	movs	r3, #63	; 0x3f
 800269e:	61fb      	str	r3, [r7, #28]
                          |LINE_Sens6_ADC1_in4_Pin|LINE_Sens5_ADC1_in5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026a0:	2303      	movs	r3, #3
 80026a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a8:	f107 031c 	add.w	r3, r7, #28
 80026ac:	4619      	mov	r1, r3
 80026ae:	4824      	ldr	r0, [pc, #144]	; (8002740 <HAL_ADC_MspInit+0x150>)
 80026b0:	f001 fd02 	bl	80040b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LINE_Sens2_ADC1_in8_Pin|LINE_Sens1_ADC1_in9_Pin;
 80026b4:	2303      	movs	r3, #3
 80026b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026b8:	2303      	movs	r3, #3
 80026ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c0:	f107 031c 	add.w	r3, r7, #28
 80026c4:	4619      	mov	r1, r3
 80026c6:	481f      	ldr	r0, [pc, #124]	; (8002744 <HAL_ADC_MspInit+0x154>)
 80026c8:	f001 fcf6 	bl	80040b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80026cc:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026ce:	4a1f      	ldr	r2, [pc, #124]	; (800274c <HAL_ADC_MspInit+0x15c>)
 80026d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026e4:	4b18      	ldr	r3, [pc, #96]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026f4:	4b14      	ldr	r3, [pc, #80]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002702:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002704:	4b10      	ldr	r3, [pc, #64]	; (8002748 <HAL_ADC_MspInit+0x158>)
 8002706:	2200      	movs	r2, #0
 8002708:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_ADC_MspInit+0x158>)
 800270c:	2200      	movs	r2, #0
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002710:	480d      	ldr	r0, [pc, #52]	; (8002748 <HAL_ADC_MspInit+0x158>)
 8002712:	f001 f961 	bl	80039d8 <HAL_DMA_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800271c:	f7ff fcd2 	bl	80020c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a09      	ldr	r2, [pc, #36]	; (8002748 <HAL_ADC_MspInit+0x158>)
 8002724:	639a      	str	r2, [r3, #56]	; 0x38
 8002726:	4a08      	ldr	r2, [pc, #32]	; (8002748 <HAL_ADC_MspInit+0x158>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800272c:	bf00      	nop
 800272e:	3730      	adds	r7, #48	; 0x30
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40012000 	.word	0x40012000
 8002738:	40023800 	.word	0x40023800
 800273c:	40020800 	.word	0x40020800
 8002740:	40020000 	.word	0x40020000
 8002744:	40020400 	.word	0x40020400
 8002748:	20000288 	.word	0x20000288
 800274c:	40026410 	.word	0x40026410

08002750 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a19      	ldr	r2, [pc, #100]	; (80027d4 <HAL_I2C_MspInit+0x84>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d12c      	bne.n	80027cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <HAL_I2C_MspInit+0x88>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <HAL_I2C_MspInit+0x88>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_I2C_MspInit+0x88>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_3_I2C1_SCL_Pin|LCD2_I2C1_SDA_Pin;
 800278e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002794:	2312      	movs	r3, #18
 8002796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279c:	2303      	movs	r3, #3
 800279e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027a0:	2304      	movs	r3, #4
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	480c      	ldr	r0, [pc, #48]	; (80027dc <HAL_I2C_MspInit+0x8c>)
 80027ac:	f001 fc84 	bl	80040b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_I2C_MspInit+0x88>)
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <HAL_I2C_MspInit+0x88>)
 80027ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027be:	6413      	str	r3, [r2, #64]	; 0x40
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_I2C_MspInit+0x88>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027cc:	bf00      	nop
 80027ce:	3728      	adds	r7, #40	; 0x28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40005400 	.word	0x40005400
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40020400 	.word	0x40020400

080027e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a19      	ldr	r2, [pc, #100]	; (8002864 <HAL_SPI_MspInit+0x84>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d12c      	bne.n	800285c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_SPI_MspInit+0x88>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a17      	ldr	r2, [pc, #92]	; (8002868 <HAL_SPI_MspInit+0x88>)
 800280c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_SPI_MspInit+0x88>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_SPI_MspInit+0x88>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a10      	ldr	r2, [pc, #64]	; (8002868 <HAL_SPI_MspInit+0x88>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <HAL_SPI_MspInit+0x88>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800283a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800283e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002848:	2303      	movs	r3, #3
 800284a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800284c:	2306      	movs	r3, #6
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	4619      	mov	r1, r3
 8002856:	4805      	ldr	r0, [pc, #20]	; (800286c <HAL_SPI_MspInit+0x8c>)
 8002858:	f001 fc2e 	bl	80040b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800285c:	bf00      	nop
 800285e:	3728      	adds	r7, #40	; 0x28
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40003c00 	.word	0x40003c00
 8002868:	40023800 	.word	0x40023800
 800286c:	40020800 	.word	0x40020800

08002870 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <HAL_TIM_PWM_MspInit+0x8c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10e      	bne.n	80028a0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <HAL_TIM_PWM_MspInit+0x90>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <HAL_TIM_PWM_MspInit+0x90>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6453      	str	r3, [r2, #68]	; 0x44
 8002892:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <HAL_TIM_PWM_MspInit+0x90>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800289e:	e026      	b.n	80028ee <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a8:	d10e      	bne.n	80028c8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	4b14      	ldr	r3, [pc, #80]	; (8002900 <HAL_TIM_PWM_MspInit+0x90>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a13      	ldr	r2, [pc, #76]	; (8002900 <HAL_TIM_PWM_MspInit+0x90>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_TIM_PWM_MspInit+0x90>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	693b      	ldr	r3, [r7, #16]
}
 80028c6:	e012      	b.n	80028ee <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <HAL_TIM_PWM_MspInit+0x94>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d10d      	bne.n	80028ee <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_TIM_PWM_MspInit+0x90>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	4a09      	ldr	r2, [pc, #36]	; (8002900 <HAL_TIM_PWM_MspInit+0x90>)
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	6453      	str	r3, [r2, #68]	; 0x44
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <HAL_TIM_PWM_MspInit+0x90>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40010000 	.word	0x40010000
 8002900:	40023800 	.word	0x40023800
 8002904:	40010400 	.word	0x40010400

08002908 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a32      	ldr	r2, [pc, #200]	; (80029f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d12c      	bne.n	8002984 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4a30      	ldr	r2, [pc, #192]	; (80029f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	6413      	str	r3, [r2, #64]	; 0x40
 800293a:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <HAL_TIM_Encoder_MspInit+0xec>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <HAL_TIM_Encoder_MspInit+0xec>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a29      	ldr	r2, [pc, #164]	; (80029f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1_6_TIM3_CH1_Pin|ENC1_8_TIM3_CH2_Pin;
 8002962:	23c0      	movs	r3, #192	; 0xc0
 8002964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2300      	movs	r3, #0
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002972:	2302      	movs	r3, #2
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	f107 031c 	add.w	r3, r7, #28
 800297a:	4619      	mov	r1, r3
 800297c:	481e      	ldr	r0, [pc, #120]	; (80029f8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800297e:	f001 fb9b 	bl	80040b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002982:	e030      	b.n	80029e6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1c      	ldr	r2, [pc, #112]	; (80029fc <HAL_TIM_Encoder_MspInit+0xf4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d12b      	bne.n	80029e6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002998:	f043 0304 	orr.w	r3, r3, #4
 800299c:	6413      	str	r3, [r2, #64]	; 0x40
 800299e:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2_8_TIM4_CH1_Pin|ENC2_6_TIM4_CH2_Pin;
 80029c6:	23c0      	movs	r3, #192	; 0xc0
 80029c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029d6:	2302      	movs	r3, #2
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029da:	f107 031c 	add.w	r3, r7, #28
 80029de:	4619      	mov	r1, r3
 80029e0:	4807      	ldr	r0, [pc, #28]	; (8002a00 <HAL_TIM_Encoder_MspInit+0xf8>)
 80029e2:	f001 fb69 	bl	80040b8 <HAL_GPIO_Init>
}
 80029e6:	bf00      	nop
 80029e8:	3730      	adds	r7, #48	; 0x30
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40000400 	.word	0x40000400
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	40000800 	.word	0x40000800
 8002a00:	40020400 	.word	0x40020400

08002a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <HAL_TIM_Base_MspInit+0x48>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d115      	bne.n	8002a42 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <HAL_TIM_Base_MspInit+0x4c>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4a0c      	ldr	r2, [pc, #48]	; (8002a50 <HAL_TIM_Base_MspInit+0x4c>)
 8002a20:	f043 0310 	orr.w	r3, r3, #16
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <HAL_TIM_Base_MspInit+0x4c>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2100      	movs	r1, #0
 8002a36:	2036      	movs	r0, #54	; 0x36
 8002a38:	f000 ff97 	bl	800396a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a3c:	2036      	movs	r0, #54	; 0x36
 8002a3e:	f000 ffb0 	bl	80039a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40001000 	.word	0x40001000
 8002a50:	40023800 	.word	0x40023800

08002a54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	; 0x28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a37      	ldr	r2, [pc, #220]	; (8002b50 <HAL_TIM_MspPostInit+0xfc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d11f      	bne.n	8002ab6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <HAL_TIM_MspPostInit+0x100>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a35      	ldr	r2, [pc, #212]	; (8002b54 <HAL_TIM_MspPostInit+0x100>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b33      	ldr	r3, [pc, #204]	; (8002b54 <HAL_TIM_MspPostInit+0x100>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = DRVR_IN1_TIM1_CH2_Pin;
 8002a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DRVR_IN1_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4619      	mov	r1, r3
 8002aae:	482a      	ldr	r0, [pc, #168]	; (8002b58 <HAL_TIM_MspPostInit+0x104>)
 8002ab0:	f001 fb02 	bl	80040b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002ab4:	e048      	b.n	8002b48 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abe:	d11f      	bne.n	8002b00 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <HAL_TIM_MspPostInit+0x100>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <HAL_TIM_MspPostInit+0x100>)
 8002aca:	f043 0302 	orr.w	r3, r3, #2
 8002ace:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_TIM_MspPostInit+0x100>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = fan_PWM_1_TIM2_CH3_Pin;
 8002adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	2300      	movs	r3, #0
 8002aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002aee:	2301      	movs	r3, #1
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(fan_PWM_1_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 8002af2:	f107 0314 	add.w	r3, r7, #20
 8002af6:	4619      	mov	r1, r3
 8002af8:	4818      	ldr	r0, [pc, #96]	; (8002b5c <HAL_TIM_MspPostInit+0x108>)
 8002afa:	f001 fadd 	bl	80040b8 <HAL_GPIO_Init>
}
 8002afe:	e023      	b.n	8002b48 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM8)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a16      	ldr	r2, [pc, #88]	; (8002b60 <HAL_TIM_MspPostInit+0x10c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d11e      	bne.n	8002b48 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <HAL_TIM_MspPostInit+0x100>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <HAL_TIM_MspPostInit+0x100>)
 8002b14:	f043 0304 	orr.w	r3, r3, #4
 8002b18:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <HAL_TIM_MspPostInit+0x100>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DRVL_IN1_TIM8_CH4_Pin;
 8002b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2300      	movs	r3, #0
 8002b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DRVL_IN1_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	4619      	mov	r1, r3
 8002b42:	4808      	ldr	r0, [pc, #32]	; (8002b64 <HAL_TIM_MspPostInit+0x110>)
 8002b44:	f001 fab8 	bl	80040b8 <HAL_GPIO_Init>
}
 8002b48:	bf00      	nop
 8002b4a:	3728      	adds	r7, #40	; 0x28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	40010400 	.word	0x40010400
 8002b64:	40020800 	.word	0x40020800

08002b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a19      	ldr	r2, [pc, #100]	; (8002bec <HAL_UART_MspInit+0x84>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d12b      	bne.n	8002be2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <HAL_UART_MspInit+0x88>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <HAL_UART_MspInit+0x88>)
 8002b94:	f043 0320 	orr.w	r3, r3, #32
 8002b98:	6453      	str	r3, [r2, #68]	; 0x44
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <HAL_UART_MspInit+0x88>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <HAL_UART_MspInit+0x88>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	4a10      	ldr	r2, [pc, #64]	; (8002bf0 <HAL_UART_MspInit+0x88>)
 8002bb0:	f043 0304 	orr.w	r3, r3, #4
 8002bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <HAL_UART_MspInit+0x88>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bc2:	23c0      	movs	r3, #192	; 0xc0
 8002bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd6:	f107 0314 	add.w	r3, r7, #20
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4805      	ldr	r0, [pc, #20]	; (8002bf4 <HAL_UART_MspInit+0x8c>)
 8002bde:	f001 fa6b 	bl	80040b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002be2:	bf00      	nop
 8002be4:	3728      	adds	r7, #40	; 0x28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40011400 	.word	0x40011400
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40020800 	.word	0x40020800

08002bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <NMI_Handler+0x4>

08002bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c02:	e7fe      	b.n	8002c02 <HardFault_Handler+0x4>

08002c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <MemManage_Handler+0x4>

08002c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c0e:	e7fe      	b.n	8002c0e <BusFault_Handler+0x4>

08002c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <UsageFault_Handler+0x4>

08002c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c44:	f000 f96a 	bl	8002f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c50:	4802      	ldr	r0, [pc, #8]	; (8002c5c <TIM6_DAC_IRQHandler+0x10>)
 8002c52:	f002 fd9d 	bl	8005790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200004b4 	.word	0x200004b4

08002c60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <DMA2_Stream0_IRQHandler+0x10>)
 8002c66:	f000 ffbd 	bl	8003be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000288 	.word	0x20000288

08002c74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return 1;
 8002c78:	2301      	movs	r3, #1
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_kill>:

int _kill(int pid, int sig)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c8e:	f003 fd8b 	bl	80067a8 <__errno>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2216      	movs	r2, #22
 8002c96:	601a      	str	r2, [r3, #0]
  return -1;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <_exit>:

void _exit (int status)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cac:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ffe7 	bl	8002c84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cb6:	e7fe      	b.n	8002cb6 <_exit+0x12>

08002cb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	e00a      	b.n	8002ce0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cca:	f3af 8000 	nop.w
 8002cce:	4601      	mov	r1, r0
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	60ba      	str	r2, [r7, #8]
 8002cd6:	b2ca      	uxtb	r2, r1
 8002cd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	dbf0      	blt.n	8002cca <_read+0x12>
  }

  return len;
 8002ce8:	687b      	ldr	r3, [r7, #4]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	e009      	b.n	8002d18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	60ba      	str	r2, [r7, #8]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3301      	adds	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	dbf1      	blt.n	8002d04 <_write+0x12>
  }
  return len;
 8002d20:	687b      	ldr	r3, [r7, #4]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <_close>:

int _close(int file)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d52:	605a      	str	r2, [r3, #4]
  return 0;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <_isatty>:

int _isatty(int file)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <_sbrk+0x5c>)
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <_sbrk+0x60>)
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <_sbrk+0x64>)
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <_sbrk+0x68>)
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d207      	bcs.n	8002dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc4:	f003 fcf0 	bl	80067a8 <__errno>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	220c      	movs	r2, #12
 8002dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	e009      	b.n	8002de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <_sbrk+0x64>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <_sbrk+0x64>)
 8002de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20020000 	.word	0x20020000
 8002df4:	00000400 	.word	0x00000400
 8002df8:	20000624 	.word	0x20000624
 8002dfc:	20000640 	.word	0x20000640

08002e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <SystemInit+0x20>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0a:	4a05      	ldr	r2, [pc, #20]	; (8002e20 <SystemInit+0x20>)
 8002e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e28:	480d      	ldr	r0, [pc, #52]	; (8002e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e2a:	490e      	ldr	r1, [pc, #56]	; (8002e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e2c:	4a0e      	ldr	r2, [pc, #56]	; (8002e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e30:	e002      	b.n	8002e38 <LoopCopyDataInit>

08002e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e36:	3304      	adds	r3, #4

08002e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e3c:	d3f9      	bcc.n	8002e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e3e:	4a0b      	ldr	r2, [pc, #44]	; (8002e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e40:	4c0b      	ldr	r4, [pc, #44]	; (8002e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e44:	e001      	b.n	8002e4a <LoopFillZerobss>

08002e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e48:	3204      	adds	r2, #4

08002e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e4c:	d3fb      	bcc.n	8002e46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e4e:	f7ff ffd7 	bl	8002e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e52:	f003 fcaf 	bl	80067b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e56:	f7fe fb27 	bl	80014a8 <main>
  bx  lr    
 8002e5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e64:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8002e68:	0800965c 	.word	0x0800965c
  ldr r2, =_sbss
 8002e6c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002e70:	2000063c 	.word	0x2000063c

08002e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e74:	e7fe      	b.n	8002e74 <ADC_IRQHandler>
	...

08002e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <HAL_Init+0x40>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0d      	ldr	r2, [pc, #52]	; (8002eb8 <HAL_Init+0x40>)
 8002e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_Init+0x40>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <HAL_Init+0x40>)
 8002e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e94:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <HAL_Init+0x40>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a07      	ldr	r2, [pc, #28]	; (8002eb8 <HAL_Init+0x40>)
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea0:	2003      	movs	r0, #3
 8002ea2:	f000 fd57 	bl	8003954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ea6:	200f      	movs	r0, #15
 8002ea8:	f000 f808 	bl	8002ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eac:	f7ff fb78 	bl	80025a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023c00 	.word	0x40023c00

08002ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_InitTick+0x54>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_InitTick+0x58>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fd6f 	bl	80039be <HAL_SYSTICK_Config>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00e      	b.n	8002f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b0f      	cmp	r3, #15
 8002eee:	d80a      	bhi.n	8002f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef8:	f000 fd37 	bl	800396a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002efc:	4a06      	ldr	r2, [pc, #24]	; (8002f18 <HAL_InitTick+0x5c>)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e000      	b.n	8002f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	2000003c 	.word	0x2000003c
 8002f14:	20000044 	.word	0x20000044
 8002f18:	20000040 	.word	0x20000040

08002f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_IncTick+0x20>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_IncTick+0x24>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <HAL_IncTick+0x24>)
 8002f2e:	6013      	str	r3, [r2, #0]
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000044 	.word	0x20000044
 8002f40:	20000628 	.word	0x20000628

08002f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return uwTick;
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <HAL_GetTick+0x14>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20000628 	.word	0x20000628

08002f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f64:	f7ff ffee 	bl	8002f44 <HAL_GetTick>
 8002f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d005      	beq.n	8002f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <HAL_Delay+0x44>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f82:	bf00      	nop
 8002f84:	f7ff ffde 	bl	8002f44 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d8f7      	bhi.n	8002f84 <HAL_Delay+0x28>
  {
  }
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000044 	.word	0x20000044

08002fa4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e033      	b.n	8003022 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fb14 	bl	80025f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d118      	bne.n	8003014 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fea:	f023 0302 	bic.w	r3, r3, #2
 8002fee:	f043 0202 	orr.w	r2, r3, #2
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fa5e 	bl	80034b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f023 0303 	bic.w	r3, r3, #3
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
 8003012:	e001      	b.n	8003018 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_ADC_Start_DMA+0x1e>
 8003046:	2302      	movs	r3, #2
 8003048:	e0e9      	b.n	800321e <HAL_ADC_Start_DMA+0x1f2>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d018      	beq.n	8003092 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003070:	4b6d      	ldr	r3, [pc, #436]	; (8003228 <HAL_ADC_Start_DMA+0x1fc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a6d      	ldr	r2, [pc, #436]	; (800322c <HAL_ADC_Start_DMA+0x200>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	0c9a      	lsrs	r2, r3, #18
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003084:	e002      	b.n	800308c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	3b01      	subs	r3, #1
 800308a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f9      	bne.n	8003086 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a0:	d107      	bne.n	80030b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	f040 80a1 	bne.w	8003204 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d007      	beq.n	80030f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003100:	d106      	bne.n	8003110 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f023 0206 	bic.w	r2, r3, #6
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
 800310e:	e002      	b.n	8003116 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800311e:	4b44      	ldr	r3, [pc, #272]	; (8003230 <HAL_ADC_Start_DMA+0x204>)
 8003120:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	4a43      	ldr	r2, [pc, #268]	; (8003234 <HAL_ADC_Start_DMA+0x208>)
 8003128:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	4a42      	ldr	r2, [pc, #264]	; (8003238 <HAL_ADC_Start_DMA+0x20c>)
 8003130:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	4a41      	ldr	r2, [pc, #260]	; (800323c <HAL_ADC_Start_DMA+0x210>)
 8003138:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003142:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003152:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003162:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	334c      	adds	r3, #76	; 0x4c
 800316e:	4619      	mov	r1, r3
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f000 fcde 	bl	8003b34 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2b00      	cmp	r3, #0
 8003182:	d12a      	bne.n	80031da <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2d      	ldr	r2, [pc, #180]	; (8003240 <HAL_ADC_Start_DMA+0x214>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d015      	beq.n	80031ba <HAL_ADC_Start_DMA+0x18e>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2c      	ldr	r2, [pc, #176]	; (8003244 <HAL_ADC_Start_DMA+0x218>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d105      	bne.n	80031a4 <HAL_ADC_Start_DMA+0x178>
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_ADC_Start_DMA+0x204>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a27      	ldr	r2, [pc, #156]	; (8003248 <HAL_ADC_Start_DMA+0x21c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d136      	bne.n	800321c <HAL_ADC_Start_DMA+0x1f0>
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <HAL_ADC_Start_DMA+0x204>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d130      	bne.n	800321c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d129      	bne.n	800321c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	e020      	b.n	800321c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a18      	ldr	r2, [pc, #96]	; (8003240 <HAL_ADC_Start_DMA+0x214>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d11b      	bne.n	800321c <HAL_ADC_Start_DMA+0x1f0>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d114      	bne.n	800321c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	e00b      	b.n	800321c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f043 0210 	orr.w	r2, r3, #16
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003214:	f043 0201 	orr.w	r2, r3, #1
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	2000003c 	.word	0x2000003c
 800322c:	431bde83 	.word	0x431bde83
 8003230:	40012300 	.word	0x40012300
 8003234:	080036b1 	.word	0x080036b1
 8003238:	0800376b 	.word	0x0800376b
 800323c:	08003787 	.word	0x08003787
 8003240:	40012000 	.word	0x40012000
 8003244:	40012100 	.word	0x40012100
 8003248:	40012200 	.word	0x40012200

0800324c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x1c>
 800328c:	2302      	movs	r3, #2
 800328e:	e105      	b.n	800349c <HAL_ADC_ConfigChannel+0x228>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b09      	cmp	r3, #9
 800329e:	d925      	bls.n	80032ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68d9      	ldr	r1, [r3, #12]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	3b1e      	subs	r3, #30
 80032b6:	2207      	movs	r2, #7
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43da      	mvns	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	400a      	ands	r2, r1
 80032c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68d9      	ldr	r1, [r3, #12]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	4618      	mov	r0, r3
 80032d8:	4603      	mov	r3, r0
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4403      	add	r3, r0
 80032de:	3b1e      	subs	r3, #30
 80032e0:	409a      	lsls	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	e022      	b.n	8003332 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6919      	ldr	r1, [r3, #16]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	4613      	mov	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4413      	add	r3, r2
 8003300:	2207      	movs	r2, #7
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43da      	mvns	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	400a      	ands	r2, r1
 800330e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6919      	ldr	r1, [r3, #16]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	4618      	mov	r0, r3
 8003322:	4603      	mov	r3, r0
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4403      	add	r3, r0
 8003328:	409a      	lsls	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b06      	cmp	r3, #6
 8003338:	d824      	bhi.n	8003384 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	3b05      	subs	r3, #5
 800334c:	221f      	movs	r2, #31
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43da      	mvns	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	400a      	ands	r2, r1
 800335a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	4618      	mov	r0, r3
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	3b05      	subs	r3, #5
 8003376:	fa00 f203 	lsl.w	r2, r0, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	635a      	str	r2, [r3, #52]	; 0x34
 8003382:	e04c      	b.n	800341e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b0c      	cmp	r3, #12
 800338a:	d824      	bhi.n	80033d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	3b23      	subs	r3, #35	; 0x23
 800339e:	221f      	movs	r2, #31
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43da      	mvns	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	400a      	ands	r2, r1
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	4618      	mov	r0, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	3b23      	subs	r3, #35	; 0x23
 80033c8:	fa00 f203 	lsl.w	r2, r0, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
 80033d4:	e023      	b.n	800341e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	3b41      	subs	r3, #65	; 0x41
 80033e8:	221f      	movs	r2, #31
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43da      	mvns	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	400a      	ands	r2, r1
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	b29b      	uxth	r3, r3
 8003404:	4618      	mov	r0, r3
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	3b41      	subs	r3, #65	; 0x41
 8003412:	fa00 f203 	lsl.w	r2, r0, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800341e:	4b22      	ldr	r3, [pc, #136]	; (80034a8 <HAL_ADC_ConfigChannel+0x234>)
 8003420:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a21      	ldr	r2, [pc, #132]	; (80034ac <HAL_ADC_ConfigChannel+0x238>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d109      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x1cc>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b12      	cmp	r3, #18
 8003432:	d105      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a19      	ldr	r2, [pc, #100]	; (80034ac <HAL_ADC_ConfigChannel+0x238>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d123      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x21e>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b10      	cmp	r3, #16
 8003450:	d003      	beq.n	800345a <HAL_ADC_ConfigChannel+0x1e6>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b11      	cmp	r3, #17
 8003458:	d11b      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b10      	cmp	r3, #16
 800346c:	d111      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800346e:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <HAL_ADC_ConfigChannel+0x23c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a10      	ldr	r2, [pc, #64]	; (80034b4 <HAL_ADC_ConfigChannel+0x240>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	0c9a      	lsrs	r2, r3, #18
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003484:	e002      	b.n	800348c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	3b01      	subs	r3, #1
 800348a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f9      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40012300 	.word	0x40012300
 80034ac:	40012000 	.word	0x40012000
 80034b0:	2000003c 	.word	0x2000003c
 80034b4:	431bde83 	.word	0x431bde83

080034b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034c0:	4b79      	ldr	r3, [pc, #484]	; (80036a8 <ADC_Init+0x1f0>)
 80034c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	431a      	orrs	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	021a      	lsls	r2, r3, #8
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003510:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6859      	ldr	r1, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003532:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6899      	ldr	r1, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	4a58      	ldr	r2, [pc, #352]	; (80036ac <ADC_Init+0x1f4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d022      	beq.n	8003596 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800355e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6899      	ldr	r1, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003580:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6899      	ldr	r1, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	e00f      	b.n	80035b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0202 	bic.w	r2, r2, #2
 80035c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6899      	ldr	r1, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	7e1b      	ldrb	r3, [r3, #24]
 80035d0:	005a      	lsls	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01b      	beq.n	800361c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003602:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	3b01      	subs	r3, #1
 8003610:	035a      	lsls	r2, r3, #13
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	e007      	b.n	800362c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800362a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	3b01      	subs	r3, #1
 8003648:	051a      	lsls	r2, r3, #20
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003660:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6899      	ldr	r1, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800366e:	025a      	lsls	r2, r3, #9
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003686:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6899      	ldr	r1, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	029a      	lsls	r2, r3, #10
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	609a      	str	r2, [r3, #8]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	40012300 	.word	0x40012300
 80036ac:	0f000001 	.word	0x0f000001

080036b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d13c      	bne.n	8003744 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d12b      	bne.n	800373c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d127      	bne.n	800373c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d006      	beq.n	8003708 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003704:	2b00      	cmp	r3, #0
 8003706:	d119      	bne.n	800373c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0220 	bic.w	r2, r2, #32
 8003716:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d105      	bne.n	800373c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	f043 0201 	orr.w	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7fd fe99 	bl	8001474 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003742:	e00e      	b.n	8003762 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7ff fd85 	bl	8003260 <HAL_ADC_ErrorCallback>
}
 8003756:	e004      	b.n	8003762 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4798      	blx	r3
}
 8003762:	bf00      	nop
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f7ff fd67 	bl	800324c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2240      	movs	r2, #64	; 0x40
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	f043 0204 	orr.w	r2, r3, #4
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f7ff fd5a 	bl	8003260 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <__NVIC_SetPriorityGrouping+0x44>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037d0:	4013      	ands	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037e6:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <__NVIC_SetPriorityGrouping+0x44>)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	60d3      	str	r3, [r2, #12]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003800:	4b04      	ldr	r3, [pc, #16]	; (8003814 <__NVIC_GetPriorityGrouping+0x18>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	0a1b      	lsrs	r3, r3, #8
 8003806:	f003 0307 	and.w	r3, r3, #7
}
 800380a:	4618      	mov	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	2b00      	cmp	r3, #0
 8003828:	db0b      	blt.n	8003842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	f003 021f 	and.w	r2, r3, #31
 8003830:	4907      	ldr	r1, [pc, #28]	; (8003850 <__NVIC_EnableIRQ+0x38>)
 8003832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	2001      	movs	r0, #1
 800383a:	fa00 f202 	lsl.w	r2, r0, r2
 800383e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	e000e100 	.word	0xe000e100

08003854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	6039      	str	r1, [r7, #0]
 800385e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003864:	2b00      	cmp	r3, #0
 8003866:	db0a      	blt.n	800387e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	b2da      	uxtb	r2, r3
 800386c:	490c      	ldr	r1, [pc, #48]	; (80038a0 <__NVIC_SetPriority+0x4c>)
 800386e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003872:	0112      	lsls	r2, r2, #4
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	440b      	add	r3, r1
 8003878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800387c:	e00a      	b.n	8003894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	b2da      	uxtb	r2, r3
 8003882:	4908      	ldr	r1, [pc, #32]	; (80038a4 <__NVIC_SetPriority+0x50>)
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	3b04      	subs	r3, #4
 800388c:	0112      	lsls	r2, r2, #4
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	440b      	add	r3, r1
 8003892:	761a      	strb	r2, [r3, #24]
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	e000e100 	.word	0xe000e100
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b089      	sub	sp, #36	; 0x24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f1c3 0307 	rsb	r3, r3, #7
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	bf28      	it	cs
 80038c6:	2304      	movcs	r3, #4
 80038c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3304      	adds	r3, #4
 80038ce:	2b06      	cmp	r3, #6
 80038d0:	d902      	bls.n	80038d8 <NVIC_EncodePriority+0x30>
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	3b03      	subs	r3, #3
 80038d6:	e000      	b.n	80038da <NVIC_EncodePriority+0x32>
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038dc:	f04f 32ff 	mov.w	r2, #4294967295
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43da      	mvns	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	401a      	ands	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f0:	f04f 31ff 	mov.w	r1, #4294967295
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	fa01 f303 	lsl.w	r3, r1, r3
 80038fa:	43d9      	mvns	r1, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003900:	4313      	orrs	r3, r2
         );
}
 8003902:	4618      	mov	r0, r3
 8003904:	3724      	adds	r7, #36	; 0x24
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003920:	d301      	bcc.n	8003926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003922:	2301      	movs	r3, #1
 8003924:	e00f      	b.n	8003946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003926:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <SysTick_Config+0x40>)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3b01      	subs	r3, #1
 800392c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800392e:	210f      	movs	r1, #15
 8003930:	f04f 30ff 	mov.w	r0, #4294967295
 8003934:	f7ff ff8e 	bl	8003854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <SysTick_Config+0x40>)
 800393a:	2200      	movs	r2, #0
 800393c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <SysTick_Config+0x40>)
 8003940:	2207      	movs	r2, #7
 8003942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	e000e010 	.word	0xe000e010

08003954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ff29 	bl	80037b4 <__NVIC_SetPriorityGrouping>
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800396a:	b580      	push	{r7, lr}
 800396c:	b086      	sub	sp, #24
 800396e:	af00      	add	r7, sp, #0
 8003970:	4603      	mov	r3, r0
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800397c:	f7ff ff3e 	bl	80037fc <__NVIC_GetPriorityGrouping>
 8003980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	6978      	ldr	r0, [r7, #20]
 8003988:	f7ff ff8e 	bl	80038a8 <NVIC_EncodePriority>
 800398c:	4602      	mov	r2, r0
 800398e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff ff5d 	bl	8003854 <__NVIC_SetPriority>
}
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	4603      	mov	r3, r0
 80039aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff31 	bl	8003818 <__NVIC_EnableIRQ>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff ffa2 	bl	8003910 <SysTick_Config>
 80039cc:	4603      	mov	r3, r0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039e4:	f7ff faae 	bl	8002f44 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e099      	b.n	8003b28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a14:	e00f      	b.n	8003a36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a16:	f7ff fa95 	bl	8002f44 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	d908      	bls.n	8003a36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e078      	b.n	8003b28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e8      	bne.n	8003a16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4b38      	ldr	r3, [pc, #224]	; (8003b30 <HAL_DMA_Init+0x158>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d107      	bne.n	8003aa0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f023 0307 	bic.w	r3, r3, #7
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d117      	bne.n	8003afa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00e      	beq.n	8003afa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fa6f 	bl	8003fc0 <DMA_CheckFifoParam>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2240      	movs	r2, #64	; 0x40
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003af6:	2301      	movs	r3, #1
 8003af8:	e016      	b.n	8003b28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fa26 	bl	8003f54 <DMA_CalcBaseAndBitshift>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	223f      	movs	r2, #63	; 0x3f
 8003b12:	409a      	lsls	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	f010803f 	.word	0xf010803f

08003b34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_DMA_Start_IT+0x26>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e040      	b.n	8003bdc <HAL_DMA_Start_IT+0xa8>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d12f      	bne.n	8003bce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f9b8 	bl	8003ef8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	223f      	movs	r2, #63	; 0x3f
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0216 	orr.w	r2, r2, #22
 8003ba2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0208 	orr.w	r2, r2, #8
 8003bba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	e005      	b.n	8003bda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bf0:	4b8e      	ldr	r3, [pc, #568]	; (8003e2c <HAL_DMA_IRQHandler+0x248>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a8e      	ldr	r2, [pc, #568]	; (8003e30 <HAL_DMA_IRQHandler+0x24c>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	0a9b      	lsrs	r3, r3, #10
 8003bfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0e:	2208      	movs	r2, #8
 8003c10:	409a      	lsls	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d01a      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d013      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0204 	bic.w	r2, r2, #4
 8003c36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c48:	f043 0201 	orr.w	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	2201      	movs	r2, #1
 8003c56:	409a      	lsls	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d012      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00b      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c72:	2201      	movs	r2, #1
 8003c74:	409a      	lsls	r2, r3
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	f043 0202 	orr.w	r2, r3, #2
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d012      	beq.n	8003cbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca8:	2204      	movs	r2, #4
 8003caa:	409a      	lsls	r2, r3
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb4:	f043 0204 	orr.w	r2, r3, #4
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d043      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d03c      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cde:	2210      	movs	r2, #16
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d018      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d108      	bne.n	8003d14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d024      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
 8003d12:	e01f      	b.n	8003d54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01b      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	4798      	blx	r3
 8003d24:	e016      	b.n	8003d54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d107      	bne.n	8003d44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0208 	bic.w	r2, r2, #8
 8003d42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d58:	2220      	movs	r2, #32
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 808f 	beq.w	8003e84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8087 	beq.w	8003e84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b05      	cmp	r3, #5
 8003d8c:	d136      	bne.n	8003dfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0216 	bic.w	r2, r2, #22
 8003d9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695a      	ldr	r2, [r3, #20]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d103      	bne.n	8003dbe <HAL_DMA_IRQHandler+0x1da>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0208 	bic.w	r2, r2, #8
 8003dcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd2:	223f      	movs	r2, #63	; 0x3f
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d07e      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
        }
        return;
 8003dfa:	e079      	b.n	8003ef0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d01d      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10d      	bne.n	8003e34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d031      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	4798      	blx	r3
 8003e28:	e02c      	b.n	8003e84 <HAL_DMA_IRQHandler+0x2a0>
 8003e2a:	bf00      	nop
 8003e2c:	2000003c 	.word	0x2000003c
 8003e30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d023      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
 8003e44:	e01e      	b.n	8003e84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10f      	bne.n	8003e74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0210 	bic.w	r2, r2, #16
 8003e62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d032      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d022      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2205      	movs	r2, #5
 8003e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d307      	bcc.n	8003ecc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f2      	bne.n	8003eb0 <HAL_DMA_IRQHandler+0x2cc>
 8003eca:	e000      	b.n	8003ece <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ecc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	4798      	blx	r3
 8003eee:	e000      	b.n	8003ef2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ef0:	bf00      	nop
    }
  }
}
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b40      	cmp	r3, #64	; 0x40
 8003f24:	d108      	bne.n	8003f38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f36:	e007      	b.n	8003f48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	60da      	str	r2, [r3, #12]
}
 8003f48:	bf00      	nop
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	3b10      	subs	r3, #16
 8003f64:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <DMA_CalcBaseAndBitshift+0x64>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f6e:	4a13      	ldr	r2, [pc, #76]	; (8003fbc <DMA_CalcBaseAndBitshift+0x68>)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d909      	bls.n	8003f96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	1d1a      	adds	r2, r3, #4
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	659a      	str	r2, [r3, #88]	; 0x58
 8003f94:	e007      	b.n	8003fa6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f9e:	f023 0303 	bic.w	r3, r3, #3
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	aaaaaaab 	.word	0xaaaaaaab
 8003fbc:	08009268 	.word	0x08009268

08003fc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11f      	bne.n	800401a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d856      	bhi.n	800408e <DMA_CheckFifoParam+0xce>
 8003fe0:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <DMA_CheckFifoParam+0x28>)
 8003fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe6:	bf00      	nop
 8003fe8:	08003ff9 	.word	0x08003ff9
 8003fec:	0800400b 	.word	0x0800400b
 8003ff0:	08003ff9 	.word	0x08003ff9
 8003ff4:	0800408f 	.word	0x0800408f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d046      	beq.n	8004092 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004008:	e043      	b.n	8004092 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004012:	d140      	bne.n	8004096 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004018:	e03d      	b.n	8004096 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004022:	d121      	bne.n	8004068 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b03      	cmp	r3, #3
 8004028:	d837      	bhi.n	800409a <DMA_CheckFifoParam+0xda>
 800402a:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <DMA_CheckFifoParam+0x70>)
 800402c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004030:	08004041 	.word	0x08004041
 8004034:	08004047 	.word	0x08004047
 8004038:	08004041 	.word	0x08004041
 800403c:	08004059 	.word	0x08004059
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
      break;
 8004044:	e030      	b.n	80040a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d025      	beq.n	800409e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004056:	e022      	b.n	800409e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004060:	d11f      	bne.n	80040a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004066:	e01c      	b.n	80040a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d903      	bls.n	8004076 <DMA_CheckFifoParam+0xb6>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d003      	beq.n	800407c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004074:	e018      	b.n	80040a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
      break;
 800407a:	e015      	b.n	80040a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00e      	beq.n	80040a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	73fb      	strb	r3, [r7, #15]
      break;
 800408c:	e00b      	b.n	80040a6 <DMA_CheckFifoParam+0xe6>
      break;
 800408e:	bf00      	nop
 8004090:	e00a      	b.n	80040a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004092:	bf00      	nop
 8004094:	e008      	b.n	80040a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004096:	bf00      	nop
 8004098:	e006      	b.n	80040a8 <DMA_CheckFifoParam+0xe8>
      break;
 800409a:	bf00      	nop
 800409c:	e004      	b.n	80040a8 <DMA_CheckFifoParam+0xe8>
      break;
 800409e:	bf00      	nop
 80040a0:	e002      	b.n	80040a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80040a2:	bf00      	nop
 80040a4:	e000      	b.n	80040a8 <DMA_CheckFifoParam+0xe8>
      break;
 80040a6:	bf00      	nop
    }
  } 
  
  return status; 
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop

080040b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b089      	sub	sp, #36	; 0x24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ce:	2300      	movs	r3, #0
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	e16b      	b.n	80043ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040d4:	2201      	movs	r2, #1
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	4013      	ands	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	f040 815a 	bne.w	80043a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d005      	beq.n	800410a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004106:	2b02      	cmp	r3, #2
 8004108:	d130      	bne.n	800416c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	2203      	movs	r2, #3
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4313      	orrs	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004140:	2201      	movs	r2, #1
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	091b      	lsrs	r3, r3, #4
 8004156:	f003 0201 	and.w	r2, r3, #1
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4313      	orrs	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	2b03      	cmp	r3, #3
 8004176:	d017      	beq.n	80041a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	2203      	movs	r2, #3
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4313      	orrs	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d123      	bne.n	80041fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	08da      	lsrs	r2, r3, #3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3208      	adds	r2, #8
 80041bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	220f      	movs	r2, #15
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4013      	ands	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	08da      	lsrs	r2, r3, #3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3208      	adds	r2, #8
 80041f6:	69b9      	ldr	r1, [r7, #24]
 80041f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	2203      	movs	r2, #3
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4013      	ands	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f003 0203 	and.w	r2, r3, #3
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4313      	orrs	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80b4 	beq.w	80043a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	4b60      	ldr	r3, [pc, #384]	; (80043c4 <HAL_GPIO_Init+0x30c>)
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	4a5f      	ldr	r2, [pc, #380]	; (80043c4 <HAL_GPIO_Init+0x30c>)
 8004248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800424c:	6453      	str	r3, [r2, #68]	; 0x44
 800424e:	4b5d      	ldr	r3, [pc, #372]	; (80043c4 <HAL_GPIO_Init+0x30c>)
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800425a:	4a5b      	ldr	r2, [pc, #364]	; (80043c8 <HAL_GPIO_Init+0x310>)
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	3302      	adds	r3, #2
 8004262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	220f      	movs	r2, #15
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4013      	ands	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a52      	ldr	r2, [pc, #328]	; (80043cc <HAL_GPIO_Init+0x314>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d02b      	beq.n	80042de <HAL_GPIO_Init+0x226>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a51      	ldr	r2, [pc, #324]	; (80043d0 <HAL_GPIO_Init+0x318>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d025      	beq.n	80042da <HAL_GPIO_Init+0x222>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a50      	ldr	r2, [pc, #320]	; (80043d4 <HAL_GPIO_Init+0x31c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d01f      	beq.n	80042d6 <HAL_GPIO_Init+0x21e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a4f      	ldr	r2, [pc, #316]	; (80043d8 <HAL_GPIO_Init+0x320>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d019      	beq.n	80042d2 <HAL_GPIO_Init+0x21a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a4e      	ldr	r2, [pc, #312]	; (80043dc <HAL_GPIO_Init+0x324>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <HAL_GPIO_Init+0x216>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a4d      	ldr	r2, [pc, #308]	; (80043e0 <HAL_GPIO_Init+0x328>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00d      	beq.n	80042ca <HAL_GPIO_Init+0x212>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a4c      	ldr	r2, [pc, #304]	; (80043e4 <HAL_GPIO_Init+0x32c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d007      	beq.n	80042c6 <HAL_GPIO_Init+0x20e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a4b      	ldr	r2, [pc, #300]	; (80043e8 <HAL_GPIO_Init+0x330>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d101      	bne.n	80042c2 <HAL_GPIO_Init+0x20a>
 80042be:	2307      	movs	r3, #7
 80042c0:	e00e      	b.n	80042e0 <HAL_GPIO_Init+0x228>
 80042c2:	2308      	movs	r3, #8
 80042c4:	e00c      	b.n	80042e0 <HAL_GPIO_Init+0x228>
 80042c6:	2306      	movs	r3, #6
 80042c8:	e00a      	b.n	80042e0 <HAL_GPIO_Init+0x228>
 80042ca:	2305      	movs	r3, #5
 80042cc:	e008      	b.n	80042e0 <HAL_GPIO_Init+0x228>
 80042ce:	2304      	movs	r3, #4
 80042d0:	e006      	b.n	80042e0 <HAL_GPIO_Init+0x228>
 80042d2:	2303      	movs	r3, #3
 80042d4:	e004      	b.n	80042e0 <HAL_GPIO_Init+0x228>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e002      	b.n	80042e0 <HAL_GPIO_Init+0x228>
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <HAL_GPIO_Init+0x228>
 80042de:	2300      	movs	r3, #0
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	f002 0203 	and.w	r2, r2, #3
 80042e6:	0092      	lsls	r2, r2, #2
 80042e8:	4093      	lsls	r3, r2
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042f0:	4935      	ldr	r1, [pc, #212]	; (80043c8 <HAL_GPIO_Init+0x310>)
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	089b      	lsrs	r3, r3, #2
 80042f6:	3302      	adds	r3, #2
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042fe:	4b3b      	ldr	r3, [pc, #236]	; (80043ec <HAL_GPIO_Init+0x334>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	43db      	mvns	r3, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4013      	ands	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004322:	4a32      	ldr	r2, [pc, #200]	; (80043ec <HAL_GPIO_Init+0x334>)
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004328:	4b30      	ldr	r3, [pc, #192]	; (80043ec <HAL_GPIO_Init+0x334>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	43db      	mvns	r3, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4013      	ands	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800434c:	4a27      	ldr	r2, [pc, #156]	; (80043ec <HAL_GPIO_Init+0x334>)
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004352:	4b26      	ldr	r3, [pc, #152]	; (80043ec <HAL_GPIO_Init+0x334>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	43db      	mvns	r3, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4013      	ands	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004376:	4a1d      	ldr	r2, [pc, #116]	; (80043ec <HAL_GPIO_Init+0x334>)
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800437c:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <HAL_GPIO_Init+0x334>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	43db      	mvns	r3, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4013      	ands	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043a0:	4a12      	ldr	r2, [pc, #72]	; (80043ec <HAL_GPIO_Init+0x334>)
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	3301      	adds	r3, #1
 80043aa:	61fb      	str	r3, [r7, #28]
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	2b0f      	cmp	r3, #15
 80043b0:	f67f ae90 	bls.w	80040d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop
 80043b8:	3724      	adds	r7, #36	; 0x24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40023800 	.word	0x40023800
 80043c8:	40013800 	.word	0x40013800
 80043cc:	40020000 	.word	0x40020000
 80043d0:	40020400 	.word	0x40020400
 80043d4:	40020800 	.word	0x40020800
 80043d8:	40020c00 	.word	0x40020c00
 80043dc:	40021000 	.word	0x40021000
 80043e0:	40021400 	.word	0x40021400
 80043e4:	40021800 	.word	0x40021800
 80043e8:	40021c00 	.word	0x40021c00
 80043ec:	40013c00 	.word	0x40013c00

080043f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	887b      	ldrh	r3, [r7, #2]
 8004402:	4013      	ands	r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004408:	2301      	movs	r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]
 800440c:	e001      	b.n	8004412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	807b      	strh	r3, [r7, #2]
 800442c:	4613      	mov	r3, r2
 800442e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004430:	787b      	ldrb	r3, [r7, #1]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004436:	887a      	ldrh	r2, [r7, #2]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800443c:	e003      	b.n	8004446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800443e:	887b      	ldrh	r3, [r7, #2]
 8004440:	041a      	lsls	r2, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	619a      	str	r2, [r3, #24]
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e12b      	b.n	80046be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fe f968 	bl	8002750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2224      	movs	r2, #36	; 0x24
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0201 	bic.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044b8:	f000 fd40 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 80044bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	4a81      	ldr	r2, [pc, #516]	; (80046c8 <HAL_I2C_Init+0x274>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d807      	bhi.n	80044d8 <HAL_I2C_Init+0x84>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a80      	ldr	r2, [pc, #512]	; (80046cc <HAL_I2C_Init+0x278>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	bf94      	ite	ls
 80044d0:	2301      	movls	r3, #1
 80044d2:	2300      	movhi	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	e006      	b.n	80044e6 <HAL_I2C_Init+0x92>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a7d      	ldr	r2, [pc, #500]	; (80046d0 <HAL_I2C_Init+0x27c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	bf94      	ite	ls
 80044e0:	2301      	movls	r3, #1
 80044e2:	2300      	movhi	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0e7      	b.n	80046be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a78      	ldr	r2, [pc, #480]	; (80046d4 <HAL_I2C_Init+0x280>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	0c9b      	lsrs	r3, r3, #18
 80044f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4a6a      	ldr	r2, [pc, #424]	; (80046c8 <HAL_I2C_Init+0x274>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d802      	bhi.n	8004528 <HAL_I2C_Init+0xd4>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	3301      	adds	r3, #1
 8004526:	e009      	b.n	800453c <HAL_I2C_Init+0xe8>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	4a69      	ldr	r2, [pc, #420]	; (80046d8 <HAL_I2C_Init+0x284>)
 8004534:	fba2 2303 	umull	r2, r3, r2, r3
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	3301      	adds	r3, #1
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	430b      	orrs	r3, r1
 8004542:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800454e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	495c      	ldr	r1, [pc, #368]	; (80046c8 <HAL_I2C_Init+0x274>)
 8004558:	428b      	cmp	r3, r1
 800455a:	d819      	bhi.n	8004590 <HAL_I2C_Init+0x13c>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1e59      	subs	r1, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	fbb1 f3f3 	udiv	r3, r1, r3
 800456a:	1c59      	adds	r1, r3, #1
 800456c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004570:	400b      	ands	r3, r1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_I2C_Init+0x138>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1e59      	subs	r1, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	fbb1 f3f3 	udiv	r3, r1, r3
 8004584:	3301      	adds	r3, #1
 8004586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800458a:	e051      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 800458c:	2304      	movs	r3, #4
 800458e:	e04f      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d111      	bne.n	80045bc <HAL_I2C_Init+0x168>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1e58      	subs	r0, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6859      	ldr	r1, [r3, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	440b      	add	r3, r1
 80045a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045aa:	3301      	adds	r3, #1
 80045ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	e012      	b.n	80045e2 <HAL_I2C_Init+0x18e>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1e58      	subs	r0, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6859      	ldr	r1, [r3, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	0099      	lsls	r1, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80045d2:	3301      	adds	r3, #1
 80045d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf0c      	ite	eq
 80045dc:	2301      	moveq	r3, #1
 80045de:	2300      	movne	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Init+0x196>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e022      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10e      	bne.n	8004610 <HAL_I2C_Init+0x1bc>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1e58      	subs	r0, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6859      	ldr	r1, [r3, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	440b      	add	r3, r1
 8004600:	fbb0 f3f3 	udiv	r3, r0, r3
 8004604:	3301      	adds	r3, #1
 8004606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460e:	e00f      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1e58      	subs	r0, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6859      	ldr	r1, [r3, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	0099      	lsls	r1, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	fbb0 f3f3 	udiv	r3, r0, r3
 8004626:	3301      	adds	r3, #1
 8004628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	6809      	ldr	r1, [r1, #0]
 8004634:	4313      	orrs	r3, r2
 8004636:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69da      	ldr	r2, [r3, #28]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800465e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6911      	ldr	r1, [r2, #16]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68d2      	ldr	r2, [r2, #12]
 800466a:	4311      	orrs	r1, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	430b      	orrs	r3, r1
 8004672:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	000186a0 	.word	0x000186a0
 80046cc:	001e847f 	.word	0x001e847f
 80046d0:	003d08ff 	.word	0x003d08ff
 80046d4:	431bde83 	.word	0x431bde83
 80046d8:	10624dd3 	.word	0x10624dd3

080046dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e267      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d075      	beq.n	80047e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046fa:	4b88      	ldr	r3, [pc, #544]	; (800491c <HAL_RCC_OscConfig+0x240>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b04      	cmp	r3, #4
 8004704:	d00c      	beq.n	8004720 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004706:	4b85      	ldr	r3, [pc, #532]	; (800491c <HAL_RCC_OscConfig+0x240>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800470e:	2b08      	cmp	r3, #8
 8004710:	d112      	bne.n	8004738 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004712:	4b82      	ldr	r3, [pc, #520]	; (800491c <HAL_RCC_OscConfig+0x240>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800471e:	d10b      	bne.n	8004738 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004720:	4b7e      	ldr	r3, [pc, #504]	; (800491c <HAL_RCC_OscConfig+0x240>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d05b      	beq.n	80047e4 <HAL_RCC_OscConfig+0x108>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d157      	bne.n	80047e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e242      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x74>
 8004742:	4b76      	ldr	r3, [pc, #472]	; (800491c <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a75      	ldr	r2, [pc, #468]	; (800491c <HAL_RCC_OscConfig+0x240>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e01d      	b.n	800478c <HAL_RCC_OscConfig+0xb0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0x98>
 800475a:	4b70      	ldr	r3, [pc, #448]	; (800491c <HAL_RCC_OscConfig+0x240>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a6f      	ldr	r2, [pc, #444]	; (800491c <HAL_RCC_OscConfig+0x240>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b6d      	ldr	r3, [pc, #436]	; (800491c <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a6c      	ldr	r2, [pc, #432]	; (800491c <HAL_RCC_OscConfig+0x240>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0xb0>
 8004774:	4b69      	ldr	r3, [pc, #420]	; (800491c <HAL_RCC_OscConfig+0x240>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a68      	ldr	r2, [pc, #416]	; (800491c <HAL_RCC_OscConfig+0x240>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b66      	ldr	r3, [pc, #408]	; (800491c <HAL_RCC_OscConfig+0x240>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a65      	ldr	r2, [pc, #404]	; (800491c <HAL_RCC_OscConfig+0x240>)
 8004786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800478a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fe fbd6 	bl	8002f44 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800479c:	f7fe fbd2 	bl	8002f44 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e207      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	4b5b      	ldr	r3, [pc, #364]	; (800491c <HAL_RCC_OscConfig+0x240>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0xc0>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047bc:	f7fe fbc2 	bl	8002f44 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fe fbbe 	bl	8002f44 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	; 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e1f3      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	4b51      	ldr	r3, [pc, #324]	; (800491c <HAL_RCC_OscConfig+0x240>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0xe8>
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d063      	beq.n	80048ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047f2:	4b4a      	ldr	r3, [pc, #296]	; (800491c <HAL_RCC_OscConfig+0x240>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fe:	4b47      	ldr	r3, [pc, #284]	; (800491c <HAL_RCC_OscConfig+0x240>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004806:	2b08      	cmp	r3, #8
 8004808:	d11c      	bne.n	8004844 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480a:	4b44      	ldr	r3, [pc, #272]	; (800491c <HAL_RCC_OscConfig+0x240>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d116      	bne.n	8004844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004816:	4b41      	ldr	r3, [pc, #260]	; (800491c <HAL_RCC_OscConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_RCC_OscConfig+0x152>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d001      	beq.n	800482e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e1c7      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482e:	4b3b      	ldr	r3, [pc, #236]	; (800491c <HAL_RCC_OscConfig+0x240>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4937      	ldr	r1, [pc, #220]	; (800491c <HAL_RCC_OscConfig+0x240>)
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004842:	e03a      	b.n	80048ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d020      	beq.n	800488e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800484c:	4b34      	ldr	r3, [pc, #208]	; (8004920 <HAL_RCC_OscConfig+0x244>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004852:	f7fe fb77 	bl	8002f44 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800485a:	f7fe fb73 	bl	8002f44 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e1a8      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486c:	4b2b      	ldr	r3, [pc, #172]	; (800491c <HAL_RCC_OscConfig+0x240>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004878:	4b28      	ldr	r3, [pc, #160]	; (800491c <HAL_RCC_OscConfig+0x240>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4925      	ldr	r1, [pc, #148]	; (800491c <HAL_RCC_OscConfig+0x240>)
 8004888:	4313      	orrs	r3, r2
 800488a:	600b      	str	r3, [r1, #0]
 800488c:	e015      	b.n	80048ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488e:	4b24      	ldr	r3, [pc, #144]	; (8004920 <HAL_RCC_OscConfig+0x244>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fe fb56 	bl	8002f44 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800489c:	f7fe fb52 	bl	8002f44 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e187      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ae:	4b1b      	ldr	r3, [pc, #108]	; (800491c <HAL_RCC_OscConfig+0x240>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d036      	beq.n	8004934 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d016      	beq.n	80048fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ce:	4b15      	ldr	r3, [pc, #84]	; (8004924 <HAL_RCC_OscConfig+0x248>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7fe fb36 	bl	8002f44 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048dc:	f7fe fb32 	bl	8002f44 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e167      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ee:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_RCC_OscConfig+0x240>)
 80048f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0x200>
 80048fa:	e01b      	b.n	8004934 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048fc:	4b09      	ldr	r3, [pc, #36]	; (8004924 <HAL_RCC_OscConfig+0x248>)
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004902:	f7fe fb1f 	bl	8002f44 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004908:	e00e      	b.n	8004928 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800490a:	f7fe fb1b 	bl	8002f44 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d907      	bls.n	8004928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e150      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
 800491c:	40023800 	.word	0x40023800
 8004920:	42470000 	.word	0x42470000
 8004924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004928:	4b88      	ldr	r3, [pc, #544]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 800492a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1ea      	bne.n	800490a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8097 	beq.w	8004a70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004942:	2300      	movs	r3, #0
 8004944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004946:	4b81      	ldr	r3, [pc, #516]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10f      	bne.n	8004972 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004952:	2300      	movs	r3, #0
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	4b7d      	ldr	r3, [pc, #500]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	4a7c      	ldr	r2, [pc, #496]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004960:	6413      	str	r3, [r2, #64]	; 0x40
 8004962:	4b7a      	ldr	r3, [pc, #488]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004972:	4b77      	ldr	r3, [pc, #476]	; (8004b50 <HAL_RCC_OscConfig+0x474>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d118      	bne.n	80049b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800497e:	4b74      	ldr	r3, [pc, #464]	; (8004b50 <HAL_RCC_OscConfig+0x474>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a73      	ldr	r2, [pc, #460]	; (8004b50 <HAL_RCC_OscConfig+0x474>)
 8004984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498a:	f7fe fadb 	bl	8002f44 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004992:	f7fe fad7 	bl	8002f44 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e10c      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a4:	4b6a      	ldr	r3, [pc, #424]	; (8004b50 <HAL_RCC_OscConfig+0x474>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f0      	beq.n	8004992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d106      	bne.n	80049c6 <HAL_RCC_OscConfig+0x2ea>
 80049b8:	4b64      	ldr	r3, [pc, #400]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049bc:	4a63      	ldr	r2, [pc, #396]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6713      	str	r3, [r2, #112]	; 0x70
 80049c4:	e01c      	b.n	8004a00 <HAL_RCC_OscConfig+0x324>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b05      	cmp	r3, #5
 80049cc:	d10c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x30c>
 80049ce:	4b5f      	ldr	r3, [pc, #380]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d2:	4a5e      	ldr	r2, [pc, #376]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049d4:	f043 0304 	orr.w	r3, r3, #4
 80049d8:	6713      	str	r3, [r2, #112]	; 0x70
 80049da:	4b5c      	ldr	r3, [pc, #368]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049de:	4a5b      	ldr	r2, [pc, #364]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049e0:	f043 0301 	orr.w	r3, r3, #1
 80049e4:	6713      	str	r3, [r2, #112]	; 0x70
 80049e6:	e00b      	b.n	8004a00 <HAL_RCC_OscConfig+0x324>
 80049e8:	4b58      	ldr	r3, [pc, #352]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ec:	4a57      	ldr	r2, [pc, #348]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	6713      	str	r3, [r2, #112]	; 0x70
 80049f4:	4b55      	ldr	r3, [pc, #340]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f8:	4a54      	ldr	r2, [pc, #336]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049fa:	f023 0304 	bic.w	r3, r3, #4
 80049fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d015      	beq.n	8004a34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a08:	f7fe fa9c 	bl	8002f44 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0e:	e00a      	b.n	8004a26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a10:	f7fe fa98 	bl	8002f44 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e0cb      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a26:	4b49      	ldr	r3, [pc, #292]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0ee      	beq.n	8004a10 <HAL_RCC_OscConfig+0x334>
 8004a32:	e014      	b.n	8004a5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a34:	f7fe fa86 	bl	8002f44 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a3c:	f7fe fa82 	bl	8002f44 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e0b5      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a52:	4b3e      	ldr	r3, [pc, #248]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1ee      	bne.n	8004a3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d105      	bne.n	8004a70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a64:	4b39      	ldr	r3, [pc, #228]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	4a38      	ldr	r2, [pc, #224]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80a1 	beq.w	8004bbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a7a:	4b34      	ldr	r3, [pc, #208]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d05c      	beq.n	8004b40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d141      	bne.n	8004b12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8e:	4b31      	ldr	r3, [pc, #196]	; (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a94:	f7fe fa56 	bl	8002f44 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a9c:	f7fe fa52 	bl	8002f44 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e087      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aae:	4b27      	ldr	r3, [pc, #156]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69da      	ldr	r2, [r3, #28]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	019b      	lsls	r3, r3, #6
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	041b      	lsls	r3, r3, #16
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	061b      	lsls	r3, r3, #24
 8004ade:	491b      	ldr	r1, [pc, #108]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ae4:	4b1b      	ldr	r3, [pc, #108]	; (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aea:	f7fe fa2b 	bl	8002f44 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af2:	f7fe fa27 	bl	8002f44 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e05c      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b04:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x416>
 8004b10:	e054      	b.n	8004bbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b18:	f7fe fa14 	bl	8002f44 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b20:	f7fe fa10 	bl	8002f44 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e045      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b32:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x444>
 8004b3e:	e03d      	b.n	8004bbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d107      	bne.n	8004b58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e038      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	40007000 	.word	0x40007000
 8004b54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b58:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <HAL_RCC_OscConfig+0x4ec>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d028      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d121      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d11a      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b88:	4013      	ands	r3, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d111      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	085b      	lsrs	r3, r3, #1
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d107      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40023800 	.word	0x40023800

08004bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0cc      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004be0:	4b68      	ldr	r3, [pc, #416]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d90c      	bls.n	8004c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b65      	ldr	r3, [pc, #404]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf6:	4b63      	ldr	r3, [pc, #396]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d001      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0b8      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d020      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c20:	4b59      	ldr	r3, [pc, #356]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4a58      	ldr	r2, [pc, #352]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c38:	4b53      	ldr	r3, [pc, #332]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4a52      	ldr	r2, [pc, #328]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c44:	4b50      	ldr	r3, [pc, #320]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	494d      	ldr	r1, [pc, #308]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d044      	beq.n	8004cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d107      	bne.n	8004c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6a:	4b47      	ldr	r3, [pc, #284]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d119      	bne.n	8004caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e07f      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d003      	beq.n	8004c8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d107      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8a:	4b3f      	ldr	r3, [pc, #252]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e06f      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9a:	4b3b      	ldr	r3, [pc, #236]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e067      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004caa:	4b37      	ldr	r3, [pc, #220]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f023 0203 	bic.w	r2, r3, #3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4934      	ldr	r1, [pc, #208]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cbc:	f7fe f942 	bl	8002f44 <HAL_GetTick>
 8004cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	e00a      	b.n	8004cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc4:	f7fe f93e 	bl	8002f44 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e04f      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cda:	4b2b      	ldr	r3, [pc, #172]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 020c 	and.w	r2, r3, #12
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d1eb      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cec:	4b25      	ldr	r3, [pc, #148]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d20c      	bcs.n	8004d14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b22      	ldr	r3, [pc, #136]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d02:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e032      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d20:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	4916      	ldr	r1, [pc, #88]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d3e:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	490e      	ldr	r1, [pc, #56]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d52:	f000 f821 	bl	8004d98 <HAL_RCC_GetSysClockFreq>
 8004d56:	4602      	mov	r2, r0
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	490a      	ldr	r1, [pc, #40]	; (8004d8c <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	5ccb      	ldrb	r3, [r1, r3]
 8004d66:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6a:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d6e:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <HAL_RCC_ClockConfig+0x1c8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe f8a2 	bl	8002ebc <HAL_InitTick>

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40023c00 	.word	0x40023c00
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	08009250 	.word	0x08009250
 8004d90:	2000003c 	.word	0x2000003c
 8004d94:	20000040 	.word	0x20000040

08004d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d9c:	b090      	sub	sp, #64	; 0x40
 8004d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	637b      	str	r3, [r7, #52]	; 0x34
 8004da4:	2300      	movs	r3, #0
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da8:	2300      	movs	r3, #0
 8004daa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004db0:	4b59      	ldr	r3, [pc, #356]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 030c 	and.w	r3, r3, #12
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d00d      	beq.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	f200 80a1 	bhi.w	8004f04 <HAL_RCC_GetSysClockFreq+0x16c>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_RCC_GetSysClockFreq+0x34>
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d003      	beq.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dca:	e09b      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dcc:	4b53      	ldr	r3, [pc, #332]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8004dce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004dd0:	e09b      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dd2:	4b53      	ldr	r3, [pc, #332]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8004dd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004dd6:	e098      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dd8:	4b4f      	ldr	r3, [pc, #316]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004de2:	4b4d      	ldr	r3, [pc, #308]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d028      	beq.n	8004e40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dee:	4b4a      	ldr	r3, [pc, #296]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	099b      	lsrs	r3, r3, #6
 8004df4:	2200      	movs	r2, #0
 8004df6:	623b      	str	r3, [r7, #32]
 8004df8:	627a      	str	r2, [r7, #36]	; 0x24
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e00:	2100      	movs	r1, #0
 8004e02:	4b47      	ldr	r3, [pc, #284]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e04:	fb03 f201 	mul.w	r2, r3, r1
 8004e08:	2300      	movs	r3, #0
 8004e0a:	fb00 f303 	mul.w	r3, r0, r3
 8004e0e:	4413      	add	r3, r2
 8004e10:	4a43      	ldr	r2, [pc, #268]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e12:	fba0 1202 	umull	r1, r2, r0, r2
 8004e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e18:	460a      	mov	r2, r1
 8004e1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e1e:	4413      	add	r3, r2
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e24:	2200      	movs	r2, #0
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	61fa      	str	r2, [r7, #28]
 8004e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004e32:	f7fb ff29 	bl	8000c88 <__aeabi_uldivmod>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e3e:	e053      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e40:	4b35      	ldr	r3, [pc, #212]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	099b      	lsrs	r3, r3, #6
 8004e46:	2200      	movs	r2, #0
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	617a      	str	r2, [r7, #20]
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e52:	f04f 0b00 	mov.w	fp, #0
 8004e56:	4652      	mov	r2, sl
 8004e58:	465b      	mov	r3, fp
 8004e5a:	f04f 0000 	mov.w	r0, #0
 8004e5e:	f04f 0100 	mov.w	r1, #0
 8004e62:	0159      	lsls	r1, r3, #5
 8004e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e68:	0150      	lsls	r0, r2, #5
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	ebb2 080a 	subs.w	r8, r2, sl
 8004e72:	eb63 090b 	sbc.w	r9, r3, fp
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e8a:	ebb2 0408 	subs.w	r4, r2, r8
 8004e8e:	eb63 0509 	sbc.w	r5, r3, r9
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	00eb      	lsls	r3, r5, #3
 8004e9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ea0:	00e2      	lsls	r2, r4, #3
 8004ea2:	4614      	mov	r4, r2
 8004ea4:	461d      	mov	r5, r3
 8004ea6:	eb14 030a 	adds.w	r3, r4, sl
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	eb45 030b 	adc.w	r3, r5, fp
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	028b      	lsls	r3, r1, #10
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ec8:	4621      	mov	r1, r4
 8004eca:	028a      	lsls	r2, r1, #10
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	60fa      	str	r2, [r7, #12]
 8004ed8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004edc:	f7fb fed4 	bl	8000c88 <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	0c1b      	lsrs	r3, r3, #16
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f02:	e002      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f04:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8004f06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3740      	adds	r7, #64	; 0x40
 8004f10:	46bd      	mov	sp, r7
 8004f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	00f42400 	.word	0x00f42400
 8004f20:	00b71b00 	.word	0x00b71b00

08004f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f28:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	2000003c 	.word	0x2000003c

08004f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f40:	f7ff fff0 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f44:	4602      	mov	r2, r0
 8004f46:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	0a9b      	lsrs	r3, r3, #10
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	4903      	ldr	r1, [pc, #12]	; (8004f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f52:	5ccb      	ldrb	r3, [r1, r3]
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	08009260 	.word	0x08009260

08004f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f68:	f7ff ffdc 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	0b5b      	lsrs	r3, r3, #13
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	4903      	ldr	r1, [pc, #12]	; (8004f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f7a:	5ccb      	ldrb	r3, [r1, r3]
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40023800 	.word	0x40023800
 8004f88:	08009260 	.word	0x08009260

08004f8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e07b      	b.n	8005096 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d108      	bne.n	8004fb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fae:	d009      	beq.n	8004fc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	61da      	str	r2, [r3, #28]
 8004fb6:	e005      	b.n	8004fc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fd fbfe 	bl	80027e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ffa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005048:	ea42 0103 	orr.w	r1, r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	0c1b      	lsrs	r3, r3, #16
 8005062:	f003 0104 	and.w	r1, r3, #4
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	f003 0210 	and.w	r2, r3, #16
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005084:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e041      	b.n	8005134 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d106      	bne.n	80050ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7fd fc9d 	bl	8002a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2202      	movs	r2, #2
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3304      	adds	r3, #4
 80050da:	4619      	mov	r1, r3
 80050dc:	4610      	mov	r0, r2
 80050de:	f000 fd49 	bl	8005b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	d001      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e04e      	b.n	80051f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a23      	ldr	r2, [pc, #140]	; (8005200 <HAL_TIM_Base_Start_IT+0xc4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d022      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517e:	d01d      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <HAL_TIM_Base_Start_IT+0xc8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d018      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1e      	ldr	r2, [pc, #120]	; (8005208 <HAL_TIM_Base_Start_IT+0xcc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d013      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1c      	ldr	r2, [pc, #112]	; (800520c <HAL_TIM_Base_Start_IT+0xd0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00e      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1b      	ldr	r2, [pc, #108]	; (8005210 <HAL_TIM_Base_Start_IT+0xd4>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d009      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a19      	ldr	r2, [pc, #100]	; (8005214 <HAL_TIM_Base_Start_IT+0xd8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a18      	ldr	r2, [pc, #96]	; (8005218 <HAL_TIM_Base_Start_IT+0xdc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d111      	bne.n	80051e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b06      	cmp	r3, #6
 80051cc:	d010      	beq.n	80051f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0201 	orr.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051de:	e007      	b.n	80051f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40010000 	.word	0x40010000
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40000c00 	.word	0x40000c00
 8005210:	40010400 	.word	0x40010400
 8005214:	40014000 	.word	0x40014000
 8005218:	40001800 	.word	0x40001800

0800521c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e041      	b.n	80052b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fd fb14 	bl	8002870 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f000 fc8a 	bl	8005b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d109      	bne.n	80052e4 <HAL_TIM_PWM_Start_IT+0x28>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	bf14      	ite	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	2300      	moveq	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e022      	b.n	800532a <HAL_TIM_PWM_Start_IT+0x6e>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d109      	bne.n	80052fe <HAL_TIM_PWM_Start_IT+0x42>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	bf14      	ite	ne
 80052f6:	2301      	movne	r3, #1
 80052f8:	2300      	moveq	r3, #0
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	e015      	b.n	800532a <HAL_TIM_PWM_Start_IT+0x6e>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b08      	cmp	r3, #8
 8005302:	d109      	bne.n	8005318 <HAL_TIM_PWM_Start_IT+0x5c>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e008      	b.n	800532a <HAL_TIM_PWM_Start_IT+0x6e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	bf14      	ite	ne
 8005324:	2301      	movne	r3, #1
 8005326:	2300      	moveq	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e0c7      	b.n	80054c2 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d104      	bne.n	8005342 <HAL_TIM_PWM_Start_IT+0x86>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005340:	e013      	b.n	800536a <HAL_TIM_PWM_Start_IT+0xae>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b04      	cmp	r3, #4
 8005346:	d104      	bne.n	8005352 <HAL_TIM_PWM_Start_IT+0x96>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005350:	e00b      	b.n	800536a <HAL_TIM_PWM_Start_IT+0xae>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b08      	cmp	r3, #8
 8005356:	d104      	bne.n	8005362 <HAL_TIM_PWM_Start_IT+0xa6>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005360:	e003      	b.n	800536a <HAL_TIM_PWM_Start_IT+0xae>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2202      	movs	r2, #2
 8005366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b0c      	cmp	r3, #12
 800536e:	d841      	bhi.n	80053f4 <HAL_TIM_PWM_Start_IT+0x138>
 8005370:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005376:	bf00      	nop
 8005378:	080053ad 	.word	0x080053ad
 800537c:	080053f5 	.word	0x080053f5
 8005380:	080053f5 	.word	0x080053f5
 8005384:	080053f5 	.word	0x080053f5
 8005388:	080053bf 	.word	0x080053bf
 800538c:	080053f5 	.word	0x080053f5
 8005390:	080053f5 	.word	0x080053f5
 8005394:	080053f5 	.word	0x080053f5
 8005398:	080053d1 	.word	0x080053d1
 800539c:	080053f5 	.word	0x080053f5
 80053a0:	080053f5 	.word	0x080053f5
 80053a4:	080053f5 	.word	0x080053f5
 80053a8:	080053e3 	.word	0x080053e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0202 	orr.w	r2, r2, #2
 80053ba:	60da      	str	r2, [r3, #12]
      break;
 80053bc:	e01d      	b.n	80053fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0204 	orr.w	r2, r2, #4
 80053cc:	60da      	str	r2, [r3, #12]
      break;
 80053ce:	e014      	b.n	80053fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0208 	orr.w	r2, r2, #8
 80053de:	60da      	str	r2, [r3, #12]
      break;
 80053e0:	e00b      	b.n	80053fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0210 	orr.w	r2, r2, #16
 80053f0:	60da      	str	r2, [r3, #12]
      break;
 80053f2:	e002      	b.n	80053fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	73fb      	strb	r3, [r7, #15]
      break;
 80053f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d15f      	bne.n	80054c0 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2201      	movs	r2, #1
 8005406:	6839      	ldr	r1, [r7, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fe03 	bl	8006014 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a2e      	ldr	r2, [pc, #184]	; (80054cc <HAL_TIM_PWM_Start_IT+0x210>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d004      	beq.n	8005422 <HAL_TIM_PWM_Start_IT+0x166>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a2c      	ldr	r2, [pc, #176]	; (80054d0 <HAL_TIM_PWM_Start_IT+0x214>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d101      	bne.n	8005426 <HAL_TIM_PWM_Start_IT+0x16a>
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <HAL_TIM_PWM_Start_IT+0x16c>
 8005426:	2300      	movs	r3, #0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800543a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a22      	ldr	r2, [pc, #136]	; (80054cc <HAL_TIM_PWM_Start_IT+0x210>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d022      	beq.n	800548c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544e:	d01d      	beq.n	800548c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <HAL_TIM_PWM_Start_IT+0x218>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d018      	beq.n	800548c <HAL_TIM_PWM_Start_IT+0x1d0>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <HAL_TIM_PWM_Start_IT+0x21c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1c      	ldr	r2, [pc, #112]	; (80054dc <HAL_TIM_PWM_Start_IT+0x220>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00e      	beq.n	800548c <HAL_TIM_PWM_Start_IT+0x1d0>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a17      	ldr	r2, [pc, #92]	; (80054d0 <HAL_TIM_PWM_Start_IT+0x214>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a18      	ldr	r2, [pc, #96]	; (80054e0 <HAL_TIM_PWM_Start_IT+0x224>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a17      	ldr	r2, [pc, #92]	; (80054e4 <HAL_TIM_PWM_Start_IT+0x228>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d111      	bne.n	80054b0 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b06      	cmp	r3, #6
 800549c:	d010      	beq.n	80054c0 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0201 	orr.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ae:	e007      	b.n	80054c0 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40010400 	.word	0x40010400
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40000800 	.word	0x40000800
 80054dc:	40000c00 	.word	0x40000c00
 80054e0:	40014000 	.word	0x40014000
 80054e4:	40001800 	.word	0x40001800

080054e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e097      	b.n	800562c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d106      	bne.n	8005516 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7fd f9f9 	bl	8002908 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2202      	movs	r2, #2
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800552c:	f023 0307 	bic.w	r3, r3, #7
 8005530:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3304      	adds	r3, #4
 800553a:	4619      	mov	r1, r3
 800553c:	4610      	mov	r0, r2
 800553e:	f000 fb19 	bl	8005b74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556a:	f023 0303 	bic.w	r3, r3, #3
 800556e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	4313      	orrs	r3, r2
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005588:	f023 030c 	bic.w	r3, r3, #12
 800558c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	4313      	orrs	r3, r2
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	011a      	lsls	r2, r3, #4
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	031b      	lsls	r3, r3, #12
 80055b8:	4313      	orrs	r3, r2
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80055c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80055ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	4313      	orrs	r3, r2
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005644:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800564c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005654:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800565c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d110      	bne.n	8005686 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d102      	bne.n	8005670 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800566a:	7b7b      	ldrb	r3, [r7, #13]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d001      	beq.n	8005674 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e089      	b.n	8005788 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005684:	e031      	b.n	80056ea <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b04      	cmp	r3, #4
 800568a:	d110      	bne.n	80056ae <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800568c:	7bbb      	ldrb	r3, [r7, #14]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d102      	bne.n	8005698 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005692:	7b3b      	ldrb	r3, [r7, #12]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d001      	beq.n	800569c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e075      	b.n	8005788 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056ac:	e01d      	b.n	80056ea <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d108      	bne.n	80056c6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056b4:	7bbb      	ldrb	r3, [r7, #14]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d105      	bne.n	80056c6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056ba:	7b7b      	ldrb	r3, [r7, #13]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d102      	bne.n	80056c6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056c0:	7b3b      	ldrb	r3, [r7, #12]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d001      	beq.n	80056ca <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e05e      	b.n	8005788 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2202      	movs	r2, #2
 80056d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2202      	movs	r2, #2
 80056de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2202      	movs	r2, #2
 80056e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d010      	beq.n	8005718 <HAL_TIM_Encoder_Start_IT+0xe4>
 80056f6:	e01f      	b.n	8005738 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2201      	movs	r2, #1
 80056fe:	2100      	movs	r1, #0
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fc87 	bl	8006014 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0202 	orr.w	r2, r2, #2
 8005714:	60da      	str	r2, [r3, #12]
      break;
 8005716:	e02e      	b.n	8005776 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2201      	movs	r2, #1
 800571e:	2104      	movs	r1, #4
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fc77 	bl	8006014 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0204 	orr.w	r2, r2, #4
 8005734:	60da      	str	r2, [r3, #12]
      break;
 8005736:	e01e      	b.n	8005776 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2201      	movs	r2, #1
 800573e:	2100      	movs	r1, #0
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fc67 	bl	8006014 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2201      	movs	r2, #1
 800574c:	2104      	movs	r1, #4
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fc60 	bl	8006014 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0202 	orr.w	r2, r2, #2
 8005762:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0204 	orr.w	r2, r2, #4
 8005772:	60da      	str	r2, [r3, #12]
      break;
 8005774:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0201 	orr.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d122      	bne.n	80057ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d11b      	bne.n	80057ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0202 	mvn.w	r2, #2
 80057bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f9b0 	bl	8005b38 <HAL_TIM_IC_CaptureCallback>
 80057d8:	e005      	b.n	80057e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f9a2 	bl	8005b24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f9b3 	bl	8005b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d122      	bne.n	8005840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b04      	cmp	r3, #4
 8005806:	d11b      	bne.n	8005840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0204 	mvn.w	r2, #4
 8005810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2202      	movs	r2, #2
 8005816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f986 	bl	8005b38 <HAL_TIM_IC_CaptureCallback>
 800582c:	e005      	b.n	800583a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f978 	bl	8005b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f989 	bl	8005b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b08      	cmp	r3, #8
 800584c:	d122      	bne.n	8005894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b08      	cmp	r3, #8
 800585a:	d11b      	bne.n	8005894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0208 	mvn.w	r2, #8
 8005864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2204      	movs	r2, #4
 800586a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f95c 	bl	8005b38 <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f94e 	bl	8005b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f95f 	bl	8005b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0310 	and.w	r3, r3, #16
 800589e:	2b10      	cmp	r3, #16
 80058a0:	d122      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b10      	cmp	r3, #16
 80058ae:	d11b      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0210 	mvn.w	r2, #16
 80058b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2208      	movs	r2, #8
 80058be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f932 	bl	8005b38 <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f924 	bl	8005b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f935 	bl	8005b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d10e      	bne.n	8005914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b01      	cmp	r3, #1
 8005902:	d107      	bne.n	8005914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0201 	mvn.w	r2, #1
 800590c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fb fda6 	bl	8001460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591e:	2b80      	cmp	r3, #128	; 0x80
 8005920:	d10e      	bne.n	8005940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592c:	2b80      	cmp	r3, #128	; 0x80
 800592e:	d107      	bne.n	8005940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fc68 	bl	8006210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d10e      	bne.n	800596c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	d107      	bne.n	800596c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f8fa 	bl	8005b60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b20      	cmp	r3, #32
 8005978:	d10e      	bne.n	8005998 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b20      	cmp	r3, #32
 8005986:	d107      	bne.n	8005998 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f06f 0220 	mvn.w	r2, #32
 8005990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fc32 	bl	80061fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005998:	bf00      	nop
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e0ae      	b.n	8005b1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b0c      	cmp	r3, #12
 80059ca:	f200 809f 	bhi.w	8005b0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059ce:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	08005a09 	.word	0x08005a09
 80059d8:	08005b0d 	.word	0x08005b0d
 80059dc:	08005b0d 	.word	0x08005b0d
 80059e0:	08005b0d 	.word	0x08005b0d
 80059e4:	08005a49 	.word	0x08005a49
 80059e8:	08005b0d 	.word	0x08005b0d
 80059ec:	08005b0d 	.word	0x08005b0d
 80059f0:	08005b0d 	.word	0x08005b0d
 80059f4:	08005a8b 	.word	0x08005a8b
 80059f8:	08005b0d 	.word	0x08005b0d
 80059fc:	08005b0d 	.word	0x08005b0d
 8005a00:	08005b0d 	.word	0x08005b0d
 8005a04:	08005acb 	.word	0x08005acb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 f950 	bl	8005cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0208 	orr.w	r2, r2, #8
 8005a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0204 	bic.w	r2, r2, #4
 8005a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6999      	ldr	r1, [r3, #24]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	619a      	str	r2, [r3, #24]
      break;
 8005a46:	e064      	b.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f9a0 	bl	8005d94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6999      	ldr	r1, [r3, #24]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	021a      	lsls	r2, r3, #8
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	619a      	str	r2, [r3, #24]
      break;
 8005a88:	e043      	b.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 f9f5 	bl	8005e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69da      	ldr	r2, [r3, #28]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0208 	orr.w	r2, r2, #8
 8005aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0204 	bic.w	r2, r2, #4
 8005ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69d9      	ldr	r1, [r3, #28]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	61da      	str	r2, [r3, #28]
      break;
 8005ac8:	e023      	b.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fa49 	bl	8005f68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69d9      	ldr	r1, [r3, #28]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	021a      	lsls	r2, r3, #8
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	61da      	str	r2, [r3, #28]
      break;
 8005b0a:	e002      	b.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a40      	ldr	r2, [pc, #256]	; (8005c88 <TIM_Base_SetConfig+0x114>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d013      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b92:	d00f      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a3d      	ldr	r2, [pc, #244]	; (8005c8c <TIM_Base_SetConfig+0x118>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00b      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a3c      	ldr	r2, [pc, #240]	; (8005c90 <TIM_Base_SetConfig+0x11c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d007      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a3b      	ldr	r2, [pc, #236]	; (8005c94 <TIM_Base_SetConfig+0x120>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a3a      	ldr	r2, [pc, #232]	; (8005c98 <TIM_Base_SetConfig+0x124>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d108      	bne.n	8005bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a2f      	ldr	r2, [pc, #188]	; (8005c88 <TIM_Base_SetConfig+0x114>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d02b      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd4:	d027      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2c      	ldr	r2, [pc, #176]	; (8005c8c <TIM_Base_SetConfig+0x118>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d023      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2b      	ldr	r2, [pc, #172]	; (8005c90 <TIM_Base_SetConfig+0x11c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01f      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2a      	ldr	r2, [pc, #168]	; (8005c94 <TIM_Base_SetConfig+0x120>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d01b      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a29      	ldr	r2, [pc, #164]	; (8005c98 <TIM_Base_SetConfig+0x124>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d017      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a28      	ldr	r2, [pc, #160]	; (8005c9c <TIM_Base_SetConfig+0x128>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a27      	ldr	r2, [pc, #156]	; (8005ca0 <TIM_Base_SetConfig+0x12c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00f      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a26      	ldr	r2, [pc, #152]	; (8005ca4 <TIM_Base_SetConfig+0x130>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00b      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a25      	ldr	r2, [pc, #148]	; (8005ca8 <TIM_Base_SetConfig+0x134>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a24      	ldr	r2, [pc, #144]	; (8005cac <TIM_Base_SetConfig+0x138>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a23      	ldr	r2, [pc, #140]	; (8005cb0 <TIM_Base_SetConfig+0x13c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d108      	bne.n	8005c38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a0a      	ldr	r2, [pc, #40]	; (8005c88 <TIM_Base_SetConfig+0x114>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_Base_SetConfig+0xf8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a0c      	ldr	r2, [pc, #48]	; (8005c98 <TIM_Base_SetConfig+0x124>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d103      	bne.n	8005c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	615a      	str	r2, [r3, #20]
}
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	40010400 	.word	0x40010400
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40014400 	.word	0x40014400
 8005ca4:	40014800 	.word	0x40014800
 8005ca8:	40001800 	.word	0x40001800
 8005cac:	40001c00 	.word	0x40001c00
 8005cb0:	40002000 	.word	0x40002000

08005cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f023 0201 	bic.w	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0303 	bic.w	r3, r3, #3
 8005cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f023 0302 	bic.w	r3, r3, #2
 8005cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a20      	ldr	r2, [pc, #128]	; (8005d8c <TIM_OC1_SetConfig+0xd8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_OC1_SetConfig+0x64>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a1f      	ldr	r2, [pc, #124]	; (8005d90 <TIM_OC1_SetConfig+0xdc>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d10c      	bne.n	8005d32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f023 0308 	bic.w	r3, r3, #8
 8005d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f023 0304 	bic.w	r3, r3, #4
 8005d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a15      	ldr	r2, [pc, #84]	; (8005d8c <TIM_OC1_SetConfig+0xd8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d003      	beq.n	8005d42 <TIM_OC1_SetConfig+0x8e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a14      	ldr	r2, [pc, #80]	; (8005d90 <TIM_OC1_SetConfig+0xdc>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d111      	bne.n	8005d66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	621a      	str	r2, [r3, #32]
}
 8005d80:	bf00      	nop
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	40010000 	.word	0x40010000
 8005d90:	40010400 	.word	0x40010400

08005d94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f023 0210 	bic.w	r2, r3, #16
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f023 0320 	bic.w	r3, r3, #32
 8005dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a22      	ldr	r2, [pc, #136]	; (8005e78 <TIM_OC2_SetConfig+0xe4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d003      	beq.n	8005dfc <TIM_OC2_SetConfig+0x68>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <TIM_OC2_SetConfig+0xe8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d10d      	bne.n	8005e18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a17      	ldr	r2, [pc, #92]	; (8005e78 <TIM_OC2_SetConfig+0xe4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_OC2_SetConfig+0x94>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a16      	ldr	r2, [pc, #88]	; (8005e7c <TIM_OC2_SetConfig+0xe8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d113      	bne.n	8005e50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	621a      	str	r2, [r3, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40010400 	.word	0x40010400

08005e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0303 	bic.w	r3, r3, #3
 8005eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a21      	ldr	r2, [pc, #132]	; (8005f60 <TIM_OC3_SetConfig+0xe0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_OC3_SetConfig+0x66>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a20      	ldr	r2, [pc, #128]	; (8005f64 <TIM_OC3_SetConfig+0xe4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d10d      	bne.n	8005f02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a16      	ldr	r2, [pc, #88]	; (8005f60 <TIM_OC3_SetConfig+0xe0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d003      	beq.n	8005f12 <TIM_OC3_SetConfig+0x92>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a15      	ldr	r2, [pc, #84]	; (8005f64 <TIM_OC3_SetConfig+0xe4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d113      	bne.n	8005f3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	621a      	str	r2, [r3, #32]
}
 8005f54:	bf00      	nop
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	40010000 	.word	0x40010000
 8005f64:	40010400 	.word	0x40010400

08005f68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	031b      	lsls	r3, r3, #12
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a12      	ldr	r2, [pc, #72]	; (800600c <TIM_OC4_SetConfig+0xa4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d003      	beq.n	8005fd0 <TIM_OC4_SetConfig+0x68>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a11      	ldr	r2, [pc, #68]	; (8006010 <TIM_OC4_SetConfig+0xa8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d109      	bne.n	8005fe4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	019b      	lsls	r3, r3, #6
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	621a      	str	r2, [r3, #32]
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	40010000 	.word	0x40010000
 8006010:	40010400 	.word	0x40010400

08006014 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 031f 	and.w	r3, r3, #31
 8006026:	2201      	movs	r2, #1
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a1a      	ldr	r2, [r3, #32]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	43db      	mvns	r3, r3
 8006036:	401a      	ands	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a1a      	ldr	r2, [r3, #32]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	fa01 f303 	lsl.w	r3, r1, r3
 800604c:	431a      	orrs	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	621a      	str	r2, [r3, #32]
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006074:	2302      	movs	r3, #2
 8006076:	e05a      	b.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a21      	ldr	r2, [pc, #132]	; (800613c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d022      	beq.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c4:	d01d      	beq.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a1d      	ldr	r2, [pc, #116]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d018      	beq.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a1b      	ldr	r2, [pc, #108]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d013      	beq.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a1a      	ldr	r2, [pc, #104]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00e      	beq.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a18      	ldr	r2, [pc, #96]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d009      	beq.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a17      	ldr	r2, [pc, #92]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d004      	beq.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a15      	ldr	r2, [pc, #84]	; (8006154 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d10c      	bne.n	800611c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	4313      	orrs	r3, r2
 8006112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	40010000 	.word	0x40010000
 8006140:	40000400 	.word	0x40000400
 8006144:	40000800 	.word	0x40000800
 8006148:	40000c00 	.word	0x40000c00
 800614c:	40010400 	.word	0x40010400
 8006150:	40014000 	.word	0x40014000
 8006154:	40001800 	.word	0x40001800

08006158 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006170:	2302      	movs	r3, #2
 8006172:	e03d      	b.n	80061f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	4313      	orrs	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e03f      	b.n	80062b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fc fc8c 	bl	8002b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2224      	movs	r2, #36	; 0x24
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f829 	bl	80062c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800627c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695a      	ldr	r2, [r3, #20]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800628c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800629c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062c4:	b0c0      	sub	sp, #256	; 0x100
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062dc:	68d9      	ldr	r1, [r3, #12]
 80062de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	ea40 0301 	orr.w	r3, r0, r1
 80062e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ee:	689a      	ldr	r2, [r3, #8]
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	431a      	orrs	r2, r3
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	4313      	orrs	r3, r2
 8006308:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006318:	f021 010c 	bic.w	r1, r1, #12
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006326:	430b      	orrs	r3, r1
 8006328:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800632a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633a:	6999      	ldr	r1, [r3, #24]
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	ea40 0301 	orr.w	r3, r0, r1
 8006346:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	4b8f      	ldr	r3, [pc, #572]	; (800658c <UART_SetConfig+0x2cc>)
 8006350:	429a      	cmp	r2, r3
 8006352:	d005      	beq.n	8006360 <UART_SetConfig+0xa0>
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	4b8d      	ldr	r3, [pc, #564]	; (8006590 <UART_SetConfig+0x2d0>)
 800635c:	429a      	cmp	r2, r3
 800635e:	d104      	bne.n	800636a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006360:	f7fe fe00 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 8006364:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006368:	e003      	b.n	8006372 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800636a:	f7fe fde7 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 800636e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800637c:	f040 810c 	bne.w	8006598 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006384:	2200      	movs	r2, #0
 8006386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800638a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800638e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006392:	4622      	mov	r2, r4
 8006394:	462b      	mov	r3, r5
 8006396:	1891      	adds	r1, r2, r2
 8006398:	65b9      	str	r1, [r7, #88]	; 0x58
 800639a:	415b      	adcs	r3, r3
 800639c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800639e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063a2:	4621      	mov	r1, r4
 80063a4:	eb12 0801 	adds.w	r8, r2, r1
 80063a8:	4629      	mov	r1, r5
 80063aa:	eb43 0901 	adc.w	r9, r3, r1
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063c2:	4690      	mov	r8, r2
 80063c4:	4699      	mov	r9, r3
 80063c6:	4623      	mov	r3, r4
 80063c8:	eb18 0303 	adds.w	r3, r8, r3
 80063cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063d0:	462b      	mov	r3, r5
 80063d2:	eb49 0303 	adc.w	r3, r9, r3
 80063d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063ee:	460b      	mov	r3, r1
 80063f0:	18db      	adds	r3, r3, r3
 80063f2:	653b      	str	r3, [r7, #80]	; 0x50
 80063f4:	4613      	mov	r3, r2
 80063f6:	eb42 0303 	adc.w	r3, r2, r3
 80063fa:	657b      	str	r3, [r7, #84]	; 0x54
 80063fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006400:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006404:	f7fa fc40 	bl	8000c88 <__aeabi_uldivmod>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4b61      	ldr	r3, [pc, #388]	; (8006594 <UART_SetConfig+0x2d4>)
 800640e:	fba3 2302 	umull	r2, r3, r3, r2
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	011c      	lsls	r4, r3, #4
 8006416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800641a:	2200      	movs	r2, #0
 800641c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006420:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006424:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006428:	4642      	mov	r2, r8
 800642a:	464b      	mov	r3, r9
 800642c:	1891      	adds	r1, r2, r2
 800642e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006430:	415b      	adcs	r3, r3
 8006432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006434:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006438:	4641      	mov	r1, r8
 800643a:	eb12 0a01 	adds.w	sl, r2, r1
 800643e:	4649      	mov	r1, r9
 8006440:	eb43 0b01 	adc.w	fp, r3, r1
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006450:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006458:	4692      	mov	sl, r2
 800645a:	469b      	mov	fp, r3
 800645c:	4643      	mov	r3, r8
 800645e:	eb1a 0303 	adds.w	r3, sl, r3
 8006462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006466:	464b      	mov	r3, r9
 8006468:	eb4b 0303 	adc.w	r3, fp, r3
 800646c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800647c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006480:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006484:	460b      	mov	r3, r1
 8006486:	18db      	adds	r3, r3, r3
 8006488:	643b      	str	r3, [r7, #64]	; 0x40
 800648a:	4613      	mov	r3, r2
 800648c:	eb42 0303 	adc.w	r3, r2, r3
 8006490:	647b      	str	r3, [r7, #68]	; 0x44
 8006492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006496:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800649a:	f7fa fbf5 	bl	8000c88 <__aeabi_uldivmod>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4611      	mov	r1, r2
 80064a4:	4b3b      	ldr	r3, [pc, #236]	; (8006594 <UART_SetConfig+0x2d4>)
 80064a6:	fba3 2301 	umull	r2, r3, r3, r1
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	2264      	movs	r2, #100	; 0x64
 80064ae:	fb02 f303 	mul.w	r3, r2, r3
 80064b2:	1acb      	subs	r3, r1, r3
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064ba:	4b36      	ldr	r3, [pc, #216]	; (8006594 <UART_SetConfig+0x2d4>)
 80064bc:	fba3 2302 	umull	r2, r3, r3, r2
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064c8:	441c      	add	r4, r3
 80064ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064dc:	4642      	mov	r2, r8
 80064de:	464b      	mov	r3, r9
 80064e0:	1891      	adds	r1, r2, r2
 80064e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80064e4:	415b      	adcs	r3, r3
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064ec:	4641      	mov	r1, r8
 80064ee:	1851      	adds	r1, r2, r1
 80064f0:	6339      	str	r1, [r7, #48]	; 0x30
 80064f2:	4649      	mov	r1, r9
 80064f4:	414b      	adcs	r3, r1
 80064f6:	637b      	str	r3, [r7, #52]	; 0x34
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006504:	4659      	mov	r1, fp
 8006506:	00cb      	lsls	r3, r1, #3
 8006508:	4651      	mov	r1, sl
 800650a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800650e:	4651      	mov	r1, sl
 8006510:	00ca      	lsls	r2, r1, #3
 8006512:	4610      	mov	r0, r2
 8006514:	4619      	mov	r1, r3
 8006516:	4603      	mov	r3, r0
 8006518:	4642      	mov	r2, r8
 800651a:	189b      	adds	r3, r3, r2
 800651c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006520:	464b      	mov	r3, r9
 8006522:	460a      	mov	r2, r1
 8006524:	eb42 0303 	adc.w	r3, r2, r3
 8006528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006538:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800653c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006540:	460b      	mov	r3, r1
 8006542:	18db      	adds	r3, r3, r3
 8006544:	62bb      	str	r3, [r7, #40]	; 0x28
 8006546:	4613      	mov	r3, r2
 8006548:	eb42 0303 	adc.w	r3, r2, r3
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800654e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006552:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006556:	f7fa fb97 	bl	8000c88 <__aeabi_uldivmod>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <UART_SetConfig+0x2d4>)
 8006560:	fba3 1302 	umull	r1, r3, r3, r2
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	2164      	movs	r1, #100	; 0x64
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	3332      	adds	r3, #50	; 0x32
 8006572:	4a08      	ldr	r2, [pc, #32]	; (8006594 <UART_SetConfig+0x2d4>)
 8006574:	fba2 2303 	umull	r2, r3, r2, r3
 8006578:	095b      	lsrs	r3, r3, #5
 800657a:	f003 0207 	and.w	r2, r3, #7
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4422      	add	r2, r4
 8006586:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006588:	e105      	b.n	8006796 <UART_SetConfig+0x4d6>
 800658a:	bf00      	nop
 800658c:	40011000 	.word	0x40011000
 8006590:	40011400 	.word	0x40011400
 8006594:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800659c:	2200      	movs	r2, #0
 800659e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065aa:	4642      	mov	r2, r8
 80065ac:	464b      	mov	r3, r9
 80065ae:	1891      	adds	r1, r2, r2
 80065b0:	6239      	str	r1, [r7, #32]
 80065b2:	415b      	adcs	r3, r3
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
 80065b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065ba:	4641      	mov	r1, r8
 80065bc:	1854      	adds	r4, r2, r1
 80065be:	4649      	mov	r1, r9
 80065c0:	eb43 0501 	adc.w	r5, r3, r1
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	00eb      	lsls	r3, r5, #3
 80065ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065d2:	00e2      	lsls	r2, r4, #3
 80065d4:	4614      	mov	r4, r2
 80065d6:	461d      	mov	r5, r3
 80065d8:	4643      	mov	r3, r8
 80065da:	18e3      	adds	r3, r4, r3
 80065dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065e0:	464b      	mov	r3, r9
 80065e2:	eb45 0303 	adc.w	r3, r5, r3
 80065e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065fa:	f04f 0200 	mov.w	r2, #0
 80065fe:	f04f 0300 	mov.w	r3, #0
 8006602:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006606:	4629      	mov	r1, r5
 8006608:	008b      	lsls	r3, r1, #2
 800660a:	4621      	mov	r1, r4
 800660c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006610:	4621      	mov	r1, r4
 8006612:	008a      	lsls	r2, r1, #2
 8006614:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006618:	f7fa fb36 	bl	8000c88 <__aeabi_uldivmod>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4b60      	ldr	r3, [pc, #384]	; (80067a4 <UART_SetConfig+0x4e4>)
 8006622:	fba3 2302 	umull	r2, r3, r3, r2
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	011c      	lsls	r4, r3, #4
 800662a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800662e:	2200      	movs	r2, #0
 8006630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006634:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006638:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800663c:	4642      	mov	r2, r8
 800663e:	464b      	mov	r3, r9
 8006640:	1891      	adds	r1, r2, r2
 8006642:	61b9      	str	r1, [r7, #24]
 8006644:	415b      	adcs	r3, r3
 8006646:	61fb      	str	r3, [r7, #28]
 8006648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800664c:	4641      	mov	r1, r8
 800664e:	1851      	adds	r1, r2, r1
 8006650:	6139      	str	r1, [r7, #16]
 8006652:	4649      	mov	r1, r9
 8006654:	414b      	adcs	r3, r1
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006664:	4659      	mov	r1, fp
 8006666:	00cb      	lsls	r3, r1, #3
 8006668:	4651      	mov	r1, sl
 800666a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800666e:	4651      	mov	r1, sl
 8006670:	00ca      	lsls	r2, r1, #3
 8006672:	4610      	mov	r0, r2
 8006674:	4619      	mov	r1, r3
 8006676:	4603      	mov	r3, r0
 8006678:	4642      	mov	r2, r8
 800667a:	189b      	adds	r3, r3, r2
 800667c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006680:	464b      	mov	r3, r9
 8006682:	460a      	mov	r2, r1
 8006684:	eb42 0303 	adc.w	r3, r2, r3
 8006688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	67bb      	str	r3, [r7, #120]	; 0x78
 8006696:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	f04f 0300 	mov.w	r3, #0
 80066a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066a4:	4649      	mov	r1, r9
 80066a6:	008b      	lsls	r3, r1, #2
 80066a8:	4641      	mov	r1, r8
 80066aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ae:	4641      	mov	r1, r8
 80066b0:	008a      	lsls	r2, r1, #2
 80066b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066b6:	f7fa fae7 	bl	8000c88 <__aeabi_uldivmod>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4b39      	ldr	r3, [pc, #228]	; (80067a4 <UART_SetConfig+0x4e4>)
 80066c0:	fba3 1302 	umull	r1, r3, r3, r2
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	2164      	movs	r1, #100	; 0x64
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	3332      	adds	r3, #50	; 0x32
 80066d2:	4a34      	ldr	r2, [pc, #208]	; (80067a4 <UART_SetConfig+0x4e4>)
 80066d4:	fba2 2303 	umull	r2, r3, r2, r3
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066de:	441c      	add	r4, r3
 80066e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066e4:	2200      	movs	r2, #0
 80066e6:	673b      	str	r3, [r7, #112]	; 0x70
 80066e8:	677a      	str	r2, [r7, #116]	; 0x74
 80066ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066ee:	4642      	mov	r2, r8
 80066f0:	464b      	mov	r3, r9
 80066f2:	1891      	adds	r1, r2, r2
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	415b      	adcs	r3, r3
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066fe:	4641      	mov	r1, r8
 8006700:	1851      	adds	r1, r2, r1
 8006702:	6039      	str	r1, [r7, #0]
 8006704:	4649      	mov	r1, r9
 8006706:	414b      	adcs	r3, r1
 8006708:	607b      	str	r3, [r7, #4]
 800670a:	f04f 0200 	mov.w	r2, #0
 800670e:	f04f 0300 	mov.w	r3, #0
 8006712:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006716:	4659      	mov	r1, fp
 8006718:	00cb      	lsls	r3, r1, #3
 800671a:	4651      	mov	r1, sl
 800671c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006720:	4651      	mov	r1, sl
 8006722:	00ca      	lsls	r2, r1, #3
 8006724:	4610      	mov	r0, r2
 8006726:	4619      	mov	r1, r3
 8006728:	4603      	mov	r3, r0
 800672a:	4642      	mov	r2, r8
 800672c:	189b      	adds	r3, r3, r2
 800672e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006730:	464b      	mov	r3, r9
 8006732:	460a      	mov	r2, r1
 8006734:	eb42 0303 	adc.w	r3, r2, r3
 8006738:	66fb      	str	r3, [r7, #108]	; 0x6c
 800673a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	663b      	str	r3, [r7, #96]	; 0x60
 8006744:	667a      	str	r2, [r7, #100]	; 0x64
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006752:	4649      	mov	r1, r9
 8006754:	008b      	lsls	r3, r1, #2
 8006756:	4641      	mov	r1, r8
 8006758:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800675c:	4641      	mov	r1, r8
 800675e:	008a      	lsls	r2, r1, #2
 8006760:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006764:	f7fa fa90 	bl	8000c88 <__aeabi_uldivmod>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4b0d      	ldr	r3, [pc, #52]	; (80067a4 <UART_SetConfig+0x4e4>)
 800676e:	fba3 1302 	umull	r1, r3, r3, r2
 8006772:	095b      	lsrs	r3, r3, #5
 8006774:	2164      	movs	r1, #100	; 0x64
 8006776:	fb01 f303 	mul.w	r3, r1, r3
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	3332      	adds	r3, #50	; 0x32
 8006780:	4a08      	ldr	r2, [pc, #32]	; (80067a4 <UART_SetConfig+0x4e4>)
 8006782:	fba2 2303 	umull	r2, r3, r2, r3
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	f003 020f 	and.w	r2, r3, #15
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4422      	add	r2, r4
 8006794:	609a      	str	r2, [r3, #8]
}
 8006796:	bf00      	nop
 8006798:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800679c:	46bd      	mov	sp, r7
 800679e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067a2:	bf00      	nop
 80067a4:	51eb851f 	.word	0x51eb851f

080067a8 <__errno>:
 80067a8:	4b01      	ldr	r3, [pc, #4]	; (80067b0 <__errno+0x8>)
 80067aa:	6818      	ldr	r0, [r3, #0]
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20000048 	.word	0x20000048

080067b4 <__libc_init_array>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	4d0d      	ldr	r5, [pc, #52]	; (80067ec <__libc_init_array+0x38>)
 80067b8:	4c0d      	ldr	r4, [pc, #52]	; (80067f0 <__libc_init_array+0x3c>)
 80067ba:	1b64      	subs	r4, r4, r5
 80067bc:	10a4      	asrs	r4, r4, #2
 80067be:	2600      	movs	r6, #0
 80067c0:	42a6      	cmp	r6, r4
 80067c2:	d109      	bne.n	80067d8 <__libc_init_array+0x24>
 80067c4:	4d0b      	ldr	r5, [pc, #44]	; (80067f4 <__libc_init_array+0x40>)
 80067c6:	4c0c      	ldr	r4, [pc, #48]	; (80067f8 <__libc_init_array+0x44>)
 80067c8:	f002 fd36 	bl	8009238 <_init>
 80067cc:	1b64      	subs	r4, r4, r5
 80067ce:	10a4      	asrs	r4, r4, #2
 80067d0:	2600      	movs	r6, #0
 80067d2:	42a6      	cmp	r6, r4
 80067d4:	d105      	bne.n	80067e2 <__libc_init_array+0x2e>
 80067d6:	bd70      	pop	{r4, r5, r6, pc}
 80067d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067dc:	4798      	blx	r3
 80067de:	3601      	adds	r6, #1
 80067e0:	e7ee      	b.n	80067c0 <__libc_init_array+0xc>
 80067e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e6:	4798      	blx	r3
 80067e8:	3601      	adds	r6, #1
 80067ea:	e7f2      	b.n	80067d2 <__libc_init_array+0x1e>
 80067ec:	08009654 	.word	0x08009654
 80067f0:	08009654 	.word	0x08009654
 80067f4:	08009654 	.word	0x08009654
 80067f8:	08009658 	.word	0x08009658

080067fc <memset>:
 80067fc:	4402      	add	r2, r0
 80067fe:	4603      	mov	r3, r0
 8006800:	4293      	cmp	r3, r2
 8006802:	d100      	bne.n	8006806 <memset+0xa>
 8006804:	4770      	bx	lr
 8006806:	f803 1b01 	strb.w	r1, [r3], #1
 800680a:	e7f9      	b.n	8006800 <memset+0x4>

0800680c <__cvt>:
 800680c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006810:	ec55 4b10 	vmov	r4, r5, d0
 8006814:	2d00      	cmp	r5, #0
 8006816:	460e      	mov	r6, r1
 8006818:	4619      	mov	r1, r3
 800681a:	462b      	mov	r3, r5
 800681c:	bfbb      	ittet	lt
 800681e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006822:	461d      	movlt	r5, r3
 8006824:	2300      	movge	r3, #0
 8006826:	232d      	movlt	r3, #45	; 0x2d
 8006828:	700b      	strb	r3, [r1, #0]
 800682a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800682c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006830:	4691      	mov	r9, r2
 8006832:	f023 0820 	bic.w	r8, r3, #32
 8006836:	bfbc      	itt	lt
 8006838:	4622      	movlt	r2, r4
 800683a:	4614      	movlt	r4, r2
 800683c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006840:	d005      	beq.n	800684e <__cvt+0x42>
 8006842:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006846:	d100      	bne.n	800684a <__cvt+0x3e>
 8006848:	3601      	adds	r6, #1
 800684a:	2102      	movs	r1, #2
 800684c:	e000      	b.n	8006850 <__cvt+0x44>
 800684e:	2103      	movs	r1, #3
 8006850:	ab03      	add	r3, sp, #12
 8006852:	9301      	str	r3, [sp, #4]
 8006854:	ab02      	add	r3, sp, #8
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	ec45 4b10 	vmov	d0, r4, r5
 800685c:	4653      	mov	r3, sl
 800685e:	4632      	mov	r2, r6
 8006860:	f000 fcca 	bl	80071f8 <_dtoa_r>
 8006864:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006868:	4607      	mov	r7, r0
 800686a:	d102      	bne.n	8006872 <__cvt+0x66>
 800686c:	f019 0f01 	tst.w	r9, #1
 8006870:	d022      	beq.n	80068b8 <__cvt+0xac>
 8006872:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006876:	eb07 0906 	add.w	r9, r7, r6
 800687a:	d110      	bne.n	800689e <__cvt+0x92>
 800687c:	783b      	ldrb	r3, [r7, #0]
 800687e:	2b30      	cmp	r3, #48	; 0x30
 8006880:	d10a      	bne.n	8006898 <__cvt+0x8c>
 8006882:	2200      	movs	r2, #0
 8006884:	2300      	movs	r3, #0
 8006886:	4620      	mov	r0, r4
 8006888:	4629      	mov	r1, r5
 800688a:	f7fa f91d 	bl	8000ac8 <__aeabi_dcmpeq>
 800688e:	b918      	cbnz	r0, 8006898 <__cvt+0x8c>
 8006890:	f1c6 0601 	rsb	r6, r6, #1
 8006894:	f8ca 6000 	str.w	r6, [sl]
 8006898:	f8da 3000 	ldr.w	r3, [sl]
 800689c:	4499      	add	r9, r3
 800689e:	2200      	movs	r2, #0
 80068a0:	2300      	movs	r3, #0
 80068a2:	4620      	mov	r0, r4
 80068a4:	4629      	mov	r1, r5
 80068a6:	f7fa f90f 	bl	8000ac8 <__aeabi_dcmpeq>
 80068aa:	b108      	cbz	r0, 80068b0 <__cvt+0xa4>
 80068ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80068b0:	2230      	movs	r2, #48	; 0x30
 80068b2:	9b03      	ldr	r3, [sp, #12]
 80068b4:	454b      	cmp	r3, r9
 80068b6:	d307      	bcc.n	80068c8 <__cvt+0xbc>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068bc:	1bdb      	subs	r3, r3, r7
 80068be:	4638      	mov	r0, r7
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	b004      	add	sp, #16
 80068c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c8:	1c59      	adds	r1, r3, #1
 80068ca:	9103      	str	r1, [sp, #12]
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	e7f0      	b.n	80068b2 <__cvt+0xa6>

080068d0 <__exponent>:
 80068d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068d2:	4603      	mov	r3, r0
 80068d4:	2900      	cmp	r1, #0
 80068d6:	bfb8      	it	lt
 80068d8:	4249      	neglt	r1, r1
 80068da:	f803 2b02 	strb.w	r2, [r3], #2
 80068de:	bfb4      	ite	lt
 80068e0:	222d      	movlt	r2, #45	; 0x2d
 80068e2:	222b      	movge	r2, #43	; 0x2b
 80068e4:	2909      	cmp	r1, #9
 80068e6:	7042      	strb	r2, [r0, #1]
 80068e8:	dd2a      	ble.n	8006940 <__exponent+0x70>
 80068ea:	f10d 0407 	add.w	r4, sp, #7
 80068ee:	46a4      	mov	ip, r4
 80068f0:	270a      	movs	r7, #10
 80068f2:	46a6      	mov	lr, r4
 80068f4:	460a      	mov	r2, r1
 80068f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80068fa:	fb07 1516 	mls	r5, r7, r6, r1
 80068fe:	3530      	adds	r5, #48	; 0x30
 8006900:	2a63      	cmp	r2, #99	; 0x63
 8006902:	f104 34ff 	add.w	r4, r4, #4294967295
 8006906:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800690a:	4631      	mov	r1, r6
 800690c:	dcf1      	bgt.n	80068f2 <__exponent+0x22>
 800690e:	3130      	adds	r1, #48	; 0x30
 8006910:	f1ae 0502 	sub.w	r5, lr, #2
 8006914:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006918:	1c44      	adds	r4, r0, #1
 800691a:	4629      	mov	r1, r5
 800691c:	4561      	cmp	r1, ip
 800691e:	d30a      	bcc.n	8006936 <__exponent+0x66>
 8006920:	f10d 0209 	add.w	r2, sp, #9
 8006924:	eba2 020e 	sub.w	r2, r2, lr
 8006928:	4565      	cmp	r5, ip
 800692a:	bf88      	it	hi
 800692c:	2200      	movhi	r2, #0
 800692e:	4413      	add	r3, r2
 8006930:	1a18      	subs	r0, r3, r0
 8006932:	b003      	add	sp, #12
 8006934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800693a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800693e:	e7ed      	b.n	800691c <__exponent+0x4c>
 8006940:	2330      	movs	r3, #48	; 0x30
 8006942:	3130      	adds	r1, #48	; 0x30
 8006944:	7083      	strb	r3, [r0, #2]
 8006946:	70c1      	strb	r1, [r0, #3]
 8006948:	1d03      	adds	r3, r0, #4
 800694a:	e7f1      	b.n	8006930 <__exponent+0x60>

0800694c <_printf_float>:
 800694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006950:	ed2d 8b02 	vpush	{d8}
 8006954:	b08d      	sub	sp, #52	; 0x34
 8006956:	460c      	mov	r4, r1
 8006958:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800695c:	4616      	mov	r6, r2
 800695e:	461f      	mov	r7, r3
 8006960:	4605      	mov	r5, r0
 8006962:	f001 fa37 	bl	8007dd4 <_localeconv_r>
 8006966:	f8d0 a000 	ldr.w	sl, [r0]
 800696a:	4650      	mov	r0, sl
 800696c:	f7f9 fc30 	bl	80001d0 <strlen>
 8006970:	2300      	movs	r3, #0
 8006972:	930a      	str	r3, [sp, #40]	; 0x28
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	9305      	str	r3, [sp, #20]
 8006978:	f8d8 3000 	ldr.w	r3, [r8]
 800697c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006980:	3307      	adds	r3, #7
 8006982:	f023 0307 	bic.w	r3, r3, #7
 8006986:	f103 0208 	add.w	r2, r3, #8
 800698a:	f8c8 2000 	str.w	r2, [r8]
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006996:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800699a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800699e:	9307      	str	r3, [sp, #28]
 80069a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80069a4:	ee08 0a10 	vmov	s16, r0
 80069a8:	4b9f      	ldr	r3, [pc, #636]	; (8006c28 <_printf_float+0x2dc>)
 80069aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ae:	f04f 32ff 	mov.w	r2, #4294967295
 80069b2:	f7fa f8bb 	bl	8000b2c <__aeabi_dcmpun>
 80069b6:	bb88      	cbnz	r0, 8006a1c <_printf_float+0xd0>
 80069b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069bc:	4b9a      	ldr	r3, [pc, #616]	; (8006c28 <_printf_float+0x2dc>)
 80069be:	f04f 32ff 	mov.w	r2, #4294967295
 80069c2:	f7fa f895 	bl	8000af0 <__aeabi_dcmple>
 80069c6:	bb48      	cbnz	r0, 8006a1c <_printf_float+0xd0>
 80069c8:	2200      	movs	r2, #0
 80069ca:	2300      	movs	r3, #0
 80069cc:	4640      	mov	r0, r8
 80069ce:	4649      	mov	r1, r9
 80069d0:	f7fa f884 	bl	8000adc <__aeabi_dcmplt>
 80069d4:	b110      	cbz	r0, 80069dc <_printf_float+0x90>
 80069d6:	232d      	movs	r3, #45	; 0x2d
 80069d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069dc:	4b93      	ldr	r3, [pc, #588]	; (8006c2c <_printf_float+0x2e0>)
 80069de:	4894      	ldr	r0, [pc, #592]	; (8006c30 <_printf_float+0x2e4>)
 80069e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80069e4:	bf94      	ite	ls
 80069e6:	4698      	movls	r8, r3
 80069e8:	4680      	movhi	r8, r0
 80069ea:	2303      	movs	r3, #3
 80069ec:	6123      	str	r3, [r4, #16]
 80069ee:	9b05      	ldr	r3, [sp, #20]
 80069f0:	f023 0204 	bic.w	r2, r3, #4
 80069f4:	6022      	str	r2, [r4, #0]
 80069f6:	f04f 0900 	mov.w	r9, #0
 80069fa:	9700      	str	r7, [sp, #0]
 80069fc:	4633      	mov	r3, r6
 80069fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a00:	4621      	mov	r1, r4
 8006a02:	4628      	mov	r0, r5
 8006a04:	f000 f9d8 	bl	8006db8 <_printf_common>
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f040 8090 	bne.w	8006b2e <_printf_float+0x1e2>
 8006a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a12:	b00d      	add	sp, #52	; 0x34
 8006a14:	ecbd 8b02 	vpop	{d8}
 8006a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	464b      	mov	r3, r9
 8006a20:	4640      	mov	r0, r8
 8006a22:	4649      	mov	r1, r9
 8006a24:	f7fa f882 	bl	8000b2c <__aeabi_dcmpun>
 8006a28:	b140      	cbz	r0, 8006a3c <_printf_float+0xf0>
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	bfbc      	itt	lt
 8006a30:	232d      	movlt	r3, #45	; 0x2d
 8006a32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a36:	487f      	ldr	r0, [pc, #508]	; (8006c34 <_printf_float+0x2e8>)
 8006a38:	4b7f      	ldr	r3, [pc, #508]	; (8006c38 <_printf_float+0x2ec>)
 8006a3a:	e7d1      	b.n	80069e0 <_printf_float+0x94>
 8006a3c:	6863      	ldr	r3, [r4, #4]
 8006a3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a42:	9206      	str	r2, [sp, #24]
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	d13f      	bne.n	8006ac8 <_printf_float+0x17c>
 8006a48:	2306      	movs	r3, #6
 8006a4a:	6063      	str	r3, [r4, #4]
 8006a4c:	9b05      	ldr	r3, [sp, #20]
 8006a4e:	6861      	ldr	r1, [r4, #4]
 8006a50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a54:	2300      	movs	r3, #0
 8006a56:	9303      	str	r3, [sp, #12]
 8006a58:	ab0a      	add	r3, sp, #40	; 0x28
 8006a5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a5e:	ab09      	add	r3, sp, #36	; 0x24
 8006a60:	ec49 8b10 	vmov	d0, r8, r9
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	6022      	str	r2, [r4, #0]
 8006a68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	f7ff fecd 	bl	800680c <__cvt>
 8006a72:	9b06      	ldr	r3, [sp, #24]
 8006a74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a76:	2b47      	cmp	r3, #71	; 0x47
 8006a78:	4680      	mov	r8, r0
 8006a7a:	d108      	bne.n	8006a8e <_printf_float+0x142>
 8006a7c:	1cc8      	adds	r0, r1, #3
 8006a7e:	db02      	blt.n	8006a86 <_printf_float+0x13a>
 8006a80:	6863      	ldr	r3, [r4, #4]
 8006a82:	4299      	cmp	r1, r3
 8006a84:	dd41      	ble.n	8006b0a <_printf_float+0x1be>
 8006a86:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a8a:	fa5f fb8b 	uxtb.w	fp, fp
 8006a8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a92:	d820      	bhi.n	8006ad6 <_printf_float+0x18a>
 8006a94:	3901      	subs	r1, #1
 8006a96:	465a      	mov	r2, fp
 8006a98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a9c:	9109      	str	r1, [sp, #36]	; 0x24
 8006a9e:	f7ff ff17 	bl	80068d0 <__exponent>
 8006aa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006aa4:	1813      	adds	r3, r2, r0
 8006aa6:	2a01      	cmp	r2, #1
 8006aa8:	4681      	mov	r9, r0
 8006aaa:	6123      	str	r3, [r4, #16]
 8006aac:	dc02      	bgt.n	8006ab4 <_printf_float+0x168>
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	07d2      	lsls	r2, r2, #31
 8006ab2:	d501      	bpl.n	8006ab8 <_printf_float+0x16c>
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	6123      	str	r3, [r4, #16]
 8006ab8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d09c      	beq.n	80069fa <_printf_float+0xae>
 8006ac0:	232d      	movs	r3, #45	; 0x2d
 8006ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ac6:	e798      	b.n	80069fa <_printf_float+0xae>
 8006ac8:	9a06      	ldr	r2, [sp, #24]
 8006aca:	2a47      	cmp	r2, #71	; 0x47
 8006acc:	d1be      	bne.n	8006a4c <_printf_float+0x100>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1bc      	bne.n	8006a4c <_printf_float+0x100>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e7b9      	b.n	8006a4a <_printf_float+0xfe>
 8006ad6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ada:	d118      	bne.n	8006b0e <_printf_float+0x1c2>
 8006adc:	2900      	cmp	r1, #0
 8006ade:	6863      	ldr	r3, [r4, #4]
 8006ae0:	dd0b      	ble.n	8006afa <_printf_float+0x1ae>
 8006ae2:	6121      	str	r1, [r4, #16]
 8006ae4:	b913      	cbnz	r3, 8006aec <_printf_float+0x1a0>
 8006ae6:	6822      	ldr	r2, [r4, #0]
 8006ae8:	07d0      	lsls	r0, r2, #31
 8006aea:	d502      	bpl.n	8006af2 <_printf_float+0x1a6>
 8006aec:	3301      	adds	r3, #1
 8006aee:	440b      	add	r3, r1
 8006af0:	6123      	str	r3, [r4, #16]
 8006af2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006af4:	f04f 0900 	mov.w	r9, #0
 8006af8:	e7de      	b.n	8006ab8 <_printf_float+0x16c>
 8006afa:	b913      	cbnz	r3, 8006b02 <_printf_float+0x1b6>
 8006afc:	6822      	ldr	r2, [r4, #0]
 8006afe:	07d2      	lsls	r2, r2, #31
 8006b00:	d501      	bpl.n	8006b06 <_printf_float+0x1ba>
 8006b02:	3302      	adds	r3, #2
 8006b04:	e7f4      	b.n	8006af0 <_printf_float+0x1a4>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e7f2      	b.n	8006af0 <_printf_float+0x1a4>
 8006b0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b10:	4299      	cmp	r1, r3
 8006b12:	db05      	blt.n	8006b20 <_printf_float+0x1d4>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	6121      	str	r1, [r4, #16]
 8006b18:	07d8      	lsls	r0, r3, #31
 8006b1a:	d5ea      	bpl.n	8006af2 <_printf_float+0x1a6>
 8006b1c:	1c4b      	adds	r3, r1, #1
 8006b1e:	e7e7      	b.n	8006af0 <_printf_float+0x1a4>
 8006b20:	2900      	cmp	r1, #0
 8006b22:	bfd4      	ite	le
 8006b24:	f1c1 0202 	rsble	r2, r1, #2
 8006b28:	2201      	movgt	r2, #1
 8006b2a:	4413      	add	r3, r2
 8006b2c:	e7e0      	b.n	8006af0 <_printf_float+0x1a4>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	055a      	lsls	r2, r3, #21
 8006b32:	d407      	bmi.n	8006b44 <_printf_float+0x1f8>
 8006b34:	6923      	ldr	r3, [r4, #16]
 8006b36:	4642      	mov	r2, r8
 8006b38:	4631      	mov	r1, r6
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	47b8      	blx	r7
 8006b3e:	3001      	adds	r0, #1
 8006b40:	d12c      	bne.n	8006b9c <_printf_float+0x250>
 8006b42:	e764      	b.n	8006a0e <_printf_float+0xc2>
 8006b44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b48:	f240 80e0 	bls.w	8006d0c <_printf_float+0x3c0>
 8006b4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b50:	2200      	movs	r2, #0
 8006b52:	2300      	movs	r3, #0
 8006b54:	f7f9 ffb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d034      	beq.n	8006bc6 <_printf_float+0x27a>
 8006b5c:	4a37      	ldr	r2, [pc, #220]	; (8006c3c <_printf_float+0x2f0>)
 8006b5e:	2301      	movs	r3, #1
 8006b60:	4631      	mov	r1, r6
 8006b62:	4628      	mov	r0, r5
 8006b64:	47b8      	blx	r7
 8006b66:	3001      	adds	r0, #1
 8006b68:	f43f af51 	beq.w	8006a0e <_printf_float+0xc2>
 8006b6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b70:	429a      	cmp	r2, r3
 8006b72:	db02      	blt.n	8006b7a <_printf_float+0x22e>
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	07d8      	lsls	r0, r3, #31
 8006b78:	d510      	bpl.n	8006b9c <_printf_float+0x250>
 8006b7a:	ee18 3a10 	vmov	r3, s16
 8006b7e:	4652      	mov	r2, sl
 8006b80:	4631      	mov	r1, r6
 8006b82:	4628      	mov	r0, r5
 8006b84:	47b8      	blx	r7
 8006b86:	3001      	adds	r0, #1
 8006b88:	f43f af41 	beq.w	8006a0e <_printf_float+0xc2>
 8006b8c:	f04f 0800 	mov.w	r8, #0
 8006b90:	f104 091a 	add.w	r9, r4, #26
 8006b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b96:	3b01      	subs	r3, #1
 8006b98:	4543      	cmp	r3, r8
 8006b9a:	dc09      	bgt.n	8006bb0 <_printf_float+0x264>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	079b      	lsls	r3, r3, #30
 8006ba0:	f100 8105 	bmi.w	8006dae <_printf_float+0x462>
 8006ba4:	68e0      	ldr	r0, [r4, #12]
 8006ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ba8:	4298      	cmp	r0, r3
 8006baa:	bfb8      	it	lt
 8006bac:	4618      	movlt	r0, r3
 8006bae:	e730      	b.n	8006a12 <_printf_float+0xc6>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	464a      	mov	r2, r9
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	47b8      	blx	r7
 8006bba:	3001      	adds	r0, #1
 8006bbc:	f43f af27 	beq.w	8006a0e <_printf_float+0xc2>
 8006bc0:	f108 0801 	add.w	r8, r8, #1
 8006bc4:	e7e6      	b.n	8006b94 <_printf_float+0x248>
 8006bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	dc39      	bgt.n	8006c40 <_printf_float+0x2f4>
 8006bcc:	4a1b      	ldr	r2, [pc, #108]	; (8006c3c <_printf_float+0x2f0>)
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4631      	mov	r1, r6
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	47b8      	blx	r7
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	f43f af19 	beq.w	8006a0e <_printf_float+0xc2>
 8006bdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006be0:	4313      	orrs	r3, r2
 8006be2:	d102      	bne.n	8006bea <_printf_float+0x29e>
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	07d9      	lsls	r1, r3, #31
 8006be8:	d5d8      	bpl.n	8006b9c <_printf_float+0x250>
 8006bea:	ee18 3a10 	vmov	r3, s16
 8006bee:	4652      	mov	r2, sl
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	47b8      	blx	r7
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	f43f af09 	beq.w	8006a0e <_printf_float+0xc2>
 8006bfc:	f04f 0900 	mov.w	r9, #0
 8006c00:	f104 0a1a 	add.w	sl, r4, #26
 8006c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c06:	425b      	negs	r3, r3
 8006c08:	454b      	cmp	r3, r9
 8006c0a:	dc01      	bgt.n	8006c10 <_printf_float+0x2c4>
 8006c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c0e:	e792      	b.n	8006b36 <_printf_float+0x1ea>
 8006c10:	2301      	movs	r3, #1
 8006c12:	4652      	mov	r2, sl
 8006c14:	4631      	mov	r1, r6
 8006c16:	4628      	mov	r0, r5
 8006c18:	47b8      	blx	r7
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	f43f aef7 	beq.w	8006a0e <_printf_float+0xc2>
 8006c20:	f109 0901 	add.w	r9, r9, #1
 8006c24:	e7ee      	b.n	8006c04 <_printf_float+0x2b8>
 8006c26:	bf00      	nop
 8006c28:	7fefffff 	.word	0x7fefffff
 8006c2c:	08009274 	.word	0x08009274
 8006c30:	08009278 	.word	0x08009278
 8006c34:	08009280 	.word	0x08009280
 8006c38:	0800927c 	.word	0x0800927c
 8006c3c:	08009284 	.word	0x08009284
 8006c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c44:	429a      	cmp	r2, r3
 8006c46:	bfa8      	it	ge
 8006c48:	461a      	movge	r2, r3
 8006c4a:	2a00      	cmp	r2, #0
 8006c4c:	4691      	mov	r9, r2
 8006c4e:	dc37      	bgt.n	8006cc0 <_printf_float+0x374>
 8006c50:	f04f 0b00 	mov.w	fp, #0
 8006c54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c58:	f104 021a 	add.w	r2, r4, #26
 8006c5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c5e:	9305      	str	r3, [sp, #20]
 8006c60:	eba3 0309 	sub.w	r3, r3, r9
 8006c64:	455b      	cmp	r3, fp
 8006c66:	dc33      	bgt.n	8006cd0 <_printf_float+0x384>
 8006c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	db3b      	blt.n	8006ce8 <_printf_float+0x39c>
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	07da      	lsls	r2, r3, #31
 8006c74:	d438      	bmi.n	8006ce8 <_printf_float+0x39c>
 8006c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c78:	9a05      	ldr	r2, [sp, #20]
 8006c7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c7c:	1a9a      	subs	r2, r3, r2
 8006c7e:	eba3 0901 	sub.w	r9, r3, r1
 8006c82:	4591      	cmp	r9, r2
 8006c84:	bfa8      	it	ge
 8006c86:	4691      	movge	r9, r2
 8006c88:	f1b9 0f00 	cmp.w	r9, #0
 8006c8c:	dc35      	bgt.n	8006cfa <_printf_float+0x3ae>
 8006c8e:	f04f 0800 	mov.w	r8, #0
 8006c92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c96:	f104 0a1a 	add.w	sl, r4, #26
 8006c9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c9e:	1a9b      	subs	r3, r3, r2
 8006ca0:	eba3 0309 	sub.w	r3, r3, r9
 8006ca4:	4543      	cmp	r3, r8
 8006ca6:	f77f af79 	ble.w	8006b9c <_printf_float+0x250>
 8006caa:	2301      	movs	r3, #1
 8006cac:	4652      	mov	r2, sl
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	f43f aeaa 	beq.w	8006a0e <_printf_float+0xc2>
 8006cba:	f108 0801 	add.w	r8, r8, #1
 8006cbe:	e7ec      	b.n	8006c9a <_printf_float+0x34e>
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	4631      	mov	r1, r6
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	47b8      	blx	r7
 8006cca:	3001      	adds	r0, #1
 8006ccc:	d1c0      	bne.n	8006c50 <_printf_float+0x304>
 8006cce:	e69e      	b.n	8006a0e <_printf_float+0xc2>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	9205      	str	r2, [sp, #20]
 8006cd8:	47b8      	blx	r7
 8006cda:	3001      	adds	r0, #1
 8006cdc:	f43f ae97 	beq.w	8006a0e <_printf_float+0xc2>
 8006ce0:	9a05      	ldr	r2, [sp, #20]
 8006ce2:	f10b 0b01 	add.w	fp, fp, #1
 8006ce6:	e7b9      	b.n	8006c5c <_printf_float+0x310>
 8006ce8:	ee18 3a10 	vmov	r3, s16
 8006cec:	4652      	mov	r2, sl
 8006cee:	4631      	mov	r1, r6
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	47b8      	blx	r7
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d1be      	bne.n	8006c76 <_printf_float+0x32a>
 8006cf8:	e689      	b.n	8006a0e <_printf_float+0xc2>
 8006cfa:	9a05      	ldr	r2, [sp, #20]
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	4442      	add	r2, r8
 8006d00:	4631      	mov	r1, r6
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b8      	blx	r7
 8006d06:	3001      	adds	r0, #1
 8006d08:	d1c1      	bne.n	8006c8e <_printf_float+0x342>
 8006d0a:	e680      	b.n	8006a0e <_printf_float+0xc2>
 8006d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d0e:	2a01      	cmp	r2, #1
 8006d10:	dc01      	bgt.n	8006d16 <_printf_float+0x3ca>
 8006d12:	07db      	lsls	r3, r3, #31
 8006d14:	d538      	bpl.n	8006d88 <_printf_float+0x43c>
 8006d16:	2301      	movs	r3, #1
 8006d18:	4642      	mov	r2, r8
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	47b8      	blx	r7
 8006d20:	3001      	adds	r0, #1
 8006d22:	f43f ae74 	beq.w	8006a0e <_printf_float+0xc2>
 8006d26:	ee18 3a10 	vmov	r3, s16
 8006d2a:	4652      	mov	r2, sl
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4628      	mov	r0, r5
 8006d30:	47b8      	blx	r7
 8006d32:	3001      	adds	r0, #1
 8006d34:	f43f ae6b 	beq.w	8006a0e <_printf_float+0xc2>
 8006d38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f7f9 fec2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d44:	b9d8      	cbnz	r0, 8006d7e <_printf_float+0x432>
 8006d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d48:	f108 0201 	add.w	r2, r8, #1
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	4631      	mov	r1, r6
 8006d50:	4628      	mov	r0, r5
 8006d52:	47b8      	blx	r7
 8006d54:	3001      	adds	r0, #1
 8006d56:	d10e      	bne.n	8006d76 <_printf_float+0x42a>
 8006d58:	e659      	b.n	8006a0e <_printf_float+0xc2>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4652      	mov	r2, sl
 8006d5e:	4631      	mov	r1, r6
 8006d60:	4628      	mov	r0, r5
 8006d62:	47b8      	blx	r7
 8006d64:	3001      	adds	r0, #1
 8006d66:	f43f ae52 	beq.w	8006a0e <_printf_float+0xc2>
 8006d6a:	f108 0801 	add.w	r8, r8, #1
 8006d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d70:	3b01      	subs	r3, #1
 8006d72:	4543      	cmp	r3, r8
 8006d74:	dcf1      	bgt.n	8006d5a <_printf_float+0x40e>
 8006d76:	464b      	mov	r3, r9
 8006d78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d7c:	e6dc      	b.n	8006b38 <_printf_float+0x1ec>
 8006d7e:	f04f 0800 	mov.w	r8, #0
 8006d82:	f104 0a1a 	add.w	sl, r4, #26
 8006d86:	e7f2      	b.n	8006d6e <_printf_float+0x422>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	4642      	mov	r2, r8
 8006d8c:	e7df      	b.n	8006d4e <_printf_float+0x402>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	464a      	mov	r2, r9
 8006d92:	4631      	mov	r1, r6
 8006d94:	4628      	mov	r0, r5
 8006d96:	47b8      	blx	r7
 8006d98:	3001      	adds	r0, #1
 8006d9a:	f43f ae38 	beq.w	8006a0e <_printf_float+0xc2>
 8006d9e:	f108 0801 	add.w	r8, r8, #1
 8006da2:	68e3      	ldr	r3, [r4, #12]
 8006da4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006da6:	1a5b      	subs	r3, r3, r1
 8006da8:	4543      	cmp	r3, r8
 8006daa:	dcf0      	bgt.n	8006d8e <_printf_float+0x442>
 8006dac:	e6fa      	b.n	8006ba4 <_printf_float+0x258>
 8006dae:	f04f 0800 	mov.w	r8, #0
 8006db2:	f104 0919 	add.w	r9, r4, #25
 8006db6:	e7f4      	b.n	8006da2 <_printf_float+0x456>

08006db8 <_printf_common>:
 8006db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	4699      	mov	r9, r3
 8006dc0:	688a      	ldr	r2, [r1, #8]
 8006dc2:	690b      	ldr	r3, [r1, #16]
 8006dc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	bfb8      	it	lt
 8006dcc:	4613      	movlt	r3, r2
 8006dce:	6033      	str	r3, [r6, #0]
 8006dd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006dd4:	4607      	mov	r7, r0
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	b10a      	cbz	r2, 8006dde <_printf_common+0x26>
 8006dda:	3301      	adds	r3, #1
 8006ddc:	6033      	str	r3, [r6, #0]
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	0699      	lsls	r1, r3, #26
 8006de2:	bf42      	ittt	mi
 8006de4:	6833      	ldrmi	r3, [r6, #0]
 8006de6:	3302      	addmi	r3, #2
 8006de8:	6033      	strmi	r3, [r6, #0]
 8006dea:	6825      	ldr	r5, [r4, #0]
 8006dec:	f015 0506 	ands.w	r5, r5, #6
 8006df0:	d106      	bne.n	8006e00 <_printf_common+0x48>
 8006df2:	f104 0a19 	add.w	sl, r4, #25
 8006df6:	68e3      	ldr	r3, [r4, #12]
 8006df8:	6832      	ldr	r2, [r6, #0]
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	42ab      	cmp	r3, r5
 8006dfe:	dc26      	bgt.n	8006e4e <_printf_common+0x96>
 8006e00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e04:	1e13      	subs	r3, r2, #0
 8006e06:	6822      	ldr	r2, [r4, #0]
 8006e08:	bf18      	it	ne
 8006e0a:	2301      	movne	r3, #1
 8006e0c:	0692      	lsls	r2, r2, #26
 8006e0e:	d42b      	bmi.n	8006e68 <_printf_common+0xb0>
 8006e10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e14:	4649      	mov	r1, r9
 8006e16:	4638      	mov	r0, r7
 8006e18:	47c0      	blx	r8
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	d01e      	beq.n	8006e5c <_printf_common+0xa4>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	68e5      	ldr	r5, [r4, #12]
 8006e22:	6832      	ldr	r2, [r6, #0]
 8006e24:	f003 0306 	and.w	r3, r3, #6
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	bf08      	it	eq
 8006e2c:	1aad      	subeq	r5, r5, r2
 8006e2e:	68a3      	ldr	r3, [r4, #8]
 8006e30:	6922      	ldr	r2, [r4, #16]
 8006e32:	bf0c      	ite	eq
 8006e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e38:	2500      	movne	r5, #0
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	bfc4      	itt	gt
 8006e3e:	1a9b      	subgt	r3, r3, r2
 8006e40:	18ed      	addgt	r5, r5, r3
 8006e42:	2600      	movs	r6, #0
 8006e44:	341a      	adds	r4, #26
 8006e46:	42b5      	cmp	r5, r6
 8006e48:	d11a      	bne.n	8006e80 <_printf_common+0xc8>
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	e008      	b.n	8006e60 <_printf_common+0xa8>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	4652      	mov	r2, sl
 8006e52:	4649      	mov	r1, r9
 8006e54:	4638      	mov	r0, r7
 8006e56:	47c0      	blx	r8
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d103      	bne.n	8006e64 <_printf_common+0xac>
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e64:	3501      	adds	r5, #1
 8006e66:	e7c6      	b.n	8006df6 <_printf_common+0x3e>
 8006e68:	18e1      	adds	r1, r4, r3
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	2030      	movs	r0, #48	; 0x30
 8006e6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e72:	4422      	add	r2, r4
 8006e74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e7c:	3302      	adds	r3, #2
 8006e7e:	e7c7      	b.n	8006e10 <_printf_common+0x58>
 8006e80:	2301      	movs	r3, #1
 8006e82:	4622      	mov	r2, r4
 8006e84:	4649      	mov	r1, r9
 8006e86:	4638      	mov	r0, r7
 8006e88:	47c0      	blx	r8
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	d0e6      	beq.n	8006e5c <_printf_common+0xa4>
 8006e8e:	3601      	adds	r6, #1
 8006e90:	e7d9      	b.n	8006e46 <_printf_common+0x8e>
	...

08006e94 <_printf_i>:
 8006e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e98:	7e0f      	ldrb	r7, [r1, #24]
 8006e9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e9c:	2f78      	cmp	r7, #120	; 0x78
 8006e9e:	4691      	mov	r9, r2
 8006ea0:	4680      	mov	r8, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	469a      	mov	sl, r3
 8006ea6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006eaa:	d807      	bhi.n	8006ebc <_printf_i+0x28>
 8006eac:	2f62      	cmp	r7, #98	; 0x62
 8006eae:	d80a      	bhi.n	8006ec6 <_printf_i+0x32>
 8006eb0:	2f00      	cmp	r7, #0
 8006eb2:	f000 80d8 	beq.w	8007066 <_printf_i+0x1d2>
 8006eb6:	2f58      	cmp	r7, #88	; 0x58
 8006eb8:	f000 80a3 	beq.w	8007002 <_printf_i+0x16e>
 8006ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ec0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ec4:	e03a      	b.n	8006f3c <_printf_i+0xa8>
 8006ec6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006eca:	2b15      	cmp	r3, #21
 8006ecc:	d8f6      	bhi.n	8006ebc <_printf_i+0x28>
 8006ece:	a101      	add	r1, pc, #4	; (adr r1, 8006ed4 <_printf_i+0x40>)
 8006ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ed4:	08006f2d 	.word	0x08006f2d
 8006ed8:	08006f41 	.word	0x08006f41
 8006edc:	08006ebd 	.word	0x08006ebd
 8006ee0:	08006ebd 	.word	0x08006ebd
 8006ee4:	08006ebd 	.word	0x08006ebd
 8006ee8:	08006ebd 	.word	0x08006ebd
 8006eec:	08006f41 	.word	0x08006f41
 8006ef0:	08006ebd 	.word	0x08006ebd
 8006ef4:	08006ebd 	.word	0x08006ebd
 8006ef8:	08006ebd 	.word	0x08006ebd
 8006efc:	08006ebd 	.word	0x08006ebd
 8006f00:	0800704d 	.word	0x0800704d
 8006f04:	08006f71 	.word	0x08006f71
 8006f08:	0800702f 	.word	0x0800702f
 8006f0c:	08006ebd 	.word	0x08006ebd
 8006f10:	08006ebd 	.word	0x08006ebd
 8006f14:	0800706f 	.word	0x0800706f
 8006f18:	08006ebd 	.word	0x08006ebd
 8006f1c:	08006f71 	.word	0x08006f71
 8006f20:	08006ebd 	.word	0x08006ebd
 8006f24:	08006ebd 	.word	0x08006ebd
 8006f28:	08007037 	.word	0x08007037
 8006f2c:	682b      	ldr	r3, [r5, #0]
 8006f2e:	1d1a      	adds	r2, r3, #4
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	602a      	str	r2, [r5, #0]
 8006f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e0a3      	b.n	8007088 <_printf_i+0x1f4>
 8006f40:	6820      	ldr	r0, [r4, #0]
 8006f42:	6829      	ldr	r1, [r5, #0]
 8006f44:	0606      	lsls	r6, r0, #24
 8006f46:	f101 0304 	add.w	r3, r1, #4
 8006f4a:	d50a      	bpl.n	8006f62 <_printf_i+0xce>
 8006f4c:	680e      	ldr	r6, [r1, #0]
 8006f4e:	602b      	str	r3, [r5, #0]
 8006f50:	2e00      	cmp	r6, #0
 8006f52:	da03      	bge.n	8006f5c <_printf_i+0xc8>
 8006f54:	232d      	movs	r3, #45	; 0x2d
 8006f56:	4276      	negs	r6, r6
 8006f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f5c:	485e      	ldr	r0, [pc, #376]	; (80070d8 <_printf_i+0x244>)
 8006f5e:	230a      	movs	r3, #10
 8006f60:	e019      	b.n	8006f96 <_printf_i+0x102>
 8006f62:	680e      	ldr	r6, [r1, #0]
 8006f64:	602b      	str	r3, [r5, #0]
 8006f66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f6a:	bf18      	it	ne
 8006f6c:	b236      	sxthne	r6, r6
 8006f6e:	e7ef      	b.n	8006f50 <_printf_i+0xbc>
 8006f70:	682b      	ldr	r3, [r5, #0]
 8006f72:	6820      	ldr	r0, [r4, #0]
 8006f74:	1d19      	adds	r1, r3, #4
 8006f76:	6029      	str	r1, [r5, #0]
 8006f78:	0601      	lsls	r1, r0, #24
 8006f7a:	d501      	bpl.n	8006f80 <_printf_i+0xec>
 8006f7c:	681e      	ldr	r6, [r3, #0]
 8006f7e:	e002      	b.n	8006f86 <_printf_i+0xf2>
 8006f80:	0646      	lsls	r6, r0, #25
 8006f82:	d5fb      	bpl.n	8006f7c <_printf_i+0xe8>
 8006f84:	881e      	ldrh	r6, [r3, #0]
 8006f86:	4854      	ldr	r0, [pc, #336]	; (80070d8 <_printf_i+0x244>)
 8006f88:	2f6f      	cmp	r7, #111	; 0x6f
 8006f8a:	bf0c      	ite	eq
 8006f8c:	2308      	moveq	r3, #8
 8006f8e:	230a      	movne	r3, #10
 8006f90:	2100      	movs	r1, #0
 8006f92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f96:	6865      	ldr	r5, [r4, #4]
 8006f98:	60a5      	str	r5, [r4, #8]
 8006f9a:	2d00      	cmp	r5, #0
 8006f9c:	bfa2      	ittt	ge
 8006f9e:	6821      	ldrge	r1, [r4, #0]
 8006fa0:	f021 0104 	bicge.w	r1, r1, #4
 8006fa4:	6021      	strge	r1, [r4, #0]
 8006fa6:	b90e      	cbnz	r6, 8006fac <_printf_i+0x118>
 8006fa8:	2d00      	cmp	r5, #0
 8006faa:	d04d      	beq.n	8007048 <_printf_i+0x1b4>
 8006fac:	4615      	mov	r5, r2
 8006fae:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fb2:	fb03 6711 	mls	r7, r3, r1, r6
 8006fb6:	5dc7      	ldrb	r7, [r0, r7]
 8006fb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fbc:	4637      	mov	r7, r6
 8006fbe:	42bb      	cmp	r3, r7
 8006fc0:	460e      	mov	r6, r1
 8006fc2:	d9f4      	bls.n	8006fae <_printf_i+0x11a>
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d10b      	bne.n	8006fe0 <_printf_i+0x14c>
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	07de      	lsls	r6, r3, #31
 8006fcc:	d508      	bpl.n	8006fe0 <_printf_i+0x14c>
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	6861      	ldr	r1, [r4, #4]
 8006fd2:	4299      	cmp	r1, r3
 8006fd4:	bfde      	ittt	le
 8006fd6:	2330      	movle	r3, #48	; 0x30
 8006fd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fe0:	1b52      	subs	r2, r2, r5
 8006fe2:	6122      	str	r2, [r4, #16]
 8006fe4:	f8cd a000 	str.w	sl, [sp]
 8006fe8:	464b      	mov	r3, r9
 8006fea:	aa03      	add	r2, sp, #12
 8006fec:	4621      	mov	r1, r4
 8006fee:	4640      	mov	r0, r8
 8006ff0:	f7ff fee2 	bl	8006db8 <_printf_common>
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d14c      	bne.n	8007092 <_printf_i+0x1fe>
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	b004      	add	sp, #16
 8006ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007002:	4835      	ldr	r0, [pc, #212]	; (80070d8 <_printf_i+0x244>)
 8007004:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007008:	6829      	ldr	r1, [r5, #0]
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007010:	6029      	str	r1, [r5, #0]
 8007012:	061d      	lsls	r5, r3, #24
 8007014:	d514      	bpl.n	8007040 <_printf_i+0x1ac>
 8007016:	07df      	lsls	r7, r3, #31
 8007018:	bf44      	itt	mi
 800701a:	f043 0320 	orrmi.w	r3, r3, #32
 800701e:	6023      	strmi	r3, [r4, #0]
 8007020:	b91e      	cbnz	r6, 800702a <_printf_i+0x196>
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	f023 0320 	bic.w	r3, r3, #32
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	2310      	movs	r3, #16
 800702c:	e7b0      	b.n	8006f90 <_printf_i+0xfc>
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	f043 0320 	orr.w	r3, r3, #32
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	2378      	movs	r3, #120	; 0x78
 8007038:	4828      	ldr	r0, [pc, #160]	; (80070dc <_printf_i+0x248>)
 800703a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800703e:	e7e3      	b.n	8007008 <_printf_i+0x174>
 8007040:	0659      	lsls	r1, r3, #25
 8007042:	bf48      	it	mi
 8007044:	b2b6      	uxthmi	r6, r6
 8007046:	e7e6      	b.n	8007016 <_printf_i+0x182>
 8007048:	4615      	mov	r5, r2
 800704a:	e7bb      	b.n	8006fc4 <_printf_i+0x130>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	6826      	ldr	r6, [r4, #0]
 8007050:	6961      	ldr	r1, [r4, #20]
 8007052:	1d18      	adds	r0, r3, #4
 8007054:	6028      	str	r0, [r5, #0]
 8007056:	0635      	lsls	r5, r6, #24
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	d501      	bpl.n	8007060 <_printf_i+0x1cc>
 800705c:	6019      	str	r1, [r3, #0]
 800705e:	e002      	b.n	8007066 <_printf_i+0x1d2>
 8007060:	0670      	lsls	r0, r6, #25
 8007062:	d5fb      	bpl.n	800705c <_printf_i+0x1c8>
 8007064:	8019      	strh	r1, [r3, #0]
 8007066:	2300      	movs	r3, #0
 8007068:	6123      	str	r3, [r4, #16]
 800706a:	4615      	mov	r5, r2
 800706c:	e7ba      	b.n	8006fe4 <_printf_i+0x150>
 800706e:	682b      	ldr	r3, [r5, #0]
 8007070:	1d1a      	adds	r2, r3, #4
 8007072:	602a      	str	r2, [r5, #0]
 8007074:	681d      	ldr	r5, [r3, #0]
 8007076:	6862      	ldr	r2, [r4, #4]
 8007078:	2100      	movs	r1, #0
 800707a:	4628      	mov	r0, r5
 800707c:	f7f9 f8b0 	bl	80001e0 <memchr>
 8007080:	b108      	cbz	r0, 8007086 <_printf_i+0x1f2>
 8007082:	1b40      	subs	r0, r0, r5
 8007084:	6060      	str	r0, [r4, #4]
 8007086:	6863      	ldr	r3, [r4, #4]
 8007088:	6123      	str	r3, [r4, #16]
 800708a:	2300      	movs	r3, #0
 800708c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007090:	e7a8      	b.n	8006fe4 <_printf_i+0x150>
 8007092:	6923      	ldr	r3, [r4, #16]
 8007094:	462a      	mov	r2, r5
 8007096:	4649      	mov	r1, r9
 8007098:	4640      	mov	r0, r8
 800709a:	47d0      	blx	sl
 800709c:	3001      	adds	r0, #1
 800709e:	d0ab      	beq.n	8006ff8 <_printf_i+0x164>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	079b      	lsls	r3, r3, #30
 80070a4:	d413      	bmi.n	80070ce <_printf_i+0x23a>
 80070a6:	68e0      	ldr	r0, [r4, #12]
 80070a8:	9b03      	ldr	r3, [sp, #12]
 80070aa:	4298      	cmp	r0, r3
 80070ac:	bfb8      	it	lt
 80070ae:	4618      	movlt	r0, r3
 80070b0:	e7a4      	b.n	8006ffc <_printf_i+0x168>
 80070b2:	2301      	movs	r3, #1
 80070b4:	4632      	mov	r2, r6
 80070b6:	4649      	mov	r1, r9
 80070b8:	4640      	mov	r0, r8
 80070ba:	47d0      	blx	sl
 80070bc:	3001      	adds	r0, #1
 80070be:	d09b      	beq.n	8006ff8 <_printf_i+0x164>
 80070c0:	3501      	adds	r5, #1
 80070c2:	68e3      	ldr	r3, [r4, #12]
 80070c4:	9903      	ldr	r1, [sp, #12]
 80070c6:	1a5b      	subs	r3, r3, r1
 80070c8:	42ab      	cmp	r3, r5
 80070ca:	dcf2      	bgt.n	80070b2 <_printf_i+0x21e>
 80070cc:	e7eb      	b.n	80070a6 <_printf_i+0x212>
 80070ce:	2500      	movs	r5, #0
 80070d0:	f104 0619 	add.w	r6, r4, #25
 80070d4:	e7f5      	b.n	80070c2 <_printf_i+0x22e>
 80070d6:	bf00      	nop
 80070d8:	08009286 	.word	0x08009286
 80070dc:	08009297 	.word	0x08009297

080070e0 <quorem>:
 80070e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	6903      	ldr	r3, [r0, #16]
 80070e6:	690c      	ldr	r4, [r1, #16]
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	4607      	mov	r7, r0
 80070ec:	f2c0 8081 	blt.w	80071f2 <quorem+0x112>
 80070f0:	3c01      	subs	r4, #1
 80070f2:	f101 0814 	add.w	r8, r1, #20
 80070f6:	f100 0514 	add.w	r5, r0, #20
 80070fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007104:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007108:	3301      	adds	r3, #1
 800710a:	429a      	cmp	r2, r3
 800710c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007110:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007114:	fbb2 f6f3 	udiv	r6, r2, r3
 8007118:	d331      	bcc.n	800717e <quorem+0x9e>
 800711a:	f04f 0e00 	mov.w	lr, #0
 800711e:	4640      	mov	r0, r8
 8007120:	46ac      	mov	ip, r5
 8007122:	46f2      	mov	sl, lr
 8007124:	f850 2b04 	ldr.w	r2, [r0], #4
 8007128:	b293      	uxth	r3, r2
 800712a:	fb06 e303 	mla	r3, r6, r3, lr
 800712e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007132:	b29b      	uxth	r3, r3
 8007134:	ebaa 0303 	sub.w	r3, sl, r3
 8007138:	f8dc a000 	ldr.w	sl, [ip]
 800713c:	0c12      	lsrs	r2, r2, #16
 800713e:	fa13 f38a 	uxtah	r3, r3, sl
 8007142:	fb06 e202 	mla	r2, r6, r2, lr
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	9b00      	ldr	r3, [sp, #0]
 800714a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800714e:	b292      	uxth	r2, r2
 8007150:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007154:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007158:	f8bd 3000 	ldrh.w	r3, [sp]
 800715c:	4581      	cmp	r9, r0
 800715e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007162:	f84c 3b04 	str.w	r3, [ip], #4
 8007166:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800716a:	d2db      	bcs.n	8007124 <quorem+0x44>
 800716c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007170:	b92b      	cbnz	r3, 800717e <quorem+0x9e>
 8007172:	9b01      	ldr	r3, [sp, #4]
 8007174:	3b04      	subs	r3, #4
 8007176:	429d      	cmp	r5, r3
 8007178:	461a      	mov	r2, r3
 800717a:	d32e      	bcc.n	80071da <quorem+0xfa>
 800717c:	613c      	str	r4, [r7, #16]
 800717e:	4638      	mov	r0, r7
 8007180:	f001 f8c4 	bl	800830c <__mcmp>
 8007184:	2800      	cmp	r0, #0
 8007186:	db24      	blt.n	80071d2 <quorem+0xf2>
 8007188:	3601      	adds	r6, #1
 800718a:	4628      	mov	r0, r5
 800718c:	f04f 0c00 	mov.w	ip, #0
 8007190:	f858 2b04 	ldr.w	r2, [r8], #4
 8007194:	f8d0 e000 	ldr.w	lr, [r0]
 8007198:	b293      	uxth	r3, r2
 800719a:	ebac 0303 	sub.w	r3, ip, r3
 800719e:	0c12      	lsrs	r2, r2, #16
 80071a0:	fa13 f38e 	uxtah	r3, r3, lr
 80071a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071b2:	45c1      	cmp	r9, r8
 80071b4:	f840 3b04 	str.w	r3, [r0], #4
 80071b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071bc:	d2e8      	bcs.n	8007190 <quorem+0xb0>
 80071be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071c6:	b922      	cbnz	r2, 80071d2 <quorem+0xf2>
 80071c8:	3b04      	subs	r3, #4
 80071ca:	429d      	cmp	r5, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	d30a      	bcc.n	80071e6 <quorem+0x106>
 80071d0:	613c      	str	r4, [r7, #16]
 80071d2:	4630      	mov	r0, r6
 80071d4:	b003      	add	sp, #12
 80071d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	3b04      	subs	r3, #4
 80071de:	2a00      	cmp	r2, #0
 80071e0:	d1cc      	bne.n	800717c <quorem+0x9c>
 80071e2:	3c01      	subs	r4, #1
 80071e4:	e7c7      	b.n	8007176 <quorem+0x96>
 80071e6:	6812      	ldr	r2, [r2, #0]
 80071e8:	3b04      	subs	r3, #4
 80071ea:	2a00      	cmp	r2, #0
 80071ec:	d1f0      	bne.n	80071d0 <quorem+0xf0>
 80071ee:	3c01      	subs	r4, #1
 80071f0:	e7eb      	b.n	80071ca <quorem+0xea>
 80071f2:	2000      	movs	r0, #0
 80071f4:	e7ee      	b.n	80071d4 <quorem+0xf4>
	...

080071f8 <_dtoa_r>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	ed2d 8b04 	vpush	{d8-d9}
 8007200:	ec57 6b10 	vmov	r6, r7, d0
 8007204:	b093      	sub	sp, #76	; 0x4c
 8007206:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007208:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800720c:	9106      	str	r1, [sp, #24]
 800720e:	ee10 aa10 	vmov	sl, s0
 8007212:	4604      	mov	r4, r0
 8007214:	9209      	str	r2, [sp, #36]	; 0x24
 8007216:	930c      	str	r3, [sp, #48]	; 0x30
 8007218:	46bb      	mov	fp, r7
 800721a:	b975      	cbnz	r5, 800723a <_dtoa_r+0x42>
 800721c:	2010      	movs	r0, #16
 800721e:	f000 fddd 	bl	8007ddc <malloc>
 8007222:	4602      	mov	r2, r0
 8007224:	6260      	str	r0, [r4, #36]	; 0x24
 8007226:	b920      	cbnz	r0, 8007232 <_dtoa_r+0x3a>
 8007228:	4ba7      	ldr	r3, [pc, #668]	; (80074c8 <_dtoa_r+0x2d0>)
 800722a:	21ea      	movs	r1, #234	; 0xea
 800722c:	48a7      	ldr	r0, [pc, #668]	; (80074cc <_dtoa_r+0x2d4>)
 800722e:	f001 fa75 	bl	800871c <__assert_func>
 8007232:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007236:	6005      	str	r5, [r0, #0]
 8007238:	60c5      	str	r5, [r0, #12]
 800723a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800723c:	6819      	ldr	r1, [r3, #0]
 800723e:	b151      	cbz	r1, 8007256 <_dtoa_r+0x5e>
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	604a      	str	r2, [r1, #4]
 8007244:	2301      	movs	r3, #1
 8007246:	4093      	lsls	r3, r2
 8007248:	608b      	str	r3, [r1, #8]
 800724a:	4620      	mov	r0, r4
 800724c:	f000 fe1c 	bl	8007e88 <_Bfree>
 8007250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	1e3b      	subs	r3, r7, #0
 8007258:	bfaa      	itet	ge
 800725a:	2300      	movge	r3, #0
 800725c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007260:	f8c8 3000 	strge.w	r3, [r8]
 8007264:	4b9a      	ldr	r3, [pc, #616]	; (80074d0 <_dtoa_r+0x2d8>)
 8007266:	bfbc      	itt	lt
 8007268:	2201      	movlt	r2, #1
 800726a:	f8c8 2000 	strlt.w	r2, [r8]
 800726e:	ea33 030b 	bics.w	r3, r3, fp
 8007272:	d11b      	bne.n	80072ac <_dtoa_r+0xb4>
 8007274:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007276:	f242 730f 	movw	r3, #9999	; 0x270f
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007280:	4333      	orrs	r3, r6
 8007282:	f000 8592 	beq.w	8007daa <_dtoa_r+0xbb2>
 8007286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007288:	b963      	cbnz	r3, 80072a4 <_dtoa_r+0xac>
 800728a:	4b92      	ldr	r3, [pc, #584]	; (80074d4 <_dtoa_r+0x2dc>)
 800728c:	e022      	b.n	80072d4 <_dtoa_r+0xdc>
 800728e:	4b92      	ldr	r3, [pc, #584]	; (80074d8 <_dtoa_r+0x2e0>)
 8007290:	9301      	str	r3, [sp, #4]
 8007292:	3308      	adds	r3, #8
 8007294:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	9801      	ldr	r0, [sp, #4]
 800729a:	b013      	add	sp, #76	; 0x4c
 800729c:	ecbd 8b04 	vpop	{d8-d9}
 80072a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a4:	4b8b      	ldr	r3, [pc, #556]	; (80074d4 <_dtoa_r+0x2dc>)
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	3303      	adds	r3, #3
 80072aa:	e7f3      	b.n	8007294 <_dtoa_r+0x9c>
 80072ac:	2200      	movs	r2, #0
 80072ae:	2300      	movs	r3, #0
 80072b0:	4650      	mov	r0, sl
 80072b2:	4659      	mov	r1, fp
 80072b4:	f7f9 fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 80072b8:	ec4b ab19 	vmov	d9, sl, fp
 80072bc:	4680      	mov	r8, r0
 80072be:	b158      	cbz	r0, 80072d8 <_dtoa_r+0xe0>
 80072c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072c2:	2301      	movs	r3, #1
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 856b 	beq.w	8007da4 <_dtoa_r+0xbac>
 80072ce:	4883      	ldr	r0, [pc, #524]	; (80074dc <_dtoa_r+0x2e4>)
 80072d0:	6018      	str	r0, [r3, #0]
 80072d2:	1e43      	subs	r3, r0, #1
 80072d4:	9301      	str	r3, [sp, #4]
 80072d6:	e7df      	b.n	8007298 <_dtoa_r+0xa0>
 80072d8:	ec4b ab10 	vmov	d0, sl, fp
 80072dc:	aa10      	add	r2, sp, #64	; 0x40
 80072de:	a911      	add	r1, sp, #68	; 0x44
 80072e0:	4620      	mov	r0, r4
 80072e2:	f001 f8b9 	bl	8008458 <__d2b>
 80072e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80072ea:	ee08 0a10 	vmov	s16, r0
 80072ee:	2d00      	cmp	r5, #0
 80072f0:	f000 8084 	beq.w	80073fc <_dtoa_r+0x204>
 80072f4:	ee19 3a90 	vmov	r3, s19
 80072f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007300:	4656      	mov	r6, sl
 8007302:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007306:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800730a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800730e:	4b74      	ldr	r3, [pc, #464]	; (80074e0 <_dtoa_r+0x2e8>)
 8007310:	2200      	movs	r2, #0
 8007312:	4630      	mov	r0, r6
 8007314:	4639      	mov	r1, r7
 8007316:	f7f8 ffb7 	bl	8000288 <__aeabi_dsub>
 800731a:	a365      	add	r3, pc, #404	; (adr r3, 80074b0 <_dtoa_r+0x2b8>)
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	f7f9 f96a 	bl	80005f8 <__aeabi_dmul>
 8007324:	a364      	add	r3, pc, #400	; (adr r3, 80074b8 <_dtoa_r+0x2c0>)
 8007326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732a:	f7f8 ffaf 	bl	800028c <__adddf3>
 800732e:	4606      	mov	r6, r0
 8007330:	4628      	mov	r0, r5
 8007332:	460f      	mov	r7, r1
 8007334:	f7f9 f8f6 	bl	8000524 <__aeabi_i2d>
 8007338:	a361      	add	r3, pc, #388	; (adr r3, 80074c0 <_dtoa_r+0x2c8>)
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	f7f9 f95b 	bl	80005f8 <__aeabi_dmul>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	4630      	mov	r0, r6
 8007348:	4639      	mov	r1, r7
 800734a:	f7f8 ff9f 	bl	800028c <__adddf3>
 800734e:	4606      	mov	r6, r0
 8007350:	460f      	mov	r7, r1
 8007352:	f7f9 fc01 	bl	8000b58 <__aeabi_d2iz>
 8007356:	2200      	movs	r2, #0
 8007358:	9000      	str	r0, [sp, #0]
 800735a:	2300      	movs	r3, #0
 800735c:	4630      	mov	r0, r6
 800735e:	4639      	mov	r1, r7
 8007360:	f7f9 fbbc 	bl	8000adc <__aeabi_dcmplt>
 8007364:	b150      	cbz	r0, 800737c <_dtoa_r+0x184>
 8007366:	9800      	ldr	r0, [sp, #0]
 8007368:	f7f9 f8dc 	bl	8000524 <__aeabi_i2d>
 800736c:	4632      	mov	r2, r6
 800736e:	463b      	mov	r3, r7
 8007370:	f7f9 fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8007374:	b910      	cbnz	r0, 800737c <_dtoa_r+0x184>
 8007376:	9b00      	ldr	r3, [sp, #0]
 8007378:	3b01      	subs	r3, #1
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	9b00      	ldr	r3, [sp, #0]
 800737e:	2b16      	cmp	r3, #22
 8007380:	d85a      	bhi.n	8007438 <_dtoa_r+0x240>
 8007382:	9a00      	ldr	r2, [sp, #0]
 8007384:	4b57      	ldr	r3, [pc, #348]	; (80074e4 <_dtoa_r+0x2ec>)
 8007386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	ec51 0b19 	vmov	r0, r1, d9
 8007392:	f7f9 fba3 	bl	8000adc <__aeabi_dcmplt>
 8007396:	2800      	cmp	r0, #0
 8007398:	d050      	beq.n	800743c <_dtoa_r+0x244>
 800739a:	9b00      	ldr	r3, [sp, #0]
 800739c:	3b01      	subs	r3, #1
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	2300      	movs	r3, #0
 80073a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80073a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073a6:	1b5d      	subs	r5, r3, r5
 80073a8:	1e6b      	subs	r3, r5, #1
 80073aa:	9305      	str	r3, [sp, #20]
 80073ac:	bf45      	ittet	mi
 80073ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80073b2:	9304      	strmi	r3, [sp, #16]
 80073b4:	2300      	movpl	r3, #0
 80073b6:	2300      	movmi	r3, #0
 80073b8:	bf4c      	ite	mi
 80073ba:	9305      	strmi	r3, [sp, #20]
 80073bc:	9304      	strpl	r3, [sp, #16]
 80073be:	9b00      	ldr	r3, [sp, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	db3d      	blt.n	8007440 <_dtoa_r+0x248>
 80073c4:	9b05      	ldr	r3, [sp, #20]
 80073c6:	9a00      	ldr	r2, [sp, #0]
 80073c8:	920a      	str	r2, [sp, #40]	; 0x28
 80073ca:	4413      	add	r3, r2
 80073cc:	9305      	str	r3, [sp, #20]
 80073ce:	2300      	movs	r3, #0
 80073d0:	9307      	str	r3, [sp, #28]
 80073d2:	9b06      	ldr	r3, [sp, #24]
 80073d4:	2b09      	cmp	r3, #9
 80073d6:	f200 8089 	bhi.w	80074ec <_dtoa_r+0x2f4>
 80073da:	2b05      	cmp	r3, #5
 80073dc:	bfc4      	itt	gt
 80073de:	3b04      	subgt	r3, #4
 80073e0:	9306      	strgt	r3, [sp, #24]
 80073e2:	9b06      	ldr	r3, [sp, #24]
 80073e4:	f1a3 0302 	sub.w	r3, r3, #2
 80073e8:	bfcc      	ite	gt
 80073ea:	2500      	movgt	r5, #0
 80073ec:	2501      	movle	r5, #1
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	f200 8087 	bhi.w	8007502 <_dtoa_r+0x30a>
 80073f4:	e8df f003 	tbb	[pc, r3]
 80073f8:	59383a2d 	.word	0x59383a2d
 80073fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007400:	441d      	add	r5, r3
 8007402:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007406:	2b20      	cmp	r3, #32
 8007408:	bfc1      	itttt	gt
 800740a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800740e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007412:	fa0b f303 	lslgt.w	r3, fp, r3
 8007416:	fa26 f000 	lsrgt.w	r0, r6, r0
 800741a:	bfda      	itte	le
 800741c:	f1c3 0320 	rsble	r3, r3, #32
 8007420:	fa06 f003 	lslle.w	r0, r6, r3
 8007424:	4318      	orrgt	r0, r3
 8007426:	f7f9 f86d 	bl	8000504 <__aeabi_ui2d>
 800742a:	2301      	movs	r3, #1
 800742c:	4606      	mov	r6, r0
 800742e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007432:	3d01      	subs	r5, #1
 8007434:	930e      	str	r3, [sp, #56]	; 0x38
 8007436:	e76a      	b.n	800730e <_dtoa_r+0x116>
 8007438:	2301      	movs	r3, #1
 800743a:	e7b2      	b.n	80073a2 <_dtoa_r+0x1aa>
 800743c:	900b      	str	r0, [sp, #44]	; 0x2c
 800743e:	e7b1      	b.n	80073a4 <_dtoa_r+0x1ac>
 8007440:	9b04      	ldr	r3, [sp, #16]
 8007442:	9a00      	ldr	r2, [sp, #0]
 8007444:	1a9b      	subs	r3, r3, r2
 8007446:	9304      	str	r3, [sp, #16]
 8007448:	4253      	negs	r3, r2
 800744a:	9307      	str	r3, [sp, #28]
 800744c:	2300      	movs	r3, #0
 800744e:	930a      	str	r3, [sp, #40]	; 0x28
 8007450:	e7bf      	b.n	80073d2 <_dtoa_r+0x1da>
 8007452:	2300      	movs	r3, #0
 8007454:	9308      	str	r3, [sp, #32]
 8007456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007458:	2b00      	cmp	r3, #0
 800745a:	dc55      	bgt.n	8007508 <_dtoa_r+0x310>
 800745c:	2301      	movs	r3, #1
 800745e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007462:	461a      	mov	r2, r3
 8007464:	9209      	str	r2, [sp, #36]	; 0x24
 8007466:	e00c      	b.n	8007482 <_dtoa_r+0x28a>
 8007468:	2301      	movs	r3, #1
 800746a:	e7f3      	b.n	8007454 <_dtoa_r+0x25c>
 800746c:	2300      	movs	r3, #0
 800746e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007470:	9308      	str	r3, [sp, #32]
 8007472:	9b00      	ldr	r3, [sp, #0]
 8007474:	4413      	add	r3, r2
 8007476:	9302      	str	r3, [sp, #8]
 8007478:	3301      	adds	r3, #1
 800747a:	2b01      	cmp	r3, #1
 800747c:	9303      	str	r3, [sp, #12]
 800747e:	bfb8      	it	lt
 8007480:	2301      	movlt	r3, #1
 8007482:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007484:	2200      	movs	r2, #0
 8007486:	6042      	str	r2, [r0, #4]
 8007488:	2204      	movs	r2, #4
 800748a:	f102 0614 	add.w	r6, r2, #20
 800748e:	429e      	cmp	r6, r3
 8007490:	6841      	ldr	r1, [r0, #4]
 8007492:	d93d      	bls.n	8007510 <_dtoa_r+0x318>
 8007494:	4620      	mov	r0, r4
 8007496:	f000 fcb7 	bl	8007e08 <_Balloc>
 800749a:	9001      	str	r0, [sp, #4]
 800749c:	2800      	cmp	r0, #0
 800749e:	d13b      	bne.n	8007518 <_dtoa_r+0x320>
 80074a0:	4b11      	ldr	r3, [pc, #68]	; (80074e8 <_dtoa_r+0x2f0>)
 80074a2:	4602      	mov	r2, r0
 80074a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80074a8:	e6c0      	b.n	800722c <_dtoa_r+0x34>
 80074aa:	2301      	movs	r3, #1
 80074ac:	e7df      	b.n	800746e <_dtoa_r+0x276>
 80074ae:	bf00      	nop
 80074b0:	636f4361 	.word	0x636f4361
 80074b4:	3fd287a7 	.word	0x3fd287a7
 80074b8:	8b60c8b3 	.word	0x8b60c8b3
 80074bc:	3fc68a28 	.word	0x3fc68a28
 80074c0:	509f79fb 	.word	0x509f79fb
 80074c4:	3fd34413 	.word	0x3fd34413
 80074c8:	080092b5 	.word	0x080092b5
 80074cc:	080092cc 	.word	0x080092cc
 80074d0:	7ff00000 	.word	0x7ff00000
 80074d4:	080092b1 	.word	0x080092b1
 80074d8:	080092a8 	.word	0x080092a8
 80074dc:	08009285 	.word	0x08009285
 80074e0:	3ff80000 	.word	0x3ff80000
 80074e4:	080093c0 	.word	0x080093c0
 80074e8:	08009327 	.word	0x08009327
 80074ec:	2501      	movs	r5, #1
 80074ee:	2300      	movs	r3, #0
 80074f0:	9306      	str	r3, [sp, #24]
 80074f2:	9508      	str	r5, [sp, #32]
 80074f4:	f04f 33ff 	mov.w	r3, #4294967295
 80074f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80074fc:	2200      	movs	r2, #0
 80074fe:	2312      	movs	r3, #18
 8007500:	e7b0      	b.n	8007464 <_dtoa_r+0x26c>
 8007502:	2301      	movs	r3, #1
 8007504:	9308      	str	r3, [sp, #32]
 8007506:	e7f5      	b.n	80074f4 <_dtoa_r+0x2fc>
 8007508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800750e:	e7b8      	b.n	8007482 <_dtoa_r+0x28a>
 8007510:	3101      	adds	r1, #1
 8007512:	6041      	str	r1, [r0, #4]
 8007514:	0052      	lsls	r2, r2, #1
 8007516:	e7b8      	b.n	800748a <_dtoa_r+0x292>
 8007518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800751a:	9a01      	ldr	r2, [sp, #4]
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	9b03      	ldr	r3, [sp, #12]
 8007520:	2b0e      	cmp	r3, #14
 8007522:	f200 809d 	bhi.w	8007660 <_dtoa_r+0x468>
 8007526:	2d00      	cmp	r5, #0
 8007528:	f000 809a 	beq.w	8007660 <_dtoa_r+0x468>
 800752c:	9b00      	ldr	r3, [sp, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	dd32      	ble.n	8007598 <_dtoa_r+0x3a0>
 8007532:	4ab7      	ldr	r2, [pc, #732]	; (8007810 <_dtoa_r+0x618>)
 8007534:	f003 030f 	and.w	r3, r3, #15
 8007538:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800753c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007540:	9b00      	ldr	r3, [sp, #0]
 8007542:	05d8      	lsls	r0, r3, #23
 8007544:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007548:	d516      	bpl.n	8007578 <_dtoa_r+0x380>
 800754a:	4bb2      	ldr	r3, [pc, #712]	; (8007814 <_dtoa_r+0x61c>)
 800754c:	ec51 0b19 	vmov	r0, r1, d9
 8007550:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007554:	f7f9 f97a 	bl	800084c <__aeabi_ddiv>
 8007558:	f007 070f 	and.w	r7, r7, #15
 800755c:	4682      	mov	sl, r0
 800755e:	468b      	mov	fp, r1
 8007560:	2503      	movs	r5, #3
 8007562:	4eac      	ldr	r6, [pc, #688]	; (8007814 <_dtoa_r+0x61c>)
 8007564:	b957      	cbnz	r7, 800757c <_dtoa_r+0x384>
 8007566:	4642      	mov	r2, r8
 8007568:	464b      	mov	r3, r9
 800756a:	4650      	mov	r0, sl
 800756c:	4659      	mov	r1, fp
 800756e:	f7f9 f96d 	bl	800084c <__aeabi_ddiv>
 8007572:	4682      	mov	sl, r0
 8007574:	468b      	mov	fp, r1
 8007576:	e028      	b.n	80075ca <_dtoa_r+0x3d2>
 8007578:	2502      	movs	r5, #2
 800757a:	e7f2      	b.n	8007562 <_dtoa_r+0x36a>
 800757c:	07f9      	lsls	r1, r7, #31
 800757e:	d508      	bpl.n	8007592 <_dtoa_r+0x39a>
 8007580:	4640      	mov	r0, r8
 8007582:	4649      	mov	r1, r9
 8007584:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007588:	f7f9 f836 	bl	80005f8 <__aeabi_dmul>
 800758c:	3501      	adds	r5, #1
 800758e:	4680      	mov	r8, r0
 8007590:	4689      	mov	r9, r1
 8007592:	107f      	asrs	r7, r7, #1
 8007594:	3608      	adds	r6, #8
 8007596:	e7e5      	b.n	8007564 <_dtoa_r+0x36c>
 8007598:	f000 809b 	beq.w	80076d2 <_dtoa_r+0x4da>
 800759c:	9b00      	ldr	r3, [sp, #0]
 800759e:	4f9d      	ldr	r7, [pc, #628]	; (8007814 <_dtoa_r+0x61c>)
 80075a0:	425e      	negs	r6, r3
 80075a2:	4b9b      	ldr	r3, [pc, #620]	; (8007810 <_dtoa_r+0x618>)
 80075a4:	f006 020f 	and.w	r2, r6, #15
 80075a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b0:	ec51 0b19 	vmov	r0, r1, d9
 80075b4:	f7f9 f820 	bl	80005f8 <__aeabi_dmul>
 80075b8:	1136      	asrs	r6, r6, #4
 80075ba:	4682      	mov	sl, r0
 80075bc:	468b      	mov	fp, r1
 80075be:	2300      	movs	r3, #0
 80075c0:	2502      	movs	r5, #2
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	d17a      	bne.n	80076bc <_dtoa_r+0x4c4>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1d3      	bne.n	8007572 <_dtoa_r+0x37a>
 80075ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 8082 	beq.w	80076d6 <_dtoa_r+0x4de>
 80075d2:	4b91      	ldr	r3, [pc, #580]	; (8007818 <_dtoa_r+0x620>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	4650      	mov	r0, sl
 80075d8:	4659      	mov	r1, fp
 80075da:	f7f9 fa7f 	bl	8000adc <__aeabi_dcmplt>
 80075de:	2800      	cmp	r0, #0
 80075e0:	d079      	beq.n	80076d6 <_dtoa_r+0x4de>
 80075e2:	9b03      	ldr	r3, [sp, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d076      	beq.n	80076d6 <_dtoa_r+0x4de>
 80075e8:	9b02      	ldr	r3, [sp, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	dd36      	ble.n	800765c <_dtoa_r+0x464>
 80075ee:	9b00      	ldr	r3, [sp, #0]
 80075f0:	4650      	mov	r0, sl
 80075f2:	4659      	mov	r1, fp
 80075f4:	1e5f      	subs	r7, r3, #1
 80075f6:	2200      	movs	r2, #0
 80075f8:	4b88      	ldr	r3, [pc, #544]	; (800781c <_dtoa_r+0x624>)
 80075fa:	f7f8 fffd 	bl	80005f8 <__aeabi_dmul>
 80075fe:	9e02      	ldr	r6, [sp, #8]
 8007600:	4682      	mov	sl, r0
 8007602:	468b      	mov	fp, r1
 8007604:	3501      	adds	r5, #1
 8007606:	4628      	mov	r0, r5
 8007608:	f7f8 ff8c 	bl	8000524 <__aeabi_i2d>
 800760c:	4652      	mov	r2, sl
 800760e:	465b      	mov	r3, fp
 8007610:	f7f8 fff2 	bl	80005f8 <__aeabi_dmul>
 8007614:	4b82      	ldr	r3, [pc, #520]	; (8007820 <_dtoa_r+0x628>)
 8007616:	2200      	movs	r2, #0
 8007618:	f7f8 fe38 	bl	800028c <__adddf3>
 800761c:	46d0      	mov	r8, sl
 800761e:	46d9      	mov	r9, fp
 8007620:	4682      	mov	sl, r0
 8007622:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007626:	2e00      	cmp	r6, #0
 8007628:	d158      	bne.n	80076dc <_dtoa_r+0x4e4>
 800762a:	4b7e      	ldr	r3, [pc, #504]	; (8007824 <_dtoa_r+0x62c>)
 800762c:	2200      	movs	r2, #0
 800762e:	4640      	mov	r0, r8
 8007630:	4649      	mov	r1, r9
 8007632:	f7f8 fe29 	bl	8000288 <__aeabi_dsub>
 8007636:	4652      	mov	r2, sl
 8007638:	465b      	mov	r3, fp
 800763a:	4680      	mov	r8, r0
 800763c:	4689      	mov	r9, r1
 800763e:	f7f9 fa6b 	bl	8000b18 <__aeabi_dcmpgt>
 8007642:	2800      	cmp	r0, #0
 8007644:	f040 8295 	bne.w	8007b72 <_dtoa_r+0x97a>
 8007648:	4652      	mov	r2, sl
 800764a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800764e:	4640      	mov	r0, r8
 8007650:	4649      	mov	r1, r9
 8007652:	f7f9 fa43 	bl	8000adc <__aeabi_dcmplt>
 8007656:	2800      	cmp	r0, #0
 8007658:	f040 8289 	bne.w	8007b6e <_dtoa_r+0x976>
 800765c:	ec5b ab19 	vmov	sl, fp, d9
 8007660:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007662:	2b00      	cmp	r3, #0
 8007664:	f2c0 8148 	blt.w	80078f8 <_dtoa_r+0x700>
 8007668:	9a00      	ldr	r2, [sp, #0]
 800766a:	2a0e      	cmp	r2, #14
 800766c:	f300 8144 	bgt.w	80078f8 <_dtoa_r+0x700>
 8007670:	4b67      	ldr	r3, [pc, #412]	; (8007810 <_dtoa_r+0x618>)
 8007672:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007676:	e9d3 8900 	ldrd	r8, r9, [r3]
 800767a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767c:	2b00      	cmp	r3, #0
 800767e:	f280 80d5 	bge.w	800782c <_dtoa_r+0x634>
 8007682:	9b03      	ldr	r3, [sp, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f300 80d1 	bgt.w	800782c <_dtoa_r+0x634>
 800768a:	f040 826f 	bne.w	8007b6c <_dtoa_r+0x974>
 800768e:	4b65      	ldr	r3, [pc, #404]	; (8007824 <_dtoa_r+0x62c>)
 8007690:	2200      	movs	r2, #0
 8007692:	4640      	mov	r0, r8
 8007694:	4649      	mov	r1, r9
 8007696:	f7f8 ffaf 	bl	80005f8 <__aeabi_dmul>
 800769a:	4652      	mov	r2, sl
 800769c:	465b      	mov	r3, fp
 800769e:	f7f9 fa31 	bl	8000b04 <__aeabi_dcmpge>
 80076a2:	9e03      	ldr	r6, [sp, #12]
 80076a4:	4637      	mov	r7, r6
 80076a6:	2800      	cmp	r0, #0
 80076a8:	f040 8245 	bne.w	8007b36 <_dtoa_r+0x93e>
 80076ac:	9d01      	ldr	r5, [sp, #4]
 80076ae:	2331      	movs	r3, #49	; 0x31
 80076b0:	f805 3b01 	strb.w	r3, [r5], #1
 80076b4:	9b00      	ldr	r3, [sp, #0]
 80076b6:	3301      	adds	r3, #1
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	e240      	b.n	8007b3e <_dtoa_r+0x946>
 80076bc:	07f2      	lsls	r2, r6, #31
 80076be:	d505      	bpl.n	80076cc <_dtoa_r+0x4d4>
 80076c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076c4:	f7f8 ff98 	bl	80005f8 <__aeabi_dmul>
 80076c8:	3501      	adds	r5, #1
 80076ca:	2301      	movs	r3, #1
 80076cc:	1076      	asrs	r6, r6, #1
 80076ce:	3708      	adds	r7, #8
 80076d0:	e777      	b.n	80075c2 <_dtoa_r+0x3ca>
 80076d2:	2502      	movs	r5, #2
 80076d4:	e779      	b.n	80075ca <_dtoa_r+0x3d2>
 80076d6:	9f00      	ldr	r7, [sp, #0]
 80076d8:	9e03      	ldr	r6, [sp, #12]
 80076da:	e794      	b.n	8007606 <_dtoa_r+0x40e>
 80076dc:	9901      	ldr	r1, [sp, #4]
 80076de:	4b4c      	ldr	r3, [pc, #304]	; (8007810 <_dtoa_r+0x618>)
 80076e0:	4431      	add	r1, r6
 80076e2:	910d      	str	r1, [sp, #52]	; 0x34
 80076e4:	9908      	ldr	r1, [sp, #32]
 80076e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80076ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076ee:	2900      	cmp	r1, #0
 80076f0:	d043      	beq.n	800777a <_dtoa_r+0x582>
 80076f2:	494d      	ldr	r1, [pc, #308]	; (8007828 <_dtoa_r+0x630>)
 80076f4:	2000      	movs	r0, #0
 80076f6:	f7f9 f8a9 	bl	800084c <__aeabi_ddiv>
 80076fa:	4652      	mov	r2, sl
 80076fc:	465b      	mov	r3, fp
 80076fe:	f7f8 fdc3 	bl	8000288 <__aeabi_dsub>
 8007702:	9d01      	ldr	r5, [sp, #4]
 8007704:	4682      	mov	sl, r0
 8007706:	468b      	mov	fp, r1
 8007708:	4649      	mov	r1, r9
 800770a:	4640      	mov	r0, r8
 800770c:	f7f9 fa24 	bl	8000b58 <__aeabi_d2iz>
 8007710:	4606      	mov	r6, r0
 8007712:	f7f8 ff07 	bl	8000524 <__aeabi_i2d>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4640      	mov	r0, r8
 800771c:	4649      	mov	r1, r9
 800771e:	f7f8 fdb3 	bl	8000288 <__aeabi_dsub>
 8007722:	3630      	adds	r6, #48	; 0x30
 8007724:	f805 6b01 	strb.w	r6, [r5], #1
 8007728:	4652      	mov	r2, sl
 800772a:	465b      	mov	r3, fp
 800772c:	4680      	mov	r8, r0
 800772e:	4689      	mov	r9, r1
 8007730:	f7f9 f9d4 	bl	8000adc <__aeabi_dcmplt>
 8007734:	2800      	cmp	r0, #0
 8007736:	d163      	bne.n	8007800 <_dtoa_r+0x608>
 8007738:	4642      	mov	r2, r8
 800773a:	464b      	mov	r3, r9
 800773c:	4936      	ldr	r1, [pc, #216]	; (8007818 <_dtoa_r+0x620>)
 800773e:	2000      	movs	r0, #0
 8007740:	f7f8 fda2 	bl	8000288 <__aeabi_dsub>
 8007744:	4652      	mov	r2, sl
 8007746:	465b      	mov	r3, fp
 8007748:	f7f9 f9c8 	bl	8000adc <__aeabi_dcmplt>
 800774c:	2800      	cmp	r0, #0
 800774e:	f040 80b5 	bne.w	80078bc <_dtoa_r+0x6c4>
 8007752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007754:	429d      	cmp	r5, r3
 8007756:	d081      	beq.n	800765c <_dtoa_r+0x464>
 8007758:	4b30      	ldr	r3, [pc, #192]	; (800781c <_dtoa_r+0x624>)
 800775a:	2200      	movs	r2, #0
 800775c:	4650      	mov	r0, sl
 800775e:	4659      	mov	r1, fp
 8007760:	f7f8 ff4a 	bl	80005f8 <__aeabi_dmul>
 8007764:	4b2d      	ldr	r3, [pc, #180]	; (800781c <_dtoa_r+0x624>)
 8007766:	4682      	mov	sl, r0
 8007768:	468b      	mov	fp, r1
 800776a:	4640      	mov	r0, r8
 800776c:	4649      	mov	r1, r9
 800776e:	2200      	movs	r2, #0
 8007770:	f7f8 ff42 	bl	80005f8 <__aeabi_dmul>
 8007774:	4680      	mov	r8, r0
 8007776:	4689      	mov	r9, r1
 8007778:	e7c6      	b.n	8007708 <_dtoa_r+0x510>
 800777a:	4650      	mov	r0, sl
 800777c:	4659      	mov	r1, fp
 800777e:	f7f8 ff3b 	bl	80005f8 <__aeabi_dmul>
 8007782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007784:	9d01      	ldr	r5, [sp, #4]
 8007786:	930f      	str	r3, [sp, #60]	; 0x3c
 8007788:	4682      	mov	sl, r0
 800778a:	468b      	mov	fp, r1
 800778c:	4649      	mov	r1, r9
 800778e:	4640      	mov	r0, r8
 8007790:	f7f9 f9e2 	bl	8000b58 <__aeabi_d2iz>
 8007794:	4606      	mov	r6, r0
 8007796:	f7f8 fec5 	bl	8000524 <__aeabi_i2d>
 800779a:	3630      	adds	r6, #48	; 0x30
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4640      	mov	r0, r8
 80077a2:	4649      	mov	r1, r9
 80077a4:	f7f8 fd70 	bl	8000288 <__aeabi_dsub>
 80077a8:	f805 6b01 	strb.w	r6, [r5], #1
 80077ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077ae:	429d      	cmp	r5, r3
 80077b0:	4680      	mov	r8, r0
 80077b2:	4689      	mov	r9, r1
 80077b4:	f04f 0200 	mov.w	r2, #0
 80077b8:	d124      	bne.n	8007804 <_dtoa_r+0x60c>
 80077ba:	4b1b      	ldr	r3, [pc, #108]	; (8007828 <_dtoa_r+0x630>)
 80077bc:	4650      	mov	r0, sl
 80077be:	4659      	mov	r1, fp
 80077c0:	f7f8 fd64 	bl	800028c <__adddf3>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4640      	mov	r0, r8
 80077ca:	4649      	mov	r1, r9
 80077cc:	f7f9 f9a4 	bl	8000b18 <__aeabi_dcmpgt>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d173      	bne.n	80078bc <_dtoa_r+0x6c4>
 80077d4:	4652      	mov	r2, sl
 80077d6:	465b      	mov	r3, fp
 80077d8:	4913      	ldr	r1, [pc, #76]	; (8007828 <_dtoa_r+0x630>)
 80077da:	2000      	movs	r0, #0
 80077dc:	f7f8 fd54 	bl	8000288 <__aeabi_dsub>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4640      	mov	r0, r8
 80077e6:	4649      	mov	r1, r9
 80077e8:	f7f9 f978 	bl	8000adc <__aeabi_dcmplt>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	f43f af35 	beq.w	800765c <_dtoa_r+0x464>
 80077f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80077f4:	1e6b      	subs	r3, r5, #1
 80077f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80077f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077fc:	2b30      	cmp	r3, #48	; 0x30
 80077fe:	d0f8      	beq.n	80077f2 <_dtoa_r+0x5fa>
 8007800:	9700      	str	r7, [sp, #0]
 8007802:	e049      	b.n	8007898 <_dtoa_r+0x6a0>
 8007804:	4b05      	ldr	r3, [pc, #20]	; (800781c <_dtoa_r+0x624>)
 8007806:	f7f8 fef7 	bl	80005f8 <__aeabi_dmul>
 800780a:	4680      	mov	r8, r0
 800780c:	4689      	mov	r9, r1
 800780e:	e7bd      	b.n	800778c <_dtoa_r+0x594>
 8007810:	080093c0 	.word	0x080093c0
 8007814:	08009398 	.word	0x08009398
 8007818:	3ff00000 	.word	0x3ff00000
 800781c:	40240000 	.word	0x40240000
 8007820:	401c0000 	.word	0x401c0000
 8007824:	40140000 	.word	0x40140000
 8007828:	3fe00000 	.word	0x3fe00000
 800782c:	9d01      	ldr	r5, [sp, #4]
 800782e:	4656      	mov	r6, sl
 8007830:	465f      	mov	r7, fp
 8007832:	4642      	mov	r2, r8
 8007834:	464b      	mov	r3, r9
 8007836:	4630      	mov	r0, r6
 8007838:	4639      	mov	r1, r7
 800783a:	f7f9 f807 	bl	800084c <__aeabi_ddiv>
 800783e:	f7f9 f98b 	bl	8000b58 <__aeabi_d2iz>
 8007842:	4682      	mov	sl, r0
 8007844:	f7f8 fe6e 	bl	8000524 <__aeabi_i2d>
 8007848:	4642      	mov	r2, r8
 800784a:	464b      	mov	r3, r9
 800784c:	f7f8 fed4 	bl	80005f8 <__aeabi_dmul>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4630      	mov	r0, r6
 8007856:	4639      	mov	r1, r7
 8007858:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800785c:	f7f8 fd14 	bl	8000288 <__aeabi_dsub>
 8007860:	f805 6b01 	strb.w	r6, [r5], #1
 8007864:	9e01      	ldr	r6, [sp, #4]
 8007866:	9f03      	ldr	r7, [sp, #12]
 8007868:	1bae      	subs	r6, r5, r6
 800786a:	42b7      	cmp	r7, r6
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	d135      	bne.n	80078de <_dtoa_r+0x6e6>
 8007872:	f7f8 fd0b 	bl	800028c <__adddf3>
 8007876:	4642      	mov	r2, r8
 8007878:	464b      	mov	r3, r9
 800787a:	4606      	mov	r6, r0
 800787c:	460f      	mov	r7, r1
 800787e:	f7f9 f94b 	bl	8000b18 <__aeabi_dcmpgt>
 8007882:	b9d0      	cbnz	r0, 80078ba <_dtoa_r+0x6c2>
 8007884:	4642      	mov	r2, r8
 8007886:	464b      	mov	r3, r9
 8007888:	4630      	mov	r0, r6
 800788a:	4639      	mov	r1, r7
 800788c:	f7f9 f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007890:	b110      	cbz	r0, 8007898 <_dtoa_r+0x6a0>
 8007892:	f01a 0f01 	tst.w	sl, #1
 8007896:	d110      	bne.n	80078ba <_dtoa_r+0x6c2>
 8007898:	4620      	mov	r0, r4
 800789a:	ee18 1a10 	vmov	r1, s16
 800789e:	f000 faf3 	bl	8007e88 <_Bfree>
 80078a2:	2300      	movs	r3, #0
 80078a4:	9800      	ldr	r0, [sp, #0]
 80078a6:	702b      	strb	r3, [r5, #0]
 80078a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078aa:	3001      	adds	r0, #1
 80078ac:	6018      	str	r0, [r3, #0]
 80078ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f43f acf1 	beq.w	8007298 <_dtoa_r+0xa0>
 80078b6:	601d      	str	r5, [r3, #0]
 80078b8:	e4ee      	b.n	8007298 <_dtoa_r+0xa0>
 80078ba:	9f00      	ldr	r7, [sp, #0]
 80078bc:	462b      	mov	r3, r5
 80078be:	461d      	mov	r5, r3
 80078c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078c4:	2a39      	cmp	r2, #57	; 0x39
 80078c6:	d106      	bne.n	80078d6 <_dtoa_r+0x6de>
 80078c8:	9a01      	ldr	r2, [sp, #4]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d1f7      	bne.n	80078be <_dtoa_r+0x6c6>
 80078ce:	9901      	ldr	r1, [sp, #4]
 80078d0:	2230      	movs	r2, #48	; 0x30
 80078d2:	3701      	adds	r7, #1
 80078d4:	700a      	strb	r2, [r1, #0]
 80078d6:	781a      	ldrb	r2, [r3, #0]
 80078d8:	3201      	adds	r2, #1
 80078da:	701a      	strb	r2, [r3, #0]
 80078dc:	e790      	b.n	8007800 <_dtoa_r+0x608>
 80078de:	4ba6      	ldr	r3, [pc, #664]	; (8007b78 <_dtoa_r+0x980>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	f7f8 fe89 	bl	80005f8 <__aeabi_dmul>
 80078e6:	2200      	movs	r2, #0
 80078e8:	2300      	movs	r3, #0
 80078ea:	4606      	mov	r6, r0
 80078ec:	460f      	mov	r7, r1
 80078ee:	f7f9 f8eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d09d      	beq.n	8007832 <_dtoa_r+0x63a>
 80078f6:	e7cf      	b.n	8007898 <_dtoa_r+0x6a0>
 80078f8:	9a08      	ldr	r2, [sp, #32]
 80078fa:	2a00      	cmp	r2, #0
 80078fc:	f000 80d7 	beq.w	8007aae <_dtoa_r+0x8b6>
 8007900:	9a06      	ldr	r2, [sp, #24]
 8007902:	2a01      	cmp	r2, #1
 8007904:	f300 80ba 	bgt.w	8007a7c <_dtoa_r+0x884>
 8007908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800790a:	2a00      	cmp	r2, #0
 800790c:	f000 80b2 	beq.w	8007a74 <_dtoa_r+0x87c>
 8007910:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007914:	9e07      	ldr	r6, [sp, #28]
 8007916:	9d04      	ldr	r5, [sp, #16]
 8007918:	9a04      	ldr	r2, [sp, #16]
 800791a:	441a      	add	r2, r3
 800791c:	9204      	str	r2, [sp, #16]
 800791e:	9a05      	ldr	r2, [sp, #20]
 8007920:	2101      	movs	r1, #1
 8007922:	441a      	add	r2, r3
 8007924:	4620      	mov	r0, r4
 8007926:	9205      	str	r2, [sp, #20]
 8007928:	f000 fb66 	bl	8007ff8 <__i2b>
 800792c:	4607      	mov	r7, r0
 800792e:	2d00      	cmp	r5, #0
 8007930:	dd0c      	ble.n	800794c <_dtoa_r+0x754>
 8007932:	9b05      	ldr	r3, [sp, #20]
 8007934:	2b00      	cmp	r3, #0
 8007936:	dd09      	ble.n	800794c <_dtoa_r+0x754>
 8007938:	42ab      	cmp	r3, r5
 800793a:	9a04      	ldr	r2, [sp, #16]
 800793c:	bfa8      	it	ge
 800793e:	462b      	movge	r3, r5
 8007940:	1ad2      	subs	r2, r2, r3
 8007942:	9204      	str	r2, [sp, #16]
 8007944:	9a05      	ldr	r2, [sp, #20]
 8007946:	1aed      	subs	r5, r5, r3
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	9305      	str	r3, [sp, #20]
 800794c:	9b07      	ldr	r3, [sp, #28]
 800794e:	b31b      	cbz	r3, 8007998 <_dtoa_r+0x7a0>
 8007950:	9b08      	ldr	r3, [sp, #32]
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 80af 	beq.w	8007ab6 <_dtoa_r+0x8be>
 8007958:	2e00      	cmp	r6, #0
 800795a:	dd13      	ble.n	8007984 <_dtoa_r+0x78c>
 800795c:	4639      	mov	r1, r7
 800795e:	4632      	mov	r2, r6
 8007960:	4620      	mov	r0, r4
 8007962:	f000 fc09 	bl	8008178 <__pow5mult>
 8007966:	ee18 2a10 	vmov	r2, s16
 800796a:	4601      	mov	r1, r0
 800796c:	4607      	mov	r7, r0
 800796e:	4620      	mov	r0, r4
 8007970:	f000 fb58 	bl	8008024 <__multiply>
 8007974:	ee18 1a10 	vmov	r1, s16
 8007978:	4680      	mov	r8, r0
 800797a:	4620      	mov	r0, r4
 800797c:	f000 fa84 	bl	8007e88 <_Bfree>
 8007980:	ee08 8a10 	vmov	s16, r8
 8007984:	9b07      	ldr	r3, [sp, #28]
 8007986:	1b9a      	subs	r2, r3, r6
 8007988:	d006      	beq.n	8007998 <_dtoa_r+0x7a0>
 800798a:	ee18 1a10 	vmov	r1, s16
 800798e:	4620      	mov	r0, r4
 8007990:	f000 fbf2 	bl	8008178 <__pow5mult>
 8007994:	ee08 0a10 	vmov	s16, r0
 8007998:	2101      	movs	r1, #1
 800799a:	4620      	mov	r0, r4
 800799c:	f000 fb2c 	bl	8007ff8 <__i2b>
 80079a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	4606      	mov	r6, r0
 80079a6:	f340 8088 	ble.w	8007aba <_dtoa_r+0x8c2>
 80079aa:	461a      	mov	r2, r3
 80079ac:	4601      	mov	r1, r0
 80079ae:	4620      	mov	r0, r4
 80079b0:	f000 fbe2 	bl	8008178 <__pow5mult>
 80079b4:	9b06      	ldr	r3, [sp, #24]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	4606      	mov	r6, r0
 80079ba:	f340 8081 	ble.w	8007ac0 <_dtoa_r+0x8c8>
 80079be:	f04f 0800 	mov.w	r8, #0
 80079c2:	6933      	ldr	r3, [r6, #16]
 80079c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80079c8:	6918      	ldr	r0, [r3, #16]
 80079ca:	f000 fac5 	bl	8007f58 <__hi0bits>
 80079ce:	f1c0 0020 	rsb	r0, r0, #32
 80079d2:	9b05      	ldr	r3, [sp, #20]
 80079d4:	4418      	add	r0, r3
 80079d6:	f010 001f 	ands.w	r0, r0, #31
 80079da:	f000 8092 	beq.w	8007b02 <_dtoa_r+0x90a>
 80079de:	f1c0 0320 	rsb	r3, r0, #32
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	f340 808a 	ble.w	8007afc <_dtoa_r+0x904>
 80079e8:	f1c0 001c 	rsb	r0, r0, #28
 80079ec:	9b04      	ldr	r3, [sp, #16]
 80079ee:	4403      	add	r3, r0
 80079f0:	9304      	str	r3, [sp, #16]
 80079f2:	9b05      	ldr	r3, [sp, #20]
 80079f4:	4403      	add	r3, r0
 80079f6:	4405      	add	r5, r0
 80079f8:	9305      	str	r3, [sp, #20]
 80079fa:	9b04      	ldr	r3, [sp, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	dd07      	ble.n	8007a10 <_dtoa_r+0x818>
 8007a00:	ee18 1a10 	vmov	r1, s16
 8007a04:	461a      	mov	r2, r3
 8007a06:	4620      	mov	r0, r4
 8007a08:	f000 fc10 	bl	800822c <__lshift>
 8007a0c:	ee08 0a10 	vmov	s16, r0
 8007a10:	9b05      	ldr	r3, [sp, #20]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	dd05      	ble.n	8007a22 <_dtoa_r+0x82a>
 8007a16:	4631      	mov	r1, r6
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f000 fc06 	bl	800822c <__lshift>
 8007a20:	4606      	mov	r6, r0
 8007a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d06e      	beq.n	8007b06 <_dtoa_r+0x90e>
 8007a28:	ee18 0a10 	vmov	r0, s16
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	f000 fc6d 	bl	800830c <__mcmp>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	da67      	bge.n	8007b06 <_dtoa_r+0x90e>
 8007a36:	9b00      	ldr	r3, [sp, #0]
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	ee18 1a10 	vmov	r1, s16
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	220a      	movs	r2, #10
 8007a42:	2300      	movs	r3, #0
 8007a44:	4620      	mov	r0, r4
 8007a46:	f000 fa41 	bl	8007ecc <__multadd>
 8007a4a:	9b08      	ldr	r3, [sp, #32]
 8007a4c:	ee08 0a10 	vmov	s16, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 81b1 	beq.w	8007db8 <_dtoa_r+0xbc0>
 8007a56:	2300      	movs	r3, #0
 8007a58:	4639      	mov	r1, r7
 8007a5a:	220a      	movs	r2, #10
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f000 fa35 	bl	8007ecc <__multadd>
 8007a62:	9b02      	ldr	r3, [sp, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	4607      	mov	r7, r0
 8007a68:	f300 808e 	bgt.w	8007b88 <_dtoa_r+0x990>
 8007a6c:	9b06      	ldr	r3, [sp, #24]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	dc51      	bgt.n	8007b16 <_dtoa_r+0x91e>
 8007a72:	e089      	b.n	8007b88 <_dtoa_r+0x990>
 8007a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a7a:	e74b      	b.n	8007914 <_dtoa_r+0x71c>
 8007a7c:	9b03      	ldr	r3, [sp, #12]
 8007a7e:	1e5e      	subs	r6, r3, #1
 8007a80:	9b07      	ldr	r3, [sp, #28]
 8007a82:	42b3      	cmp	r3, r6
 8007a84:	bfbf      	itttt	lt
 8007a86:	9b07      	ldrlt	r3, [sp, #28]
 8007a88:	9607      	strlt	r6, [sp, #28]
 8007a8a:	1af2      	sublt	r2, r6, r3
 8007a8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007a8e:	bfb6      	itet	lt
 8007a90:	189b      	addlt	r3, r3, r2
 8007a92:	1b9e      	subge	r6, r3, r6
 8007a94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	bfb8      	it	lt
 8007a9a:	2600      	movlt	r6, #0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	bfb7      	itett	lt
 8007aa0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007aa4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007aa8:	1a9d      	sublt	r5, r3, r2
 8007aaa:	2300      	movlt	r3, #0
 8007aac:	e734      	b.n	8007918 <_dtoa_r+0x720>
 8007aae:	9e07      	ldr	r6, [sp, #28]
 8007ab0:	9d04      	ldr	r5, [sp, #16]
 8007ab2:	9f08      	ldr	r7, [sp, #32]
 8007ab4:	e73b      	b.n	800792e <_dtoa_r+0x736>
 8007ab6:	9a07      	ldr	r2, [sp, #28]
 8007ab8:	e767      	b.n	800798a <_dtoa_r+0x792>
 8007aba:	9b06      	ldr	r3, [sp, #24]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	dc18      	bgt.n	8007af2 <_dtoa_r+0x8fa>
 8007ac0:	f1ba 0f00 	cmp.w	sl, #0
 8007ac4:	d115      	bne.n	8007af2 <_dtoa_r+0x8fa>
 8007ac6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007aca:	b993      	cbnz	r3, 8007af2 <_dtoa_r+0x8fa>
 8007acc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ad0:	0d1b      	lsrs	r3, r3, #20
 8007ad2:	051b      	lsls	r3, r3, #20
 8007ad4:	b183      	cbz	r3, 8007af8 <_dtoa_r+0x900>
 8007ad6:	9b04      	ldr	r3, [sp, #16]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	9304      	str	r3, [sp, #16]
 8007adc:	9b05      	ldr	r3, [sp, #20]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	9305      	str	r3, [sp, #20]
 8007ae2:	f04f 0801 	mov.w	r8, #1
 8007ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f47f af6a 	bne.w	80079c2 <_dtoa_r+0x7ca>
 8007aee:	2001      	movs	r0, #1
 8007af0:	e76f      	b.n	80079d2 <_dtoa_r+0x7da>
 8007af2:	f04f 0800 	mov.w	r8, #0
 8007af6:	e7f6      	b.n	8007ae6 <_dtoa_r+0x8ee>
 8007af8:	4698      	mov	r8, r3
 8007afa:	e7f4      	b.n	8007ae6 <_dtoa_r+0x8ee>
 8007afc:	f43f af7d 	beq.w	80079fa <_dtoa_r+0x802>
 8007b00:	4618      	mov	r0, r3
 8007b02:	301c      	adds	r0, #28
 8007b04:	e772      	b.n	80079ec <_dtoa_r+0x7f4>
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	dc37      	bgt.n	8007b7c <_dtoa_r+0x984>
 8007b0c:	9b06      	ldr	r3, [sp, #24]
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	dd34      	ble.n	8007b7c <_dtoa_r+0x984>
 8007b12:	9b03      	ldr	r3, [sp, #12]
 8007b14:	9302      	str	r3, [sp, #8]
 8007b16:	9b02      	ldr	r3, [sp, #8]
 8007b18:	b96b      	cbnz	r3, 8007b36 <_dtoa_r+0x93e>
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	2205      	movs	r2, #5
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f000 f9d4 	bl	8007ecc <__multadd>
 8007b24:	4601      	mov	r1, r0
 8007b26:	4606      	mov	r6, r0
 8007b28:	ee18 0a10 	vmov	r0, s16
 8007b2c:	f000 fbee 	bl	800830c <__mcmp>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	f73f adbb 	bgt.w	80076ac <_dtoa_r+0x4b4>
 8007b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b38:	9d01      	ldr	r5, [sp, #4]
 8007b3a:	43db      	mvns	r3, r3
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	f04f 0800 	mov.w	r8, #0
 8007b42:	4631      	mov	r1, r6
 8007b44:	4620      	mov	r0, r4
 8007b46:	f000 f99f 	bl	8007e88 <_Bfree>
 8007b4a:	2f00      	cmp	r7, #0
 8007b4c:	f43f aea4 	beq.w	8007898 <_dtoa_r+0x6a0>
 8007b50:	f1b8 0f00 	cmp.w	r8, #0
 8007b54:	d005      	beq.n	8007b62 <_dtoa_r+0x96a>
 8007b56:	45b8      	cmp	r8, r7
 8007b58:	d003      	beq.n	8007b62 <_dtoa_r+0x96a>
 8007b5a:	4641      	mov	r1, r8
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f000 f993 	bl	8007e88 <_Bfree>
 8007b62:	4639      	mov	r1, r7
 8007b64:	4620      	mov	r0, r4
 8007b66:	f000 f98f 	bl	8007e88 <_Bfree>
 8007b6a:	e695      	b.n	8007898 <_dtoa_r+0x6a0>
 8007b6c:	2600      	movs	r6, #0
 8007b6e:	4637      	mov	r7, r6
 8007b70:	e7e1      	b.n	8007b36 <_dtoa_r+0x93e>
 8007b72:	9700      	str	r7, [sp, #0]
 8007b74:	4637      	mov	r7, r6
 8007b76:	e599      	b.n	80076ac <_dtoa_r+0x4b4>
 8007b78:	40240000 	.word	0x40240000
 8007b7c:	9b08      	ldr	r3, [sp, #32]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 80ca 	beq.w	8007d18 <_dtoa_r+0xb20>
 8007b84:	9b03      	ldr	r3, [sp, #12]
 8007b86:	9302      	str	r3, [sp, #8]
 8007b88:	2d00      	cmp	r5, #0
 8007b8a:	dd05      	ble.n	8007b98 <_dtoa_r+0x9a0>
 8007b8c:	4639      	mov	r1, r7
 8007b8e:	462a      	mov	r2, r5
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 fb4b 	bl	800822c <__lshift>
 8007b96:	4607      	mov	r7, r0
 8007b98:	f1b8 0f00 	cmp.w	r8, #0
 8007b9c:	d05b      	beq.n	8007c56 <_dtoa_r+0xa5e>
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 f931 	bl	8007e08 <_Balloc>
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	b928      	cbnz	r0, 8007bb6 <_dtoa_r+0x9be>
 8007baa:	4b87      	ldr	r3, [pc, #540]	; (8007dc8 <_dtoa_r+0xbd0>)
 8007bac:	4602      	mov	r2, r0
 8007bae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007bb2:	f7ff bb3b 	b.w	800722c <_dtoa_r+0x34>
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	3202      	adds	r2, #2
 8007bba:	0092      	lsls	r2, r2, #2
 8007bbc:	f107 010c 	add.w	r1, r7, #12
 8007bc0:	300c      	adds	r0, #12
 8007bc2:	f000 f913 	bl	8007dec <memcpy>
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	4629      	mov	r1, r5
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 fb2e 	bl	800822c <__lshift>
 8007bd0:	9b01      	ldr	r3, [sp, #4]
 8007bd2:	f103 0901 	add.w	r9, r3, #1
 8007bd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007bda:	4413      	add	r3, r2
 8007bdc:	9305      	str	r3, [sp, #20]
 8007bde:	f00a 0301 	and.w	r3, sl, #1
 8007be2:	46b8      	mov	r8, r7
 8007be4:	9304      	str	r3, [sp, #16]
 8007be6:	4607      	mov	r7, r0
 8007be8:	4631      	mov	r1, r6
 8007bea:	ee18 0a10 	vmov	r0, s16
 8007bee:	f7ff fa77 	bl	80070e0 <quorem>
 8007bf2:	4641      	mov	r1, r8
 8007bf4:	9002      	str	r0, [sp, #8]
 8007bf6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007bfa:	ee18 0a10 	vmov	r0, s16
 8007bfe:	f000 fb85 	bl	800830c <__mcmp>
 8007c02:	463a      	mov	r2, r7
 8007c04:	9003      	str	r0, [sp, #12]
 8007c06:	4631      	mov	r1, r6
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f000 fb9b 	bl	8008344 <__mdiff>
 8007c0e:	68c2      	ldr	r2, [r0, #12]
 8007c10:	f109 3bff 	add.w	fp, r9, #4294967295
 8007c14:	4605      	mov	r5, r0
 8007c16:	bb02      	cbnz	r2, 8007c5a <_dtoa_r+0xa62>
 8007c18:	4601      	mov	r1, r0
 8007c1a:	ee18 0a10 	vmov	r0, s16
 8007c1e:	f000 fb75 	bl	800830c <__mcmp>
 8007c22:	4602      	mov	r2, r0
 8007c24:	4629      	mov	r1, r5
 8007c26:	4620      	mov	r0, r4
 8007c28:	9207      	str	r2, [sp, #28]
 8007c2a:	f000 f92d 	bl	8007e88 <_Bfree>
 8007c2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007c32:	ea43 0102 	orr.w	r1, r3, r2
 8007c36:	9b04      	ldr	r3, [sp, #16]
 8007c38:	430b      	orrs	r3, r1
 8007c3a:	464d      	mov	r5, r9
 8007c3c:	d10f      	bne.n	8007c5e <_dtoa_r+0xa66>
 8007c3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c42:	d02a      	beq.n	8007c9a <_dtoa_r+0xaa2>
 8007c44:	9b03      	ldr	r3, [sp, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	dd02      	ble.n	8007c50 <_dtoa_r+0xa58>
 8007c4a:	9b02      	ldr	r3, [sp, #8]
 8007c4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007c50:	f88b a000 	strb.w	sl, [fp]
 8007c54:	e775      	b.n	8007b42 <_dtoa_r+0x94a>
 8007c56:	4638      	mov	r0, r7
 8007c58:	e7ba      	b.n	8007bd0 <_dtoa_r+0x9d8>
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	e7e2      	b.n	8007c24 <_dtoa_r+0xa2c>
 8007c5e:	9b03      	ldr	r3, [sp, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	db04      	blt.n	8007c6e <_dtoa_r+0xa76>
 8007c64:	9906      	ldr	r1, [sp, #24]
 8007c66:	430b      	orrs	r3, r1
 8007c68:	9904      	ldr	r1, [sp, #16]
 8007c6a:	430b      	orrs	r3, r1
 8007c6c:	d122      	bne.n	8007cb4 <_dtoa_r+0xabc>
 8007c6e:	2a00      	cmp	r2, #0
 8007c70:	ddee      	ble.n	8007c50 <_dtoa_r+0xa58>
 8007c72:	ee18 1a10 	vmov	r1, s16
 8007c76:	2201      	movs	r2, #1
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f000 fad7 	bl	800822c <__lshift>
 8007c7e:	4631      	mov	r1, r6
 8007c80:	ee08 0a10 	vmov	s16, r0
 8007c84:	f000 fb42 	bl	800830c <__mcmp>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	dc03      	bgt.n	8007c94 <_dtoa_r+0xa9c>
 8007c8c:	d1e0      	bne.n	8007c50 <_dtoa_r+0xa58>
 8007c8e:	f01a 0f01 	tst.w	sl, #1
 8007c92:	d0dd      	beq.n	8007c50 <_dtoa_r+0xa58>
 8007c94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c98:	d1d7      	bne.n	8007c4a <_dtoa_r+0xa52>
 8007c9a:	2339      	movs	r3, #57	; 0x39
 8007c9c:	f88b 3000 	strb.w	r3, [fp]
 8007ca0:	462b      	mov	r3, r5
 8007ca2:	461d      	mov	r5, r3
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007caa:	2a39      	cmp	r2, #57	; 0x39
 8007cac:	d071      	beq.n	8007d92 <_dtoa_r+0xb9a>
 8007cae:	3201      	adds	r2, #1
 8007cb0:	701a      	strb	r2, [r3, #0]
 8007cb2:	e746      	b.n	8007b42 <_dtoa_r+0x94a>
 8007cb4:	2a00      	cmp	r2, #0
 8007cb6:	dd07      	ble.n	8007cc8 <_dtoa_r+0xad0>
 8007cb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007cbc:	d0ed      	beq.n	8007c9a <_dtoa_r+0xaa2>
 8007cbe:	f10a 0301 	add.w	r3, sl, #1
 8007cc2:	f88b 3000 	strb.w	r3, [fp]
 8007cc6:	e73c      	b.n	8007b42 <_dtoa_r+0x94a>
 8007cc8:	9b05      	ldr	r3, [sp, #20]
 8007cca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007cce:	4599      	cmp	r9, r3
 8007cd0:	d047      	beq.n	8007d62 <_dtoa_r+0xb6a>
 8007cd2:	ee18 1a10 	vmov	r1, s16
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	220a      	movs	r2, #10
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 f8f6 	bl	8007ecc <__multadd>
 8007ce0:	45b8      	cmp	r8, r7
 8007ce2:	ee08 0a10 	vmov	s16, r0
 8007ce6:	f04f 0300 	mov.w	r3, #0
 8007cea:	f04f 020a 	mov.w	r2, #10
 8007cee:	4641      	mov	r1, r8
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	d106      	bne.n	8007d02 <_dtoa_r+0xb0a>
 8007cf4:	f000 f8ea 	bl	8007ecc <__multadd>
 8007cf8:	4680      	mov	r8, r0
 8007cfa:	4607      	mov	r7, r0
 8007cfc:	f109 0901 	add.w	r9, r9, #1
 8007d00:	e772      	b.n	8007be8 <_dtoa_r+0x9f0>
 8007d02:	f000 f8e3 	bl	8007ecc <__multadd>
 8007d06:	4639      	mov	r1, r7
 8007d08:	4680      	mov	r8, r0
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	220a      	movs	r2, #10
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f000 f8dc 	bl	8007ecc <__multadd>
 8007d14:	4607      	mov	r7, r0
 8007d16:	e7f1      	b.n	8007cfc <_dtoa_r+0xb04>
 8007d18:	9b03      	ldr	r3, [sp, #12]
 8007d1a:	9302      	str	r3, [sp, #8]
 8007d1c:	9d01      	ldr	r5, [sp, #4]
 8007d1e:	ee18 0a10 	vmov	r0, s16
 8007d22:	4631      	mov	r1, r6
 8007d24:	f7ff f9dc 	bl	80070e0 <quorem>
 8007d28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007d2c:	9b01      	ldr	r3, [sp, #4]
 8007d2e:	f805 ab01 	strb.w	sl, [r5], #1
 8007d32:	1aea      	subs	r2, r5, r3
 8007d34:	9b02      	ldr	r3, [sp, #8]
 8007d36:	4293      	cmp	r3, r2
 8007d38:	dd09      	ble.n	8007d4e <_dtoa_r+0xb56>
 8007d3a:	ee18 1a10 	vmov	r1, s16
 8007d3e:	2300      	movs	r3, #0
 8007d40:	220a      	movs	r2, #10
 8007d42:	4620      	mov	r0, r4
 8007d44:	f000 f8c2 	bl	8007ecc <__multadd>
 8007d48:	ee08 0a10 	vmov	s16, r0
 8007d4c:	e7e7      	b.n	8007d1e <_dtoa_r+0xb26>
 8007d4e:	9b02      	ldr	r3, [sp, #8]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bfc8      	it	gt
 8007d54:	461d      	movgt	r5, r3
 8007d56:	9b01      	ldr	r3, [sp, #4]
 8007d58:	bfd8      	it	le
 8007d5a:	2501      	movle	r5, #1
 8007d5c:	441d      	add	r5, r3
 8007d5e:	f04f 0800 	mov.w	r8, #0
 8007d62:	ee18 1a10 	vmov	r1, s16
 8007d66:	2201      	movs	r2, #1
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f000 fa5f 	bl	800822c <__lshift>
 8007d6e:	4631      	mov	r1, r6
 8007d70:	ee08 0a10 	vmov	s16, r0
 8007d74:	f000 faca 	bl	800830c <__mcmp>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	dc91      	bgt.n	8007ca0 <_dtoa_r+0xaa8>
 8007d7c:	d102      	bne.n	8007d84 <_dtoa_r+0xb8c>
 8007d7e:	f01a 0f01 	tst.w	sl, #1
 8007d82:	d18d      	bne.n	8007ca0 <_dtoa_r+0xaa8>
 8007d84:	462b      	mov	r3, r5
 8007d86:	461d      	mov	r5, r3
 8007d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d8c:	2a30      	cmp	r2, #48	; 0x30
 8007d8e:	d0fa      	beq.n	8007d86 <_dtoa_r+0xb8e>
 8007d90:	e6d7      	b.n	8007b42 <_dtoa_r+0x94a>
 8007d92:	9a01      	ldr	r2, [sp, #4]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d184      	bne.n	8007ca2 <_dtoa_r+0xaaa>
 8007d98:	9b00      	ldr	r3, [sp, #0]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	2331      	movs	r3, #49	; 0x31
 8007da0:	7013      	strb	r3, [r2, #0]
 8007da2:	e6ce      	b.n	8007b42 <_dtoa_r+0x94a>
 8007da4:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <_dtoa_r+0xbd4>)
 8007da6:	f7ff ba95 	b.w	80072d4 <_dtoa_r+0xdc>
 8007daa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f47f aa6e 	bne.w	800728e <_dtoa_r+0x96>
 8007db2:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <_dtoa_r+0xbd8>)
 8007db4:	f7ff ba8e 	b.w	80072d4 <_dtoa_r+0xdc>
 8007db8:	9b02      	ldr	r3, [sp, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	dcae      	bgt.n	8007d1c <_dtoa_r+0xb24>
 8007dbe:	9b06      	ldr	r3, [sp, #24]
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	f73f aea8 	bgt.w	8007b16 <_dtoa_r+0x91e>
 8007dc6:	e7a9      	b.n	8007d1c <_dtoa_r+0xb24>
 8007dc8:	08009327 	.word	0x08009327
 8007dcc:	08009284 	.word	0x08009284
 8007dd0:	080092a8 	.word	0x080092a8

08007dd4 <_localeconv_r>:
 8007dd4:	4800      	ldr	r0, [pc, #0]	; (8007dd8 <_localeconv_r+0x4>)
 8007dd6:	4770      	bx	lr
 8007dd8:	2000019c 	.word	0x2000019c

08007ddc <malloc>:
 8007ddc:	4b02      	ldr	r3, [pc, #8]	; (8007de8 <malloc+0xc>)
 8007dde:	4601      	mov	r1, r0
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	f000 bc17 	b.w	8008614 <_malloc_r>
 8007de6:	bf00      	nop
 8007de8:	20000048 	.word	0x20000048

08007dec <memcpy>:
 8007dec:	440a      	add	r2, r1
 8007dee:	4291      	cmp	r1, r2
 8007df0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007df4:	d100      	bne.n	8007df8 <memcpy+0xc>
 8007df6:	4770      	bx	lr
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e02:	4291      	cmp	r1, r2
 8007e04:	d1f9      	bne.n	8007dfa <memcpy+0xe>
 8007e06:	bd10      	pop	{r4, pc}

08007e08 <_Balloc>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	460d      	mov	r5, r1
 8007e10:	b976      	cbnz	r6, 8007e30 <_Balloc+0x28>
 8007e12:	2010      	movs	r0, #16
 8007e14:	f7ff ffe2 	bl	8007ddc <malloc>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	6260      	str	r0, [r4, #36]	; 0x24
 8007e1c:	b920      	cbnz	r0, 8007e28 <_Balloc+0x20>
 8007e1e:	4b18      	ldr	r3, [pc, #96]	; (8007e80 <_Balloc+0x78>)
 8007e20:	4818      	ldr	r0, [pc, #96]	; (8007e84 <_Balloc+0x7c>)
 8007e22:	2166      	movs	r1, #102	; 0x66
 8007e24:	f000 fc7a 	bl	800871c <__assert_func>
 8007e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e2c:	6006      	str	r6, [r0, #0]
 8007e2e:	60c6      	str	r6, [r0, #12]
 8007e30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e32:	68f3      	ldr	r3, [r6, #12]
 8007e34:	b183      	cbz	r3, 8007e58 <_Balloc+0x50>
 8007e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e3e:	b9b8      	cbnz	r0, 8007e70 <_Balloc+0x68>
 8007e40:	2101      	movs	r1, #1
 8007e42:	fa01 f605 	lsl.w	r6, r1, r5
 8007e46:	1d72      	adds	r2, r6, #5
 8007e48:	0092      	lsls	r2, r2, #2
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 fb60 	bl	8008510 <_calloc_r>
 8007e50:	b160      	cbz	r0, 8007e6c <_Balloc+0x64>
 8007e52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e56:	e00e      	b.n	8007e76 <_Balloc+0x6e>
 8007e58:	2221      	movs	r2, #33	; 0x21
 8007e5a:	2104      	movs	r1, #4
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 fb57 	bl	8008510 <_calloc_r>
 8007e62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e64:	60f0      	str	r0, [r6, #12]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e4      	bne.n	8007e36 <_Balloc+0x2e>
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}
 8007e70:	6802      	ldr	r2, [r0, #0]
 8007e72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e76:	2300      	movs	r3, #0
 8007e78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e7c:	e7f7      	b.n	8007e6e <_Balloc+0x66>
 8007e7e:	bf00      	nop
 8007e80:	080092b5 	.word	0x080092b5
 8007e84:	08009338 	.word	0x08009338

08007e88 <_Bfree>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	460c      	mov	r4, r1
 8007e90:	b976      	cbnz	r6, 8007eb0 <_Bfree+0x28>
 8007e92:	2010      	movs	r0, #16
 8007e94:	f7ff ffa2 	bl	8007ddc <malloc>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	6268      	str	r0, [r5, #36]	; 0x24
 8007e9c:	b920      	cbnz	r0, 8007ea8 <_Bfree+0x20>
 8007e9e:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <_Bfree+0x3c>)
 8007ea0:	4809      	ldr	r0, [pc, #36]	; (8007ec8 <_Bfree+0x40>)
 8007ea2:	218a      	movs	r1, #138	; 0x8a
 8007ea4:	f000 fc3a 	bl	800871c <__assert_func>
 8007ea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007eac:	6006      	str	r6, [r0, #0]
 8007eae:	60c6      	str	r6, [r0, #12]
 8007eb0:	b13c      	cbz	r4, 8007ec2 <_Bfree+0x3a>
 8007eb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007eb4:	6862      	ldr	r2, [r4, #4]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ebc:	6021      	str	r1, [r4, #0]
 8007ebe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
 8007ec4:	080092b5 	.word	0x080092b5
 8007ec8:	08009338 	.word	0x08009338

08007ecc <__multadd>:
 8007ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed0:	690d      	ldr	r5, [r1, #16]
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	461e      	mov	r6, r3
 8007ed8:	f101 0c14 	add.w	ip, r1, #20
 8007edc:	2000      	movs	r0, #0
 8007ede:	f8dc 3000 	ldr.w	r3, [ip]
 8007ee2:	b299      	uxth	r1, r3
 8007ee4:	fb02 6101 	mla	r1, r2, r1, r6
 8007ee8:	0c1e      	lsrs	r6, r3, #16
 8007eea:	0c0b      	lsrs	r3, r1, #16
 8007eec:	fb02 3306 	mla	r3, r2, r6, r3
 8007ef0:	b289      	uxth	r1, r1
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ef8:	4285      	cmp	r5, r0
 8007efa:	f84c 1b04 	str.w	r1, [ip], #4
 8007efe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f02:	dcec      	bgt.n	8007ede <__multadd+0x12>
 8007f04:	b30e      	cbz	r6, 8007f4a <__multadd+0x7e>
 8007f06:	68a3      	ldr	r3, [r4, #8]
 8007f08:	42ab      	cmp	r3, r5
 8007f0a:	dc19      	bgt.n	8007f40 <__multadd+0x74>
 8007f0c:	6861      	ldr	r1, [r4, #4]
 8007f0e:	4638      	mov	r0, r7
 8007f10:	3101      	adds	r1, #1
 8007f12:	f7ff ff79 	bl	8007e08 <_Balloc>
 8007f16:	4680      	mov	r8, r0
 8007f18:	b928      	cbnz	r0, 8007f26 <__multadd+0x5a>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	4b0c      	ldr	r3, [pc, #48]	; (8007f50 <__multadd+0x84>)
 8007f1e:	480d      	ldr	r0, [pc, #52]	; (8007f54 <__multadd+0x88>)
 8007f20:	21b5      	movs	r1, #181	; 0xb5
 8007f22:	f000 fbfb 	bl	800871c <__assert_func>
 8007f26:	6922      	ldr	r2, [r4, #16]
 8007f28:	3202      	adds	r2, #2
 8007f2a:	f104 010c 	add.w	r1, r4, #12
 8007f2e:	0092      	lsls	r2, r2, #2
 8007f30:	300c      	adds	r0, #12
 8007f32:	f7ff ff5b 	bl	8007dec <memcpy>
 8007f36:	4621      	mov	r1, r4
 8007f38:	4638      	mov	r0, r7
 8007f3a:	f7ff ffa5 	bl	8007e88 <_Bfree>
 8007f3e:	4644      	mov	r4, r8
 8007f40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f44:	3501      	adds	r5, #1
 8007f46:	615e      	str	r6, [r3, #20]
 8007f48:	6125      	str	r5, [r4, #16]
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f50:	08009327 	.word	0x08009327
 8007f54:	08009338 	.word	0x08009338

08007f58 <__hi0bits>:
 8007f58:	0c03      	lsrs	r3, r0, #16
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	b9d3      	cbnz	r3, 8007f94 <__hi0bits+0x3c>
 8007f5e:	0400      	lsls	r0, r0, #16
 8007f60:	2310      	movs	r3, #16
 8007f62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f66:	bf04      	itt	eq
 8007f68:	0200      	lsleq	r0, r0, #8
 8007f6a:	3308      	addeq	r3, #8
 8007f6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f70:	bf04      	itt	eq
 8007f72:	0100      	lsleq	r0, r0, #4
 8007f74:	3304      	addeq	r3, #4
 8007f76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f7a:	bf04      	itt	eq
 8007f7c:	0080      	lsleq	r0, r0, #2
 8007f7e:	3302      	addeq	r3, #2
 8007f80:	2800      	cmp	r0, #0
 8007f82:	db05      	blt.n	8007f90 <__hi0bits+0x38>
 8007f84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f88:	f103 0301 	add.w	r3, r3, #1
 8007f8c:	bf08      	it	eq
 8007f8e:	2320      	moveq	r3, #32
 8007f90:	4618      	mov	r0, r3
 8007f92:	4770      	bx	lr
 8007f94:	2300      	movs	r3, #0
 8007f96:	e7e4      	b.n	8007f62 <__hi0bits+0xa>

08007f98 <__lo0bits>:
 8007f98:	6803      	ldr	r3, [r0, #0]
 8007f9a:	f013 0207 	ands.w	r2, r3, #7
 8007f9e:	4601      	mov	r1, r0
 8007fa0:	d00b      	beq.n	8007fba <__lo0bits+0x22>
 8007fa2:	07da      	lsls	r2, r3, #31
 8007fa4:	d423      	bmi.n	8007fee <__lo0bits+0x56>
 8007fa6:	0798      	lsls	r0, r3, #30
 8007fa8:	bf49      	itett	mi
 8007faa:	085b      	lsrmi	r3, r3, #1
 8007fac:	089b      	lsrpl	r3, r3, #2
 8007fae:	2001      	movmi	r0, #1
 8007fb0:	600b      	strmi	r3, [r1, #0]
 8007fb2:	bf5c      	itt	pl
 8007fb4:	600b      	strpl	r3, [r1, #0]
 8007fb6:	2002      	movpl	r0, #2
 8007fb8:	4770      	bx	lr
 8007fba:	b298      	uxth	r0, r3
 8007fbc:	b9a8      	cbnz	r0, 8007fea <__lo0bits+0x52>
 8007fbe:	0c1b      	lsrs	r3, r3, #16
 8007fc0:	2010      	movs	r0, #16
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	b90a      	cbnz	r2, 8007fca <__lo0bits+0x32>
 8007fc6:	3008      	adds	r0, #8
 8007fc8:	0a1b      	lsrs	r3, r3, #8
 8007fca:	071a      	lsls	r2, r3, #28
 8007fcc:	bf04      	itt	eq
 8007fce:	091b      	lsreq	r3, r3, #4
 8007fd0:	3004      	addeq	r0, #4
 8007fd2:	079a      	lsls	r2, r3, #30
 8007fd4:	bf04      	itt	eq
 8007fd6:	089b      	lsreq	r3, r3, #2
 8007fd8:	3002      	addeq	r0, #2
 8007fda:	07da      	lsls	r2, r3, #31
 8007fdc:	d403      	bmi.n	8007fe6 <__lo0bits+0x4e>
 8007fde:	085b      	lsrs	r3, r3, #1
 8007fe0:	f100 0001 	add.w	r0, r0, #1
 8007fe4:	d005      	beq.n	8007ff2 <__lo0bits+0x5a>
 8007fe6:	600b      	str	r3, [r1, #0]
 8007fe8:	4770      	bx	lr
 8007fea:	4610      	mov	r0, r2
 8007fec:	e7e9      	b.n	8007fc2 <__lo0bits+0x2a>
 8007fee:	2000      	movs	r0, #0
 8007ff0:	4770      	bx	lr
 8007ff2:	2020      	movs	r0, #32
 8007ff4:	4770      	bx	lr
	...

08007ff8 <__i2b>:
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	f7ff ff03 	bl	8007e08 <_Balloc>
 8008002:	4602      	mov	r2, r0
 8008004:	b928      	cbnz	r0, 8008012 <__i2b+0x1a>
 8008006:	4b05      	ldr	r3, [pc, #20]	; (800801c <__i2b+0x24>)
 8008008:	4805      	ldr	r0, [pc, #20]	; (8008020 <__i2b+0x28>)
 800800a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800800e:	f000 fb85 	bl	800871c <__assert_func>
 8008012:	2301      	movs	r3, #1
 8008014:	6144      	str	r4, [r0, #20]
 8008016:	6103      	str	r3, [r0, #16]
 8008018:	bd10      	pop	{r4, pc}
 800801a:	bf00      	nop
 800801c:	08009327 	.word	0x08009327
 8008020:	08009338 	.word	0x08009338

08008024 <__multiply>:
 8008024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008028:	4691      	mov	r9, r2
 800802a:	690a      	ldr	r2, [r1, #16]
 800802c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008030:	429a      	cmp	r2, r3
 8008032:	bfb8      	it	lt
 8008034:	460b      	movlt	r3, r1
 8008036:	460c      	mov	r4, r1
 8008038:	bfbc      	itt	lt
 800803a:	464c      	movlt	r4, r9
 800803c:	4699      	movlt	r9, r3
 800803e:	6927      	ldr	r7, [r4, #16]
 8008040:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008044:	68a3      	ldr	r3, [r4, #8]
 8008046:	6861      	ldr	r1, [r4, #4]
 8008048:	eb07 060a 	add.w	r6, r7, sl
 800804c:	42b3      	cmp	r3, r6
 800804e:	b085      	sub	sp, #20
 8008050:	bfb8      	it	lt
 8008052:	3101      	addlt	r1, #1
 8008054:	f7ff fed8 	bl	8007e08 <_Balloc>
 8008058:	b930      	cbnz	r0, 8008068 <__multiply+0x44>
 800805a:	4602      	mov	r2, r0
 800805c:	4b44      	ldr	r3, [pc, #272]	; (8008170 <__multiply+0x14c>)
 800805e:	4845      	ldr	r0, [pc, #276]	; (8008174 <__multiply+0x150>)
 8008060:	f240 115d 	movw	r1, #349	; 0x15d
 8008064:	f000 fb5a 	bl	800871c <__assert_func>
 8008068:	f100 0514 	add.w	r5, r0, #20
 800806c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008070:	462b      	mov	r3, r5
 8008072:	2200      	movs	r2, #0
 8008074:	4543      	cmp	r3, r8
 8008076:	d321      	bcc.n	80080bc <__multiply+0x98>
 8008078:	f104 0314 	add.w	r3, r4, #20
 800807c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008080:	f109 0314 	add.w	r3, r9, #20
 8008084:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008088:	9202      	str	r2, [sp, #8]
 800808a:	1b3a      	subs	r2, r7, r4
 800808c:	3a15      	subs	r2, #21
 800808e:	f022 0203 	bic.w	r2, r2, #3
 8008092:	3204      	adds	r2, #4
 8008094:	f104 0115 	add.w	r1, r4, #21
 8008098:	428f      	cmp	r7, r1
 800809a:	bf38      	it	cc
 800809c:	2204      	movcc	r2, #4
 800809e:	9201      	str	r2, [sp, #4]
 80080a0:	9a02      	ldr	r2, [sp, #8]
 80080a2:	9303      	str	r3, [sp, #12]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d80c      	bhi.n	80080c2 <__multiply+0x9e>
 80080a8:	2e00      	cmp	r6, #0
 80080aa:	dd03      	ble.n	80080b4 <__multiply+0x90>
 80080ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d05a      	beq.n	800816a <__multiply+0x146>
 80080b4:	6106      	str	r6, [r0, #16]
 80080b6:	b005      	add	sp, #20
 80080b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080bc:	f843 2b04 	str.w	r2, [r3], #4
 80080c0:	e7d8      	b.n	8008074 <__multiply+0x50>
 80080c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80080c6:	f1ba 0f00 	cmp.w	sl, #0
 80080ca:	d024      	beq.n	8008116 <__multiply+0xf2>
 80080cc:	f104 0e14 	add.w	lr, r4, #20
 80080d0:	46a9      	mov	r9, r5
 80080d2:	f04f 0c00 	mov.w	ip, #0
 80080d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80080da:	f8d9 1000 	ldr.w	r1, [r9]
 80080de:	fa1f fb82 	uxth.w	fp, r2
 80080e2:	b289      	uxth	r1, r1
 80080e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80080e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80080ec:	f8d9 2000 	ldr.w	r2, [r9]
 80080f0:	4461      	add	r1, ip
 80080f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80080fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080fe:	b289      	uxth	r1, r1
 8008100:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008104:	4577      	cmp	r7, lr
 8008106:	f849 1b04 	str.w	r1, [r9], #4
 800810a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800810e:	d8e2      	bhi.n	80080d6 <__multiply+0xb2>
 8008110:	9a01      	ldr	r2, [sp, #4]
 8008112:	f845 c002 	str.w	ip, [r5, r2]
 8008116:	9a03      	ldr	r2, [sp, #12]
 8008118:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800811c:	3304      	adds	r3, #4
 800811e:	f1b9 0f00 	cmp.w	r9, #0
 8008122:	d020      	beq.n	8008166 <__multiply+0x142>
 8008124:	6829      	ldr	r1, [r5, #0]
 8008126:	f104 0c14 	add.w	ip, r4, #20
 800812a:	46ae      	mov	lr, r5
 800812c:	f04f 0a00 	mov.w	sl, #0
 8008130:	f8bc b000 	ldrh.w	fp, [ip]
 8008134:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008138:	fb09 220b 	mla	r2, r9, fp, r2
 800813c:	4492      	add	sl, r2
 800813e:	b289      	uxth	r1, r1
 8008140:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008144:	f84e 1b04 	str.w	r1, [lr], #4
 8008148:	f85c 2b04 	ldr.w	r2, [ip], #4
 800814c:	f8be 1000 	ldrh.w	r1, [lr]
 8008150:	0c12      	lsrs	r2, r2, #16
 8008152:	fb09 1102 	mla	r1, r9, r2, r1
 8008156:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800815a:	4567      	cmp	r7, ip
 800815c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008160:	d8e6      	bhi.n	8008130 <__multiply+0x10c>
 8008162:	9a01      	ldr	r2, [sp, #4]
 8008164:	50a9      	str	r1, [r5, r2]
 8008166:	3504      	adds	r5, #4
 8008168:	e79a      	b.n	80080a0 <__multiply+0x7c>
 800816a:	3e01      	subs	r6, #1
 800816c:	e79c      	b.n	80080a8 <__multiply+0x84>
 800816e:	bf00      	nop
 8008170:	08009327 	.word	0x08009327
 8008174:	08009338 	.word	0x08009338

08008178 <__pow5mult>:
 8008178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800817c:	4615      	mov	r5, r2
 800817e:	f012 0203 	ands.w	r2, r2, #3
 8008182:	4606      	mov	r6, r0
 8008184:	460f      	mov	r7, r1
 8008186:	d007      	beq.n	8008198 <__pow5mult+0x20>
 8008188:	4c25      	ldr	r4, [pc, #148]	; (8008220 <__pow5mult+0xa8>)
 800818a:	3a01      	subs	r2, #1
 800818c:	2300      	movs	r3, #0
 800818e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008192:	f7ff fe9b 	bl	8007ecc <__multadd>
 8008196:	4607      	mov	r7, r0
 8008198:	10ad      	asrs	r5, r5, #2
 800819a:	d03d      	beq.n	8008218 <__pow5mult+0xa0>
 800819c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800819e:	b97c      	cbnz	r4, 80081c0 <__pow5mult+0x48>
 80081a0:	2010      	movs	r0, #16
 80081a2:	f7ff fe1b 	bl	8007ddc <malloc>
 80081a6:	4602      	mov	r2, r0
 80081a8:	6270      	str	r0, [r6, #36]	; 0x24
 80081aa:	b928      	cbnz	r0, 80081b8 <__pow5mult+0x40>
 80081ac:	4b1d      	ldr	r3, [pc, #116]	; (8008224 <__pow5mult+0xac>)
 80081ae:	481e      	ldr	r0, [pc, #120]	; (8008228 <__pow5mult+0xb0>)
 80081b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80081b4:	f000 fab2 	bl	800871c <__assert_func>
 80081b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081bc:	6004      	str	r4, [r0, #0]
 80081be:	60c4      	str	r4, [r0, #12]
 80081c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80081c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081c8:	b94c      	cbnz	r4, 80081de <__pow5mult+0x66>
 80081ca:	f240 2171 	movw	r1, #625	; 0x271
 80081ce:	4630      	mov	r0, r6
 80081d0:	f7ff ff12 	bl	8007ff8 <__i2b>
 80081d4:	2300      	movs	r3, #0
 80081d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80081da:	4604      	mov	r4, r0
 80081dc:	6003      	str	r3, [r0, #0]
 80081de:	f04f 0900 	mov.w	r9, #0
 80081e2:	07eb      	lsls	r3, r5, #31
 80081e4:	d50a      	bpl.n	80081fc <__pow5mult+0x84>
 80081e6:	4639      	mov	r1, r7
 80081e8:	4622      	mov	r2, r4
 80081ea:	4630      	mov	r0, r6
 80081ec:	f7ff ff1a 	bl	8008024 <__multiply>
 80081f0:	4639      	mov	r1, r7
 80081f2:	4680      	mov	r8, r0
 80081f4:	4630      	mov	r0, r6
 80081f6:	f7ff fe47 	bl	8007e88 <_Bfree>
 80081fa:	4647      	mov	r7, r8
 80081fc:	106d      	asrs	r5, r5, #1
 80081fe:	d00b      	beq.n	8008218 <__pow5mult+0xa0>
 8008200:	6820      	ldr	r0, [r4, #0]
 8008202:	b938      	cbnz	r0, 8008214 <__pow5mult+0x9c>
 8008204:	4622      	mov	r2, r4
 8008206:	4621      	mov	r1, r4
 8008208:	4630      	mov	r0, r6
 800820a:	f7ff ff0b 	bl	8008024 <__multiply>
 800820e:	6020      	str	r0, [r4, #0]
 8008210:	f8c0 9000 	str.w	r9, [r0]
 8008214:	4604      	mov	r4, r0
 8008216:	e7e4      	b.n	80081e2 <__pow5mult+0x6a>
 8008218:	4638      	mov	r0, r7
 800821a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800821e:	bf00      	nop
 8008220:	08009488 	.word	0x08009488
 8008224:	080092b5 	.word	0x080092b5
 8008228:	08009338 	.word	0x08009338

0800822c <__lshift>:
 800822c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008230:	460c      	mov	r4, r1
 8008232:	6849      	ldr	r1, [r1, #4]
 8008234:	6923      	ldr	r3, [r4, #16]
 8008236:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800823a:	68a3      	ldr	r3, [r4, #8]
 800823c:	4607      	mov	r7, r0
 800823e:	4691      	mov	r9, r2
 8008240:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008244:	f108 0601 	add.w	r6, r8, #1
 8008248:	42b3      	cmp	r3, r6
 800824a:	db0b      	blt.n	8008264 <__lshift+0x38>
 800824c:	4638      	mov	r0, r7
 800824e:	f7ff fddb 	bl	8007e08 <_Balloc>
 8008252:	4605      	mov	r5, r0
 8008254:	b948      	cbnz	r0, 800826a <__lshift+0x3e>
 8008256:	4602      	mov	r2, r0
 8008258:	4b2a      	ldr	r3, [pc, #168]	; (8008304 <__lshift+0xd8>)
 800825a:	482b      	ldr	r0, [pc, #172]	; (8008308 <__lshift+0xdc>)
 800825c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008260:	f000 fa5c 	bl	800871c <__assert_func>
 8008264:	3101      	adds	r1, #1
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	e7ee      	b.n	8008248 <__lshift+0x1c>
 800826a:	2300      	movs	r3, #0
 800826c:	f100 0114 	add.w	r1, r0, #20
 8008270:	f100 0210 	add.w	r2, r0, #16
 8008274:	4618      	mov	r0, r3
 8008276:	4553      	cmp	r3, sl
 8008278:	db37      	blt.n	80082ea <__lshift+0xbe>
 800827a:	6920      	ldr	r0, [r4, #16]
 800827c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008280:	f104 0314 	add.w	r3, r4, #20
 8008284:	f019 091f 	ands.w	r9, r9, #31
 8008288:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800828c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008290:	d02f      	beq.n	80082f2 <__lshift+0xc6>
 8008292:	f1c9 0e20 	rsb	lr, r9, #32
 8008296:	468a      	mov	sl, r1
 8008298:	f04f 0c00 	mov.w	ip, #0
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	fa02 f209 	lsl.w	r2, r2, r9
 80082a2:	ea42 020c 	orr.w	r2, r2, ip
 80082a6:	f84a 2b04 	str.w	r2, [sl], #4
 80082aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ae:	4298      	cmp	r0, r3
 80082b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80082b4:	d8f2      	bhi.n	800829c <__lshift+0x70>
 80082b6:	1b03      	subs	r3, r0, r4
 80082b8:	3b15      	subs	r3, #21
 80082ba:	f023 0303 	bic.w	r3, r3, #3
 80082be:	3304      	adds	r3, #4
 80082c0:	f104 0215 	add.w	r2, r4, #21
 80082c4:	4290      	cmp	r0, r2
 80082c6:	bf38      	it	cc
 80082c8:	2304      	movcc	r3, #4
 80082ca:	f841 c003 	str.w	ip, [r1, r3]
 80082ce:	f1bc 0f00 	cmp.w	ip, #0
 80082d2:	d001      	beq.n	80082d8 <__lshift+0xac>
 80082d4:	f108 0602 	add.w	r6, r8, #2
 80082d8:	3e01      	subs	r6, #1
 80082da:	4638      	mov	r0, r7
 80082dc:	612e      	str	r6, [r5, #16]
 80082de:	4621      	mov	r1, r4
 80082e0:	f7ff fdd2 	bl	8007e88 <_Bfree>
 80082e4:	4628      	mov	r0, r5
 80082e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80082ee:	3301      	adds	r3, #1
 80082f0:	e7c1      	b.n	8008276 <__lshift+0x4a>
 80082f2:	3904      	subs	r1, #4
 80082f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80082fc:	4298      	cmp	r0, r3
 80082fe:	d8f9      	bhi.n	80082f4 <__lshift+0xc8>
 8008300:	e7ea      	b.n	80082d8 <__lshift+0xac>
 8008302:	bf00      	nop
 8008304:	08009327 	.word	0x08009327
 8008308:	08009338 	.word	0x08009338

0800830c <__mcmp>:
 800830c:	b530      	push	{r4, r5, lr}
 800830e:	6902      	ldr	r2, [r0, #16]
 8008310:	690c      	ldr	r4, [r1, #16]
 8008312:	1b12      	subs	r2, r2, r4
 8008314:	d10e      	bne.n	8008334 <__mcmp+0x28>
 8008316:	f100 0314 	add.w	r3, r0, #20
 800831a:	3114      	adds	r1, #20
 800831c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008320:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008324:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008328:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800832c:	42a5      	cmp	r5, r4
 800832e:	d003      	beq.n	8008338 <__mcmp+0x2c>
 8008330:	d305      	bcc.n	800833e <__mcmp+0x32>
 8008332:	2201      	movs	r2, #1
 8008334:	4610      	mov	r0, r2
 8008336:	bd30      	pop	{r4, r5, pc}
 8008338:	4283      	cmp	r3, r0
 800833a:	d3f3      	bcc.n	8008324 <__mcmp+0x18>
 800833c:	e7fa      	b.n	8008334 <__mcmp+0x28>
 800833e:	f04f 32ff 	mov.w	r2, #4294967295
 8008342:	e7f7      	b.n	8008334 <__mcmp+0x28>

08008344 <__mdiff>:
 8008344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	460c      	mov	r4, r1
 800834a:	4606      	mov	r6, r0
 800834c:	4611      	mov	r1, r2
 800834e:	4620      	mov	r0, r4
 8008350:	4690      	mov	r8, r2
 8008352:	f7ff ffdb 	bl	800830c <__mcmp>
 8008356:	1e05      	subs	r5, r0, #0
 8008358:	d110      	bne.n	800837c <__mdiff+0x38>
 800835a:	4629      	mov	r1, r5
 800835c:	4630      	mov	r0, r6
 800835e:	f7ff fd53 	bl	8007e08 <_Balloc>
 8008362:	b930      	cbnz	r0, 8008372 <__mdiff+0x2e>
 8008364:	4b3a      	ldr	r3, [pc, #232]	; (8008450 <__mdiff+0x10c>)
 8008366:	4602      	mov	r2, r0
 8008368:	f240 2132 	movw	r1, #562	; 0x232
 800836c:	4839      	ldr	r0, [pc, #228]	; (8008454 <__mdiff+0x110>)
 800836e:	f000 f9d5 	bl	800871c <__assert_func>
 8008372:	2301      	movs	r3, #1
 8008374:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837c:	bfa4      	itt	ge
 800837e:	4643      	movge	r3, r8
 8008380:	46a0      	movge	r8, r4
 8008382:	4630      	mov	r0, r6
 8008384:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008388:	bfa6      	itte	ge
 800838a:	461c      	movge	r4, r3
 800838c:	2500      	movge	r5, #0
 800838e:	2501      	movlt	r5, #1
 8008390:	f7ff fd3a 	bl	8007e08 <_Balloc>
 8008394:	b920      	cbnz	r0, 80083a0 <__mdiff+0x5c>
 8008396:	4b2e      	ldr	r3, [pc, #184]	; (8008450 <__mdiff+0x10c>)
 8008398:	4602      	mov	r2, r0
 800839a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800839e:	e7e5      	b.n	800836c <__mdiff+0x28>
 80083a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80083a4:	6926      	ldr	r6, [r4, #16]
 80083a6:	60c5      	str	r5, [r0, #12]
 80083a8:	f104 0914 	add.w	r9, r4, #20
 80083ac:	f108 0514 	add.w	r5, r8, #20
 80083b0:	f100 0e14 	add.w	lr, r0, #20
 80083b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80083b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80083bc:	f108 0210 	add.w	r2, r8, #16
 80083c0:	46f2      	mov	sl, lr
 80083c2:	2100      	movs	r1, #0
 80083c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80083c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80083cc:	fa1f f883 	uxth.w	r8, r3
 80083d0:	fa11 f18b 	uxtah	r1, r1, fp
 80083d4:	0c1b      	lsrs	r3, r3, #16
 80083d6:	eba1 0808 	sub.w	r8, r1, r8
 80083da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80083e2:	fa1f f888 	uxth.w	r8, r8
 80083e6:	1419      	asrs	r1, r3, #16
 80083e8:	454e      	cmp	r6, r9
 80083ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80083ee:	f84a 3b04 	str.w	r3, [sl], #4
 80083f2:	d8e7      	bhi.n	80083c4 <__mdiff+0x80>
 80083f4:	1b33      	subs	r3, r6, r4
 80083f6:	3b15      	subs	r3, #21
 80083f8:	f023 0303 	bic.w	r3, r3, #3
 80083fc:	3304      	adds	r3, #4
 80083fe:	3415      	adds	r4, #21
 8008400:	42a6      	cmp	r6, r4
 8008402:	bf38      	it	cc
 8008404:	2304      	movcc	r3, #4
 8008406:	441d      	add	r5, r3
 8008408:	4473      	add	r3, lr
 800840a:	469e      	mov	lr, r3
 800840c:	462e      	mov	r6, r5
 800840e:	4566      	cmp	r6, ip
 8008410:	d30e      	bcc.n	8008430 <__mdiff+0xec>
 8008412:	f10c 0203 	add.w	r2, ip, #3
 8008416:	1b52      	subs	r2, r2, r5
 8008418:	f022 0203 	bic.w	r2, r2, #3
 800841c:	3d03      	subs	r5, #3
 800841e:	45ac      	cmp	ip, r5
 8008420:	bf38      	it	cc
 8008422:	2200      	movcc	r2, #0
 8008424:	441a      	add	r2, r3
 8008426:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800842a:	b17b      	cbz	r3, 800844c <__mdiff+0x108>
 800842c:	6107      	str	r7, [r0, #16]
 800842e:	e7a3      	b.n	8008378 <__mdiff+0x34>
 8008430:	f856 8b04 	ldr.w	r8, [r6], #4
 8008434:	fa11 f288 	uxtah	r2, r1, r8
 8008438:	1414      	asrs	r4, r2, #16
 800843a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800843e:	b292      	uxth	r2, r2
 8008440:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008444:	f84e 2b04 	str.w	r2, [lr], #4
 8008448:	1421      	asrs	r1, r4, #16
 800844a:	e7e0      	b.n	800840e <__mdiff+0xca>
 800844c:	3f01      	subs	r7, #1
 800844e:	e7ea      	b.n	8008426 <__mdiff+0xe2>
 8008450:	08009327 	.word	0x08009327
 8008454:	08009338 	.word	0x08009338

08008458 <__d2b>:
 8008458:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800845c:	4689      	mov	r9, r1
 800845e:	2101      	movs	r1, #1
 8008460:	ec57 6b10 	vmov	r6, r7, d0
 8008464:	4690      	mov	r8, r2
 8008466:	f7ff fccf 	bl	8007e08 <_Balloc>
 800846a:	4604      	mov	r4, r0
 800846c:	b930      	cbnz	r0, 800847c <__d2b+0x24>
 800846e:	4602      	mov	r2, r0
 8008470:	4b25      	ldr	r3, [pc, #148]	; (8008508 <__d2b+0xb0>)
 8008472:	4826      	ldr	r0, [pc, #152]	; (800850c <__d2b+0xb4>)
 8008474:	f240 310a 	movw	r1, #778	; 0x30a
 8008478:	f000 f950 	bl	800871c <__assert_func>
 800847c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008480:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008484:	bb35      	cbnz	r5, 80084d4 <__d2b+0x7c>
 8008486:	2e00      	cmp	r6, #0
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	d028      	beq.n	80084de <__d2b+0x86>
 800848c:	4668      	mov	r0, sp
 800848e:	9600      	str	r6, [sp, #0]
 8008490:	f7ff fd82 	bl	8007f98 <__lo0bits>
 8008494:	9900      	ldr	r1, [sp, #0]
 8008496:	b300      	cbz	r0, 80084da <__d2b+0x82>
 8008498:	9a01      	ldr	r2, [sp, #4]
 800849a:	f1c0 0320 	rsb	r3, r0, #32
 800849e:	fa02 f303 	lsl.w	r3, r2, r3
 80084a2:	430b      	orrs	r3, r1
 80084a4:	40c2      	lsrs	r2, r0
 80084a6:	6163      	str	r3, [r4, #20]
 80084a8:	9201      	str	r2, [sp, #4]
 80084aa:	9b01      	ldr	r3, [sp, #4]
 80084ac:	61a3      	str	r3, [r4, #24]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	bf14      	ite	ne
 80084b2:	2202      	movne	r2, #2
 80084b4:	2201      	moveq	r2, #1
 80084b6:	6122      	str	r2, [r4, #16]
 80084b8:	b1d5      	cbz	r5, 80084f0 <__d2b+0x98>
 80084ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084be:	4405      	add	r5, r0
 80084c0:	f8c9 5000 	str.w	r5, [r9]
 80084c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084c8:	f8c8 0000 	str.w	r0, [r8]
 80084cc:	4620      	mov	r0, r4
 80084ce:	b003      	add	sp, #12
 80084d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084d8:	e7d5      	b.n	8008486 <__d2b+0x2e>
 80084da:	6161      	str	r1, [r4, #20]
 80084dc:	e7e5      	b.n	80084aa <__d2b+0x52>
 80084de:	a801      	add	r0, sp, #4
 80084e0:	f7ff fd5a 	bl	8007f98 <__lo0bits>
 80084e4:	9b01      	ldr	r3, [sp, #4]
 80084e6:	6163      	str	r3, [r4, #20]
 80084e8:	2201      	movs	r2, #1
 80084ea:	6122      	str	r2, [r4, #16]
 80084ec:	3020      	adds	r0, #32
 80084ee:	e7e3      	b.n	80084b8 <__d2b+0x60>
 80084f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084f8:	f8c9 0000 	str.w	r0, [r9]
 80084fc:	6918      	ldr	r0, [r3, #16]
 80084fe:	f7ff fd2b 	bl	8007f58 <__hi0bits>
 8008502:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008506:	e7df      	b.n	80084c8 <__d2b+0x70>
 8008508:	08009327 	.word	0x08009327
 800850c:	08009338 	.word	0x08009338

08008510 <_calloc_r>:
 8008510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008512:	fba1 2402 	umull	r2, r4, r1, r2
 8008516:	b94c      	cbnz	r4, 800852c <_calloc_r+0x1c>
 8008518:	4611      	mov	r1, r2
 800851a:	9201      	str	r2, [sp, #4]
 800851c:	f000 f87a 	bl	8008614 <_malloc_r>
 8008520:	9a01      	ldr	r2, [sp, #4]
 8008522:	4605      	mov	r5, r0
 8008524:	b930      	cbnz	r0, 8008534 <_calloc_r+0x24>
 8008526:	4628      	mov	r0, r5
 8008528:	b003      	add	sp, #12
 800852a:	bd30      	pop	{r4, r5, pc}
 800852c:	220c      	movs	r2, #12
 800852e:	6002      	str	r2, [r0, #0]
 8008530:	2500      	movs	r5, #0
 8008532:	e7f8      	b.n	8008526 <_calloc_r+0x16>
 8008534:	4621      	mov	r1, r4
 8008536:	f7fe f961 	bl	80067fc <memset>
 800853a:	e7f4      	b.n	8008526 <_calloc_r+0x16>

0800853c <_free_r>:
 800853c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800853e:	2900      	cmp	r1, #0
 8008540:	d044      	beq.n	80085cc <_free_r+0x90>
 8008542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008546:	9001      	str	r0, [sp, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	f1a1 0404 	sub.w	r4, r1, #4
 800854e:	bfb8      	it	lt
 8008550:	18e4      	addlt	r4, r4, r3
 8008552:	f000 f925 	bl	80087a0 <__malloc_lock>
 8008556:	4a1e      	ldr	r2, [pc, #120]	; (80085d0 <_free_r+0x94>)
 8008558:	9801      	ldr	r0, [sp, #4]
 800855a:	6813      	ldr	r3, [r2, #0]
 800855c:	b933      	cbnz	r3, 800856c <_free_r+0x30>
 800855e:	6063      	str	r3, [r4, #4]
 8008560:	6014      	str	r4, [r2, #0]
 8008562:	b003      	add	sp, #12
 8008564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008568:	f000 b920 	b.w	80087ac <__malloc_unlock>
 800856c:	42a3      	cmp	r3, r4
 800856e:	d908      	bls.n	8008582 <_free_r+0x46>
 8008570:	6825      	ldr	r5, [r4, #0]
 8008572:	1961      	adds	r1, r4, r5
 8008574:	428b      	cmp	r3, r1
 8008576:	bf01      	itttt	eq
 8008578:	6819      	ldreq	r1, [r3, #0]
 800857a:	685b      	ldreq	r3, [r3, #4]
 800857c:	1949      	addeq	r1, r1, r5
 800857e:	6021      	streq	r1, [r4, #0]
 8008580:	e7ed      	b.n	800855e <_free_r+0x22>
 8008582:	461a      	mov	r2, r3
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	b10b      	cbz	r3, 800858c <_free_r+0x50>
 8008588:	42a3      	cmp	r3, r4
 800858a:	d9fa      	bls.n	8008582 <_free_r+0x46>
 800858c:	6811      	ldr	r1, [r2, #0]
 800858e:	1855      	adds	r5, r2, r1
 8008590:	42a5      	cmp	r5, r4
 8008592:	d10b      	bne.n	80085ac <_free_r+0x70>
 8008594:	6824      	ldr	r4, [r4, #0]
 8008596:	4421      	add	r1, r4
 8008598:	1854      	adds	r4, r2, r1
 800859a:	42a3      	cmp	r3, r4
 800859c:	6011      	str	r1, [r2, #0]
 800859e:	d1e0      	bne.n	8008562 <_free_r+0x26>
 80085a0:	681c      	ldr	r4, [r3, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	6053      	str	r3, [r2, #4]
 80085a6:	4421      	add	r1, r4
 80085a8:	6011      	str	r1, [r2, #0]
 80085aa:	e7da      	b.n	8008562 <_free_r+0x26>
 80085ac:	d902      	bls.n	80085b4 <_free_r+0x78>
 80085ae:	230c      	movs	r3, #12
 80085b0:	6003      	str	r3, [r0, #0]
 80085b2:	e7d6      	b.n	8008562 <_free_r+0x26>
 80085b4:	6825      	ldr	r5, [r4, #0]
 80085b6:	1961      	adds	r1, r4, r5
 80085b8:	428b      	cmp	r3, r1
 80085ba:	bf04      	itt	eq
 80085bc:	6819      	ldreq	r1, [r3, #0]
 80085be:	685b      	ldreq	r3, [r3, #4]
 80085c0:	6063      	str	r3, [r4, #4]
 80085c2:	bf04      	itt	eq
 80085c4:	1949      	addeq	r1, r1, r5
 80085c6:	6021      	streq	r1, [r4, #0]
 80085c8:	6054      	str	r4, [r2, #4]
 80085ca:	e7ca      	b.n	8008562 <_free_r+0x26>
 80085cc:	b003      	add	sp, #12
 80085ce:	bd30      	pop	{r4, r5, pc}
 80085d0:	2000062c 	.word	0x2000062c

080085d4 <sbrk_aligned>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	4e0e      	ldr	r6, [pc, #56]	; (8008610 <sbrk_aligned+0x3c>)
 80085d8:	460c      	mov	r4, r1
 80085da:	6831      	ldr	r1, [r6, #0]
 80085dc:	4605      	mov	r5, r0
 80085de:	b911      	cbnz	r1, 80085e6 <sbrk_aligned+0x12>
 80085e0:	f000 f88c 	bl	80086fc <_sbrk_r>
 80085e4:	6030      	str	r0, [r6, #0]
 80085e6:	4621      	mov	r1, r4
 80085e8:	4628      	mov	r0, r5
 80085ea:	f000 f887 	bl	80086fc <_sbrk_r>
 80085ee:	1c43      	adds	r3, r0, #1
 80085f0:	d00a      	beq.n	8008608 <sbrk_aligned+0x34>
 80085f2:	1cc4      	adds	r4, r0, #3
 80085f4:	f024 0403 	bic.w	r4, r4, #3
 80085f8:	42a0      	cmp	r0, r4
 80085fa:	d007      	beq.n	800860c <sbrk_aligned+0x38>
 80085fc:	1a21      	subs	r1, r4, r0
 80085fe:	4628      	mov	r0, r5
 8008600:	f000 f87c 	bl	80086fc <_sbrk_r>
 8008604:	3001      	adds	r0, #1
 8008606:	d101      	bne.n	800860c <sbrk_aligned+0x38>
 8008608:	f04f 34ff 	mov.w	r4, #4294967295
 800860c:	4620      	mov	r0, r4
 800860e:	bd70      	pop	{r4, r5, r6, pc}
 8008610:	20000630 	.word	0x20000630

08008614 <_malloc_r>:
 8008614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008618:	1ccd      	adds	r5, r1, #3
 800861a:	f025 0503 	bic.w	r5, r5, #3
 800861e:	3508      	adds	r5, #8
 8008620:	2d0c      	cmp	r5, #12
 8008622:	bf38      	it	cc
 8008624:	250c      	movcc	r5, #12
 8008626:	2d00      	cmp	r5, #0
 8008628:	4607      	mov	r7, r0
 800862a:	db01      	blt.n	8008630 <_malloc_r+0x1c>
 800862c:	42a9      	cmp	r1, r5
 800862e:	d905      	bls.n	800863c <_malloc_r+0x28>
 8008630:	230c      	movs	r3, #12
 8008632:	603b      	str	r3, [r7, #0]
 8008634:	2600      	movs	r6, #0
 8008636:	4630      	mov	r0, r6
 8008638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800863c:	4e2e      	ldr	r6, [pc, #184]	; (80086f8 <_malloc_r+0xe4>)
 800863e:	f000 f8af 	bl	80087a0 <__malloc_lock>
 8008642:	6833      	ldr	r3, [r6, #0]
 8008644:	461c      	mov	r4, r3
 8008646:	bb34      	cbnz	r4, 8008696 <_malloc_r+0x82>
 8008648:	4629      	mov	r1, r5
 800864a:	4638      	mov	r0, r7
 800864c:	f7ff ffc2 	bl	80085d4 <sbrk_aligned>
 8008650:	1c43      	adds	r3, r0, #1
 8008652:	4604      	mov	r4, r0
 8008654:	d14d      	bne.n	80086f2 <_malloc_r+0xde>
 8008656:	6834      	ldr	r4, [r6, #0]
 8008658:	4626      	mov	r6, r4
 800865a:	2e00      	cmp	r6, #0
 800865c:	d140      	bne.n	80086e0 <_malloc_r+0xcc>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	4631      	mov	r1, r6
 8008662:	4638      	mov	r0, r7
 8008664:	eb04 0803 	add.w	r8, r4, r3
 8008668:	f000 f848 	bl	80086fc <_sbrk_r>
 800866c:	4580      	cmp	r8, r0
 800866e:	d13a      	bne.n	80086e6 <_malloc_r+0xd2>
 8008670:	6821      	ldr	r1, [r4, #0]
 8008672:	3503      	adds	r5, #3
 8008674:	1a6d      	subs	r5, r5, r1
 8008676:	f025 0503 	bic.w	r5, r5, #3
 800867a:	3508      	adds	r5, #8
 800867c:	2d0c      	cmp	r5, #12
 800867e:	bf38      	it	cc
 8008680:	250c      	movcc	r5, #12
 8008682:	4629      	mov	r1, r5
 8008684:	4638      	mov	r0, r7
 8008686:	f7ff ffa5 	bl	80085d4 <sbrk_aligned>
 800868a:	3001      	adds	r0, #1
 800868c:	d02b      	beq.n	80086e6 <_malloc_r+0xd2>
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	442b      	add	r3, r5
 8008692:	6023      	str	r3, [r4, #0]
 8008694:	e00e      	b.n	80086b4 <_malloc_r+0xa0>
 8008696:	6822      	ldr	r2, [r4, #0]
 8008698:	1b52      	subs	r2, r2, r5
 800869a:	d41e      	bmi.n	80086da <_malloc_r+0xc6>
 800869c:	2a0b      	cmp	r2, #11
 800869e:	d916      	bls.n	80086ce <_malloc_r+0xba>
 80086a0:	1961      	adds	r1, r4, r5
 80086a2:	42a3      	cmp	r3, r4
 80086a4:	6025      	str	r5, [r4, #0]
 80086a6:	bf18      	it	ne
 80086a8:	6059      	strne	r1, [r3, #4]
 80086aa:	6863      	ldr	r3, [r4, #4]
 80086ac:	bf08      	it	eq
 80086ae:	6031      	streq	r1, [r6, #0]
 80086b0:	5162      	str	r2, [r4, r5]
 80086b2:	604b      	str	r3, [r1, #4]
 80086b4:	4638      	mov	r0, r7
 80086b6:	f104 060b 	add.w	r6, r4, #11
 80086ba:	f000 f877 	bl	80087ac <__malloc_unlock>
 80086be:	f026 0607 	bic.w	r6, r6, #7
 80086c2:	1d23      	adds	r3, r4, #4
 80086c4:	1af2      	subs	r2, r6, r3
 80086c6:	d0b6      	beq.n	8008636 <_malloc_r+0x22>
 80086c8:	1b9b      	subs	r3, r3, r6
 80086ca:	50a3      	str	r3, [r4, r2]
 80086cc:	e7b3      	b.n	8008636 <_malloc_r+0x22>
 80086ce:	6862      	ldr	r2, [r4, #4]
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	bf0c      	ite	eq
 80086d4:	6032      	streq	r2, [r6, #0]
 80086d6:	605a      	strne	r2, [r3, #4]
 80086d8:	e7ec      	b.n	80086b4 <_malloc_r+0xa0>
 80086da:	4623      	mov	r3, r4
 80086dc:	6864      	ldr	r4, [r4, #4]
 80086de:	e7b2      	b.n	8008646 <_malloc_r+0x32>
 80086e0:	4634      	mov	r4, r6
 80086e2:	6876      	ldr	r6, [r6, #4]
 80086e4:	e7b9      	b.n	800865a <_malloc_r+0x46>
 80086e6:	230c      	movs	r3, #12
 80086e8:	603b      	str	r3, [r7, #0]
 80086ea:	4638      	mov	r0, r7
 80086ec:	f000 f85e 	bl	80087ac <__malloc_unlock>
 80086f0:	e7a1      	b.n	8008636 <_malloc_r+0x22>
 80086f2:	6025      	str	r5, [r4, #0]
 80086f4:	e7de      	b.n	80086b4 <_malloc_r+0xa0>
 80086f6:	bf00      	nop
 80086f8:	2000062c 	.word	0x2000062c

080086fc <_sbrk_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4d06      	ldr	r5, [pc, #24]	; (8008718 <_sbrk_r+0x1c>)
 8008700:	2300      	movs	r3, #0
 8008702:	4604      	mov	r4, r0
 8008704:	4608      	mov	r0, r1
 8008706:	602b      	str	r3, [r5, #0]
 8008708:	f7fa fb44 	bl	8002d94 <_sbrk>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d102      	bne.n	8008716 <_sbrk_r+0x1a>
 8008710:	682b      	ldr	r3, [r5, #0]
 8008712:	b103      	cbz	r3, 8008716 <_sbrk_r+0x1a>
 8008714:	6023      	str	r3, [r4, #0]
 8008716:	bd38      	pop	{r3, r4, r5, pc}
 8008718:	20000634 	.word	0x20000634

0800871c <__assert_func>:
 800871c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800871e:	4614      	mov	r4, r2
 8008720:	461a      	mov	r2, r3
 8008722:	4b09      	ldr	r3, [pc, #36]	; (8008748 <__assert_func+0x2c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4605      	mov	r5, r0
 8008728:	68d8      	ldr	r0, [r3, #12]
 800872a:	b14c      	cbz	r4, 8008740 <__assert_func+0x24>
 800872c:	4b07      	ldr	r3, [pc, #28]	; (800874c <__assert_func+0x30>)
 800872e:	9100      	str	r1, [sp, #0]
 8008730:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008734:	4906      	ldr	r1, [pc, #24]	; (8008750 <__assert_func+0x34>)
 8008736:	462b      	mov	r3, r5
 8008738:	f000 f80e 	bl	8008758 <fiprintf>
 800873c:	f000 fa64 	bl	8008c08 <abort>
 8008740:	4b04      	ldr	r3, [pc, #16]	; (8008754 <__assert_func+0x38>)
 8008742:	461c      	mov	r4, r3
 8008744:	e7f3      	b.n	800872e <__assert_func+0x12>
 8008746:	bf00      	nop
 8008748:	20000048 	.word	0x20000048
 800874c:	08009494 	.word	0x08009494
 8008750:	080094a1 	.word	0x080094a1
 8008754:	080094cf 	.word	0x080094cf

08008758 <fiprintf>:
 8008758:	b40e      	push	{r1, r2, r3}
 800875a:	b503      	push	{r0, r1, lr}
 800875c:	4601      	mov	r1, r0
 800875e:	ab03      	add	r3, sp, #12
 8008760:	4805      	ldr	r0, [pc, #20]	; (8008778 <fiprintf+0x20>)
 8008762:	f853 2b04 	ldr.w	r2, [r3], #4
 8008766:	6800      	ldr	r0, [r0, #0]
 8008768:	9301      	str	r3, [sp, #4]
 800876a:	f000 f84f 	bl	800880c <_vfiprintf_r>
 800876e:	b002      	add	sp, #8
 8008770:	f85d eb04 	ldr.w	lr, [sp], #4
 8008774:	b003      	add	sp, #12
 8008776:	4770      	bx	lr
 8008778:	20000048 	.word	0x20000048

0800877c <__ascii_mbtowc>:
 800877c:	b082      	sub	sp, #8
 800877e:	b901      	cbnz	r1, 8008782 <__ascii_mbtowc+0x6>
 8008780:	a901      	add	r1, sp, #4
 8008782:	b142      	cbz	r2, 8008796 <__ascii_mbtowc+0x1a>
 8008784:	b14b      	cbz	r3, 800879a <__ascii_mbtowc+0x1e>
 8008786:	7813      	ldrb	r3, [r2, #0]
 8008788:	600b      	str	r3, [r1, #0]
 800878a:	7812      	ldrb	r2, [r2, #0]
 800878c:	1e10      	subs	r0, r2, #0
 800878e:	bf18      	it	ne
 8008790:	2001      	movne	r0, #1
 8008792:	b002      	add	sp, #8
 8008794:	4770      	bx	lr
 8008796:	4610      	mov	r0, r2
 8008798:	e7fb      	b.n	8008792 <__ascii_mbtowc+0x16>
 800879a:	f06f 0001 	mvn.w	r0, #1
 800879e:	e7f8      	b.n	8008792 <__ascii_mbtowc+0x16>

080087a0 <__malloc_lock>:
 80087a0:	4801      	ldr	r0, [pc, #4]	; (80087a8 <__malloc_lock+0x8>)
 80087a2:	f000 bbf1 	b.w	8008f88 <__retarget_lock_acquire_recursive>
 80087a6:	bf00      	nop
 80087a8:	20000638 	.word	0x20000638

080087ac <__malloc_unlock>:
 80087ac:	4801      	ldr	r0, [pc, #4]	; (80087b4 <__malloc_unlock+0x8>)
 80087ae:	f000 bbec 	b.w	8008f8a <__retarget_lock_release_recursive>
 80087b2:	bf00      	nop
 80087b4:	20000638 	.word	0x20000638

080087b8 <__sfputc_r>:
 80087b8:	6893      	ldr	r3, [r2, #8]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	2b00      	cmp	r3, #0
 80087be:	b410      	push	{r4}
 80087c0:	6093      	str	r3, [r2, #8]
 80087c2:	da08      	bge.n	80087d6 <__sfputc_r+0x1e>
 80087c4:	6994      	ldr	r4, [r2, #24]
 80087c6:	42a3      	cmp	r3, r4
 80087c8:	db01      	blt.n	80087ce <__sfputc_r+0x16>
 80087ca:	290a      	cmp	r1, #10
 80087cc:	d103      	bne.n	80087d6 <__sfputc_r+0x1e>
 80087ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087d2:	f000 b94b 	b.w	8008a6c <__swbuf_r>
 80087d6:	6813      	ldr	r3, [r2, #0]
 80087d8:	1c58      	adds	r0, r3, #1
 80087da:	6010      	str	r0, [r2, #0]
 80087dc:	7019      	strb	r1, [r3, #0]
 80087de:	4608      	mov	r0, r1
 80087e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <__sfputs_r>:
 80087e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e8:	4606      	mov	r6, r0
 80087ea:	460f      	mov	r7, r1
 80087ec:	4614      	mov	r4, r2
 80087ee:	18d5      	adds	r5, r2, r3
 80087f0:	42ac      	cmp	r4, r5
 80087f2:	d101      	bne.n	80087f8 <__sfputs_r+0x12>
 80087f4:	2000      	movs	r0, #0
 80087f6:	e007      	b.n	8008808 <__sfputs_r+0x22>
 80087f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087fc:	463a      	mov	r2, r7
 80087fe:	4630      	mov	r0, r6
 8008800:	f7ff ffda 	bl	80087b8 <__sfputc_r>
 8008804:	1c43      	adds	r3, r0, #1
 8008806:	d1f3      	bne.n	80087f0 <__sfputs_r+0xa>
 8008808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800880c <_vfiprintf_r>:
 800880c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	460d      	mov	r5, r1
 8008812:	b09d      	sub	sp, #116	; 0x74
 8008814:	4614      	mov	r4, r2
 8008816:	4698      	mov	r8, r3
 8008818:	4606      	mov	r6, r0
 800881a:	b118      	cbz	r0, 8008824 <_vfiprintf_r+0x18>
 800881c:	6983      	ldr	r3, [r0, #24]
 800881e:	b90b      	cbnz	r3, 8008824 <_vfiprintf_r+0x18>
 8008820:	f000 fb14 	bl	8008e4c <__sinit>
 8008824:	4b89      	ldr	r3, [pc, #548]	; (8008a4c <_vfiprintf_r+0x240>)
 8008826:	429d      	cmp	r5, r3
 8008828:	d11b      	bne.n	8008862 <_vfiprintf_r+0x56>
 800882a:	6875      	ldr	r5, [r6, #4]
 800882c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800882e:	07d9      	lsls	r1, r3, #31
 8008830:	d405      	bmi.n	800883e <_vfiprintf_r+0x32>
 8008832:	89ab      	ldrh	r3, [r5, #12]
 8008834:	059a      	lsls	r2, r3, #22
 8008836:	d402      	bmi.n	800883e <_vfiprintf_r+0x32>
 8008838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800883a:	f000 fba5 	bl	8008f88 <__retarget_lock_acquire_recursive>
 800883e:	89ab      	ldrh	r3, [r5, #12]
 8008840:	071b      	lsls	r3, r3, #28
 8008842:	d501      	bpl.n	8008848 <_vfiprintf_r+0x3c>
 8008844:	692b      	ldr	r3, [r5, #16]
 8008846:	b9eb      	cbnz	r3, 8008884 <_vfiprintf_r+0x78>
 8008848:	4629      	mov	r1, r5
 800884a:	4630      	mov	r0, r6
 800884c:	f000 f96e 	bl	8008b2c <__swsetup_r>
 8008850:	b1c0      	cbz	r0, 8008884 <_vfiprintf_r+0x78>
 8008852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008854:	07dc      	lsls	r4, r3, #31
 8008856:	d50e      	bpl.n	8008876 <_vfiprintf_r+0x6a>
 8008858:	f04f 30ff 	mov.w	r0, #4294967295
 800885c:	b01d      	add	sp, #116	; 0x74
 800885e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008862:	4b7b      	ldr	r3, [pc, #492]	; (8008a50 <_vfiprintf_r+0x244>)
 8008864:	429d      	cmp	r5, r3
 8008866:	d101      	bne.n	800886c <_vfiprintf_r+0x60>
 8008868:	68b5      	ldr	r5, [r6, #8]
 800886a:	e7df      	b.n	800882c <_vfiprintf_r+0x20>
 800886c:	4b79      	ldr	r3, [pc, #484]	; (8008a54 <_vfiprintf_r+0x248>)
 800886e:	429d      	cmp	r5, r3
 8008870:	bf08      	it	eq
 8008872:	68f5      	ldreq	r5, [r6, #12]
 8008874:	e7da      	b.n	800882c <_vfiprintf_r+0x20>
 8008876:	89ab      	ldrh	r3, [r5, #12]
 8008878:	0598      	lsls	r0, r3, #22
 800887a:	d4ed      	bmi.n	8008858 <_vfiprintf_r+0x4c>
 800887c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800887e:	f000 fb84 	bl	8008f8a <__retarget_lock_release_recursive>
 8008882:	e7e9      	b.n	8008858 <_vfiprintf_r+0x4c>
 8008884:	2300      	movs	r3, #0
 8008886:	9309      	str	r3, [sp, #36]	; 0x24
 8008888:	2320      	movs	r3, #32
 800888a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800888e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008892:	2330      	movs	r3, #48	; 0x30
 8008894:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a58 <_vfiprintf_r+0x24c>
 8008898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800889c:	f04f 0901 	mov.w	r9, #1
 80088a0:	4623      	mov	r3, r4
 80088a2:	469a      	mov	sl, r3
 80088a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088a8:	b10a      	cbz	r2, 80088ae <_vfiprintf_r+0xa2>
 80088aa:	2a25      	cmp	r2, #37	; 0x25
 80088ac:	d1f9      	bne.n	80088a2 <_vfiprintf_r+0x96>
 80088ae:	ebba 0b04 	subs.w	fp, sl, r4
 80088b2:	d00b      	beq.n	80088cc <_vfiprintf_r+0xc0>
 80088b4:	465b      	mov	r3, fp
 80088b6:	4622      	mov	r2, r4
 80088b8:	4629      	mov	r1, r5
 80088ba:	4630      	mov	r0, r6
 80088bc:	f7ff ff93 	bl	80087e6 <__sfputs_r>
 80088c0:	3001      	adds	r0, #1
 80088c2:	f000 80aa 	beq.w	8008a1a <_vfiprintf_r+0x20e>
 80088c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088c8:	445a      	add	r2, fp
 80088ca:	9209      	str	r2, [sp, #36]	; 0x24
 80088cc:	f89a 3000 	ldrb.w	r3, [sl]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 80a2 	beq.w	8008a1a <_vfiprintf_r+0x20e>
 80088d6:	2300      	movs	r3, #0
 80088d8:	f04f 32ff 	mov.w	r2, #4294967295
 80088dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088e0:	f10a 0a01 	add.w	sl, sl, #1
 80088e4:	9304      	str	r3, [sp, #16]
 80088e6:	9307      	str	r3, [sp, #28]
 80088e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088ec:	931a      	str	r3, [sp, #104]	; 0x68
 80088ee:	4654      	mov	r4, sl
 80088f0:	2205      	movs	r2, #5
 80088f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f6:	4858      	ldr	r0, [pc, #352]	; (8008a58 <_vfiprintf_r+0x24c>)
 80088f8:	f7f7 fc72 	bl	80001e0 <memchr>
 80088fc:	9a04      	ldr	r2, [sp, #16]
 80088fe:	b9d8      	cbnz	r0, 8008938 <_vfiprintf_r+0x12c>
 8008900:	06d1      	lsls	r1, r2, #27
 8008902:	bf44      	itt	mi
 8008904:	2320      	movmi	r3, #32
 8008906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800890a:	0713      	lsls	r3, r2, #28
 800890c:	bf44      	itt	mi
 800890e:	232b      	movmi	r3, #43	; 0x2b
 8008910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008914:	f89a 3000 	ldrb.w	r3, [sl]
 8008918:	2b2a      	cmp	r3, #42	; 0x2a
 800891a:	d015      	beq.n	8008948 <_vfiprintf_r+0x13c>
 800891c:	9a07      	ldr	r2, [sp, #28]
 800891e:	4654      	mov	r4, sl
 8008920:	2000      	movs	r0, #0
 8008922:	f04f 0c0a 	mov.w	ip, #10
 8008926:	4621      	mov	r1, r4
 8008928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800892c:	3b30      	subs	r3, #48	; 0x30
 800892e:	2b09      	cmp	r3, #9
 8008930:	d94e      	bls.n	80089d0 <_vfiprintf_r+0x1c4>
 8008932:	b1b0      	cbz	r0, 8008962 <_vfiprintf_r+0x156>
 8008934:	9207      	str	r2, [sp, #28]
 8008936:	e014      	b.n	8008962 <_vfiprintf_r+0x156>
 8008938:	eba0 0308 	sub.w	r3, r0, r8
 800893c:	fa09 f303 	lsl.w	r3, r9, r3
 8008940:	4313      	orrs	r3, r2
 8008942:	9304      	str	r3, [sp, #16]
 8008944:	46a2      	mov	sl, r4
 8008946:	e7d2      	b.n	80088ee <_vfiprintf_r+0xe2>
 8008948:	9b03      	ldr	r3, [sp, #12]
 800894a:	1d19      	adds	r1, r3, #4
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	9103      	str	r1, [sp, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	bfbb      	ittet	lt
 8008954:	425b      	neglt	r3, r3
 8008956:	f042 0202 	orrlt.w	r2, r2, #2
 800895a:	9307      	strge	r3, [sp, #28]
 800895c:	9307      	strlt	r3, [sp, #28]
 800895e:	bfb8      	it	lt
 8008960:	9204      	strlt	r2, [sp, #16]
 8008962:	7823      	ldrb	r3, [r4, #0]
 8008964:	2b2e      	cmp	r3, #46	; 0x2e
 8008966:	d10c      	bne.n	8008982 <_vfiprintf_r+0x176>
 8008968:	7863      	ldrb	r3, [r4, #1]
 800896a:	2b2a      	cmp	r3, #42	; 0x2a
 800896c:	d135      	bne.n	80089da <_vfiprintf_r+0x1ce>
 800896e:	9b03      	ldr	r3, [sp, #12]
 8008970:	1d1a      	adds	r2, r3, #4
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	9203      	str	r2, [sp, #12]
 8008976:	2b00      	cmp	r3, #0
 8008978:	bfb8      	it	lt
 800897a:	f04f 33ff 	movlt.w	r3, #4294967295
 800897e:	3402      	adds	r4, #2
 8008980:	9305      	str	r3, [sp, #20]
 8008982:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a68 <_vfiprintf_r+0x25c>
 8008986:	7821      	ldrb	r1, [r4, #0]
 8008988:	2203      	movs	r2, #3
 800898a:	4650      	mov	r0, sl
 800898c:	f7f7 fc28 	bl	80001e0 <memchr>
 8008990:	b140      	cbz	r0, 80089a4 <_vfiprintf_r+0x198>
 8008992:	2340      	movs	r3, #64	; 0x40
 8008994:	eba0 000a 	sub.w	r0, r0, sl
 8008998:	fa03 f000 	lsl.w	r0, r3, r0
 800899c:	9b04      	ldr	r3, [sp, #16]
 800899e:	4303      	orrs	r3, r0
 80089a0:	3401      	adds	r4, #1
 80089a2:	9304      	str	r3, [sp, #16]
 80089a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a8:	482c      	ldr	r0, [pc, #176]	; (8008a5c <_vfiprintf_r+0x250>)
 80089aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089ae:	2206      	movs	r2, #6
 80089b0:	f7f7 fc16 	bl	80001e0 <memchr>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d03f      	beq.n	8008a38 <_vfiprintf_r+0x22c>
 80089b8:	4b29      	ldr	r3, [pc, #164]	; (8008a60 <_vfiprintf_r+0x254>)
 80089ba:	bb1b      	cbnz	r3, 8008a04 <_vfiprintf_r+0x1f8>
 80089bc:	9b03      	ldr	r3, [sp, #12]
 80089be:	3307      	adds	r3, #7
 80089c0:	f023 0307 	bic.w	r3, r3, #7
 80089c4:	3308      	adds	r3, #8
 80089c6:	9303      	str	r3, [sp, #12]
 80089c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ca:	443b      	add	r3, r7
 80089cc:	9309      	str	r3, [sp, #36]	; 0x24
 80089ce:	e767      	b.n	80088a0 <_vfiprintf_r+0x94>
 80089d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80089d4:	460c      	mov	r4, r1
 80089d6:	2001      	movs	r0, #1
 80089d8:	e7a5      	b.n	8008926 <_vfiprintf_r+0x11a>
 80089da:	2300      	movs	r3, #0
 80089dc:	3401      	adds	r4, #1
 80089de:	9305      	str	r3, [sp, #20]
 80089e0:	4619      	mov	r1, r3
 80089e2:	f04f 0c0a 	mov.w	ip, #10
 80089e6:	4620      	mov	r0, r4
 80089e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ec:	3a30      	subs	r2, #48	; 0x30
 80089ee:	2a09      	cmp	r2, #9
 80089f0:	d903      	bls.n	80089fa <_vfiprintf_r+0x1ee>
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0c5      	beq.n	8008982 <_vfiprintf_r+0x176>
 80089f6:	9105      	str	r1, [sp, #20]
 80089f8:	e7c3      	b.n	8008982 <_vfiprintf_r+0x176>
 80089fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80089fe:	4604      	mov	r4, r0
 8008a00:	2301      	movs	r3, #1
 8008a02:	e7f0      	b.n	80089e6 <_vfiprintf_r+0x1da>
 8008a04:	ab03      	add	r3, sp, #12
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	462a      	mov	r2, r5
 8008a0a:	4b16      	ldr	r3, [pc, #88]	; (8008a64 <_vfiprintf_r+0x258>)
 8008a0c:	a904      	add	r1, sp, #16
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f7fd ff9c 	bl	800694c <_printf_float>
 8008a14:	4607      	mov	r7, r0
 8008a16:	1c78      	adds	r0, r7, #1
 8008a18:	d1d6      	bne.n	80089c8 <_vfiprintf_r+0x1bc>
 8008a1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a1c:	07d9      	lsls	r1, r3, #31
 8008a1e:	d405      	bmi.n	8008a2c <_vfiprintf_r+0x220>
 8008a20:	89ab      	ldrh	r3, [r5, #12]
 8008a22:	059a      	lsls	r2, r3, #22
 8008a24:	d402      	bmi.n	8008a2c <_vfiprintf_r+0x220>
 8008a26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a28:	f000 faaf 	bl	8008f8a <__retarget_lock_release_recursive>
 8008a2c:	89ab      	ldrh	r3, [r5, #12]
 8008a2e:	065b      	lsls	r3, r3, #25
 8008a30:	f53f af12 	bmi.w	8008858 <_vfiprintf_r+0x4c>
 8008a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a36:	e711      	b.n	800885c <_vfiprintf_r+0x50>
 8008a38:	ab03      	add	r3, sp, #12
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	462a      	mov	r2, r5
 8008a3e:	4b09      	ldr	r3, [pc, #36]	; (8008a64 <_vfiprintf_r+0x258>)
 8008a40:	a904      	add	r1, sp, #16
 8008a42:	4630      	mov	r0, r6
 8008a44:	f7fe fa26 	bl	8006e94 <_printf_i>
 8008a48:	e7e4      	b.n	8008a14 <_vfiprintf_r+0x208>
 8008a4a:	bf00      	nop
 8008a4c:	0800960c 	.word	0x0800960c
 8008a50:	0800962c 	.word	0x0800962c
 8008a54:	080095ec 	.word	0x080095ec
 8008a58:	080094da 	.word	0x080094da
 8008a5c:	080094e4 	.word	0x080094e4
 8008a60:	0800694d 	.word	0x0800694d
 8008a64:	080087e7 	.word	0x080087e7
 8008a68:	080094e0 	.word	0x080094e0

08008a6c <__swbuf_r>:
 8008a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6e:	460e      	mov	r6, r1
 8008a70:	4614      	mov	r4, r2
 8008a72:	4605      	mov	r5, r0
 8008a74:	b118      	cbz	r0, 8008a7e <__swbuf_r+0x12>
 8008a76:	6983      	ldr	r3, [r0, #24]
 8008a78:	b90b      	cbnz	r3, 8008a7e <__swbuf_r+0x12>
 8008a7a:	f000 f9e7 	bl	8008e4c <__sinit>
 8008a7e:	4b21      	ldr	r3, [pc, #132]	; (8008b04 <__swbuf_r+0x98>)
 8008a80:	429c      	cmp	r4, r3
 8008a82:	d12b      	bne.n	8008adc <__swbuf_r+0x70>
 8008a84:	686c      	ldr	r4, [r5, #4]
 8008a86:	69a3      	ldr	r3, [r4, #24]
 8008a88:	60a3      	str	r3, [r4, #8]
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	071a      	lsls	r2, r3, #28
 8008a8e:	d52f      	bpl.n	8008af0 <__swbuf_r+0x84>
 8008a90:	6923      	ldr	r3, [r4, #16]
 8008a92:	b36b      	cbz	r3, 8008af0 <__swbuf_r+0x84>
 8008a94:	6923      	ldr	r3, [r4, #16]
 8008a96:	6820      	ldr	r0, [r4, #0]
 8008a98:	1ac0      	subs	r0, r0, r3
 8008a9a:	6963      	ldr	r3, [r4, #20]
 8008a9c:	b2f6      	uxtb	r6, r6
 8008a9e:	4283      	cmp	r3, r0
 8008aa0:	4637      	mov	r7, r6
 8008aa2:	dc04      	bgt.n	8008aae <__swbuf_r+0x42>
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f000 f93c 	bl	8008d24 <_fflush_r>
 8008aac:	bb30      	cbnz	r0, 8008afc <__swbuf_r+0x90>
 8008aae:	68a3      	ldr	r3, [r4, #8]
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	60a3      	str	r3, [r4, #8]
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	6022      	str	r2, [r4, #0]
 8008aba:	701e      	strb	r6, [r3, #0]
 8008abc:	6963      	ldr	r3, [r4, #20]
 8008abe:	3001      	adds	r0, #1
 8008ac0:	4283      	cmp	r3, r0
 8008ac2:	d004      	beq.n	8008ace <__swbuf_r+0x62>
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	07db      	lsls	r3, r3, #31
 8008ac8:	d506      	bpl.n	8008ad8 <__swbuf_r+0x6c>
 8008aca:	2e0a      	cmp	r6, #10
 8008acc:	d104      	bne.n	8008ad8 <__swbuf_r+0x6c>
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f000 f927 	bl	8008d24 <_fflush_r>
 8008ad6:	b988      	cbnz	r0, 8008afc <__swbuf_r+0x90>
 8008ad8:	4638      	mov	r0, r7
 8008ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008adc:	4b0a      	ldr	r3, [pc, #40]	; (8008b08 <__swbuf_r+0x9c>)
 8008ade:	429c      	cmp	r4, r3
 8008ae0:	d101      	bne.n	8008ae6 <__swbuf_r+0x7a>
 8008ae2:	68ac      	ldr	r4, [r5, #8]
 8008ae4:	e7cf      	b.n	8008a86 <__swbuf_r+0x1a>
 8008ae6:	4b09      	ldr	r3, [pc, #36]	; (8008b0c <__swbuf_r+0xa0>)
 8008ae8:	429c      	cmp	r4, r3
 8008aea:	bf08      	it	eq
 8008aec:	68ec      	ldreq	r4, [r5, #12]
 8008aee:	e7ca      	b.n	8008a86 <__swbuf_r+0x1a>
 8008af0:	4621      	mov	r1, r4
 8008af2:	4628      	mov	r0, r5
 8008af4:	f000 f81a 	bl	8008b2c <__swsetup_r>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d0cb      	beq.n	8008a94 <__swbuf_r+0x28>
 8008afc:	f04f 37ff 	mov.w	r7, #4294967295
 8008b00:	e7ea      	b.n	8008ad8 <__swbuf_r+0x6c>
 8008b02:	bf00      	nop
 8008b04:	0800960c 	.word	0x0800960c
 8008b08:	0800962c 	.word	0x0800962c
 8008b0c:	080095ec 	.word	0x080095ec

08008b10 <__ascii_wctomb>:
 8008b10:	b149      	cbz	r1, 8008b26 <__ascii_wctomb+0x16>
 8008b12:	2aff      	cmp	r2, #255	; 0xff
 8008b14:	bf85      	ittet	hi
 8008b16:	238a      	movhi	r3, #138	; 0x8a
 8008b18:	6003      	strhi	r3, [r0, #0]
 8008b1a:	700a      	strbls	r2, [r1, #0]
 8008b1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b20:	bf98      	it	ls
 8008b22:	2001      	movls	r0, #1
 8008b24:	4770      	bx	lr
 8008b26:	4608      	mov	r0, r1
 8008b28:	4770      	bx	lr
	...

08008b2c <__swsetup_r>:
 8008b2c:	4b32      	ldr	r3, [pc, #200]	; (8008bf8 <__swsetup_r+0xcc>)
 8008b2e:	b570      	push	{r4, r5, r6, lr}
 8008b30:	681d      	ldr	r5, [r3, #0]
 8008b32:	4606      	mov	r6, r0
 8008b34:	460c      	mov	r4, r1
 8008b36:	b125      	cbz	r5, 8008b42 <__swsetup_r+0x16>
 8008b38:	69ab      	ldr	r3, [r5, #24]
 8008b3a:	b913      	cbnz	r3, 8008b42 <__swsetup_r+0x16>
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	f000 f985 	bl	8008e4c <__sinit>
 8008b42:	4b2e      	ldr	r3, [pc, #184]	; (8008bfc <__swsetup_r+0xd0>)
 8008b44:	429c      	cmp	r4, r3
 8008b46:	d10f      	bne.n	8008b68 <__swsetup_r+0x3c>
 8008b48:	686c      	ldr	r4, [r5, #4]
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b50:	0719      	lsls	r1, r3, #28
 8008b52:	d42c      	bmi.n	8008bae <__swsetup_r+0x82>
 8008b54:	06dd      	lsls	r5, r3, #27
 8008b56:	d411      	bmi.n	8008b7c <__swsetup_r+0x50>
 8008b58:	2309      	movs	r3, #9
 8008b5a:	6033      	str	r3, [r6, #0]
 8008b5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b60:	81a3      	strh	r3, [r4, #12]
 8008b62:	f04f 30ff 	mov.w	r0, #4294967295
 8008b66:	e03e      	b.n	8008be6 <__swsetup_r+0xba>
 8008b68:	4b25      	ldr	r3, [pc, #148]	; (8008c00 <__swsetup_r+0xd4>)
 8008b6a:	429c      	cmp	r4, r3
 8008b6c:	d101      	bne.n	8008b72 <__swsetup_r+0x46>
 8008b6e:	68ac      	ldr	r4, [r5, #8]
 8008b70:	e7eb      	b.n	8008b4a <__swsetup_r+0x1e>
 8008b72:	4b24      	ldr	r3, [pc, #144]	; (8008c04 <__swsetup_r+0xd8>)
 8008b74:	429c      	cmp	r4, r3
 8008b76:	bf08      	it	eq
 8008b78:	68ec      	ldreq	r4, [r5, #12]
 8008b7a:	e7e6      	b.n	8008b4a <__swsetup_r+0x1e>
 8008b7c:	0758      	lsls	r0, r3, #29
 8008b7e:	d512      	bpl.n	8008ba6 <__swsetup_r+0x7a>
 8008b80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b82:	b141      	cbz	r1, 8008b96 <__swsetup_r+0x6a>
 8008b84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b88:	4299      	cmp	r1, r3
 8008b8a:	d002      	beq.n	8008b92 <__swsetup_r+0x66>
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	f7ff fcd5 	bl	800853c <_free_r>
 8008b92:	2300      	movs	r3, #0
 8008b94:	6363      	str	r3, [r4, #52]	; 0x34
 8008b96:	89a3      	ldrh	r3, [r4, #12]
 8008b98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b9c:	81a3      	strh	r3, [r4, #12]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	6063      	str	r3, [r4, #4]
 8008ba2:	6923      	ldr	r3, [r4, #16]
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	89a3      	ldrh	r3, [r4, #12]
 8008ba8:	f043 0308 	orr.w	r3, r3, #8
 8008bac:	81a3      	strh	r3, [r4, #12]
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	b94b      	cbnz	r3, 8008bc6 <__swsetup_r+0x9a>
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bbc:	d003      	beq.n	8008bc6 <__swsetup_r+0x9a>
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f000 fa09 	bl	8008fd8 <__smakebuf_r>
 8008bc6:	89a0      	ldrh	r0, [r4, #12]
 8008bc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bcc:	f010 0301 	ands.w	r3, r0, #1
 8008bd0:	d00a      	beq.n	8008be8 <__swsetup_r+0xbc>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60a3      	str	r3, [r4, #8]
 8008bd6:	6963      	ldr	r3, [r4, #20]
 8008bd8:	425b      	negs	r3, r3
 8008bda:	61a3      	str	r3, [r4, #24]
 8008bdc:	6923      	ldr	r3, [r4, #16]
 8008bde:	b943      	cbnz	r3, 8008bf2 <__swsetup_r+0xc6>
 8008be0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008be4:	d1ba      	bne.n	8008b5c <__swsetup_r+0x30>
 8008be6:	bd70      	pop	{r4, r5, r6, pc}
 8008be8:	0781      	lsls	r1, r0, #30
 8008bea:	bf58      	it	pl
 8008bec:	6963      	ldrpl	r3, [r4, #20]
 8008bee:	60a3      	str	r3, [r4, #8]
 8008bf0:	e7f4      	b.n	8008bdc <__swsetup_r+0xb0>
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	e7f7      	b.n	8008be6 <__swsetup_r+0xba>
 8008bf6:	bf00      	nop
 8008bf8:	20000048 	.word	0x20000048
 8008bfc:	0800960c 	.word	0x0800960c
 8008c00:	0800962c 	.word	0x0800962c
 8008c04:	080095ec 	.word	0x080095ec

08008c08 <abort>:
 8008c08:	b508      	push	{r3, lr}
 8008c0a:	2006      	movs	r0, #6
 8008c0c:	f000 fa4c 	bl	80090a8 <raise>
 8008c10:	2001      	movs	r0, #1
 8008c12:	f7fa f847 	bl	8002ca4 <_exit>
	...

08008c18 <__sflush_r>:
 8008c18:	898a      	ldrh	r2, [r1, #12]
 8008c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1e:	4605      	mov	r5, r0
 8008c20:	0710      	lsls	r0, r2, #28
 8008c22:	460c      	mov	r4, r1
 8008c24:	d458      	bmi.n	8008cd8 <__sflush_r+0xc0>
 8008c26:	684b      	ldr	r3, [r1, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	dc05      	bgt.n	8008c38 <__sflush_r+0x20>
 8008c2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dc02      	bgt.n	8008c38 <__sflush_r+0x20>
 8008c32:	2000      	movs	r0, #0
 8008c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c3a:	2e00      	cmp	r6, #0
 8008c3c:	d0f9      	beq.n	8008c32 <__sflush_r+0x1a>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c44:	682f      	ldr	r7, [r5, #0]
 8008c46:	602b      	str	r3, [r5, #0]
 8008c48:	d032      	beq.n	8008cb0 <__sflush_r+0x98>
 8008c4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	075a      	lsls	r2, r3, #29
 8008c50:	d505      	bpl.n	8008c5e <__sflush_r+0x46>
 8008c52:	6863      	ldr	r3, [r4, #4]
 8008c54:	1ac0      	subs	r0, r0, r3
 8008c56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c58:	b10b      	cbz	r3, 8008c5e <__sflush_r+0x46>
 8008c5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c5c:	1ac0      	subs	r0, r0, r3
 8008c5e:	2300      	movs	r3, #0
 8008c60:	4602      	mov	r2, r0
 8008c62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c64:	6a21      	ldr	r1, [r4, #32]
 8008c66:	4628      	mov	r0, r5
 8008c68:	47b0      	blx	r6
 8008c6a:	1c43      	adds	r3, r0, #1
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	d106      	bne.n	8008c7e <__sflush_r+0x66>
 8008c70:	6829      	ldr	r1, [r5, #0]
 8008c72:	291d      	cmp	r1, #29
 8008c74:	d82c      	bhi.n	8008cd0 <__sflush_r+0xb8>
 8008c76:	4a2a      	ldr	r2, [pc, #168]	; (8008d20 <__sflush_r+0x108>)
 8008c78:	40ca      	lsrs	r2, r1
 8008c7a:	07d6      	lsls	r6, r2, #31
 8008c7c:	d528      	bpl.n	8008cd0 <__sflush_r+0xb8>
 8008c7e:	2200      	movs	r2, #0
 8008c80:	6062      	str	r2, [r4, #4]
 8008c82:	04d9      	lsls	r1, r3, #19
 8008c84:	6922      	ldr	r2, [r4, #16]
 8008c86:	6022      	str	r2, [r4, #0]
 8008c88:	d504      	bpl.n	8008c94 <__sflush_r+0x7c>
 8008c8a:	1c42      	adds	r2, r0, #1
 8008c8c:	d101      	bne.n	8008c92 <__sflush_r+0x7a>
 8008c8e:	682b      	ldr	r3, [r5, #0]
 8008c90:	b903      	cbnz	r3, 8008c94 <__sflush_r+0x7c>
 8008c92:	6560      	str	r0, [r4, #84]	; 0x54
 8008c94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c96:	602f      	str	r7, [r5, #0]
 8008c98:	2900      	cmp	r1, #0
 8008c9a:	d0ca      	beq.n	8008c32 <__sflush_r+0x1a>
 8008c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ca0:	4299      	cmp	r1, r3
 8008ca2:	d002      	beq.n	8008caa <__sflush_r+0x92>
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	f7ff fc49 	bl	800853c <_free_r>
 8008caa:	2000      	movs	r0, #0
 8008cac:	6360      	str	r0, [r4, #52]	; 0x34
 8008cae:	e7c1      	b.n	8008c34 <__sflush_r+0x1c>
 8008cb0:	6a21      	ldr	r1, [r4, #32]
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	47b0      	blx	r6
 8008cb8:	1c41      	adds	r1, r0, #1
 8008cba:	d1c7      	bne.n	8008c4c <__sflush_r+0x34>
 8008cbc:	682b      	ldr	r3, [r5, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d0c4      	beq.n	8008c4c <__sflush_r+0x34>
 8008cc2:	2b1d      	cmp	r3, #29
 8008cc4:	d001      	beq.n	8008cca <__sflush_r+0xb2>
 8008cc6:	2b16      	cmp	r3, #22
 8008cc8:	d101      	bne.n	8008cce <__sflush_r+0xb6>
 8008cca:	602f      	str	r7, [r5, #0]
 8008ccc:	e7b1      	b.n	8008c32 <__sflush_r+0x1a>
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cd4:	81a3      	strh	r3, [r4, #12]
 8008cd6:	e7ad      	b.n	8008c34 <__sflush_r+0x1c>
 8008cd8:	690f      	ldr	r7, [r1, #16]
 8008cda:	2f00      	cmp	r7, #0
 8008cdc:	d0a9      	beq.n	8008c32 <__sflush_r+0x1a>
 8008cde:	0793      	lsls	r3, r2, #30
 8008ce0:	680e      	ldr	r6, [r1, #0]
 8008ce2:	bf08      	it	eq
 8008ce4:	694b      	ldreq	r3, [r1, #20]
 8008ce6:	600f      	str	r7, [r1, #0]
 8008ce8:	bf18      	it	ne
 8008cea:	2300      	movne	r3, #0
 8008cec:	eba6 0807 	sub.w	r8, r6, r7
 8008cf0:	608b      	str	r3, [r1, #8]
 8008cf2:	f1b8 0f00 	cmp.w	r8, #0
 8008cf6:	dd9c      	ble.n	8008c32 <__sflush_r+0x1a>
 8008cf8:	6a21      	ldr	r1, [r4, #32]
 8008cfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008cfc:	4643      	mov	r3, r8
 8008cfe:	463a      	mov	r2, r7
 8008d00:	4628      	mov	r0, r5
 8008d02:	47b0      	blx	r6
 8008d04:	2800      	cmp	r0, #0
 8008d06:	dc06      	bgt.n	8008d16 <__sflush_r+0xfe>
 8008d08:	89a3      	ldrh	r3, [r4, #12]
 8008d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	f04f 30ff 	mov.w	r0, #4294967295
 8008d14:	e78e      	b.n	8008c34 <__sflush_r+0x1c>
 8008d16:	4407      	add	r7, r0
 8008d18:	eba8 0800 	sub.w	r8, r8, r0
 8008d1c:	e7e9      	b.n	8008cf2 <__sflush_r+0xda>
 8008d1e:	bf00      	nop
 8008d20:	20400001 	.word	0x20400001

08008d24 <_fflush_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	690b      	ldr	r3, [r1, #16]
 8008d28:	4605      	mov	r5, r0
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	b913      	cbnz	r3, 8008d34 <_fflush_r+0x10>
 8008d2e:	2500      	movs	r5, #0
 8008d30:	4628      	mov	r0, r5
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	b118      	cbz	r0, 8008d3e <_fflush_r+0x1a>
 8008d36:	6983      	ldr	r3, [r0, #24]
 8008d38:	b90b      	cbnz	r3, 8008d3e <_fflush_r+0x1a>
 8008d3a:	f000 f887 	bl	8008e4c <__sinit>
 8008d3e:	4b14      	ldr	r3, [pc, #80]	; (8008d90 <_fflush_r+0x6c>)
 8008d40:	429c      	cmp	r4, r3
 8008d42:	d11b      	bne.n	8008d7c <_fflush_r+0x58>
 8008d44:	686c      	ldr	r4, [r5, #4]
 8008d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0ef      	beq.n	8008d2e <_fflush_r+0xa>
 8008d4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d50:	07d0      	lsls	r0, r2, #31
 8008d52:	d404      	bmi.n	8008d5e <_fflush_r+0x3a>
 8008d54:	0599      	lsls	r1, r3, #22
 8008d56:	d402      	bmi.n	8008d5e <_fflush_r+0x3a>
 8008d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d5a:	f000 f915 	bl	8008f88 <__retarget_lock_acquire_recursive>
 8008d5e:	4628      	mov	r0, r5
 8008d60:	4621      	mov	r1, r4
 8008d62:	f7ff ff59 	bl	8008c18 <__sflush_r>
 8008d66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d68:	07da      	lsls	r2, r3, #31
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	d4e0      	bmi.n	8008d30 <_fflush_r+0xc>
 8008d6e:	89a3      	ldrh	r3, [r4, #12]
 8008d70:	059b      	lsls	r3, r3, #22
 8008d72:	d4dd      	bmi.n	8008d30 <_fflush_r+0xc>
 8008d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d76:	f000 f908 	bl	8008f8a <__retarget_lock_release_recursive>
 8008d7a:	e7d9      	b.n	8008d30 <_fflush_r+0xc>
 8008d7c:	4b05      	ldr	r3, [pc, #20]	; (8008d94 <_fflush_r+0x70>)
 8008d7e:	429c      	cmp	r4, r3
 8008d80:	d101      	bne.n	8008d86 <_fflush_r+0x62>
 8008d82:	68ac      	ldr	r4, [r5, #8]
 8008d84:	e7df      	b.n	8008d46 <_fflush_r+0x22>
 8008d86:	4b04      	ldr	r3, [pc, #16]	; (8008d98 <_fflush_r+0x74>)
 8008d88:	429c      	cmp	r4, r3
 8008d8a:	bf08      	it	eq
 8008d8c:	68ec      	ldreq	r4, [r5, #12]
 8008d8e:	e7da      	b.n	8008d46 <_fflush_r+0x22>
 8008d90:	0800960c 	.word	0x0800960c
 8008d94:	0800962c 	.word	0x0800962c
 8008d98:	080095ec 	.word	0x080095ec

08008d9c <std>:
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	b510      	push	{r4, lr}
 8008da0:	4604      	mov	r4, r0
 8008da2:	e9c0 3300 	strd	r3, r3, [r0]
 8008da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008daa:	6083      	str	r3, [r0, #8]
 8008dac:	8181      	strh	r1, [r0, #12]
 8008dae:	6643      	str	r3, [r0, #100]	; 0x64
 8008db0:	81c2      	strh	r2, [r0, #14]
 8008db2:	6183      	str	r3, [r0, #24]
 8008db4:	4619      	mov	r1, r3
 8008db6:	2208      	movs	r2, #8
 8008db8:	305c      	adds	r0, #92	; 0x5c
 8008dba:	f7fd fd1f 	bl	80067fc <memset>
 8008dbe:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <std+0x38>)
 8008dc0:	6263      	str	r3, [r4, #36]	; 0x24
 8008dc2:	4b05      	ldr	r3, [pc, #20]	; (8008dd8 <std+0x3c>)
 8008dc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008dc6:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <std+0x40>)
 8008dc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dca:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <std+0x44>)
 8008dcc:	6224      	str	r4, [r4, #32]
 8008dce:	6323      	str	r3, [r4, #48]	; 0x30
 8008dd0:	bd10      	pop	{r4, pc}
 8008dd2:	bf00      	nop
 8008dd4:	080090e1 	.word	0x080090e1
 8008dd8:	08009103 	.word	0x08009103
 8008ddc:	0800913b 	.word	0x0800913b
 8008de0:	0800915f 	.word	0x0800915f

08008de4 <_cleanup_r>:
 8008de4:	4901      	ldr	r1, [pc, #4]	; (8008dec <_cleanup_r+0x8>)
 8008de6:	f000 b8af 	b.w	8008f48 <_fwalk_reent>
 8008dea:	bf00      	nop
 8008dec:	08008d25 	.word	0x08008d25

08008df0 <__sfmoreglue>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	2268      	movs	r2, #104	; 0x68
 8008df4:	1e4d      	subs	r5, r1, #1
 8008df6:	4355      	muls	r5, r2
 8008df8:	460e      	mov	r6, r1
 8008dfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008dfe:	f7ff fc09 	bl	8008614 <_malloc_r>
 8008e02:	4604      	mov	r4, r0
 8008e04:	b140      	cbz	r0, 8008e18 <__sfmoreglue+0x28>
 8008e06:	2100      	movs	r1, #0
 8008e08:	e9c0 1600 	strd	r1, r6, [r0]
 8008e0c:	300c      	adds	r0, #12
 8008e0e:	60a0      	str	r0, [r4, #8]
 8008e10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e14:	f7fd fcf2 	bl	80067fc <memset>
 8008e18:	4620      	mov	r0, r4
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}

08008e1c <__sfp_lock_acquire>:
 8008e1c:	4801      	ldr	r0, [pc, #4]	; (8008e24 <__sfp_lock_acquire+0x8>)
 8008e1e:	f000 b8b3 	b.w	8008f88 <__retarget_lock_acquire_recursive>
 8008e22:	bf00      	nop
 8008e24:	20000639 	.word	0x20000639

08008e28 <__sfp_lock_release>:
 8008e28:	4801      	ldr	r0, [pc, #4]	; (8008e30 <__sfp_lock_release+0x8>)
 8008e2a:	f000 b8ae 	b.w	8008f8a <__retarget_lock_release_recursive>
 8008e2e:	bf00      	nop
 8008e30:	20000639 	.word	0x20000639

08008e34 <__sinit_lock_acquire>:
 8008e34:	4801      	ldr	r0, [pc, #4]	; (8008e3c <__sinit_lock_acquire+0x8>)
 8008e36:	f000 b8a7 	b.w	8008f88 <__retarget_lock_acquire_recursive>
 8008e3a:	bf00      	nop
 8008e3c:	2000063a 	.word	0x2000063a

08008e40 <__sinit_lock_release>:
 8008e40:	4801      	ldr	r0, [pc, #4]	; (8008e48 <__sinit_lock_release+0x8>)
 8008e42:	f000 b8a2 	b.w	8008f8a <__retarget_lock_release_recursive>
 8008e46:	bf00      	nop
 8008e48:	2000063a 	.word	0x2000063a

08008e4c <__sinit>:
 8008e4c:	b510      	push	{r4, lr}
 8008e4e:	4604      	mov	r4, r0
 8008e50:	f7ff fff0 	bl	8008e34 <__sinit_lock_acquire>
 8008e54:	69a3      	ldr	r3, [r4, #24]
 8008e56:	b11b      	cbz	r3, 8008e60 <__sinit+0x14>
 8008e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e5c:	f7ff bff0 	b.w	8008e40 <__sinit_lock_release>
 8008e60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e64:	6523      	str	r3, [r4, #80]	; 0x50
 8008e66:	4b13      	ldr	r3, [pc, #76]	; (8008eb4 <__sinit+0x68>)
 8008e68:	4a13      	ldr	r2, [pc, #76]	; (8008eb8 <__sinit+0x6c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e6e:	42a3      	cmp	r3, r4
 8008e70:	bf04      	itt	eq
 8008e72:	2301      	moveq	r3, #1
 8008e74:	61a3      	streq	r3, [r4, #24]
 8008e76:	4620      	mov	r0, r4
 8008e78:	f000 f820 	bl	8008ebc <__sfp>
 8008e7c:	6060      	str	r0, [r4, #4]
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f000 f81c 	bl	8008ebc <__sfp>
 8008e84:	60a0      	str	r0, [r4, #8]
 8008e86:	4620      	mov	r0, r4
 8008e88:	f000 f818 	bl	8008ebc <__sfp>
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	60e0      	str	r0, [r4, #12]
 8008e90:	2104      	movs	r1, #4
 8008e92:	6860      	ldr	r0, [r4, #4]
 8008e94:	f7ff ff82 	bl	8008d9c <std>
 8008e98:	68a0      	ldr	r0, [r4, #8]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	2109      	movs	r1, #9
 8008e9e:	f7ff ff7d 	bl	8008d9c <std>
 8008ea2:	68e0      	ldr	r0, [r4, #12]
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	2112      	movs	r1, #18
 8008ea8:	f7ff ff78 	bl	8008d9c <std>
 8008eac:	2301      	movs	r3, #1
 8008eae:	61a3      	str	r3, [r4, #24]
 8008eb0:	e7d2      	b.n	8008e58 <__sinit+0xc>
 8008eb2:	bf00      	nop
 8008eb4:	08009270 	.word	0x08009270
 8008eb8:	08008de5 	.word	0x08008de5

08008ebc <__sfp>:
 8008ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ebe:	4607      	mov	r7, r0
 8008ec0:	f7ff ffac 	bl	8008e1c <__sfp_lock_acquire>
 8008ec4:	4b1e      	ldr	r3, [pc, #120]	; (8008f40 <__sfp+0x84>)
 8008ec6:	681e      	ldr	r6, [r3, #0]
 8008ec8:	69b3      	ldr	r3, [r6, #24]
 8008eca:	b913      	cbnz	r3, 8008ed2 <__sfp+0x16>
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f7ff ffbd 	bl	8008e4c <__sinit>
 8008ed2:	3648      	adds	r6, #72	; 0x48
 8008ed4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	d503      	bpl.n	8008ee4 <__sfp+0x28>
 8008edc:	6833      	ldr	r3, [r6, #0]
 8008ede:	b30b      	cbz	r3, 8008f24 <__sfp+0x68>
 8008ee0:	6836      	ldr	r6, [r6, #0]
 8008ee2:	e7f7      	b.n	8008ed4 <__sfp+0x18>
 8008ee4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ee8:	b9d5      	cbnz	r5, 8008f20 <__sfp+0x64>
 8008eea:	4b16      	ldr	r3, [pc, #88]	; (8008f44 <__sfp+0x88>)
 8008eec:	60e3      	str	r3, [r4, #12]
 8008eee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ef2:	6665      	str	r5, [r4, #100]	; 0x64
 8008ef4:	f000 f847 	bl	8008f86 <__retarget_lock_init_recursive>
 8008ef8:	f7ff ff96 	bl	8008e28 <__sfp_lock_release>
 8008efc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f04:	6025      	str	r5, [r4, #0]
 8008f06:	61a5      	str	r5, [r4, #24]
 8008f08:	2208      	movs	r2, #8
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f10:	f7fd fc74 	bl	80067fc <memset>
 8008f14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f20:	3468      	adds	r4, #104	; 0x68
 8008f22:	e7d9      	b.n	8008ed8 <__sfp+0x1c>
 8008f24:	2104      	movs	r1, #4
 8008f26:	4638      	mov	r0, r7
 8008f28:	f7ff ff62 	bl	8008df0 <__sfmoreglue>
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	6030      	str	r0, [r6, #0]
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d1d5      	bne.n	8008ee0 <__sfp+0x24>
 8008f34:	f7ff ff78 	bl	8008e28 <__sfp_lock_release>
 8008f38:	230c      	movs	r3, #12
 8008f3a:	603b      	str	r3, [r7, #0]
 8008f3c:	e7ee      	b.n	8008f1c <__sfp+0x60>
 8008f3e:	bf00      	nop
 8008f40:	08009270 	.word	0x08009270
 8008f44:	ffff0001 	.word	0xffff0001

08008f48 <_fwalk_reent>:
 8008f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f4c:	4606      	mov	r6, r0
 8008f4e:	4688      	mov	r8, r1
 8008f50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f54:	2700      	movs	r7, #0
 8008f56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f5a:	f1b9 0901 	subs.w	r9, r9, #1
 8008f5e:	d505      	bpl.n	8008f6c <_fwalk_reent+0x24>
 8008f60:	6824      	ldr	r4, [r4, #0]
 8008f62:	2c00      	cmp	r4, #0
 8008f64:	d1f7      	bne.n	8008f56 <_fwalk_reent+0xe>
 8008f66:	4638      	mov	r0, r7
 8008f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f6c:	89ab      	ldrh	r3, [r5, #12]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d907      	bls.n	8008f82 <_fwalk_reent+0x3a>
 8008f72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f76:	3301      	adds	r3, #1
 8008f78:	d003      	beq.n	8008f82 <_fwalk_reent+0x3a>
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	47c0      	blx	r8
 8008f80:	4307      	orrs	r7, r0
 8008f82:	3568      	adds	r5, #104	; 0x68
 8008f84:	e7e9      	b.n	8008f5a <_fwalk_reent+0x12>

08008f86 <__retarget_lock_init_recursive>:
 8008f86:	4770      	bx	lr

08008f88 <__retarget_lock_acquire_recursive>:
 8008f88:	4770      	bx	lr

08008f8a <__retarget_lock_release_recursive>:
 8008f8a:	4770      	bx	lr

08008f8c <__swhatbuf_r>:
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	460e      	mov	r6, r1
 8008f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f94:	2900      	cmp	r1, #0
 8008f96:	b096      	sub	sp, #88	; 0x58
 8008f98:	4614      	mov	r4, r2
 8008f9a:	461d      	mov	r5, r3
 8008f9c:	da08      	bge.n	8008fb0 <__swhatbuf_r+0x24>
 8008f9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	602a      	str	r2, [r5, #0]
 8008fa6:	061a      	lsls	r2, r3, #24
 8008fa8:	d410      	bmi.n	8008fcc <__swhatbuf_r+0x40>
 8008faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fae:	e00e      	b.n	8008fce <__swhatbuf_r+0x42>
 8008fb0:	466a      	mov	r2, sp
 8008fb2:	f000 f8fb 	bl	80091ac <_fstat_r>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	dbf1      	blt.n	8008f9e <__swhatbuf_r+0x12>
 8008fba:	9a01      	ldr	r2, [sp, #4]
 8008fbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008fc4:	425a      	negs	r2, r3
 8008fc6:	415a      	adcs	r2, r3
 8008fc8:	602a      	str	r2, [r5, #0]
 8008fca:	e7ee      	b.n	8008faa <__swhatbuf_r+0x1e>
 8008fcc:	2340      	movs	r3, #64	; 0x40
 8008fce:	2000      	movs	r0, #0
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	b016      	add	sp, #88	; 0x58
 8008fd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008fd8 <__smakebuf_r>:
 8008fd8:	898b      	ldrh	r3, [r1, #12]
 8008fda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fdc:	079d      	lsls	r5, r3, #30
 8008fde:	4606      	mov	r6, r0
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	d507      	bpl.n	8008ff4 <__smakebuf_r+0x1c>
 8008fe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	6123      	str	r3, [r4, #16]
 8008fec:	2301      	movs	r3, #1
 8008fee:	6163      	str	r3, [r4, #20]
 8008ff0:	b002      	add	sp, #8
 8008ff2:	bd70      	pop	{r4, r5, r6, pc}
 8008ff4:	ab01      	add	r3, sp, #4
 8008ff6:	466a      	mov	r2, sp
 8008ff8:	f7ff ffc8 	bl	8008f8c <__swhatbuf_r>
 8008ffc:	9900      	ldr	r1, [sp, #0]
 8008ffe:	4605      	mov	r5, r0
 8009000:	4630      	mov	r0, r6
 8009002:	f7ff fb07 	bl	8008614 <_malloc_r>
 8009006:	b948      	cbnz	r0, 800901c <__smakebuf_r+0x44>
 8009008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800900c:	059a      	lsls	r2, r3, #22
 800900e:	d4ef      	bmi.n	8008ff0 <__smakebuf_r+0x18>
 8009010:	f023 0303 	bic.w	r3, r3, #3
 8009014:	f043 0302 	orr.w	r3, r3, #2
 8009018:	81a3      	strh	r3, [r4, #12]
 800901a:	e7e3      	b.n	8008fe4 <__smakebuf_r+0xc>
 800901c:	4b0d      	ldr	r3, [pc, #52]	; (8009054 <__smakebuf_r+0x7c>)
 800901e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009020:	89a3      	ldrh	r3, [r4, #12]
 8009022:	6020      	str	r0, [r4, #0]
 8009024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009028:	81a3      	strh	r3, [r4, #12]
 800902a:	9b00      	ldr	r3, [sp, #0]
 800902c:	6163      	str	r3, [r4, #20]
 800902e:	9b01      	ldr	r3, [sp, #4]
 8009030:	6120      	str	r0, [r4, #16]
 8009032:	b15b      	cbz	r3, 800904c <__smakebuf_r+0x74>
 8009034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009038:	4630      	mov	r0, r6
 800903a:	f000 f8c9 	bl	80091d0 <_isatty_r>
 800903e:	b128      	cbz	r0, 800904c <__smakebuf_r+0x74>
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	f023 0303 	bic.w	r3, r3, #3
 8009046:	f043 0301 	orr.w	r3, r3, #1
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	89a0      	ldrh	r0, [r4, #12]
 800904e:	4305      	orrs	r5, r0
 8009050:	81a5      	strh	r5, [r4, #12]
 8009052:	e7cd      	b.n	8008ff0 <__smakebuf_r+0x18>
 8009054:	08008de5 	.word	0x08008de5

08009058 <_raise_r>:
 8009058:	291f      	cmp	r1, #31
 800905a:	b538      	push	{r3, r4, r5, lr}
 800905c:	4604      	mov	r4, r0
 800905e:	460d      	mov	r5, r1
 8009060:	d904      	bls.n	800906c <_raise_r+0x14>
 8009062:	2316      	movs	r3, #22
 8009064:	6003      	str	r3, [r0, #0]
 8009066:	f04f 30ff 	mov.w	r0, #4294967295
 800906a:	bd38      	pop	{r3, r4, r5, pc}
 800906c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800906e:	b112      	cbz	r2, 8009076 <_raise_r+0x1e>
 8009070:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009074:	b94b      	cbnz	r3, 800908a <_raise_r+0x32>
 8009076:	4620      	mov	r0, r4
 8009078:	f000 f830 	bl	80090dc <_getpid_r>
 800907c:	462a      	mov	r2, r5
 800907e:	4601      	mov	r1, r0
 8009080:	4620      	mov	r0, r4
 8009082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009086:	f000 b817 	b.w	80090b8 <_kill_r>
 800908a:	2b01      	cmp	r3, #1
 800908c:	d00a      	beq.n	80090a4 <_raise_r+0x4c>
 800908e:	1c59      	adds	r1, r3, #1
 8009090:	d103      	bne.n	800909a <_raise_r+0x42>
 8009092:	2316      	movs	r3, #22
 8009094:	6003      	str	r3, [r0, #0]
 8009096:	2001      	movs	r0, #1
 8009098:	e7e7      	b.n	800906a <_raise_r+0x12>
 800909a:	2400      	movs	r4, #0
 800909c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090a0:	4628      	mov	r0, r5
 80090a2:	4798      	blx	r3
 80090a4:	2000      	movs	r0, #0
 80090a6:	e7e0      	b.n	800906a <_raise_r+0x12>

080090a8 <raise>:
 80090a8:	4b02      	ldr	r3, [pc, #8]	; (80090b4 <raise+0xc>)
 80090aa:	4601      	mov	r1, r0
 80090ac:	6818      	ldr	r0, [r3, #0]
 80090ae:	f7ff bfd3 	b.w	8009058 <_raise_r>
 80090b2:	bf00      	nop
 80090b4:	20000048 	.word	0x20000048

080090b8 <_kill_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4d07      	ldr	r5, [pc, #28]	; (80090d8 <_kill_r+0x20>)
 80090bc:	2300      	movs	r3, #0
 80090be:	4604      	mov	r4, r0
 80090c0:	4608      	mov	r0, r1
 80090c2:	4611      	mov	r1, r2
 80090c4:	602b      	str	r3, [r5, #0]
 80090c6:	f7f9 fddd 	bl	8002c84 <_kill>
 80090ca:	1c43      	adds	r3, r0, #1
 80090cc:	d102      	bne.n	80090d4 <_kill_r+0x1c>
 80090ce:	682b      	ldr	r3, [r5, #0]
 80090d0:	b103      	cbz	r3, 80090d4 <_kill_r+0x1c>
 80090d2:	6023      	str	r3, [r4, #0]
 80090d4:	bd38      	pop	{r3, r4, r5, pc}
 80090d6:	bf00      	nop
 80090d8:	20000634 	.word	0x20000634

080090dc <_getpid_r>:
 80090dc:	f7f9 bdca 	b.w	8002c74 <_getpid>

080090e0 <__sread>:
 80090e0:	b510      	push	{r4, lr}
 80090e2:	460c      	mov	r4, r1
 80090e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e8:	f000 f894 	bl	8009214 <_read_r>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	bfab      	itete	ge
 80090f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090f2:	89a3      	ldrhlt	r3, [r4, #12]
 80090f4:	181b      	addge	r3, r3, r0
 80090f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090fa:	bfac      	ite	ge
 80090fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80090fe:	81a3      	strhlt	r3, [r4, #12]
 8009100:	bd10      	pop	{r4, pc}

08009102 <__swrite>:
 8009102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009106:	461f      	mov	r7, r3
 8009108:	898b      	ldrh	r3, [r1, #12]
 800910a:	05db      	lsls	r3, r3, #23
 800910c:	4605      	mov	r5, r0
 800910e:	460c      	mov	r4, r1
 8009110:	4616      	mov	r6, r2
 8009112:	d505      	bpl.n	8009120 <__swrite+0x1e>
 8009114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009118:	2302      	movs	r3, #2
 800911a:	2200      	movs	r2, #0
 800911c:	f000 f868 	bl	80091f0 <_lseek_r>
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	4632      	mov	r2, r6
 800912e:	463b      	mov	r3, r7
 8009130:	4628      	mov	r0, r5
 8009132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009136:	f000 b817 	b.w	8009168 <_write_r>

0800913a <__sseek>:
 800913a:	b510      	push	{r4, lr}
 800913c:	460c      	mov	r4, r1
 800913e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009142:	f000 f855 	bl	80091f0 <_lseek_r>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	89a3      	ldrh	r3, [r4, #12]
 800914a:	bf15      	itete	ne
 800914c:	6560      	strne	r0, [r4, #84]	; 0x54
 800914e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009156:	81a3      	strheq	r3, [r4, #12]
 8009158:	bf18      	it	ne
 800915a:	81a3      	strhne	r3, [r4, #12]
 800915c:	bd10      	pop	{r4, pc}

0800915e <__sclose>:
 800915e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009162:	f000 b813 	b.w	800918c <_close_r>
	...

08009168 <_write_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4d07      	ldr	r5, [pc, #28]	; (8009188 <_write_r+0x20>)
 800916c:	4604      	mov	r4, r0
 800916e:	4608      	mov	r0, r1
 8009170:	4611      	mov	r1, r2
 8009172:	2200      	movs	r2, #0
 8009174:	602a      	str	r2, [r5, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	f7f9 fdbb 	bl	8002cf2 <_write>
 800917c:	1c43      	adds	r3, r0, #1
 800917e:	d102      	bne.n	8009186 <_write_r+0x1e>
 8009180:	682b      	ldr	r3, [r5, #0]
 8009182:	b103      	cbz	r3, 8009186 <_write_r+0x1e>
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	bd38      	pop	{r3, r4, r5, pc}
 8009188:	20000634 	.word	0x20000634

0800918c <_close_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4d06      	ldr	r5, [pc, #24]	; (80091a8 <_close_r+0x1c>)
 8009190:	2300      	movs	r3, #0
 8009192:	4604      	mov	r4, r0
 8009194:	4608      	mov	r0, r1
 8009196:	602b      	str	r3, [r5, #0]
 8009198:	f7f9 fdc7 	bl	8002d2a <_close>
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	d102      	bne.n	80091a6 <_close_r+0x1a>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	b103      	cbz	r3, 80091a6 <_close_r+0x1a>
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	20000634 	.word	0x20000634

080091ac <_fstat_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4d07      	ldr	r5, [pc, #28]	; (80091cc <_fstat_r+0x20>)
 80091b0:	2300      	movs	r3, #0
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	4611      	mov	r1, r2
 80091b8:	602b      	str	r3, [r5, #0]
 80091ba:	f7f9 fdc2 	bl	8002d42 <_fstat>
 80091be:	1c43      	adds	r3, r0, #1
 80091c0:	d102      	bne.n	80091c8 <_fstat_r+0x1c>
 80091c2:	682b      	ldr	r3, [r5, #0]
 80091c4:	b103      	cbz	r3, 80091c8 <_fstat_r+0x1c>
 80091c6:	6023      	str	r3, [r4, #0]
 80091c8:	bd38      	pop	{r3, r4, r5, pc}
 80091ca:	bf00      	nop
 80091cc:	20000634 	.word	0x20000634

080091d0 <_isatty_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4d06      	ldr	r5, [pc, #24]	; (80091ec <_isatty_r+0x1c>)
 80091d4:	2300      	movs	r3, #0
 80091d6:	4604      	mov	r4, r0
 80091d8:	4608      	mov	r0, r1
 80091da:	602b      	str	r3, [r5, #0]
 80091dc:	f7f9 fdc1 	bl	8002d62 <_isatty>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	d102      	bne.n	80091ea <_isatty_r+0x1a>
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	b103      	cbz	r3, 80091ea <_isatty_r+0x1a>
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	20000634 	.word	0x20000634

080091f0 <_lseek_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	4d07      	ldr	r5, [pc, #28]	; (8009210 <_lseek_r+0x20>)
 80091f4:	4604      	mov	r4, r0
 80091f6:	4608      	mov	r0, r1
 80091f8:	4611      	mov	r1, r2
 80091fa:	2200      	movs	r2, #0
 80091fc:	602a      	str	r2, [r5, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	f7f9 fdba 	bl	8002d78 <_lseek>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d102      	bne.n	800920e <_lseek_r+0x1e>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	b103      	cbz	r3, 800920e <_lseek_r+0x1e>
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	20000634 	.word	0x20000634

08009214 <_read_r>:
 8009214:	b538      	push	{r3, r4, r5, lr}
 8009216:	4d07      	ldr	r5, [pc, #28]	; (8009234 <_read_r+0x20>)
 8009218:	4604      	mov	r4, r0
 800921a:	4608      	mov	r0, r1
 800921c:	4611      	mov	r1, r2
 800921e:	2200      	movs	r2, #0
 8009220:	602a      	str	r2, [r5, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	f7f9 fd48 	bl	8002cb8 <_read>
 8009228:	1c43      	adds	r3, r0, #1
 800922a:	d102      	bne.n	8009232 <_read_r+0x1e>
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	b103      	cbz	r3, 8009232 <_read_r+0x1e>
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	bd38      	pop	{r3, r4, r5, pc}
 8009234:	20000634 	.word	0x20000634

08009238 <_init>:
 8009238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923a:	bf00      	nop
 800923c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923e:	bc08      	pop	{r3}
 8009240:	469e      	mov	lr, r3
 8009242:	4770      	bx	lr

08009244 <_fini>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	bf00      	nop
 8009248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924a:	bc08      	pop	{r3}
 800924c:	469e      	mov	lr, r3
 800924e:	4770      	bx	lr
