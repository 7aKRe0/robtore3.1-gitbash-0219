
robotore3.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009070  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08009200  08009200  00019200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095fc  080095fc  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  080095fc  080095fc  000195fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009604  08009604  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009604  08009604  00019604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009608  08009608  00019608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800960c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020210  2**0
                  CONTENTS
 10 .bss          00000410  20000210  20000210  00020210  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000620  20000620  00020210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015d53  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cb5  00000000  00000000  00035f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00038c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001298  00000000  00000000  00039ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002308b  00000000  00000000  0003b288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186f7  00000000  00000000  0005e313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3902  00000000  00000000  00076a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a30c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006424  00000000  00000000  0014a35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080091e8 	.word	0x080091e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	080091e8 	.word	0x080091e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <LED_RGB>:
//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3


void LED_RGB(int i){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

	switch (i)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	2b06      	cmp	r3, #6
 8000f9a:	f200 8088 	bhi.w	80010ae <LED_RGB+0x122>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <LED_RGB+0x18>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08000fc1 	.word	0x08000fc1
 8000fa8:	08000fe3 	.word	0x08000fe3
 8000fac:	08001005 	.word	0x08001005
 8000fb0:	08001027 	.word	0x08001027
 8000fb4:	08001049 	.word	0x08001049
 8000fb8:	0800106b 	.word	0x0800106b
 8000fbc:	0800108d 	.word	0x0800108d
	            {
	            case 1://R
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	4844      	ldr	r0, [pc, #272]	; (80010d8 <LED_RGB+0x14c>)
 8000fc6:	f003 f9d5 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2110      	movs	r1, #16
 8000fce:	4842      	ldr	r0, [pc, #264]	; (80010d8 <LED_RGB+0x14c>)
 8000fd0:	f003 f9d0 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fda:	4840      	ldr	r0, [pc, #256]	; (80010dc <LED_RGB+0x150>)
 8000fdc:	f003 f9ca 	bl	8004374 <HAL_GPIO_WritePin>

	                break;
 8000fe0:	e076      	b.n	80010d0 <LED_RGB+0x144>

	            case 2://G
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2120      	movs	r1, #32
 8000fe6:	483c      	ldr	r0, [pc, #240]	; (80010d8 <LED_RGB+0x14c>)
 8000fe8:	f003 f9c4 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8000fec:	2200      	movs	r2, #0
 8000fee:	2110      	movs	r1, #16
 8000ff0:	4839      	ldr	r0, [pc, #228]	; (80010d8 <LED_RGB+0x14c>)
 8000ff2:	f003 f9bf 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffc:	4837      	ldr	r0, [pc, #220]	; (80010dc <LED_RGB+0x150>)
 8000ffe:	f003 f9b9 	bl	8004374 <HAL_GPIO_WritePin>

	                break;
 8001002:	e065      	b.n	80010d0 <LED_RGB+0x144>

	            case 3://B
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 8001004:	2201      	movs	r2, #1
 8001006:	2120      	movs	r1, #32
 8001008:	4833      	ldr	r0, [pc, #204]	; (80010d8 <LED_RGB+0x14c>)
 800100a:	f003 f9b3 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 800100e:	2201      	movs	r2, #1
 8001010:	2110      	movs	r1, #16
 8001012:	4831      	ldr	r0, [pc, #196]	; (80010d8 <LED_RGB+0x14c>)
 8001014:	f003 f9ae 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101e:	482f      	ldr	r0, [pc, #188]	; (80010dc <LED_RGB+0x150>)
 8001020:	f003 f9a8 	bl	8004374 <HAL_GPIO_WritePin>

	                break;
 8001024:	e054      	b.n	80010d0 <LED_RGB+0x144>

	            case 4://y
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 8001026:	2200      	movs	r2, #0
 8001028:	2120      	movs	r1, #32
 800102a:	482b      	ldr	r0, [pc, #172]	; (80010d8 <LED_RGB+0x14c>)
 800102c:	f003 f9a2 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8001030:	2200      	movs	r2, #0
 8001032:	2110      	movs	r1, #16
 8001034:	4828      	ldr	r0, [pc, #160]	; (80010d8 <LED_RGB+0x14c>)
 8001036:	f003 f99d 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001040:	4826      	ldr	r0, [pc, #152]	; (80010dc <LED_RGB+0x150>)
 8001042:	f003 f997 	bl	8004374 <HAL_GPIO_WritePin>

	                break;
 8001046:	e043      	b.n	80010d0 <LED_RGB+0x144>

	            case 5://pink
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 8001048:	2200      	movs	r2, #0
 800104a:	2120      	movs	r1, #32
 800104c:	4822      	ldr	r0, [pc, #136]	; (80010d8 <LED_RGB+0x14c>)
 800104e:	f003 f991 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 8001052:	2201      	movs	r2, #1
 8001054:	2110      	movs	r1, #16
 8001056:	4820      	ldr	r0, [pc, #128]	; (80010d8 <LED_RGB+0x14c>)
 8001058:	f003 f98c 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001062:	481e      	ldr	r0, [pc, #120]	; (80010dc <LED_RGB+0x150>)
 8001064:	f003 f986 	bl	8004374 <HAL_GPIO_WritePin>

	                break;
 8001068:	e032      	b.n	80010d0 <LED_RGB+0x144>

	            case 6://white
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 800106a:	2200      	movs	r2, #0
 800106c:	2120      	movs	r1, #32
 800106e:	481a      	ldr	r0, [pc, #104]	; (80010d8 <LED_RGB+0x14c>)
 8001070:	f003 f980 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	4817      	ldr	r0, [pc, #92]	; (80010d8 <LED_RGB+0x14c>)
 800107a:	f003 f97b 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001084:	4815      	ldr	r0, [pc, #84]	; (80010dc <LED_RGB+0x150>)
 8001086:	f003 f975 	bl	8004374 <HAL_GPIO_WritePin>

	                break;
 800108a:	e021      	b.n	80010d0 <LED_RGB+0x144>

	            case 7://Cyan
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 800108c:	2201      	movs	r2, #1
 800108e:	2120      	movs	r1, #32
 8001090:	4811      	ldr	r0, [pc, #68]	; (80010d8 <LED_RGB+0x14c>)
 8001092:	f003 f96f 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8001096:	2200      	movs	r2, #0
 8001098:	2110      	movs	r1, #16
 800109a:	480f      	ldr	r0, [pc, #60]	; (80010d8 <LED_RGB+0x14c>)
 800109c:	f003 f96a 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <LED_RGB+0x150>)
 80010a8:	f003 f964 	bl	8004374 <HAL_GPIO_WritePin>

	                break;
 80010ac:	e010      	b.n	80010d0 <LED_RGB+0x144>

	            default:
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 80010ae:	2201      	movs	r2, #1
 80010b0:	2120      	movs	r1, #32
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <LED_RGB+0x14c>)
 80010b4:	f003 f95e 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 80010b8:	2201      	movs	r2, #1
 80010ba:	2110      	movs	r1, #16
 80010bc:	4806      	ldr	r0, [pc, #24]	; (80010d8 <LED_RGB+0x14c>)
 80010be:	f003 f959 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <LED_RGB+0x150>)
 80010ca:	f003 f953 	bl	8004374 <HAL_GPIO_WritePin>
	                break;
 80010ce:	bf00      	nop
	            }


}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40020000 	.word	0x40020000

080010e0 <LED_RGB_2>:

void LED_RGB_2(int n){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

	switch (n)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	2b06      	cmp	r3, #6
 80010ee:	f200 8095 	bhi.w	800121c <LED_RGB_2+0x13c>
 80010f2:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <LED_RGB_2+0x18>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	08001115 	.word	0x08001115
 80010fc:	08001139 	.word	0x08001139
 8001100:	0800115f 	.word	0x0800115f
 8001104:	08001185 	.word	0x08001185
 8001108:	080011ab 	.word	0x080011ab
 800110c:	080011d1 	.word	0x080011d1
 8001110:	080011f7 	.word	0x080011f7
	            {
	            case 1://R
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111a:	484c      	ldr	r0, [pc, #304]	; (800124c <LED_RGB_2+0x16c>)
 800111c:	f003 f92a 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_2-4
 8001120:	2201      	movs	r2, #1
 8001122:	2110      	movs	r1, #16
 8001124:	4849      	ldr	r0, [pc, #292]	; (800124c <LED_RGB_2+0x16c>)
 8001126:	f003 f925 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001130:	4846      	ldr	r0, [pc, #280]	; (800124c <LED_RGB_2+0x16c>)
 8001132:	f003 f91f 	bl	8004374 <HAL_GPIO_WritePin>

	                break;
 8001136:	e084      	b.n	8001242 <LED_RGB_2+0x162>

	            case 2://G
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113e:	4843      	ldr	r0, [pc, #268]	; (800124c <LED_RGB_2+0x16c>)
 8001140:	f003 f918 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114a:	4840      	ldr	r0, [pc, #256]	; (800124c <LED_RGB_2+0x16c>)
 800114c:	f003 f912 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001156:	483d      	ldr	r0, [pc, #244]	; (800124c <LED_RGB_2+0x16c>)
 8001158:	f003 f90c 	bl	8004374 <HAL_GPIO_WritePin>
	                break;
 800115c:	e071      	b.n	8001242 <LED_RGB_2+0x162>

	            case 3://B
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001164:	4839      	ldr	r0, [pc, #228]	; (800124c <LED_RGB_2+0x16c>)
 8001166:	f003 f905 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001170:	4836      	ldr	r0, [pc, #216]	; (800124c <LED_RGB_2+0x16c>)
 8001172:	f003 f8ff 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117c:	4833      	ldr	r0, [pc, #204]	; (800124c <LED_RGB_2+0x16c>)
 800117e:	f003 f8f9 	bl	8004374 <HAL_GPIO_WritePin>
	                break;
 8001182:	e05e      	b.n	8001242 <LED_RGB_2+0x162>

	            case 4://y
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118a:	4830      	ldr	r0, [pc, #192]	; (800124c <LED_RGB_2+0x16c>)
 800118c:	f003 f8f2 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	482d      	ldr	r0, [pc, #180]	; (800124c <LED_RGB_2+0x16c>)
 8001198:	f003 f8ec 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a2:	482a      	ldr	r0, [pc, #168]	; (800124c <LED_RGB_2+0x16c>)
 80011a4:	f003 f8e6 	bl	8004374 <HAL_GPIO_WritePin>

	                break;
 80011a8:	e04b      	b.n	8001242 <LED_RGB_2+0x162>

	            case 5://pink
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b0:	4826      	ldr	r0, [pc, #152]	; (800124c <LED_RGB_2+0x16c>)
 80011b2:	f003 f8df 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011bc:	4823      	ldr	r0, [pc, #140]	; (800124c <LED_RGB_2+0x16c>)
 80011be:	f003 f8d9 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c8:	4820      	ldr	r0, [pc, #128]	; (800124c <LED_RGB_2+0x16c>)
 80011ca:	f003 f8d3 	bl	8004374 <HAL_GPIO_WritePin>

	                break;
 80011ce:	e038      	b.n	8001242 <LED_RGB_2+0x162>

	            case 6://white
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d6:	481d      	ldr	r0, [pc, #116]	; (800124c <LED_RGB_2+0x16c>)
 80011d8:	f003 f8cc 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e2:	481a      	ldr	r0, [pc, #104]	; (800124c <LED_RGB_2+0x16c>)
 80011e4:	f003 f8c6 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ee:	4817      	ldr	r0, [pc, #92]	; (800124c <LED_RGB_2+0x16c>)
 80011f0:	f003 f8c0 	bl	8004374 <HAL_GPIO_WritePin>
	                break;
 80011f4:	e025      	b.n	8001242 <LED_RGB_2+0x162>

	            case 7://Cyan
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011fc:	4813      	ldr	r0, [pc, #76]	; (800124c <LED_RGB_2+0x16c>)
 80011fe:	f003 f8b9 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001208:	4810      	ldr	r0, [pc, #64]	; (800124c <LED_RGB_2+0x16c>)
 800120a:	f003 f8b3 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <LED_RGB_2+0x16c>)
 8001216:	f003 f8ad 	bl	8004374 <HAL_GPIO_WritePin>

	                break;
 800121a:	e012      	b.n	8001242 <LED_RGB_2+0x162>

	            default:
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001222:	480a      	ldr	r0, [pc, #40]	; (800124c <LED_RGB_2+0x16c>)
 8001224:	f003 f8a6 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <LED_RGB_2+0x16c>)
 8001230:	f003 f8a0 	bl	8004374 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <LED_RGB_2+0x16c>)
 800123c:	f003 f89a 	bl	8004374 <HAL_GPIO_WritePin>
	                break;
 8001240:	bf00      	nop
	            }


}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40020400 	.word	0x40020400

08001250 <ButtonPress>:

int mode =0;
int calibrate_count =0;
//int mode_processed;

void ButtonPress(void){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	mode=0;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <ButtonPress+0x70>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
	LED_RGB_2(6);
 800125a:	2006      	movs	r0, #6
 800125c:	f7ff ff40 	bl	80010e0 <LED_RGB_2>
	HAL_Delay(1000);
 8001260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001264:	f001 fe24 	bl	8002eb0 <HAL_Delay>

	while(1){
    if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_RESET)//SW1
 8001268:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126c:	4815      	ldr	r0, [pc, #84]	; (80012c4 <ButtonPress+0x74>)
 800126e:	f003 f869 	bl	8004344 <HAL_GPIO_ReadPin>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d104      	bne.n	8001282 <ButtonPress+0x32>
    {
    	HAL_Delay(1000);
 8001278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127c:	f001 fe18 	bl	8002eb0 <HAL_Delay>
    	break;
 8001280:	e01c      	b.n	80012bc <ButtonPress+0x6c>

    }

    if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15) == GPIO_PIN_RESET)//SW2
 8001282:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001286:	4810      	ldr	r0, [pc, #64]	; (80012c8 <ButtonPress+0x78>)
 8001288:	f003 f85c 	bl	8004344 <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1ea      	bne.n	8001268 <ButtonPress+0x18>
    {
    	mode++;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <ButtonPress+0x70>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <ButtonPress+0x70>)
 800129a:	6013      	str	r3, [r2, #0]
    	LED_RGB(mode);
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <ButtonPress+0x70>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fe73 	bl	8000f8c <LED_RGB>
		HAL_Delay(200);
 80012a6:	20c8      	movs	r0, #200	; 0xc8
 80012a8:	f001 fe02 	bl	8002eb0 <HAL_Delay>

        if(mode >7){
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <ButtonPress+0x70>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b07      	cmp	r3, #7
 80012b2:	ddd9      	ble.n	8001268 <ButtonPress+0x18>
        	mode = 0;
 80012b4:	4b02      	ldr	r3, [pc, #8]	; (80012c0 <ButtonPress+0x70>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_RESET)//SW1
 80012ba:	e7d5      	b.n	8001268 <ButtonPress+0x18>
//        mode_processed = 0;
     //   LED_RGB(0);
    }
	}

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	2000022c 	.word	0x2000022c
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020400 	.word	0x40020400
 80012cc:	00000000 	.word	0x00000000

080012d0 <mode_test>:



void mode_test(void){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0


  switch(mode)
 80012d4:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <mode_test+0xe0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d85b      	bhi.n	8001396 <mode_test+0xc6>
 80012de:	a201      	add	r2, pc, #4	; (adr r2, 80012e4 <mode_test+0x14>)
 80012e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e4:	080012f9 	.word	0x080012f9
 80012e8:	08001317 	.word	0x08001317
 80012ec:	08001361 	.word	0x08001361
 80012f0:	08001373 	.word	0x08001373
 80012f4:	08001385 	.word	0x08001385
	  {
	  case 1:
		  LED_RGB(mode);
 80012f8:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <mode_test+0xe0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fe45 	bl	8000f8c <LED_RGB>
		  if(calibrate_count == 0){
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <mode_test+0xe4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d149      	bne.n	800139e <mode_test+0xce>
			  calibrate_sensors();
 800130a:	f000 ff17 	bl	800213c <calibrate_sensors>
			  calibrate_count = 1;
 800130e:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <mode_test+0xe4>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]
//		  base_speed1=0;




		  break;
 8001314:	e043      	b.n	800139e <mode_test+0xce>

	  case 2:
		  LED_RGB(mode);
 8001316:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <mode_test+0xe0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fe36 	bl	8000f8c <LED_RGB>
		  TIM4 -> CNT=32767;
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <mode_test+0xe8>)
 8001322:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001326:	625a      	str	r2, [r3, #36]	; 0x24
		  TIM3 -> CNT=32767;
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <mode_test+0xec>)
 800132a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800132e:	625a      	str	r2, [r3, #36]	; 0x24
		  LED_RGB_2(3);
 8001330:	2003      	movs	r0, #3
 8001332:	f7ff fed5 	bl	80010e0 <LED_RGB_2>
		LED_RGB(3);
 8001336:	2003      	movs	r0, #3
 8001338:	f7ff fe28 	bl	8000f8c <LED_RGB>
	//	while(1);
		  HAL_TIM_Base_Start_IT(&htim6);
 800133c:	4820      	ldr	r0, [pc, #128]	; (80013c0 <mode_test+0xf0>)
 800133e:	f003 fea7 	bl	8005090 <HAL_TIM_Base_Start_IT>
		  test_DD();
 8001342:	f000 f849 	bl	80013d8 <test_DD>
		HAL_TIM_Base_Stop_IT(&htim6);
 8001346:	481e      	ldr	r0, [pc, #120]	; (80013c0 <mode_test+0xf0>)
 8001348:	f003 ff12 	bl	8005170 <HAL_TIM_Base_Stop_IT>
		ControlMotor(0, 0);
 800134c:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80013a8 <mode_test+0xd8>
 8001350:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80013a8 <mode_test+0xd8>
 8001354:	f000 f886 	bl	8001464 <ControlMotor>
		  LED_RGB(0);
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff fe17 	bl	8000f8c <LED_RGB>
//		  base_speed1=0;
		  break;
 800135e:	e01f      	b.n	80013a0 <mode_test+0xd0>


	  case 3:
		  LED_RGB(mode);
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <mode_test+0xe0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fe11 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff fe0e 	bl	8000f8c <LED_RGB>
//		  target_speed =0.03;

//		  base_speed1=-125;


		  break;
 8001370:	e016      	b.n	80013a0 <mode_test+0xd0>

	  case 4:
		  LED_RGB(mode);
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <mode_test+0xe0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fe08 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff fe05 	bl	8000f8c <LED_RGB>

//		  target_speed =0.04;


//		  base_speed1=-127;
		  break;
 8001382:	e00d      	b.n	80013a0 <mode_test+0xd0>


	  case 5:
		  LED_RGB(mode);
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <mode_test+0xe0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fdff 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fdfc 	bl	8000f8c <LED_RGB>
//		  target_speed =0.06;


//		  base_speed1=-129;

		  break;
 8001394:	e004      	b.n	80013a0 <mode_test+0xd0>

	  default:
		  LED_RGB(7);
 8001396:	2007      	movs	r0, #7
 8001398:	f7ff fdf8 	bl	8000f8c <LED_RGB>
//		  base_speed1=0;
//		  target_speed =0.0;



		  break;
 800139c:	e000      	b.n	80013a0 <mode_test+0xd0>
		  break;
 800139e:	bf00      	nop

	  }
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	f3af 8000 	nop.w
	...
 80013b0:	2000022c 	.word	0x2000022c
 80013b4:	20000230 	.word	0x20000230
 80013b8:	40000800 	.word	0x40000800
 80013bc:	40000400 	.word	0x40000400
 80013c0:	200004ac 	.word	0x200004ac

080013c4 <change_mode>:

void change_mode(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	ButtonPress();
 80013c8:	f7ff ff42 	bl	8001250 <ButtonPress>
	mode_test();
 80013cc:	f7ff ff80 	bl	80012d0 <mode_test>
//		calculateEncoderSpeed();

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	0000      	movs	r0, r0
	...

080013d8 <test_DD>:

void test_DD(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	test_flag =0;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <test_DD+0x80>)
 80013de:	2200      	movs	r2, #0
 80013e0:	801a      	strh	r2, [r3, #0]
	LED_RGB_2(3);
 80013e2:	2003      	movs	r0, #3
 80013e4:	f7ff fe7c 	bl	80010e0 <LED_RGB_2>
//		readSens2();
//		test_flag = 1;

		//change_mode();

		if (Line3_sens[1] == 0) {
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <test_DD+0x84>)
 80013ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80013ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	d10f      	bne.n	8001418 <test_DD+0x40>
			while (1) {

				if (Line3_sens[1] == 1) {
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <test_DD+0x84>)
 80013fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80013fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001402:	eef4 7a47 	vcmp.f32	s15, s14
 8001406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140a:	d1f5      	bne.n	80013f8 <test_DD+0x20>
					test_flag++;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <test_DD+0x80>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b10      	ldr	r3, [pc, #64]	; (8001458 <test_DD+0x80>)
 8001416:	801a      	strh	r2, [r3, #0]
					break;
				}
			}
		}

		if (test_flag >= 2) {
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <test_DD+0x80>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d9e3      	bls.n	80013e8 <test_DD+0x10>
			LED_RGB_2(7);
 8001420:	2007      	movs	r0, #7
 8001422:	f7ff fe5d 	bl	80010e0 <LED_RGB_2>
			HAL_TIM_Base_Stop_IT(&htim6);
 8001426:	480e      	ldr	r0, [pc, #56]	; (8001460 <test_DD+0x88>)
 8001428:	f003 fea2 	bl	8005170 <HAL_TIM_Base_Stop_IT>
			ControlMotor(0, 0);
 800142c:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8001450 <test_DD+0x78>
 8001430:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8001450 <test_DD+0x78>
 8001434:	f000 f816 	bl	8001464 <ControlMotor>
			break;
 8001438:	bf00      	nop
//			}

		}

	}
	HAL_TIM_Base_Stop_IT(&htim6);
 800143a:	4809      	ldr	r0, [pc, #36]	; (8001460 <test_DD+0x88>)
 800143c:	f003 fe98 	bl	8005170 <HAL_TIM_Base_Stop_IT>
	ControlMotor(0, 0);
 8001440:	ed9f 1b03 	vldr	d1, [pc, #12]	; 8001450 <test_DD+0x78>
 8001444:	ed9f 0b02 	vldr	d0, [pc, #8]	; 8001450 <test_DD+0x78>
 8001448:	f000 f80c 	bl	8001464 <ControlMotor>
	return 0;
 800144c:	bf00      	nop
}
 800144e:	bd80      	pop	{r7, pc}
	...
 8001458:	20000234 	.word	0x20000234
 800145c:	20000594 	.word	0x20000594
 8001460:	200004ac 	.word	0x200004ac

08001464 <ControlMotor>:
//#define REDUCTION_RATIO 0.4 // 減速比
//#define DISTANCE_PER_CNT (M_PI * TIRE * REDUCTION_RATIO / ENCODER_CPR) //[mm per cnt]
//float distance_1ms,distance_1ms_L,distance_1ms_R;


void ControlMotor(double duty_L, double duty_R){
 8001464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	ed87 0b04 	vstr	d0, [r7, #16]
 800146e:	ed87 1b02 	vstr	d1, [r7, #8]

    if (duty_L >= 0) {
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800147e:	f7ff fb41 	bl	8000b04 <__aeabi_dcmpge>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00e      	beq.n	80014a6 <ControlMotor+0x42>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // PH-HIGH(+)
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148e:	4828      	ldr	r0, [pc, #160]	; (8001530 <ControlMotor+0xcc>)
 8001490:	f002 ff70 	bl	8004374 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim8,TIM_CHANNEL_4, duty_L);
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <ControlMotor+0xd0>)
 8001496:	681e      	ldr	r6, [r3, #0]
 8001498:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800149c:	f7ff fb84 	bl	8000ba8 <__aeabi_d2uiz>
 80014a0:	4603      	mov	r3, r0
 80014a2:	6433      	str	r3, [r6, #64]	; 0x40
 80014a4:	e013      	b.n	80014ce <ControlMotor+0x6a>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // PH-LOW(-)
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ac:	4820      	ldr	r0, [pc, #128]	; (8001530 <ControlMotor+0xcc>)
 80014ae:	f002 ff61 	bl	8004374 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim8,TIM_CHANNEL_4, -duty_L);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <ControlMotor+0xd0>)
 80014c0:	681e      	ldr	r6, [r3, #0]
 80014c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014c6:	f7ff fb6f 	bl	8000ba8 <__aeabi_d2uiz>
 80014ca:	4603      	mov	r3, r0
 80014cc:	6433      	str	r3, [r6, #64]	; 0x40
    }
    if (duty_R >= 0) {
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014da:	f7ff fb13 	bl	8000b04 <__aeabi_dcmpge>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00e      	beq.n	8001502 <ControlMotor+0x9e>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // PH-HIGH(+)
 80014e4:	2201      	movs	r2, #1
 80014e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ea:	4813      	ldr	r0, [pc, #76]	; (8001538 <ControlMotor+0xd4>)
 80014ec:	f002 ff42 	bl	8004374 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim1,TIM_CHANNEL_2, duty_R);
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <ControlMotor+0xd8>)
 80014f2:	681c      	ldr	r4, [r3, #0]
 80014f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014f8:	f7ff fb56 	bl	8000ba8 <__aeabi_d2uiz>
 80014fc:	4603      	mov	r3, r0
 80014fe:	63a3      	str	r3, [r4, #56]	; 0x38
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // PH-LOW(-)
        __HAL_TIM_SET_COMPARE( &htim1,TIM_CHANNEL_2, -duty_R);
        }
}
 8001500:	e011      	b.n	8001526 <ControlMotor+0xc2>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // PH-LOW(-)
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <ControlMotor+0xd4>)
 800150a:	f002 ff33 	bl	8004374 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim1,TIM_CHANNEL_2, -duty_R);
 800150e:	68bc      	ldr	r4, [r7, #8]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <ControlMotor+0xd8>)
 8001518:	681e      	ldr	r6, [r3, #0]
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7ff fb43 	bl	8000ba8 <__aeabi_d2uiz>
 8001522:	4603      	mov	r3, r0
 8001524:	63b3      	str	r3, [r6, #56]	; 0x38
}
 8001526:	bf00      	nop
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152e:	bf00      	nop
 8001530:	40020800 	.word	0x40020800
 8001534:	200004f4 	.word	0x200004f4
 8001538:	40020000 	.word	0x40020000
 800153c:	2000038c 	.word	0x2000038c

08001540 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
//	SpeedControl_NoENC();
//	calculateEncoderSpeed();
	readSens2();
 8001548:	f000 fdd4 	bl	80020f4 <readSens2>
	EncoderSpeed();
 800154c:	f000 ff14 	bl	8002378 <EncoderSpeed>

}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {//ADC後にこ�???��?��関数が呼ばれる
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	//ADC後�???��?��処??��?��?
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	0000      	movs	r0, r0
	...

08001570 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001574:	f001 fc2a 	bl	8002dcc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001578:	f000 f89a 	bl	80016b0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800157c:	f000 fce6 	bl	8001f4c <MX_GPIO_Init>
	MX_DMA_Init();
 8001580:	f000 fcc4 	bl	8001f0c <MX_DMA_Init>
	MX_ADC1_Init();
 8001584:	f000 f8fe 	bl	8001784 <MX_ADC1_Init>
	MX_TIM1_Init();
 8001588:	f000 fa5a 	bl	8001a40 <MX_TIM1_Init>
	MX_TIM2_Init();
 800158c:	f000 fadc 	bl	8001b48 <MX_TIM2_Init>
	MX_TIM4_Init();
 8001590:	f000 fb86 	bl	8001ca0 <MX_TIM4_Init>
	MX_TIM8_Init();
 8001594:	f000 fc0e 	bl	8001db4 <MX_TIM8_Init>
	MX_TIM3_Init();
 8001598:	f000 fb2e 	bl	8001bf8 <MX_TIM3_Init>
	MX_I2C1_Init();
 800159c:	f000 f9ec 	bl	8001978 <MX_I2C1_Init>
	MX_SPI3_Init();
 80015a0:	f000 fa18 	bl	80019d4 <MX_SPI3_Init>
	MX_USART6_UART_Init();
 80015a4:	f000 fc88 	bl	8001eb8 <MX_USART6_UART_Init>
	MX_TIM6_Init();
 80015a8:	f000 fbce 	bl	8001d48 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) Line_sens, 13) != HAL_OK) {
 80015ac:	220d      	movs	r2, #13
 80015ae:	4936      	ldr	r1, [pc, #216]	; (8001688 <main+0x118>)
 80015b0:	4836      	ldr	r0, [pc, #216]	; (800168c <main+0x11c>)
 80015b2:	f001 fce5 	bl	8002f80 <HAL_ADC_Start_DMA>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <main+0x50>
		Error_Handler();
 80015bc:	f000 fd92 	bl	80020e4 <Error_Handler>
	}
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);	//ENC1
 80015c0:	213c      	movs	r1, #60	; 0x3c
 80015c2:	4833      	ldr	r0, [pc, #204]	; (8001690 <main+0x120>)
 80015c4:	f004 f80e 	bl	80055e4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);	//ENC2
 80015c8:	213c      	movs	r1, #60	; 0x3c
 80015ca:	4832      	ldr	r0, [pc, #200]	; (8001694 <main+0x124>)
 80015cc:	f004 f80a 	bl	80055e4 <HAL_TIM_Encoder_Start_IT>

	//TIM4->CNT = OFFSET;
	//TIM3->CNT = OFFSET;

	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);	//DRVR
 80015d0:	2104      	movs	r1, #4
 80015d2:	4831      	ldr	r0, [pc, #196]	; (8001698 <main+0x128>)
 80015d4:	f003 fe4a 	bl	800526c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4);	//DRVL
 80015d8:	210c      	movs	r1, #12
 80015da:	4830      	ldr	r0, [pc, #192]	; (800169c <main+0x12c>)
 80015dc:	f003 fe46 	bl	800526c <HAL_TIM_PWM_Start_IT>

	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);	//fan
 80015e0:	2108      	movs	r1, #8
 80015e2:	482f      	ldr	r0, [pc, #188]	; (80016a0 <main+0x130>)
 80015e4:	f003 fe42 	bl	800526c <HAL_TIM_PWM_Start_IT>

	//PW-re
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80015e8:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <main+0x128>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2200      	movs	r2, #0
 80015ee:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 80015f0:	4b2a      	ldr	r3, [pc, #168]	; (800169c <main+0x12c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2200      	movs	r2, #0
 80015f6:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <main+0x130>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2200      	movs	r2, #0
 80015fe:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);	//LED1
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001606:	4827      	ldr	r0, [pc, #156]	; (80016a4 <main+0x134>)
 8001608:	f002 feb4 	bl	8004374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);	//LED2
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001612:	4824      	ldr	r0, [pc, #144]	; (80016a4 <main+0x134>)
 8001614:	f002 feae 	bl	8004374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);	//LED3
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800161e:	4821      	ldr	r0, [pc, #132]	; (80016a4 <main+0x134>)
 8001620:	f002 fea8 	bl	8004374 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);	//R_1-2
 8001624:	2200      	movs	r2, #0
 8001626:	2120      	movs	r1, #32
 8001628:	481f      	ldr	r0, [pc, #124]	; (80016a8 <main+0x138>)
 800162a:	f002 fea3 	bl	8004374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);	//G_1-3
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001634:	481b      	ldr	r0, [pc, #108]	; (80016a4 <main+0x134>)
 8001636:	f002 fe9d 	bl	8004374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);	//B_1-4
 800163a:	2201      	movs	r2, #1
 800163c:	2110      	movs	r1, #16
 800163e:	481a      	ldr	r0, [pc, #104]	; (80016a8 <main+0x138>)
 8001640:	f002 fe98 	bl	8004374 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);	//R_2-2
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800164a:	4817      	ldr	r0, [pc, #92]	; (80016a8 <main+0x138>)
 800164c:	f002 fe92 	bl	8004374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	//G_2-3
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001656:	4814      	ldr	r0, [pc, #80]	; (80016a8 <main+0x138>)
 8001658:	f002 fe8c 	bl	8004374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);	//B_2-4
 800165c:	2201      	movs	r2, #1
 800165e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001662:	4811      	ldr	r0, [pc, #68]	; (80016a8 <main+0x138>)
 8001664:	f002 fe86 	bl	8004374 <HAL_GPIO_WritePin>

	ControlMotor(0, 0);
 8001668:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8001680 <main+0x110>
 800166c:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8001680 <main+0x110>
 8001670:	f7ff fef8 	bl	8001464 <ControlMotor>

	test_flag = 0;
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <main+0x13c>)
 8001676:	2200      	movs	r2, #0
 8001678:	801a      	strh	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		change_mode();
 800167a:	f7ff fea3 	bl	80013c4 <change_mode>
 800167e:	e7fc      	b.n	800167a <main+0x10a>
	...
 8001688:	2000059c 	.word	0x2000059c
 800168c:	20000238 	.word	0x20000238
 8001690:	2000041c 	.word	0x2000041c
 8001694:	20000464 	.word	0x20000464
 8001698:	2000038c 	.word	0x2000038c
 800169c:	200004f4 	.word	0x200004f4
 80016a0:	200003d4 	.word	0x200003d4
 80016a4:	40020000 	.word	0x40020000
 80016a8:	40020400 	.word	0x40020400
 80016ac:	20000234 	.word	0x20000234

080016b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b094      	sub	sp, #80	; 0x50
 80016b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	2230      	movs	r2, #48	; 0x30
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f005 f874 	bl	80067ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	4b28      	ldr	r3, [pc, #160]	; (800177c <SystemClock_Config+0xcc>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	4a27      	ldr	r2, [pc, #156]	; (800177c <SystemClock_Config+0xcc>)
 80016de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e2:	6413      	str	r3, [r2, #64]	; 0x40
 80016e4:	4b25      	ldr	r3, [pc, #148]	; (800177c <SystemClock_Config+0xcc>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	4b22      	ldr	r3, [pc, #136]	; (8001780 <SystemClock_Config+0xd0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a21      	ldr	r2, [pc, #132]	; (8001780 <SystemClock_Config+0xd0>)
 80016fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <SystemClock_Config+0xd0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800170c:	2302      	movs	r3, #2
 800170e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001710:	2301      	movs	r3, #1
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001714:	2310      	movs	r3, #16
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001718:	2302      	movs	r3, #2
 800171a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800171c:	2300      	movs	r3, #0
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001720:	2308      	movs	r3, #8
 8001722:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001724:	23a8      	movs	r3, #168	; 0xa8
 8001726:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001728:	2302      	movs	r3, #2
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800172c:	2304      	movs	r3, #4
 800172e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001730:	f107 0320 	add.w	r3, r7, #32
 8001734:	4618      	mov	r0, r3
 8001736:	f002 ff7b 	bl	8004630 <HAL_RCC_OscConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0x94>
		Error_Handler();
 8001740:	f000 fcd0 	bl	80020e4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001744:	230f      	movs	r3, #15
 8001746:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001748:	2302      	movs	r3, #2
 800174a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001750:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001754:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	2105      	movs	r1, #5
 8001762:	4618      	mov	r0, r3
 8001764:	f003 f9dc 	bl	8004b20 <HAL_RCC_ClockConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0xc2>
		Error_Handler();
 800176e:	f000 fcb9 	bl	80020e4 <Error_Handler>
	}
}
 8001772:	bf00      	nop
 8001774:	3750      	adds	r7, #80	; 0x50
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	40007000 	.word	0x40007000

08001784 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */
	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800178a:	463b      	mov	r3, r7
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */
	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001796:	4b75      	ldr	r3, [pc, #468]	; (800196c <MX_ADC1_Init+0x1e8>)
 8001798:	4a75      	ldr	r2, [pc, #468]	; (8001970 <MX_ADC1_Init+0x1ec>)
 800179a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800179c:	4b73      	ldr	r3, [pc, #460]	; (800196c <MX_ADC1_Init+0x1e8>)
 800179e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017a2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017a4:	4b71      	ldr	r3, [pc, #452]	; (800196c <MX_ADC1_Init+0x1e8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80017aa:	4b70      	ldr	r3, [pc, #448]	; (800196c <MX_ADC1_Init+0x1e8>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80017b0:	4b6e      	ldr	r3, [pc, #440]	; (800196c <MX_ADC1_Init+0x1e8>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017b6:	4b6d      	ldr	r3, [pc, #436]	; (800196c <MX_ADC1_Init+0x1e8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017be:	4b6b      	ldr	r3, [pc, #428]	; (800196c <MX_ADC1_Init+0x1e8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c4:	4b69      	ldr	r3, [pc, #420]	; (800196c <MX_ADC1_Init+0x1e8>)
 80017c6:	4a6b      	ldr	r2, [pc, #428]	; (8001974 <MX_ADC1_Init+0x1f0>)
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ca:	4b68      	ldr	r3, [pc, #416]	; (800196c <MX_ADC1_Init+0x1e8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 13;
 80017d0:	4b66      	ldr	r3, [pc, #408]	; (800196c <MX_ADC1_Init+0x1e8>)
 80017d2:	220d      	movs	r2, #13
 80017d4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80017d6:	4b65      	ldr	r3, [pc, #404]	; (800196c <MX_ADC1_Init+0x1e8>)
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017de:	4b63      	ldr	r3, [pc, #396]	; (800196c <MX_ADC1_Init+0x1e8>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80017e4:	4861      	ldr	r0, [pc, #388]	; (800196c <MX_ADC1_Init+0x1e8>)
 80017e6:	f001 fb87 	bl	8002ef8 <HAL_ADC_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_ADC1_Init+0x70>
		Error_Handler();
 80017f0:	f000 fc78 	bl	80020e4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80017f4:	2309      	movs	r3, #9
 80017f6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80017f8:	2301      	movs	r3, #1
 80017fa:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80017fc:	2307      	movs	r3, #7
 80017fe:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001800:	463b      	mov	r3, r7
 8001802:	4619      	mov	r1, r3
 8001804:	4859      	ldr	r0, [pc, #356]	; (800196c <MX_ADC1_Init+0x1e8>)
 8001806:	f001 fcdf 	bl	80031c8 <HAL_ADC_ConfigChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001810:	f000 fc68 	bl	80020e4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001814:	2308      	movs	r3, #8
 8001816:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001818:	2302      	movs	r3, #2
 800181a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800181c:	463b      	mov	r3, r7
 800181e:	4619      	mov	r1, r3
 8001820:	4852      	ldr	r0, [pc, #328]	; (800196c <MX_ADC1_Init+0x1e8>)
 8001822:	f001 fcd1 	bl	80031c8 <HAL_ADC_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_ADC1_Init+0xac>
		Error_Handler();
 800182c:	f000 fc5a 	bl	80020e4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8001830:	230f      	movs	r3, #15
 8001832:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8001834:	2303      	movs	r3, #3
 8001836:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001838:	463b      	mov	r3, r7
 800183a:	4619      	mov	r1, r3
 800183c:	484b      	ldr	r0, [pc, #300]	; (800196c <MX_ADC1_Init+0x1e8>)
 800183e:	f001 fcc3 	bl	80031c8 <HAL_ADC_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_ADC1_Init+0xc8>
		Error_Handler();
 8001848:	f000 fc4c 	bl	80020e4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 800184c:	230e      	movs	r3, #14
 800184e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 8001850:	2304      	movs	r3, #4
 8001852:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001854:	463b      	mov	r3, r7
 8001856:	4619      	mov	r1, r3
 8001858:	4844      	ldr	r0, [pc, #272]	; (800196c <MX_ADC1_Init+0x1e8>)
 800185a:	f001 fcb5 	bl	80031c8 <HAL_ADC_ConfigChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_ADC1_Init+0xe4>
		Error_Handler();
 8001864:	f000 fc3e 	bl	80020e4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001868:	2305      	movs	r3, #5
 800186a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 5;
 800186c:	2305      	movs	r3, #5
 800186e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001870:	463b      	mov	r3, r7
 8001872:	4619      	mov	r1, r3
 8001874:	483d      	ldr	r0, [pc, #244]	; (800196c <MX_ADC1_Init+0x1e8>)
 8001876:	f001 fca7 	bl	80031c8 <HAL_ADC_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_ADC1_Init+0x100>
		Error_Handler();
 8001880:	f000 fc30 	bl	80020e4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001884:	2304      	movs	r3, #4
 8001886:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 6;
 8001888:	2306      	movs	r3, #6
 800188a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800188c:	463b      	mov	r3, r7
 800188e:	4619      	mov	r1, r3
 8001890:	4836      	ldr	r0, [pc, #216]	; (800196c <MX_ADC1_Init+0x1e8>)
 8001892:	f001 fc99 	bl	80031c8 <HAL_ADC_ConfigChannel>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_ADC1_Init+0x11c>
		Error_Handler();
 800189c:	f000 fc22 	bl	80020e4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80018a0:	2303      	movs	r3, #3
 80018a2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 7;
 80018a4:	2307      	movs	r3, #7
 80018a6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80018a8:	463b      	mov	r3, r7
 80018aa:	4619      	mov	r1, r3
 80018ac:	482f      	ldr	r0, [pc, #188]	; (800196c <MX_ADC1_Init+0x1e8>)
 80018ae:	f001 fc8b 	bl	80031c8 <HAL_ADC_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_ADC1_Init+0x138>
		Error_Handler();
 80018b8:	f000 fc14 	bl	80020e4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80018bc:	2302      	movs	r3, #2
 80018be:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 8;
 80018c0:	2308      	movs	r3, #8
 80018c2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80018c4:	463b      	mov	r3, r7
 80018c6:	4619      	mov	r1, r3
 80018c8:	4828      	ldr	r0, [pc, #160]	; (800196c <MX_ADC1_Init+0x1e8>)
 80018ca:	f001 fc7d 	bl	80031c8 <HAL_ADC_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_ADC1_Init+0x154>
		Error_Handler();
 80018d4:	f000 fc06 	bl	80020e4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80018d8:	2301      	movs	r3, #1
 80018da:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 9;
 80018dc:	2309      	movs	r3, #9
 80018de:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80018e0:	463b      	mov	r3, r7
 80018e2:	4619      	mov	r1, r3
 80018e4:	4821      	ldr	r0, [pc, #132]	; (800196c <MX_ADC1_Init+0x1e8>)
 80018e6:	f001 fc6f 	bl	80031c8 <HAL_ADC_ConfigChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_ADC1_Init+0x170>
		Error_Handler();
 80018f0:	f000 fbf8 	bl	80020e4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 10;
 80018f8:	230a      	movs	r3, #10
 80018fa:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80018fc:	463b      	mov	r3, r7
 80018fe:	4619      	mov	r1, r3
 8001900:	481a      	ldr	r0, [pc, #104]	; (800196c <MX_ADC1_Init+0x1e8>)
 8001902:	f001 fc61 	bl	80031c8 <HAL_ADC_ConfigChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_ADC1_Init+0x18c>
		Error_Handler();
 800190c:	f000 fbea 	bl	80020e4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8001910:	230d      	movs	r3, #13
 8001912:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 11;
 8001914:	230b      	movs	r3, #11
 8001916:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001918:	463b      	mov	r3, r7
 800191a:	4619      	mov	r1, r3
 800191c:	4813      	ldr	r0, [pc, #76]	; (800196c <MX_ADC1_Init+0x1e8>)
 800191e:	f001 fc53 	bl	80031c8 <HAL_ADC_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_ADC1_Init+0x1a8>
		Error_Handler();
 8001928:	f000 fbdc 	bl	80020e4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 800192c:	230c      	movs	r3, #12
 800192e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 12;
 8001930:	230c      	movs	r3, #12
 8001932:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001934:	463b      	mov	r3, r7
 8001936:	4619      	mov	r1, r3
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <MX_ADC1_Init+0x1e8>)
 800193a:	f001 fc45 	bl	80031c8 <HAL_ADC_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_ADC1_Init+0x1c4>
		Error_Handler();
 8001944:	f000 fbce 	bl	80020e4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8001948:	230b      	movs	r3, #11
 800194a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 13;
 800194c:	230d      	movs	r3, #13
 800194e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001950:	463b      	mov	r3, r7
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_ADC1_Init+0x1e8>)
 8001956:	f001 fc37 	bl	80031c8 <HAL_ADC_ConfigChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_ADC1_Init+0x1e0>
		Error_Handler();
 8001960:	f000 fbc0 	bl	80020e4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	/* USER CODE END ADC1_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000238 	.word	0x20000238
 8001970:	40012000 	.word	0x40012000
 8001974:	0f000001 	.word	0x0f000001

08001978 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_Init 0 */
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */
	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <MX_I2C1_Init+0x50>)
 800197e:	4a13      	ldr	r2, [pc, #76]	; (80019cc <MX_I2C1_Init+0x54>)
 8001980:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_I2C1_Init+0x50>)
 8001984:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <MX_I2C1_Init+0x58>)
 8001986:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_I2C1_Init+0x50>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_I2C1_Init+0x50>)
 8001990:	2200      	movs	r2, #0
 8001992:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_I2C1_Init+0x50>)
 8001996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800199a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <MX_I2C1_Init+0x50>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_I2C1_Init+0x50>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <MX_I2C1_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_I2C1_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80019b4:	4804      	ldr	r0, [pc, #16]	; (80019c8 <MX_I2C1_Init+0x50>)
 80019b6:	f002 fcf7 	bl	80043a8 <HAL_I2C_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80019c0:	f000 fb90 	bl	80020e4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	/* USER CODE END I2C1_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200002e0 	.word	0x200002e0
 80019cc:	40005400 	.word	0x40005400
 80019d0:	000186a0 	.word	0x000186a0

080019d4 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	/* USER CODE END SPI3_Init 0 */

	/* USER CODE BEGIN SPI3_Init 1 */
	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <MX_SPI3_Init+0x64>)
 80019da:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <MX_SPI3_Init+0x68>)
 80019dc:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_SPI3_Init+0x64>)
 80019e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e4:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <MX_SPI3_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <MX_SPI3_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <MX_SPI3_Init+0x64>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MX_SPI3_Init+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_SPI3_Init+0x64>)
 8001a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a04:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <MX_SPI3_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <MX_SPI3_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_SPI3_Init+0x64>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <MX_SPI3_Init+0x64>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_SPI3_Init+0x64>)
 8001a20:	220a      	movs	r2, #10
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <MX_SPI3_Init+0x64>)
 8001a26:	f003 fa5b 	bl	8004ee0 <HAL_SPI_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_SPI3_Init+0x60>
		Error_Handler();
 8001a30:	f000 fb58 	bl	80020e4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */
	/* USER CODE END SPI3_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000334 	.word	0x20000334
 8001a3c:	40003c00 	.word	0x40003c00

08001a40 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b092      	sub	sp, #72	; 0x48
 8001a44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */
	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
 8001a60:	615a      	str	r2, [r3, #20]
 8001a62:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2220      	movs	r2, #32
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f004 fe9e 	bl	80067ac <memset>

	/* USER CODE BEGIN TIM1_Init 1 */
	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001a70:	4b33      	ldr	r3, [pc, #204]	; (8001b40 <MX_TIM1_Init+0x100>)
 8001a72:	4a34      	ldr	r2, [pc, #208]	; (8001b44 <MX_TIM1_Init+0x104>)
 8001a74:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001a76:	4b32      	ldr	r3, [pc, #200]	; (8001b40 <MX_TIM1_Init+0x100>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <MX_TIM1_Init+0x100>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 499;
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <MX_TIM1_Init+0x100>)
 8001a84:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001a88:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <MX_TIM1_Init+0x100>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001a90:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <MX_TIM1_Init+0x100>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a96:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <MX_TIM1_Init+0x100>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001a9c:	4828      	ldr	r0, [pc, #160]	; (8001b40 <MX_TIM1_Init+0x100>)
 8001a9e:	f003 fb96 	bl	80051ce <HAL_TIM_PWM_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM1_Init+0x6c>
		Error_Handler();
 8001aa8:	f000 fb1c 	bl	80020e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aac:	2300      	movs	r3, #0
 8001aae:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001ab4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4821      	ldr	r0, [pc, #132]	; (8001b40 <MX_TIM1_Init+0x100>)
 8001abc:	f004 faa8 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001ac6:	f000 fb0d 	bl	80020e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aca:	2360      	movs	r3, #96	; 0x60
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8001ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aea:	2204      	movs	r2, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4814      	ldr	r0, [pc, #80]	; (8001b40 <MX_TIM1_Init+0x100>)
 8001af0:	f003 ff2e 	bl	8005950 <HAL_TIM_PWM_ConfigChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 8001afa:	f000 faf3 	bl	80020e4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b16:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4807      	ldr	r0, [pc, #28]	; (8001b40 <MX_TIM1_Init+0x100>)
 8001b22:	f004 faf1 	bl	8006108 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8001b2c:	f000 fada 	bl	80020e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */
	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001b30:	4803      	ldr	r0, [pc, #12]	; (8001b40 <MX_TIM1_Init+0x100>)
 8001b32:	f000 ff39 	bl	80029a8 <HAL_TIM_MspPostInit>

}
 8001b36:	bf00      	nop
 8001b38:	3748      	adds	r7, #72	; 0x48
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000038c 	.word	0x2000038c
 8001b44:	40010000 	.word	0x40010000

08001b48 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */
	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b4e:	f107 0320 	add.w	r3, r7, #32
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]
 8001b66:	615a      	str	r2, [r3, #20]
 8001b68:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */
	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <MX_TIM2_Init+0xac>)
 8001b6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b70:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <MX_TIM2_Init+0xac>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <MX_TIM2_Init+0xac>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4095;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <MX_TIM2_Init+0xac>)
 8001b80:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001b84:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <MX_TIM2_Init+0xac>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <MX_TIM2_Init+0xac>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001b92:	4818      	ldr	r0, [pc, #96]	; (8001bf4 <MX_TIM2_Init+0xac>)
 8001b94:	f003 fb1b 	bl	80051ce <HAL_TIM_PWM_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM2_Init+0x5a>
		Error_Handler();
 8001b9e:	f000 faa1 	bl	80020e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001baa:	f107 0320 	add.w	r3, r7, #32
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4810      	ldr	r0, [pc, #64]	; (8001bf4 <MX_TIM2_Init+0xac>)
 8001bb2:	f004 fa2d 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8001bbc:	f000 fa92 	bl	80020e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc0:	2360      	movs	r3, #96	; 0x60
 8001bc2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4807      	ldr	r0, [pc, #28]	; (8001bf4 <MX_TIM2_Init+0xac>)
 8001bd8:	f003 feba 	bl	8005950 <HAL_TIM_PWM_ConfigChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8001be2:	f000 fa7f 	bl	80020e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001be6:	4803      	ldr	r0, [pc, #12]	; (8001bf4 <MX_TIM2_Init+0xac>)
 8001be8:	f000 fede 	bl	80029a8 <HAL_TIM_MspPostInit>

}
 8001bec:	bf00      	nop
 8001bee:	3728      	adds	r7, #40	; 0x28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200003d4 	.word	0x200003d4

08001bf8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08c      	sub	sp, #48	; 0x30
 8001bfc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */
	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	2224      	movs	r2, #36	; 0x24
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 fdd0 	bl	80067ac <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */
	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001c14:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <MX_TIM3_Init+0xa0>)
 8001c16:	4a21      	ldr	r2, [pc, #132]	; (8001c9c <MX_TIM3_Init+0xa4>)
 8001c18:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <MX_TIM3_Init+0xa0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <MX_TIM3_Init+0xa0>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001c26:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <MX_TIM3_Init+0xa0>)
 8001c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c2c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <MX_TIM3_Init+0xa0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <MX_TIM3_Init+0xa0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c42:	2301      	movs	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c52:	2301      	movs	r3, #1
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	4619      	mov	r1, r3
 8001c64:	480c      	ldr	r0, [pc, #48]	; (8001c98 <MX_TIM3_Init+0xa0>)
 8001c66:	f003 fc17 	bl	8005498 <HAL_TIM_Encoder_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM3_Init+0x7c>
		Error_Handler();
 8001c70:	f000 fa38 	bl	80020e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_TIM3_Init+0xa0>)
 8001c82:	f004 f9c5 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001c8c:	f000 fa2a 	bl	80020e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	/* USER CODE END TIM3_Init 2 */

}
 8001c90:	bf00      	nop
 8001c92:	3730      	adds	r7, #48	; 0x30
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	2000041c 	.word	0x2000041c
 8001c9c:	40000400 	.word	0x40000400

08001ca0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08c      	sub	sp, #48	; 0x30
 8001ca4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */
	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	2224      	movs	r2, #36	; 0x24
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 fd7c 	bl	80067ac <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */
	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001cbc:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <MX_TIM4_Init+0xa0>)
 8001cbe:	4a21      	ldr	r2, [pc, #132]	; (8001d44 <MX_TIM4_Init+0xa4>)
 8001cc0:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <MX_TIM4_Init+0xa0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <MX_TIM4_Init+0xa0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <MX_TIM4_Init+0xa0>)
 8001cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd4:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <MX_TIM4_Init+0xa0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <MX_TIM4_Init+0xa0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cea:	2301      	movs	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	480c      	ldr	r0, [pc, #48]	; (8001d40 <MX_TIM4_Init+0xa0>)
 8001d0e:	f003 fbc3 	bl	8005498 <HAL_TIM_Encoder_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM4_Init+0x7c>
		Error_Handler();
 8001d18:	f000 f9e4 	bl	80020e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	4619      	mov	r1, r3
 8001d28:	4805      	ldr	r0, [pc, #20]	; (8001d40 <MX_TIM4_Init+0xa0>)
 8001d2a:	f004 f971 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM4_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001d34:	f000 f9d6 	bl	80020e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	/* USER CODE END TIM4_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	3730      	adds	r7, #48	; 0x30
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000464 	.word	0x20000464
 8001d44:	40000800 	.word	0x40000800

08001d48 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */
	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d4e:	463b      	mov	r3, r7
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */
	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <MX_TIM6_Init+0x64>)
 8001d58:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <MX_TIM6_Init+0x68>)
 8001d5a:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 83;
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <MX_TIM6_Init+0x64>)
 8001d5e:	2253      	movs	r2, #83	; 0x53
 8001d60:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <MX_TIM6_Init+0x64>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 999;
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <MX_TIM6_Init+0x64>)
 8001d6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d6e:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_TIM6_Init+0x64>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001d76:	480d      	ldr	r0, [pc, #52]	; (8001dac <MX_TIM6_Init+0x64>)
 8001d78:	f003 f93b 	bl	8004ff2 <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM6_Init+0x3e>
		Error_Handler();
 8001d82:	f000 f9af 	bl	80020e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8001d8e:	463b      	mov	r3, r7
 8001d90:	4619      	mov	r1, r3
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <MX_TIM6_Init+0x64>)
 8001d94:	f004 f93c 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM6_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8001d9e:	f000 f9a1 	bl	80020e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */
	/* USER CODE END TIM6_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200004ac 	.word	0x200004ac
 8001db0:	40001000 	.word	0x40001000

08001db4 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b092      	sub	sp, #72	; 0x48
 8001db8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */
	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001dba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
 8001dd4:	615a      	str	r2, [r3, #20]
 8001dd6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	2220      	movs	r2, #32
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 fce4 	bl	80067ac <memset>

	/* USER CODE BEGIN TIM8_Init 1 */
	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001de4:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <MX_TIM8_Init+0xfc>)
 8001de6:	4a33      	ldr	r2, [pc, #204]	; (8001eb4 <MX_TIM8_Init+0x100>)
 8001de8:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <MX_TIM8_Init+0xfc>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df0:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <MX_TIM8_Init+0xfc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 499;
 8001df6:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <MX_TIM8_Init+0xfc>)
 8001df8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001dfc:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <MX_TIM8_Init+0xfc>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001e04:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <MX_TIM8_Init+0xfc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <MX_TIM8_Init+0xfc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001e10:	4827      	ldr	r0, [pc, #156]	; (8001eb0 <MX_TIM8_Init+0xfc>)
 8001e12:	f003 f9dc 	bl	80051ce <HAL_TIM_PWM_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM8_Init+0x6c>
		Error_Handler();
 8001e1c:	f000 f962 	bl	80020e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8001e28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4820      	ldr	r0, [pc, #128]	; (8001eb0 <MX_TIM8_Init+0xfc>)
 8001e30:	f004 f8ee 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM8_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001e3a:	f000 f953 	bl	80020e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3e:	2360      	movs	r3, #96	; 0x60
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 8001e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4814      	ldr	r0, [pc, #80]	; (8001eb0 <MX_TIM8_Init+0xfc>)
 8001e60:	f003 fd76 	bl	8005950 <HAL_TIM_PWM_ConfigChannel>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM8_Init+0xba>
			!= HAL_OK) {
		Error_Handler();
 8001e6a:	f000 f93b 	bl	80020e4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e86:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4807      	ldr	r0, [pc, #28]	; (8001eb0 <MX_TIM8_Init+0xfc>)
 8001e92:	f004 f939 	bl	8006108 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM8_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8001e9c:	f000 f922 	bl	80020e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */
	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8001ea0:	4803      	ldr	r0, [pc, #12]	; (8001eb0 <MX_TIM8_Init+0xfc>)
 8001ea2:	f000 fd81 	bl	80029a8 <HAL_TIM_MspPostInit>

}
 8001ea6:	bf00      	nop
 8001ea8:	3748      	adds	r7, #72	; 0x48
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200004f4 	.word	0x200004f4
 8001eb4:	40010400 	.word	0x40010400

08001eb8 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART6_Init 0 */
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */
	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <MX_USART6_UART_Init+0x4c>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <MX_USART6_UART_Init+0x50>)
 8001ec0:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <MX_USART6_UART_Init+0x4c>)
 8001ec4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ec8:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <MX_USART6_UART_Init+0x4c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <MX_USART6_UART_Init+0x4c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <MX_USART6_UART_Init+0x4c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <MX_USART6_UART_Init+0x4c>)
 8001ede:	220c      	movs	r2, #12
 8001ee0:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <MX_USART6_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <MX_USART6_UART_Init+0x4c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <MX_USART6_UART_Init+0x4c>)
 8001ef0:	f004 f970 	bl	80061d4 <HAL_UART_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8001efa:	f000 f8f3 	bl	80020e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */
	/* USER CODE END USART6_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000053c 	.word	0x2000053c
 8001f08:	40011400 	.word	0x40011400

08001f0c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_DMA_Init+0x3c>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a0b      	ldr	r2, [pc, #44]	; (8001f48 <MX_DMA_Init+0x3c>)
 8001f1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_DMA_Init+0x3c>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	2038      	movs	r0, #56	; 0x38
 8001f34:	f001 fcc3 	bl	80038be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f38:	2038      	movs	r0, #56	; 0x38
 8001f3a:	f001 fcdc 	bl	80038f6 <HAL_NVIC_EnableIRQ>

}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800

08001f4c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b5a      	ldr	r3, [pc, #360]	; (80020d0 <MX_GPIO_Init+0x184>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a59      	ldr	r2, [pc, #356]	; (80020d0 <MX_GPIO_Init+0x184>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b57      	ldr	r3, [pc, #348]	; (80020d0 <MX_GPIO_Init+0x184>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <MX_GPIO_Init+0x184>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <MX_GPIO_Init+0x184>)
 8001f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <MX_GPIO_Init+0x184>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <MX_GPIO_Init+0x184>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a4b      	ldr	r2, [pc, #300]	; (80020d0 <MX_GPIO_Init+0x184>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b49      	ldr	r3, [pc, #292]	; (80020d0 <MX_GPIO_Init+0x184>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	4b45      	ldr	r3, [pc, #276]	; (80020d0 <MX_GPIO_Init+0x184>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a44      	ldr	r2, [pc, #272]	; (80020d0 <MX_GPIO_Init+0x184>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b42      	ldr	r3, [pc, #264]	; (80020d0 <MX_GPIO_Init+0x184>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <MX_GPIO_Init+0x184>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a3d      	ldr	r2, [pc, #244]	; (80020d0 <MX_GPIO_Init+0x184>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <MX_GPIO_Init+0x184>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f247 0130 	movw	r1, #28720	; 0x7030
 8001ff4:	4837      	ldr	r0, [pc, #220]	; (80020d4 <MX_GPIO_Init+0x188>)
 8001ff6:	f002 f9bd 	bl	8004374 <HAL_GPIO_WritePin>
			LED2_ARGB3_GPIO_OUT_Pin | LED2_ARGB4_GPIO_OUT_Pin
					| LED2_ARGB2_GPIO_OUT_Pin | LED_ARGB4_GPIO_OUT_Pin
					| LED_ARGB2_GPIO_OUT_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DRVL_IN2_GPIO_GPIO_Port, DRVL_IN2_GPIO_Pin,
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002000:	4835      	ldr	r0, [pc, #212]	; (80020d8 <MX_GPIO_Init+0x18c>)
 8002002:	f002 f9b7 	bl	8004374 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 411d 	mov.w	r1, #40192	; 0x9d00
 800200c:	4833      	ldr	r0, [pc, #204]	; (80020dc <MX_GPIO_Init+0x190>)
 800200e:	f002 f9b1 	bl	8004374 <HAL_GPIO_WritePin>
			DRVR_IN2_GPIO_OUT_Pin | LED3_GPIO_OUT_Pin | LED2_GPIO_OUT_Pin
					| LED1_GPIO_OUT_Pin | LED_ARGB3_GPIO_OUT_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(NCS_GPIO_OUT_GPIO_Port, NCS_GPIO_OUT_Pin, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	2104      	movs	r1, #4
 8002016:	4832      	ldr	r0, [pc, #200]	; (80020e0 <MX_GPIO_Init+0x194>)
 8002018:	f002 f9ac 	bl	8004374 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : SW1_GPIO_IN_Pin SIDE_SENSOR_R_GPIO_IN_Pin */
	GPIO_InitStruct.Pin = SW1_GPIO_IN_Pin | SIDE_SENSOR_R_GPIO_IN_Pin;
 800201c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002020:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	4829      	ldr	r0, [pc, #164]	; (80020d8 <MX_GPIO_Init+0x18c>)
 8002032:	f001 ffeb 	bl	800400c <HAL_GPIO_Init>

	/*Configure GPIO pins : SIDE_SENSOR_L_GPIO_IN_Pin SW2_GPIO_IN_Pin */
	GPIO_InitStruct.Pin = SIDE_SENSOR_L_GPIO_IN_Pin | SW2_GPIO_IN_Pin;
 8002036:	f248 0304 	movw	r3, #32772	; 0x8004
 800203a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	4822      	ldr	r0, [pc, #136]	; (80020d4 <MX_GPIO_Init+0x188>)
 800204c:	f001 ffde 	bl	800400c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_ARGB3_GPIO_OUT_Pin LED2_ARGB4_GPIO_OUT_Pin LED2_ARGB2_GPIO_OUT_Pin LED_ARGB4_GPIO_OUT_Pin
	 LED_ARGB2_GPIO_OUT_Pin */
	GPIO_InitStruct.Pin = LED2_ARGB3_GPIO_OUT_Pin | LED2_ARGB4_GPIO_OUT_Pin
 8002050:	f247 0330 	movw	r3, #28720	; 0x7030
 8002054:	617b      	str	r3, [r7, #20]
			| LED2_ARGB2_GPIO_OUT_Pin | LED_ARGB4_GPIO_OUT_Pin
			| LED_ARGB2_GPIO_OUT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	481a      	ldr	r0, [pc, #104]	; (80020d4 <MX_GPIO_Init+0x188>)
 800206a:	f001 ffcf 	bl	800400c <HAL_GPIO_Init>

	/*Configure GPIO pin : DRVL_IN2_GPIO_Pin */
	GPIO_InitStruct.Pin = DRVL_IN2_GPIO_Pin;
 800206e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002072:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002074:	2301      	movs	r3, #1
 8002076:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DRVL_IN2_GPIO_GPIO_Port, &GPIO_InitStruct);
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	4619      	mov	r1, r3
 8002086:	4814      	ldr	r0, [pc, #80]	; (80020d8 <MX_GPIO_Init+0x18c>)
 8002088:	f001 ffc0 	bl	800400c <HAL_GPIO_Init>

	/*Configure GPIO pins : DRVR_IN2_GPIO_OUT_Pin LED3_GPIO_OUT_Pin LED2_GPIO_OUT_Pin LED1_GPIO_OUT_Pin
	 LED_ARGB3_GPIO_OUT_Pin */
	GPIO_InitStruct.Pin = DRVR_IN2_GPIO_OUT_Pin | LED3_GPIO_OUT_Pin
 800208c:	f44f 431d 	mov.w	r3, #40192	; 0x9d00
 8002090:	617b      	str	r3, [r7, #20]
			| LED2_GPIO_OUT_Pin | LED1_GPIO_OUT_Pin | LED_ARGB3_GPIO_OUT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002092:	2301      	movs	r3, #1
 8002094:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	4619      	mov	r1, r3
 80020a4:	480d      	ldr	r0, [pc, #52]	; (80020dc <MX_GPIO_Init+0x190>)
 80020a6:	f001 ffb1 	bl	800400c <HAL_GPIO_Init>

	/*Configure GPIO pin : NCS_GPIO_OUT_Pin */
	GPIO_InitStruct.Pin = NCS_GPIO_OUT_Pin;
 80020aa:	2304      	movs	r3, #4
 80020ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(NCS_GPIO_OUT_GPIO_Port, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4807      	ldr	r0, [pc, #28]	; (80020e0 <MX_GPIO_Init+0x194>)
 80020c2:	f001 ffa3 	bl	800400c <HAL_GPIO_Init>

}
 80020c6:	bf00      	nop
 80020c8:	3728      	adds	r7, #40	; 0x28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40020800 	.word	0x40020800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020c00 	.word	0x40020c00

080020e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* USER CODE END Error_Handler_Debug */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <readSens2>:

    }
}


void readSens2(){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	Line3_sens[0] = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2);//L
 80020f8:	2104      	movs	r1, #4
 80020fa:	480d      	ldr	r0, [pc, #52]	; (8002130 <readSens2+0x3c>)
 80020fc:	f002 f922 	bl	8004344 <HAL_GPIO_ReadPin>
 8002100:	4603      	mov	r3, r0
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <readSens2+0x40>)
 800210c:	edc3 7a00 	vstr	s15, [r3]
    Line3_sens[1] = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);//R
 8002110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002114:	4808      	ldr	r0, [pc, #32]	; (8002138 <readSens2+0x44>)
 8002116:	f002 f915 	bl	8004344 <HAL_GPIO_ReadPin>
 800211a:	4603      	mov	r3, r0
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <readSens2+0x40>)
 8002126:	edc3 7a01 	vstr	s15, [r3, #4]

}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40020400 	.word	0x40020400
 8002134:	20000594 	.word	0x20000594
 8002138:	40020800 	.word	0x40020800

0800213c <calibrate_sensors>:


void calibrate_sensors(void){    
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0

    for (int k = 0; k < SENSOR_COUNT; k++) {
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	e00f      	b.n	8002168 <calibrate_sensors+0x2c>
        Line_min[k] = 3000.0;  // 初期値
 8002148:	4a3c      	ldr	r2, [pc, #240]	; (800223c <calibrate_sensors+0x100>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	4a3b      	ldr	r2, [pc, #236]	; (8002240 <calibrate_sensors+0x104>)
 8002152:	601a      	str	r2, [r3, #0]
        Line_max[k] = 0.0;     // 初期値
 8002154:	4a3b      	ldr	r2, [pc, #236]	; (8002244 <calibrate_sensors+0x108>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
    for (int k = 0; k < SENSOR_COUNT; k++) {
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3301      	adds	r3, #1
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b0c      	cmp	r3, #12
 800216c:	ddec      	ble.n	8002148 <calibrate_sensors+0xc>
    }
HAL_Delay(500);
 800216e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002172:	f000 fe9d 	bl	8002eb0 <HAL_Delay>
       while(1){//SW2

    	   if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15) == GPIO_PIN_RESET){
 8002176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800217a:	4833      	ldr	r0, [pc, #204]	; (8002248 <calibrate_sensors+0x10c>)
 800217c:	f002 f8e2 	bl	8004344 <HAL_GPIO_ReadPin>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d051      	beq.n	800222a <calibrate_sensors+0xee>
    		   break;
    	   }
           //readSens();
           LED_RGB_2(2);
 8002186:	2002      	movs	r0, #2
 8002188:	f7fe ffaa 	bl	80010e0 <LED_RGB_2>
           LED_RGB(2);
 800218c:	2002      	movs	r0, #2
 800218e:	f7fe fefd 	bl	8000f8c <LED_RGB>
           for(int k = 0; k < SENSOR_COUNT; k++){
 8002192:	2300      	movs	r3, #0
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	e044      	b.n	8002222 <calibrate_sensors+0xe6>
        	   if(Line_sens[k] < Line_min[k]){
 8002198:	4a2c      	ldr	r2, [pc, #176]	; (800224c <calibrate_sensors+0x110>)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021a0:	ee07 3a90 	vmov	s15, r3
 80021a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021a8:	4a24      	ldr	r2, [pc, #144]	; (800223c <calibrate_sensors+0x100>)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021bc:	d50d      	bpl.n	80021da <calibrate_sensors+0x9e>
        		   Line_min[k] = Line_sens[k];
 80021be:	4a23      	ldr	r2, [pc, #140]	; (800224c <calibrate_sensors+0x110>)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021c6:	ee07 3a90 	vmov	s15, r3
 80021ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ce:	4a1b      	ldr	r2, [pc, #108]	; (800223c <calibrate_sensors+0x100>)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	edc3 7a00 	vstr	s15, [r3]
        	   }
        	   if(Line_sens[k] > Line_max[k] ){
 80021da:	4a1c      	ldr	r2, [pc, #112]	; (800224c <calibrate_sensors+0x110>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021e2:	ee07 3a90 	vmov	s15, r3
 80021e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ea:	4a16      	ldr	r2, [pc, #88]	; (8002244 <calibrate_sensors+0x108>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fe:	dd0d      	ble.n	800221c <calibrate_sensors+0xe0>
        		   Line_max[k] = Line_sens[k];
 8002200:	4a12      	ldr	r2, [pc, #72]	; (800224c <calibrate_sensors+0x110>)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002210:	4a0c      	ldr	r2, [pc, #48]	; (8002244 <calibrate_sensors+0x108>)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	edc3 7a00 	vstr	s15, [r3]
           for(int k = 0; k < SENSOR_COUNT; k++){
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b0c      	cmp	r3, #12
 8002226:	ddb7      	ble.n	8002198 <calibrate_sensors+0x5c>
    	   if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15) == GPIO_PIN_RESET){
 8002228:	e7a5      	b.n	8002176 <calibrate_sensors+0x3a>
    		   break;
 800222a:	bf00      	nop
			   }
		   }
	   }

       LED_RGB_2(0);
 800222c:	2000      	movs	r0, #0
 800222e:	f7fe ff57 	bl	80010e0 <LED_RGB_2>

	}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000000 	.word	0x20000000
 8002240:	453b8000 	.word	0x453b8000
 8002244:	200005b8 	.word	0x200005b8
 8002248:	40020400 	.word	0x40020400
 800224c:	2000059c 	.word	0x2000059c

08002250 <calculateEncoderSpeed>:
}


// int32_t cnt_test; //Max value is 2048

float calculateEncoderSpeed(){
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0

//	cnt_new_L =  TIM4 -> CNT - OFFSET; //dL
//	cnt_new_R =OFFSET- TIM3 -> CNT; //dR
	cnt_new_L =  TIM4 -> CNT ; //dL
 8002254:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <calculateEncoderSpeed+0xf8>)
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	461a      	mov	r2, r3
 800225a:	4b3c      	ldr	r3, [pc, #240]	; (800234c <calculateEncoderSpeed+0xfc>)
 800225c:	601a      	str	r2, [r3, #0]
	cnt_new_R = TIM3 -> CNT; //dR
 800225e:	4b3c      	ldr	r3, [pc, #240]	; (8002350 <calculateEncoderSpeed+0x100>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	461a      	mov	r2, r3
 8002264:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <calculateEncoderSpeed+0x104>)
 8002266:	601a      	str	r2, [r3, #0]

	 TIM4 -> CNT=32767;
 8002268:	4b37      	ldr	r3, [pc, #220]	; (8002348 <calculateEncoderSpeed+0xf8>)
 800226a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800226e:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM3 -> CNT=32767;
 8002270:	4b37      	ldr	r3, [pc, #220]	; (8002350 <calculateEncoderSpeed+0x100>)
 8002272:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002276:	625a      	str	r2, [r3, #36]	; 0x24

//	cnt_test = TIM3 -> CNT;
	cnt_L = -(cnt_new_L - 32767);
 8002278:	4b34      	ldr	r3, [pc, #208]	; (800234c <calculateEncoderSpeed+0xfc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8002280:	337f      	adds	r3, #127	; 0x7f
 8002282:	4a35      	ldr	r2, [pc, #212]	; (8002358 <calculateEncoderSpeed+0x108>)
 8002284:	6013      	str	r3, [r2, #0]
	cnt_R = -(cnt_new_R - 32767);
 8002286:	4b33      	ldr	r3, [pc, #204]	; (8002354 <calculateEncoderSpeed+0x104>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 800228e:	337f      	adds	r3, #127	; 0x7f
 8002290:	4a32      	ldr	r2, [pc, #200]	; (800235c <calculateEncoderSpeed+0x10c>)
 8002292:	6013      	str	r3, [r2, #0]
//	cnt_L = cnt_new_L ;
//	cnt_R = cnt_new_R;



	distance_1ms = DISTANCE_PER_CNT * (cnt_L + cnt_R) / 2;
 8002294:	4b30      	ldr	r3, [pc, #192]	; (8002358 <calculateEncoderSpeed+0x108>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b30      	ldr	r3, [pc, #192]	; (800235c <calculateEncoderSpeed+0x10c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4413      	add	r3, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe f940 	bl	8000524 <__aeabi_i2d>
 80022a4:	a326      	add	r3, pc, #152	; (adr r3, 8002340 <calculateEncoderSpeed+0xf0>)
 80022a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022aa:	f7fe f9a5 	bl	80005f8 <__aeabi_dmul>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022be:	f7fe fac5 	bl	800084c <__aeabi_ddiv>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	f7fe fc8d 	bl	8000be8 <__aeabi_d2f>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4a23      	ldr	r2, [pc, #140]	; (8002360 <calculateEncoderSpeed+0x110>)
 80022d2:	6013      	str	r3, [r2, #0]
//	accumulation += distance_1ms;
	distance_1ms_L = DISTANCE_PER_CNT * cnt_L;
 80022d4:	4b20      	ldr	r3, [pc, #128]	; (8002358 <calculateEncoderSpeed+0x108>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe f923 	bl	8000524 <__aeabi_i2d>
 80022de:	a318      	add	r3, pc, #96	; (adr r3, 8002340 <calculateEncoderSpeed+0xf0>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	f7fe f988 	bl	80005f8 <__aeabi_dmul>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4610      	mov	r0, r2
 80022ee:	4619      	mov	r1, r3
 80022f0:	f7fe fc7a 	bl	8000be8 <__aeabi_d2f>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <calculateEncoderSpeed+0x114>)
 80022f8:	6013      	str	r3, [r2, #0]
	distance_1ms_R = DISTANCE_PER_CNT * cnt_R;
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <calculateEncoderSpeed+0x10c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f910 	bl	8000524 <__aeabi_i2d>
 8002304:	a30e      	add	r3, pc, #56	; (adr r3, 8002340 <calculateEncoderSpeed+0xf0>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe f975 	bl	80005f8 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	f7fe fc67 	bl	8000be8 <__aeabi_d2f>
 800231a:	4603      	mov	r3, r0
 800231c:	4a12      	ldr	r2, [pc, #72]	; (8002368 <calculateEncoderSpeed+0x118>)
 800231e:	6013      	str	r3, [r2, #0]
//	if(cnt_new_L != cnt_old_L || cnt_new_R != cnt_old_R){
//		char scnt[100];
////		sprintf(scnt, "Speed: %f\r\n", distance_1ms);
//
//	}
	cnt_old_L = cnt_new_L;
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <calculateEncoderSpeed+0xfc>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a11      	ldr	r2, [pc, #68]	; (800236c <calculateEncoderSpeed+0x11c>)
 8002326:	6013      	str	r3, [r2, #0]
    cnt_old_R = cnt_new_R;
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <calculateEncoderSpeed+0x104>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a10      	ldr	r2, [pc, #64]	; (8002370 <calculateEncoderSpeed+0x120>)
 800232e:	6013      	str	r3, [r2, #0]

//    TIM4 -> CNT = OFFSET;
//    TIM3 -> CNT = OFFSET;
    return distance_1ms;
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <calculateEncoderSpeed+0x110>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	ee07 3a90 	vmov	s15, r3
}
 8002338:	eeb0 0a67 	vmov.f32	s0, s15
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	4317cb34 	.word	0x4317cb34
 8002344:	3f8ba561 	.word	0x3f8ba561
 8002348:	40000800 	.word	0x40000800
 800234c:	200005f4 	.word	0x200005f4
 8002350:	40000400 	.word	0x40000400
 8002354:	200005f8 	.word	0x200005f8
 8002358:	200005fc 	.word	0x200005fc
 800235c:	20000600 	.word	0x20000600
 8002360:	20000580 	.word	0x20000580
 8002364:	20000584 	.word	0x20000584
 8002368:	20000588 	.word	0x20000588
 800236c:	2000058c 	.word	0x2000058c
 8002370:	20000590 	.word	0x20000590
 8002374:	00000000 	.word	0x00000000

08002378 <EncoderSpeed>:




float EncoderSpeed() {
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	ed2d 8b02 	vpush	{d8}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0


	float Sp = 800;
 8002382:	4b4f      	ldr	r3, [pc, #316]	; (80024c0 <EncoderSpeed+0x148>)
 8002384:	61bb      	str	r3, [r7, #24]
	float Si = 8000;
 8002386:	4b4f      	ldr	r3, [pc, #316]	; (80024c4 <EncoderSpeed+0x14c>)
 8002388:	617b      	str	r3, [r7, #20]
	//speed_error
	//target_speedを個別に決める
	target_speed =0.0;
 800238a:	4b4f      	ldr	r3, [pc, #316]	; (80024c8 <EncoderSpeed+0x150>)
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
	float adjusted_speed = target_speed - calculateEncoderSpeed();
 8002392:	4b4d      	ldr	r3, [pc, #308]	; (80024c8 <EncoderSpeed+0x150>)
 8002394:	ed93 8a00 	vldr	s16, [r3]
 8002398:	f7ff ff5a 	bl	8002250 <calculateEncoderSpeed>
 800239c:	eef0 7a40 	vmov.f32	s15, s0
 80023a0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80023a4:	edc7 7a04 	vstr	s15, [r7, #16]

	static float integral= 0;
	integral += adjusted_speed * dt;
 80023a8:	4b48      	ldr	r3, [pc, #288]	; (80024cc <EncoderSpeed+0x154>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f8cb 	bl	8000548 <__aeabi_f2d>
 80023b2:	4604      	mov	r4, r0
 80023b4:	460d      	mov	r5, r1
 80023b6:	6938      	ldr	r0, [r7, #16]
 80023b8:	f7fe f8c6 	bl	8000548 <__aeabi_f2d>
 80023bc:	a33e      	add	r3, pc, #248	; (adr r3, 80024b8 <EncoderSpeed+0x140>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	f7fe f919 	bl	80005f8 <__aeabi_dmul>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4620      	mov	r0, r4
 80023cc:	4629      	mov	r1, r5
 80023ce:	f7fd ff5d 	bl	800028c <__adddf3>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f7fe fc05 	bl	8000be8 <__aeabi_d2f>
 80023de:	4603      	mov	r3, r0
 80023e0:	4a3a      	ldr	r2, [pc, #232]	; (80024cc <EncoderSpeed+0x154>)
 80023e2:	6013      	str	r3, [r2, #0]

//    static float previous_adjusted_speed_L = 0, previous_adjusted_speed_R = 0;


	//P
	float speed_P_gain = Sp * adjusted_speed;
 80023e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80023e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f0:	edc7 7a03 	vstr	s15, [r7, #12]
	//I
    float speed_I_gain = Si * integral;
 80023f4:	4b35      	ldr	r3, [pc, #212]	; (80024cc <EncoderSpeed+0x154>)
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80023fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002402:	edc7 7a02 	vstr	s15, [r7, #8]



	#define I_LIMIT 1000
	if (integral > I_LIMIT) integral= I_LIMIT;
 8002406:	4b31      	ldr	r3, [pc, #196]	; (80024cc <EncoderSpeed+0x154>)
 8002408:	edd3 7a00 	vldr	s15, [r3]
 800240c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80024d0 <EncoderSpeed+0x158>
 8002410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002418:	dd02      	ble.n	8002420 <EncoderSpeed+0xa8>
 800241a:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <EncoderSpeed+0x154>)
 800241c:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <EncoderSpeed+0x15c>)
 800241e:	601a      	str	r2, [r3, #0]
	if (integral < -I_LIMIT) integral = -I_LIMIT;
 8002420:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <EncoderSpeed+0x154>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80024d8 <EncoderSpeed+0x160>
 800242a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800242e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002432:	d502      	bpl.n	800243a <EncoderSpeed+0xc2>
 8002434:	4b25      	ldr	r3, [pc, #148]	; (80024cc <EncoderSpeed+0x154>)
 8002436:	4a29      	ldr	r2, [pc, #164]	; (80024dc <EncoderSpeed+0x164>)
 8002438:	601a      	str	r2, [r3, #0]


	float duty = speed_P_gain + speed_I_gain;
 800243a:	ed97 7a03 	vldr	s14, [r7, #12]
 800243e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002446:	edc7 7a07 	vstr	s15, [r7, #28]

    if (duty > 300) duty = 300;
 800244a:	edd7 7a07 	vldr	s15, [r7, #28]
 800244e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80024e0 <EncoderSpeed+0x168>
 8002452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245a:	dd01      	ble.n	8002460 <EncoderSpeed+0xe8>
 800245c:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <EncoderSpeed+0x16c>)
 800245e:	61fb      	str	r3, [r7, #28]
    if (duty < -300) duty = -300;
 8002460:	edd7 7a07 	vldr	s15, [r7, #28]
 8002464:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80024e8 <EncoderSpeed+0x170>
 8002468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800246c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002470:	d501      	bpl.n	8002476 <EncoderSpeed+0xfe>
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <EncoderSpeed+0x174>)
 8002474:	61fb      	str	r3, [r7, #28]


    previous_speed_error = adjusted_speed;
 8002476:	4a1e      	ldr	r2, [pc, #120]	; (80024f0 <EncoderSpeed+0x178>)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	6013      	str	r3, [r2, #0]


	float motor = duty;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	607b      	str	r3, [r7, #4]


    ControlMotor(motor, motor);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7fe f861 	bl	8000548 <__aeabi_f2d>
 8002486:	4604      	mov	r4, r0
 8002488:	460d      	mov	r5, r1
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe f85c 	bl	8000548 <__aeabi_f2d>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	ec43 2b11 	vmov	d1, r2, r3
 8002498:	ec45 4b10 	vmov	d0, r4, r5
 800249c:	f7fe ffe2 	bl	8001464 <ControlMotor>

    // モータ
    return duty;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	ee07 3a90 	vmov	s15, r3
}
 80024a6:	eeb0 0a67 	vmov.f32	s0, s15
 80024aa:	3720      	adds	r7, #32
 80024ac:	46bd      	mov	sp, r7
 80024ae:	ecbd 8b02 	vpop	{d8}
 80024b2:	bdb0      	pop	{r4, r5, r7, pc}
 80024b4:	f3af 8000 	nop.w
 80024b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80024bc:	3f50624d 	.word	0x3f50624d
 80024c0:	44480000 	.word	0x44480000
 80024c4:	45fa0000 	.word	0x45fa0000
 80024c8:	200005f0 	.word	0x200005f0
 80024cc:	20000604 	.word	0x20000604
 80024d0:	447a0000 	.word	0x447a0000
 80024d4:	447a0000 	.word	0x447a0000
 80024d8:	c47a0000 	.word	0xc47a0000
 80024dc:	c47a0000 	.word	0xc47a0000
 80024e0:	43960000 	.word	0x43960000
 80024e4:	43960000 	.word	0x43960000
 80024e8:	c3960000 	.word	0xc3960000
 80024ec:	c3960000 	.word	0xc3960000
 80024f0:	200005ec 	.word	0x200005ec

080024f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <HAL_MspInit+0x4c>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	4a0f      	ldr	r2, [pc, #60]	; (8002540 <HAL_MspInit+0x4c>)
 8002504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002508:	6453      	str	r3, [r2, #68]	; 0x44
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <HAL_MspInit+0x4c>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_MspInit+0x4c>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a08      	ldr	r2, [pc, #32]	; (8002540 <HAL_MspInit+0x4c>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_MspInit+0x4c>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800

08002544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 031c 	add.w	r3, r7, #28
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a49      	ldr	r2, [pc, #292]	; (8002688 <HAL_ADC_MspInit+0x144>)
 8002562:	4293      	cmp	r3, r2
 8002564:	f040 808c 	bne.w	8002680 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	4b47      	ldr	r3, [pc, #284]	; (800268c <HAL_ADC_MspInit+0x148>)
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	4a46      	ldr	r2, [pc, #280]	; (800268c <HAL_ADC_MspInit+0x148>)
 8002572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002576:	6453      	str	r3, [r2, #68]	; 0x44
 8002578:	4b44      	ldr	r3, [pc, #272]	; (800268c <HAL_ADC_MspInit+0x148>)
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	4b40      	ldr	r3, [pc, #256]	; (800268c <HAL_ADC_MspInit+0x148>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	4a3f      	ldr	r2, [pc, #252]	; (800268c <HAL_ADC_MspInit+0x148>)
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	6313      	str	r3, [r2, #48]	; 0x30
 8002594:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_ADC_MspInit+0x148>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	4b39      	ldr	r3, [pc, #228]	; (800268c <HAL_ADC_MspInit+0x148>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	4a38      	ldr	r2, [pc, #224]	; (800268c <HAL_ADC_MspInit+0x148>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6313      	str	r3, [r2, #48]	; 0x30
 80025b0:	4b36      	ldr	r3, [pc, #216]	; (800268c <HAL_ADC_MspInit+0x148>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	4b32      	ldr	r3, [pc, #200]	; (800268c <HAL_ADC_MspInit+0x148>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	4a31      	ldr	r2, [pc, #196]	; (800268c <HAL_ADC_MspInit+0x148>)
 80025c6:	f043 0302 	orr.w	r3, r3, #2
 80025ca:	6313      	str	r3, [r2, #48]	; 0x30
 80025cc:	4b2f      	ldr	r3, [pc, #188]	; (800268c <HAL_ADC_MspInit+0x148>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LINE_Sens13_ADC1_in11_Pin|LINE_Sens12_ADC1_in12_Pin|LINE_Sens11_ADC1_in13_Pin|LINE_Sens4_ADC1_in14_Pin
 80025d8:	233e      	movs	r3, #62	; 0x3e
 80025da:	61fb      	str	r3, [r7, #28]
                          |LINE_Sens3_ADC1_in15_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025dc:	2303      	movs	r3, #3
 80025de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e4:	f107 031c 	add.w	r3, r7, #28
 80025e8:	4619      	mov	r1, r3
 80025ea:	4829      	ldr	r0, [pc, #164]	; (8002690 <HAL_ADC_MspInit+0x14c>)
 80025ec:	f001 fd0e 	bl	800400c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LINE_Sens10_ADC1_in0_Pin|LINE_Sens9_ADC1_in1_Pin|LINE_Sens8_ADC1_in2_Pin|LINE_Sens7_ADC1_in3_Pin
 80025f0:	233f      	movs	r3, #63	; 0x3f
 80025f2:	61fb      	str	r3, [r7, #28]
                          |LINE_Sens6_ADC1_in4_Pin|LINE_Sens5_ADC1_in5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025f4:	2303      	movs	r3, #3
 80025f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fc:	f107 031c 	add.w	r3, r7, #28
 8002600:	4619      	mov	r1, r3
 8002602:	4824      	ldr	r0, [pc, #144]	; (8002694 <HAL_ADC_MspInit+0x150>)
 8002604:	f001 fd02 	bl	800400c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LINE_Sens2_ADC1_in8_Pin|LINE_Sens1_ADC1_in9_Pin;
 8002608:	2303      	movs	r3, #3
 800260a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800260c:	2303      	movs	r3, #3
 800260e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	4619      	mov	r1, r3
 800261a:	481f      	ldr	r0, [pc, #124]	; (8002698 <HAL_ADC_MspInit+0x154>)
 800261c:	f001 fcf6 	bl	800400c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_ADC_MspInit+0x158>)
 8002622:	4a1f      	ldr	r2, [pc, #124]	; (80026a0 <HAL_ADC_MspInit+0x15c>)
 8002624:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <HAL_ADC_MspInit+0x158>)
 8002628:	2200      	movs	r2, #0
 800262a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_ADC_MspInit+0x158>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <HAL_ADC_MspInit+0x158>)
 8002634:	2200      	movs	r2, #0
 8002636:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_ADC_MspInit+0x158>)
 800263a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800263e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002640:	4b16      	ldr	r3, [pc, #88]	; (800269c <HAL_ADC_MspInit+0x158>)
 8002642:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002646:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <HAL_ADC_MspInit+0x158>)
 800264a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800264e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_ADC_MspInit+0x158>)
 8002652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002656:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_ADC_MspInit+0x158>)
 800265a:	2200      	movs	r2, #0
 800265c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_ADC_MspInit+0x158>)
 8002660:	2200      	movs	r2, #0
 8002662:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002664:	480d      	ldr	r0, [pc, #52]	; (800269c <HAL_ADC_MspInit+0x158>)
 8002666:	f001 f961 	bl	800392c <HAL_DMA_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002670:	f7ff fd38 	bl	80020e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a09      	ldr	r2, [pc, #36]	; (800269c <HAL_ADC_MspInit+0x158>)
 8002678:	639a      	str	r2, [r3, #56]	; 0x38
 800267a:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_ADC_MspInit+0x158>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002680:	bf00      	nop
 8002682:	3730      	adds	r7, #48	; 0x30
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40012000 	.word	0x40012000
 800268c:	40023800 	.word	0x40023800
 8002690:	40020800 	.word	0x40020800
 8002694:	40020000 	.word	0x40020000
 8002698:	40020400 	.word	0x40020400
 800269c:	20000280 	.word	0x20000280
 80026a0:	40026410 	.word	0x40026410

080026a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a19      	ldr	r2, [pc, #100]	; (8002728 <HAL_I2C_MspInit+0x84>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d12c      	bne.n	8002720 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_I2C_MspInit+0x88>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a17      	ldr	r2, [pc, #92]	; (800272c <HAL_I2C_MspInit+0x88>)
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_I2C_MspInit+0x88>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_3_I2C1_SCL_Pin|LCD2_I2C1_SDA_Pin;
 80026e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e8:	2312      	movs	r3, #18
 80026ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f0:	2303      	movs	r3, #3
 80026f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026f4:	2304      	movs	r3, #4
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4619      	mov	r1, r3
 80026fe:	480c      	ldr	r0, [pc, #48]	; (8002730 <HAL_I2C_MspInit+0x8c>)
 8002700:	f001 fc84 	bl	800400c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <HAL_I2C_MspInit+0x88>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	4a07      	ldr	r2, [pc, #28]	; (800272c <HAL_I2C_MspInit+0x88>)
 800270e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002712:	6413      	str	r3, [r2, #64]	; 0x40
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_I2C_MspInit+0x88>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002720:	bf00      	nop
 8002722:	3728      	adds	r7, #40	; 0x28
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40005400 	.word	0x40005400
 800272c:	40023800 	.word	0x40023800
 8002730:	40020400 	.word	0x40020400

08002734 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <HAL_SPI_MspInit+0x84>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d12c      	bne.n	80027b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_SPI_MspInit+0x88>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a17      	ldr	r2, [pc, #92]	; (80027bc <HAL_SPI_MspInit+0x88>)
 8002760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <HAL_SPI_MspInit+0x88>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_SPI_MspInit+0x88>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a10      	ldr	r2, [pc, #64]	; (80027bc <HAL_SPI_MspInit+0x88>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <HAL_SPI_MspInit+0x88>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800278e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279c:	2303      	movs	r3, #3
 800279e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027a0:	2306      	movs	r3, #6
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	4805      	ldr	r0, [pc, #20]	; (80027c0 <HAL_SPI_MspInit+0x8c>)
 80027ac:	f001 fc2e 	bl	800400c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80027b0:	bf00      	nop
 80027b2:	3728      	adds	r7, #40	; 0x28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40003c00 	.word	0x40003c00
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40020800 	.word	0x40020800

080027c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_TIM_PWM_MspInit+0x8c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10e      	bne.n	80027f4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <HAL_TIM_PWM_MspInit+0x90>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <HAL_TIM_PWM_MspInit+0x90>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6453      	str	r3, [r2, #68]	; 0x44
 80027e6:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_TIM_PWM_MspInit+0x90>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80027f2:	e026      	b.n	8002842 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fc:	d10e      	bne.n	800281c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_TIM_PWM_MspInit+0x90>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a13      	ldr	r2, [pc, #76]	; (8002854 <HAL_TIM_PWM_MspInit+0x90>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <HAL_TIM_PWM_MspInit+0x90>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]
}
 800281a:	e012      	b.n	8002842 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0d      	ldr	r2, [pc, #52]	; (8002858 <HAL_TIM_PWM_MspInit+0x94>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10d      	bne.n	8002842 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_TIM_PWM_MspInit+0x90>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_TIM_PWM_MspInit+0x90>)
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	6453      	str	r3, [r2, #68]	; 0x44
 8002836:	4b07      	ldr	r3, [pc, #28]	; (8002854 <HAL_TIM_PWM_MspInit+0x90>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40010000 	.word	0x40010000
 8002854:	40023800 	.word	0x40023800
 8002858:	40010400 	.word	0x40010400

0800285c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	; 0x30
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 031c 	add.w	r3, r7, #28
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a32      	ldr	r2, [pc, #200]	; (8002944 <HAL_TIM_Encoder_MspInit+0xe8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d12c      	bne.n	80028d8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	4b31      	ldr	r3, [pc, #196]	; (8002948 <HAL_TIM_Encoder_MspInit+0xec>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a30      	ldr	r2, [pc, #192]	; (8002948 <HAL_TIM_Encoder_MspInit+0xec>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b2e      	ldr	r3, [pc, #184]	; (8002948 <HAL_TIM_Encoder_MspInit+0xec>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HAL_TIM_Encoder_MspInit+0xec>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a29      	ldr	r2, [pc, #164]	; (8002948 <HAL_TIM_Encoder_MspInit+0xec>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b27      	ldr	r3, [pc, #156]	; (8002948 <HAL_TIM_Encoder_MspInit+0xec>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1_6_TIM3_CH1_Pin|ENC1_8_TIM3_CH2_Pin;
 80028b6:	23c0      	movs	r3, #192	; 0xc0
 80028b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028c6:	2302      	movs	r3, #2
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ca:	f107 031c 	add.w	r3, r7, #28
 80028ce:	4619      	mov	r1, r3
 80028d0:	481e      	ldr	r0, [pc, #120]	; (800294c <HAL_TIM_Encoder_MspInit+0xf0>)
 80028d2:	f001 fb9b 	bl	800400c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028d6:	e030      	b.n	800293a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <HAL_TIM_Encoder_MspInit+0xf4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d12b      	bne.n	800293a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	4b18      	ldr	r3, [pc, #96]	; (8002948 <HAL_TIM_Encoder_MspInit+0xec>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a17      	ldr	r2, [pc, #92]	; (8002948 <HAL_TIM_Encoder_MspInit+0xec>)
 80028ec:	f043 0304 	orr.w	r3, r3, #4
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <HAL_TIM_Encoder_MspInit+0xec>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b11      	ldr	r3, [pc, #68]	; (8002948 <HAL_TIM_Encoder_MspInit+0xec>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4a10      	ldr	r2, [pc, #64]	; (8002948 <HAL_TIM_Encoder_MspInit+0xec>)
 8002908:	f043 0302 	orr.w	r3, r3, #2
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
 800290e:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <HAL_TIM_Encoder_MspInit+0xec>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2_8_TIM4_CH1_Pin|ENC2_6_TIM4_CH2_Pin;
 800291a:	23c0      	movs	r3, #192	; 0xc0
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800292a:	2302      	movs	r3, #2
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292e:	f107 031c 	add.w	r3, r7, #28
 8002932:	4619      	mov	r1, r3
 8002934:	4807      	ldr	r0, [pc, #28]	; (8002954 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002936:	f001 fb69 	bl	800400c <HAL_GPIO_Init>
}
 800293a:	bf00      	nop
 800293c:	3730      	adds	r7, #48	; 0x30
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40000400 	.word	0x40000400
 8002948:	40023800 	.word	0x40023800
 800294c:	40020000 	.word	0x40020000
 8002950:	40000800 	.word	0x40000800
 8002954:	40020400 	.word	0x40020400

08002958 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <HAL_TIM_Base_MspInit+0x48>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d115      	bne.n	8002996 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <HAL_TIM_Base_MspInit+0x4c>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	4a0c      	ldr	r2, [pc, #48]	; (80029a4 <HAL_TIM_Base_MspInit+0x4c>)
 8002974:	f043 0310 	orr.w	r3, r3, #16
 8002978:	6413      	str	r3, [r2, #64]	; 0x40
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_TIM_Base_MspInit+0x4c>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	2036      	movs	r0, #54	; 0x36
 800298c:	f000 ff97 	bl	80038be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002990:	2036      	movs	r0, #54	; 0x36
 8002992:	f000 ffb0 	bl	80038f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40001000 	.word	0x40001000
 80029a4:	40023800 	.word	0x40023800

080029a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a37      	ldr	r2, [pc, #220]	; (8002aa4 <HAL_TIM_MspPostInit+0xfc>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d11f      	bne.n	8002a0a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <HAL_TIM_MspPostInit+0x100>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	4a35      	ldr	r2, [pc, #212]	; (8002aa8 <HAL_TIM_MspPostInit+0x100>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6313      	str	r3, [r2, #48]	; 0x30
 80029da:	4b33      	ldr	r3, [pc, #204]	; (8002aa8 <HAL_TIM_MspPostInit+0x100>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = DRVR_IN1_TIM1_CH2_Pin;
 80029e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ec:	2302      	movs	r3, #2
 80029ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	2300      	movs	r3, #0
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029f8:	2301      	movs	r3, #1
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DRVR_IN1_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	4619      	mov	r1, r3
 8002a02:	482a      	ldr	r0, [pc, #168]	; (8002aac <HAL_TIM_MspPostInit+0x104>)
 8002a04:	f001 fb02 	bl	800400c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002a08:	e048      	b.n	8002a9c <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a12:	d11f      	bne.n	8002a54 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <HAL_TIM_MspPostInit+0x100>)
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <HAL_TIM_MspPostInit+0x100>)
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	6313      	str	r3, [r2, #48]	; 0x30
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_TIM_MspPostInit+0x100>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = fan_PWM_1_TIM2_CH3_Pin;
 8002a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a42:	2301      	movs	r3, #1
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(fan_PWM_1_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4818      	ldr	r0, [pc, #96]	; (8002ab0 <HAL_TIM_MspPostInit+0x108>)
 8002a4e:	f001 fadd 	bl	800400c <HAL_GPIO_Init>
}
 8002a52:	e023      	b.n	8002a9c <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM8)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a16      	ldr	r2, [pc, #88]	; (8002ab4 <HAL_TIM_MspPostInit+0x10c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d11e      	bne.n	8002a9c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_TIM_MspPostInit+0x100>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <HAL_TIM_MspPostInit+0x100>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <HAL_TIM_MspPostInit+0x100>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DRVL_IN1_TIM8_CH4_Pin;
 8002a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DRVL_IN1_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	4808      	ldr	r0, [pc, #32]	; (8002ab8 <HAL_TIM_MspPostInit+0x110>)
 8002a98:	f001 fab8 	bl	800400c <HAL_GPIO_Init>
}
 8002a9c:	bf00      	nop
 8002a9e:	3728      	adds	r7, #40	; 0x28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40010000 	.word	0x40010000
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	40020400 	.word	0x40020400
 8002ab4:	40010400 	.word	0x40010400
 8002ab8:	40020800 	.word	0x40020800

08002abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a19      	ldr	r2, [pc, #100]	; (8002b40 <HAL_UART_MspInit+0x84>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d12b      	bne.n	8002b36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <HAL_UART_MspInit+0x88>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <HAL_UART_MspInit+0x88>)
 8002ae8:	f043 0320 	orr.w	r3, r3, #32
 8002aec:	6453      	str	r3, [r2, #68]	; 0x44
 8002aee:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <HAL_UART_MspInit+0x88>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <HAL_UART_MspInit+0x88>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	4a10      	ldr	r2, [pc, #64]	; (8002b44 <HAL_UART_MspInit+0x88>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <HAL_UART_MspInit+0x88>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b16:	23c0      	movs	r3, #192	; 0xc0
 8002b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b22:	2303      	movs	r3, #3
 8002b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b26:	2308      	movs	r3, #8
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4805      	ldr	r0, [pc, #20]	; (8002b48 <HAL_UART_MspInit+0x8c>)
 8002b32:	f001 fa6b 	bl	800400c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b36:	bf00      	nop
 8002b38:	3728      	adds	r7, #40	; 0x28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40011400 	.word	0x40011400
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40020800 	.word	0x40020800

08002b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <NMI_Handler+0x4>

08002b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b56:	e7fe      	b.n	8002b56 <HardFault_Handler+0x4>

08002b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <MemManage_Handler+0x4>

08002b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b62:	e7fe      	b.n	8002b62 <BusFault_Handler+0x4>

08002b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <UsageFault_Handler+0x4>

08002b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b98:	f000 f96a 	bl	8002e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <TIM6_DAC_IRQHandler+0x10>)
 8002ba6:	f002 fdcb 	bl	8005740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200004ac 	.word	0x200004ac

08002bb4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <DMA2_Stream0_IRQHandler+0x10>)
 8002bba:	f000 ffbd 	bl	8003b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000280 	.word	0x20000280

08002bc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return 1;
 8002bcc:	2301      	movs	r3, #1
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <_kill>:

int _kill(int pid, int sig)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002be2:	f003 fdb9 	bl	8006758 <__errno>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2216      	movs	r2, #22
 8002bea:	601a      	str	r2, [r3, #0]
  return -1;
 8002bec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_exit>:

void _exit (int status)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c00:	f04f 31ff 	mov.w	r1, #4294967295
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff ffe7 	bl	8002bd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c0a:	e7fe      	b.n	8002c0a <_exit+0x12>

08002c0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	e00a      	b.n	8002c34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c1e:	f3af 8000 	nop.w
 8002c22:	4601      	mov	r1, r0
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	60ba      	str	r2, [r7, #8]
 8002c2a:	b2ca      	uxtb	r2, r1
 8002c2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	3301      	adds	r3, #1
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	dbf0      	blt.n	8002c1e <_read+0x12>
  }

  return len;
 8002c3c:	687b      	ldr	r3, [r7, #4]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	e009      	b.n	8002c6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	60ba      	str	r2, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	dbf1      	blt.n	8002c58 <_write+0x12>
  }
  return len;
 8002c74:	687b      	ldr	r3, [r7, #4]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <_close>:

int _close(int file)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ca6:	605a      	str	r2, [r3, #4]
  return 0;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <_isatty>:

int _isatty(int file)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cbe:	2301      	movs	r3, #1
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf0:	4a14      	ldr	r2, [pc, #80]	; (8002d44 <_sbrk+0x5c>)
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <_sbrk+0x60>)
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cfc:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <_sbrk+0x64>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <_sbrk+0x64>)
 8002d06:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <_sbrk+0x68>)
 8002d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <_sbrk+0x64>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d207      	bcs.n	8002d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d18:	f003 fd1e 	bl	8006758 <__errno>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	220c      	movs	r2, #12
 8002d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
 8002d26:	e009      	b.n	8002d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <_sbrk+0x64>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <_sbrk+0x64>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <_sbrk+0x64>)
 8002d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20020000 	.word	0x20020000
 8002d48:	00000400 	.word	0x00000400
 8002d4c:	20000608 	.word	0x20000608
 8002d50:	20000620 	.word	0x20000620

08002d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <SystemInit+0x20>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	4a05      	ldr	r2, [pc, #20]	; (8002d74 <SystemInit+0x20>)
 8002d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002db0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d7c:	480d      	ldr	r0, [pc, #52]	; (8002db4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d7e:	490e      	ldr	r1, [pc, #56]	; (8002db8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d80:	4a0e      	ldr	r2, [pc, #56]	; (8002dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d84:	e002      	b.n	8002d8c <LoopCopyDataInit>

08002d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d8a:	3304      	adds	r3, #4

08002d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d90:	d3f9      	bcc.n	8002d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d92:	4a0b      	ldr	r2, [pc, #44]	; (8002dc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d94:	4c0b      	ldr	r4, [pc, #44]	; (8002dc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d98:	e001      	b.n	8002d9e <LoopFillZerobss>

08002d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d9c:	3204      	adds	r2, #4

08002d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da0:	d3fb      	bcc.n	8002d9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002da2:	f7ff ffd7 	bl	8002d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002da6:	f003 fcdd 	bl	8006764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002daa:	f7fe fbe1 	bl	8001570 <main>
  bx  lr    
 8002dae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002dbc:	0800960c 	.word	0x0800960c
  ldr r2, =_sbss
 8002dc0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002dc4:	20000620 	.word	0x20000620

08002dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dc8:	e7fe      	b.n	8002dc8 <ADC_IRQHandler>
	...

08002dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <HAL_Init+0x40>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a0d      	ldr	r2, [pc, #52]	; (8002e0c <HAL_Init+0x40>)
 8002dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_Init+0x40>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <HAL_Init+0x40>)
 8002de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <HAL_Init+0x40>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a07      	ldr	r2, [pc, #28]	; (8002e0c <HAL_Init+0x40>)
 8002dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df4:	2003      	movs	r0, #3
 8002df6:	f000 fd57 	bl	80038a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dfa:	200f      	movs	r0, #15
 8002dfc:	f000 f808 	bl	8002e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e00:	f7ff fb78 	bl	80024f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023c00 	.word	0x40023c00

08002e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_InitTick+0x54>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_InitTick+0x58>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4619      	mov	r1, r3
 8002e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fd6f 	bl	8003912 <HAL_SYSTICK_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e00e      	b.n	8002e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b0f      	cmp	r3, #15
 8002e42:	d80a      	bhi.n	8002e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e44:	2200      	movs	r2, #0
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	f000 fd37 	bl	80038be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e50:	4a06      	ldr	r2, [pc, #24]	; (8002e6c <HAL_InitTick+0x5c>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000034 	.word	0x20000034
 8002e68:	2000003c 	.word	0x2000003c
 8002e6c:	20000038 	.word	0x20000038

08002e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_IncTick+0x20>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_IncTick+0x24>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4413      	add	r3, r2
 8002e80:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <HAL_IncTick+0x24>)
 8002e82:	6013      	str	r3, [r2, #0]
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	2000003c 	.word	0x2000003c
 8002e94:	2000060c 	.word	0x2000060c

08002e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_GetTick+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	2000060c 	.word	0x2000060c

08002eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb8:	f7ff ffee 	bl	8002e98 <HAL_GetTick>
 8002ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d005      	beq.n	8002ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <HAL_Delay+0x44>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ed6:	bf00      	nop
 8002ed8:	f7ff ffde 	bl	8002e98 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d8f7      	bhi.n	8002ed8 <HAL_Delay+0x28>
  {
  }
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	2000003c 	.word	0x2000003c

08002ef8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e033      	b.n	8002f76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff fb14 	bl	8002544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d118      	bne.n	8002f68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f3e:	f023 0302 	bic.w	r3, r3, #2
 8002f42:	f043 0202 	orr.w	r2, r3, #2
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fa5e 	bl	800340c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f023 0303 	bic.w	r3, r3, #3
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
 8002f66:	e001      	b.n	8002f6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_Start_DMA+0x1e>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e0e9      	b.n	8003172 <HAL_ADC_Start_DMA+0x1f2>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d018      	beq.n	8002fe6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fc4:	4b6d      	ldr	r3, [pc, #436]	; (800317c <HAL_ADC_Start_DMA+0x1fc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a6d      	ldr	r2, [pc, #436]	; (8003180 <HAL_ADC_Start_DMA+0x200>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0c9a      	lsrs	r2, r3, #18
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002fd8:	e002      	b.n	8002fe0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f9      	bne.n	8002fda <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff4:	d107      	bne.n	8003006 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003004:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	f040 80a1 	bne.w	8003158 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800301e:	f023 0301 	bic.w	r3, r3, #1
 8003022:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003040:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003054:	d106      	bne.n	8003064 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f023 0206 	bic.w	r2, r3, #6
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
 8003062:	e002      	b.n	800306a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003072:	4b44      	ldr	r3, [pc, #272]	; (8003184 <HAL_ADC_Start_DMA+0x204>)
 8003074:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	4a43      	ldr	r2, [pc, #268]	; (8003188 <HAL_ADC_Start_DMA+0x208>)
 800307c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	4a42      	ldr	r2, [pc, #264]	; (800318c <HAL_ADC_Start_DMA+0x20c>)
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308a:	4a41      	ldr	r2, [pc, #260]	; (8003190 <HAL_ADC_Start_DMA+0x210>)
 800308c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003096:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80030a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	334c      	adds	r3, #76	; 0x4c
 80030c2:	4619      	mov	r1, r3
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f000 fcde 	bl	8003a88 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d12a      	bne.n	800312e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a2d      	ldr	r2, [pc, #180]	; (8003194 <HAL_ADC_Start_DMA+0x214>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d015      	beq.n	800310e <HAL_ADC_Start_DMA+0x18e>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a2c      	ldr	r2, [pc, #176]	; (8003198 <HAL_ADC_Start_DMA+0x218>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d105      	bne.n	80030f8 <HAL_ADC_Start_DMA+0x178>
 80030ec:	4b25      	ldr	r3, [pc, #148]	; (8003184 <HAL_ADC_Start_DMA+0x204>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a27      	ldr	r2, [pc, #156]	; (800319c <HAL_ADC_Start_DMA+0x21c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d136      	bne.n	8003170 <HAL_ADC_Start_DMA+0x1f0>
 8003102:	4b20      	ldr	r3, [pc, #128]	; (8003184 <HAL_ADC_Start_DMA+0x204>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	2b00      	cmp	r3, #0
 800310c:	d130      	bne.n	8003170 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d129      	bne.n	8003170 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	e020      	b.n	8003170 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <HAL_ADC_Start_DMA+0x214>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d11b      	bne.n	8003170 <HAL_ADC_Start_DMA+0x1f0>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d114      	bne.n	8003170 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003154:	609a      	str	r2, [r3, #8]
 8003156:	e00b      	b.n	8003170 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f043 0210 	orr.w	r2, r3, #16
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	f043 0201 	orr.w	r2, r3, #1
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000034 	.word	0x20000034
 8003180:	431bde83 	.word	0x431bde83
 8003184:	40012300 	.word	0x40012300
 8003188:	08003605 	.word	0x08003605
 800318c:	080036bf 	.word	0x080036bf
 8003190:	080036db 	.word	0x080036db
 8003194:	40012000 	.word	0x40012000
 8003198:	40012100 	.word	0x40012100
 800319c:	40012200 	.word	0x40012200

080031a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x1c>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e105      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x228>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b09      	cmp	r3, #9
 80031f2:	d925      	bls.n	8003240 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68d9      	ldr	r1, [r3, #12]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	3b1e      	subs	r3, #30
 800320a:	2207      	movs	r2, #7
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43da      	mvns	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	400a      	ands	r2, r1
 8003218:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68d9      	ldr	r1, [r3, #12]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	4618      	mov	r0, r3
 800322c:	4603      	mov	r3, r0
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4403      	add	r3, r0
 8003232:	3b1e      	subs	r3, #30
 8003234:	409a      	lsls	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	e022      	b.n	8003286 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6919      	ldr	r1, [r3, #16]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	4613      	mov	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4413      	add	r3, r2
 8003254:	2207      	movs	r2, #7
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43da      	mvns	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	400a      	ands	r2, r1
 8003262:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6919      	ldr	r1, [r3, #16]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	4618      	mov	r0, r3
 8003276:	4603      	mov	r3, r0
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4403      	add	r3, r0
 800327c:	409a      	lsls	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b06      	cmp	r3, #6
 800328c:	d824      	bhi.n	80032d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	3b05      	subs	r3, #5
 80032a0:	221f      	movs	r2, #31
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43da      	mvns	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	400a      	ands	r2, r1
 80032ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	4618      	mov	r0, r3
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	3b05      	subs	r3, #5
 80032ca:	fa00 f203 	lsl.w	r2, r0, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	635a      	str	r2, [r3, #52]	; 0x34
 80032d6:	e04c      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b0c      	cmp	r3, #12
 80032de:	d824      	bhi.n	800332a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	3b23      	subs	r3, #35	; 0x23
 80032f2:	221f      	movs	r2, #31
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43da      	mvns	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	400a      	ands	r2, r1
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	4618      	mov	r0, r3
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	3b23      	subs	r3, #35	; 0x23
 800331c:	fa00 f203 	lsl.w	r2, r0, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
 8003328:	e023      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	3b41      	subs	r3, #65	; 0x41
 800333c:	221f      	movs	r2, #31
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43da      	mvns	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	400a      	ands	r2, r1
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	4618      	mov	r0, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	3b41      	subs	r3, #65	; 0x41
 8003366:	fa00 f203 	lsl.w	r2, r0, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003372:	4b22      	ldr	r3, [pc, #136]	; (80033fc <HAL_ADC_ConfigChannel+0x234>)
 8003374:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a21      	ldr	r2, [pc, #132]	; (8003400 <HAL_ADC_ConfigChannel+0x238>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d109      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x1cc>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b12      	cmp	r3, #18
 8003386:	d105      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a19      	ldr	r2, [pc, #100]	; (8003400 <HAL_ADC_ConfigChannel+0x238>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d123      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x21e>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b10      	cmp	r3, #16
 80033a4:	d003      	beq.n	80033ae <HAL_ADC_ConfigChannel+0x1e6>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b11      	cmp	r3, #17
 80033ac:	d11b      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d111      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_ADC_ConfigChannel+0x23c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a10      	ldr	r2, [pc, #64]	; (8003408 <HAL_ADC_ConfigChannel+0x240>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	0c9a      	lsrs	r2, r3, #18
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033d8:	e002      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	3b01      	subs	r3, #1
 80033de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f9      	bne.n	80033da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40012300 	.word	0x40012300
 8003400:	40012000 	.word	0x40012000
 8003404:	20000034 	.word	0x20000034
 8003408:	431bde83 	.word	0x431bde83

0800340c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003414:	4b79      	ldr	r3, [pc, #484]	; (80035fc <ADC_Init+0x1f0>)
 8003416:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	431a      	orrs	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003440:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6859      	ldr	r1, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	021a      	lsls	r2, r3, #8
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003464:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6859      	ldr	r1, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003486:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6899      	ldr	r1, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	4a58      	ldr	r2, [pc, #352]	; (8003600 <ADC_Init+0x1f4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d022      	beq.n	80034ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6899      	ldr	r1, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6899      	ldr	r1, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	e00f      	b.n	800350a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003508:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0202 	bic.w	r2, r2, #2
 8003518:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6899      	ldr	r1, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	7e1b      	ldrb	r3, [r3, #24]
 8003524:	005a      	lsls	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01b      	beq.n	8003570 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003546:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003556:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6859      	ldr	r1, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	3b01      	subs	r3, #1
 8003564:	035a      	lsls	r2, r3, #13
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	e007      	b.n	8003580 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800357e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	3b01      	subs	r3, #1
 800359c:	051a      	lsls	r2, r3, #20
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6899      	ldr	r1, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035c2:	025a      	lsls	r2, r3, #9
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6899      	ldr	r1, [r3, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	029a      	lsls	r2, r3, #10
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	40012300 	.word	0x40012300
 8003600:	0f000001 	.word	0x0f000001

08003604 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800361a:	2b00      	cmp	r3, #0
 800361c:	d13c      	bne.n	8003698 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d12b      	bne.n	8003690 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800363c:	2b00      	cmp	r3, #0
 800363e:	d127      	bne.n	8003690 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800364a:	2b00      	cmp	r3, #0
 800364c:	d006      	beq.n	800365c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003658:	2b00      	cmp	r3, #0
 800365a:	d119      	bne.n	8003690 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0220 	bic.w	r2, r2, #32
 800366a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7fd ff61 	bl	8001558 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003696:	e00e      	b.n	80036b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7ff fd85 	bl	80031b4 <HAL_ADC_ErrorCallback>
}
 80036aa:	e004      	b.n	80036b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	4798      	blx	r3
}
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f7ff fd67 	bl	80031a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2240      	movs	r2, #64	; 0x40
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f043 0204 	orr.w	r2, r3, #4
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7ff fd5a 	bl	80031b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003724:	4013      	ands	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800373a:	4a04      	ldr	r2, [pc, #16]	; (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	60d3      	str	r3, [r2, #12]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <__NVIC_GetPriorityGrouping+0x18>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f003 0307 	and.w	r3, r3, #7
}
 800375e:	4618      	mov	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	2b00      	cmp	r3, #0
 800377c:	db0b      	blt.n	8003796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	f003 021f 	and.w	r2, r3, #31
 8003784:	4907      	ldr	r1, [pc, #28]	; (80037a4 <__NVIC_EnableIRQ+0x38>)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	2001      	movs	r0, #1
 800378e:	fa00 f202 	lsl.w	r2, r0, r2
 8003792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000e100 	.word	0xe000e100

080037a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	db0a      	blt.n	80037d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	490c      	ldr	r1, [pc, #48]	; (80037f4 <__NVIC_SetPriority+0x4c>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	0112      	lsls	r2, r2, #4
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	440b      	add	r3, r1
 80037cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d0:	e00a      	b.n	80037e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4908      	ldr	r1, [pc, #32]	; (80037f8 <__NVIC_SetPriority+0x50>)
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	3b04      	subs	r3, #4
 80037e0:	0112      	lsls	r2, r2, #4
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	440b      	add	r3, r1
 80037e6:	761a      	strb	r2, [r3, #24]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000e100 	.word	0xe000e100
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	; 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f1c3 0307 	rsb	r3, r3, #7
 8003816:	2b04      	cmp	r3, #4
 8003818:	bf28      	it	cs
 800381a:	2304      	movcs	r3, #4
 800381c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3304      	adds	r3, #4
 8003822:	2b06      	cmp	r3, #6
 8003824:	d902      	bls.n	800382c <NVIC_EncodePriority+0x30>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3b03      	subs	r3, #3
 800382a:	e000      	b.n	800382e <NVIC_EncodePriority+0x32>
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003830:	f04f 32ff 	mov.w	r2, #4294967295
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	401a      	ands	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003844:	f04f 31ff 	mov.w	r1, #4294967295
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	43d9      	mvns	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	4313      	orrs	r3, r2
         );
}
 8003856:	4618      	mov	r0, r3
 8003858:	3724      	adds	r7, #36	; 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3b01      	subs	r3, #1
 8003870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003874:	d301      	bcc.n	800387a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003876:	2301      	movs	r3, #1
 8003878:	e00f      	b.n	800389a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800387a:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <SysTick_Config+0x40>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003882:	210f      	movs	r1, #15
 8003884:	f04f 30ff 	mov.w	r0, #4294967295
 8003888:	f7ff ff8e 	bl	80037a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <SysTick_Config+0x40>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003892:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <SysTick_Config+0x40>)
 8003894:	2207      	movs	r2, #7
 8003896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	e000e010 	.word	0xe000e010

080038a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff29 	bl	8003708 <__NVIC_SetPriorityGrouping>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038be:	b580      	push	{r7, lr}
 80038c0:	b086      	sub	sp, #24
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	4603      	mov	r3, r0
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038d0:	f7ff ff3e 	bl	8003750 <__NVIC_GetPriorityGrouping>
 80038d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	6978      	ldr	r0, [r7, #20]
 80038dc:	f7ff ff8e 	bl	80037fc <NVIC_EncodePriority>
 80038e0:	4602      	mov	r2, r0
 80038e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff ff5d 	bl	80037a8 <__NVIC_SetPriority>
}
 80038ee:	bf00      	nop
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	4603      	mov	r3, r0
 80038fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff31 	bl	800376c <__NVIC_EnableIRQ>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ffa2 	bl	8003864 <SysTick_Config>
 8003920:	4603      	mov	r3, r0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003938:	f7ff faae 	bl	8002e98 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e099      	b.n	8003a7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003968:	e00f      	b.n	800398a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800396a:	f7ff fa95 	bl	8002e98 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b05      	cmp	r3, #5
 8003976:	d908      	bls.n	800398a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2203      	movs	r2, #3
 8003982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e078      	b.n	8003a7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e8      	bne.n	800396a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4b38      	ldr	r3, [pc, #224]	; (8003a84 <HAL_DMA_Init+0x158>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d107      	bne.n	80039f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	4313      	orrs	r3, r2
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f023 0307 	bic.w	r3, r3, #7
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d117      	bne.n	8003a4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00e      	beq.n	8003a4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fa6f 	bl	8003f14 <DMA_CheckFifoParam>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2240      	movs	r2, #64	; 0x40
 8003a40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e016      	b.n	8003a7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fa26 	bl	8003ea8 <DMA_CalcBaseAndBitshift>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	223f      	movs	r2, #63	; 0x3f
 8003a66:	409a      	lsls	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	f010803f 	.word	0xf010803f

08003a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_DMA_Start_IT+0x26>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e040      	b.n	8003b30 <HAL_DMA_Start_IT+0xa8>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d12f      	bne.n	8003b22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f9b8 	bl	8003e4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	223f      	movs	r2, #63	; 0x3f
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0216 	orr.w	r2, r2, #22
 8003af6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0208 	orr.w	r2, r2, #8
 8003b0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	e005      	b.n	8003b2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b44:	4b8e      	ldr	r3, [pc, #568]	; (8003d80 <HAL_DMA_IRQHandler+0x248>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a8e      	ldr	r2, [pc, #568]	; (8003d84 <HAL_DMA_IRQHandler+0x24c>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	0a9b      	lsrs	r3, r3, #10
 8003b50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	2208      	movs	r2, #8
 8003b64:	409a      	lsls	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01a      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d013      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0204 	bic.w	r2, r2, #4
 8003b8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b90:	2208      	movs	r2, #8
 8003b92:	409a      	lsls	r2, r3
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9c:	f043 0201 	orr.w	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	2201      	movs	r2, #1
 8003baa:	409a      	lsls	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d012      	beq.n	8003bda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00b      	beq.n	8003bda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd2:	f043 0202 	orr.w	r2, r3, #2
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	2204      	movs	r2, #4
 8003be0:	409a      	lsls	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d012      	beq.n	8003c10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00b      	beq.n	8003c10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	f043 0204 	orr.w	r2, r3, #4
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c14:	2210      	movs	r2, #16
 8003c16:	409a      	lsls	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d043      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d03c      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c32:	2210      	movs	r2, #16
 8003c34:	409a      	lsls	r2, r3
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d018      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d108      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d024      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	4798      	blx	r3
 8003c66:	e01f      	b.n	8003ca8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01b      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	4798      	blx	r3
 8003c78:	e016      	b.n	8003ca8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d107      	bne.n	8003c98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0208 	bic.w	r2, r2, #8
 8003c96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cac:	2220      	movs	r2, #32
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 808f 	beq.w	8003dd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8087 	beq.w	8003dd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cce:	2220      	movs	r2, #32
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b05      	cmp	r3, #5
 8003ce0:	d136      	bne.n	8003d50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0216 	bic.w	r2, r2, #22
 8003cf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d103      	bne.n	8003d12 <HAL_DMA_IRQHandler+0x1da>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0208 	bic.w	r2, r2, #8
 8003d20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d26:	223f      	movs	r2, #63	; 0x3f
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d07e      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	4798      	blx	r3
        }
        return;
 8003d4e:	e079      	b.n	8003e44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d01d      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10d      	bne.n	8003d88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d031      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
 8003d7c:	e02c      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x2a0>
 8003d7e:	bf00      	nop
 8003d80:	20000034 	.word	0x20000034
 8003d84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d023      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4798      	blx	r3
 8003d98:	e01e      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10f      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0210 	bic.w	r2, r2, #16
 8003db6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d032      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d022      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2205      	movs	r2, #5
 8003df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0201 	bic.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	3301      	adds	r3, #1
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d307      	bcc.n	8003e20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f2      	bne.n	8003e04 <HAL_DMA_IRQHandler+0x2cc>
 8003e1e:	e000      	b.n	8003e22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	4798      	blx	r3
 8003e42:	e000      	b.n	8003e46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e44:	bf00      	nop
    }
  }
}
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b40      	cmp	r3, #64	; 0x40
 8003e78:	d108      	bne.n	8003e8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e8a:	e007      	b.n	8003e9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	60da      	str	r2, [r3, #12]
}
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	3b10      	subs	r3, #16
 8003eb8:	4a14      	ldr	r2, [pc, #80]	; (8003f0c <DMA_CalcBaseAndBitshift+0x64>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ec2:	4a13      	ldr	r2, [pc, #76]	; (8003f10 <DMA_CalcBaseAndBitshift+0x68>)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d909      	bls.n	8003eea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ede:	f023 0303 	bic.w	r3, r3, #3
 8003ee2:	1d1a      	adds	r2, r3, #4
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ee8:	e007      	b.n	8003efa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ef2:	f023 0303 	bic.w	r3, r3, #3
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	aaaaaaab 	.word	0xaaaaaaab
 8003f10:	08009218 	.word	0x08009218

08003f14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d11f      	bne.n	8003f6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d856      	bhi.n	8003fe2 <DMA_CheckFifoParam+0xce>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <DMA_CheckFifoParam+0x28>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f4d 	.word	0x08003f4d
 8003f40:	08003f5f 	.word	0x08003f5f
 8003f44:	08003f4d 	.word	0x08003f4d
 8003f48:	08003fe3 	.word	0x08003fe3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d046      	beq.n	8003fe6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f5c:	e043      	b.n	8003fe6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f66:	d140      	bne.n	8003fea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f6c:	e03d      	b.n	8003fea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f76:	d121      	bne.n	8003fbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d837      	bhi.n	8003fee <DMA_CheckFifoParam+0xda>
 8003f7e:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <DMA_CheckFifoParam+0x70>)
 8003f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f84:	08003f95 	.word	0x08003f95
 8003f88:	08003f9b 	.word	0x08003f9b
 8003f8c:	08003f95 	.word	0x08003f95
 8003f90:	08003fad 	.word	0x08003fad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
      break;
 8003f98:	e030      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d025      	beq.n	8003ff2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003faa:	e022      	b.n	8003ff2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fb4:	d11f      	bne.n	8003ff6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fba:	e01c      	b.n	8003ff6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d903      	bls.n	8003fca <DMA_CheckFifoParam+0xb6>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d003      	beq.n	8003fd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fc8:	e018      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8003fce:	e015      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00e      	beq.n	8003ffa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe0:	e00b      	b.n	8003ffa <DMA_CheckFifoParam+0xe6>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e00a      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e008      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
      break;
 8003fea:	bf00      	nop
 8003fec:	e006      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
      break;
 8003fee:	bf00      	nop
 8003ff0:	e004      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
      break;
 8003ff2:	bf00      	nop
 8003ff4:	e002      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
      break;   
 8003ff6:	bf00      	nop
 8003ff8:	e000      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
      break;
 8003ffa:	bf00      	nop
    }
  } 
  
  return status; 
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop

0800400c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800400c:	b480      	push	{r7}
 800400e:	b089      	sub	sp, #36	; 0x24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004016:	2300      	movs	r3, #0
 8004018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800401e:	2300      	movs	r3, #0
 8004020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	e16b      	b.n	8004300 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004028:	2201      	movs	r2, #1
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4013      	ands	r3, r2
 800403a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	429a      	cmp	r2, r3
 8004042:	f040 815a 	bne.w	80042fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b01      	cmp	r3, #1
 8004050:	d005      	beq.n	800405e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800405a:	2b02      	cmp	r3, #2
 800405c:	d130      	bne.n	80040c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	2203      	movs	r2, #3
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43db      	mvns	r3, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4013      	ands	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004094:	2201      	movs	r2, #1
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4013      	ands	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	f003 0201 	and.w	r2, r3, #1
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 0303 	and.w	r3, r3, #3
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d017      	beq.n	80040fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	2203      	movs	r2, #3
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d123      	bne.n	8004150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	08da      	lsrs	r2, r3, #3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3208      	adds	r2, #8
 8004110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	220f      	movs	r2, #15
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	08da      	lsrs	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3208      	adds	r2, #8
 800414a:	69b9      	ldr	r1, [r7, #24]
 800414c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	2203      	movs	r2, #3
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43db      	mvns	r3, r3
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4013      	ands	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 0203 	and.w	r2, r3, #3
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	4313      	orrs	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 80b4 	beq.w	80042fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	4b60      	ldr	r3, [pc, #384]	; (8004318 <HAL_GPIO_Init+0x30c>)
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	4a5f      	ldr	r2, [pc, #380]	; (8004318 <HAL_GPIO_Init+0x30c>)
 800419c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a0:	6453      	str	r3, [r2, #68]	; 0x44
 80041a2:	4b5d      	ldr	r3, [pc, #372]	; (8004318 <HAL_GPIO_Init+0x30c>)
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041ae:	4a5b      	ldr	r2, [pc, #364]	; (800431c <HAL_GPIO_Init+0x310>)
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	3302      	adds	r3, #2
 80041b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	220f      	movs	r2, #15
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4013      	ands	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a52      	ldr	r2, [pc, #328]	; (8004320 <HAL_GPIO_Init+0x314>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d02b      	beq.n	8004232 <HAL_GPIO_Init+0x226>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a51      	ldr	r2, [pc, #324]	; (8004324 <HAL_GPIO_Init+0x318>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d025      	beq.n	800422e <HAL_GPIO_Init+0x222>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a50      	ldr	r2, [pc, #320]	; (8004328 <HAL_GPIO_Init+0x31c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01f      	beq.n	800422a <HAL_GPIO_Init+0x21e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a4f      	ldr	r2, [pc, #316]	; (800432c <HAL_GPIO_Init+0x320>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d019      	beq.n	8004226 <HAL_GPIO_Init+0x21a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a4e      	ldr	r2, [pc, #312]	; (8004330 <HAL_GPIO_Init+0x324>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <HAL_GPIO_Init+0x216>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a4d      	ldr	r2, [pc, #308]	; (8004334 <HAL_GPIO_Init+0x328>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00d      	beq.n	800421e <HAL_GPIO_Init+0x212>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a4c      	ldr	r2, [pc, #304]	; (8004338 <HAL_GPIO_Init+0x32c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d007      	beq.n	800421a <HAL_GPIO_Init+0x20e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a4b      	ldr	r2, [pc, #300]	; (800433c <HAL_GPIO_Init+0x330>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <HAL_GPIO_Init+0x20a>
 8004212:	2307      	movs	r3, #7
 8004214:	e00e      	b.n	8004234 <HAL_GPIO_Init+0x228>
 8004216:	2308      	movs	r3, #8
 8004218:	e00c      	b.n	8004234 <HAL_GPIO_Init+0x228>
 800421a:	2306      	movs	r3, #6
 800421c:	e00a      	b.n	8004234 <HAL_GPIO_Init+0x228>
 800421e:	2305      	movs	r3, #5
 8004220:	e008      	b.n	8004234 <HAL_GPIO_Init+0x228>
 8004222:	2304      	movs	r3, #4
 8004224:	e006      	b.n	8004234 <HAL_GPIO_Init+0x228>
 8004226:	2303      	movs	r3, #3
 8004228:	e004      	b.n	8004234 <HAL_GPIO_Init+0x228>
 800422a:	2302      	movs	r3, #2
 800422c:	e002      	b.n	8004234 <HAL_GPIO_Init+0x228>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <HAL_GPIO_Init+0x228>
 8004232:	2300      	movs	r3, #0
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	f002 0203 	and.w	r2, r2, #3
 800423a:	0092      	lsls	r2, r2, #2
 800423c:	4093      	lsls	r3, r2
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4313      	orrs	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004244:	4935      	ldr	r1, [pc, #212]	; (800431c <HAL_GPIO_Init+0x310>)
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	3302      	adds	r3, #2
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004252:	4b3b      	ldr	r3, [pc, #236]	; (8004340 <HAL_GPIO_Init+0x334>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004276:	4a32      	ldr	r2, [pc, #200]	; (8004340 <HAL_GPIO_Init+0x334>)
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800427c:	4b30      	ldr	r3, [pc, #192]	; (8004340 <HAL_GPIO_Init+0x334>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	43db      	mvns	r3, r3
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4013      	ands	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042a0:	4a27      	ldr	r2, [pc, #156]	; (8004340 <HAL_GPIO_Init+0x334>)
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042a6:	4b26      	ldr	r3, [pc, #152]	; (8004340 <HAL_GPIO_Init+0x334>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	43db      	mvns	r3, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4013      	ands	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042ca:	4a1d      	ldr	r2, [pc, #116]	; (8004340 <HAL_GPIO_Init+0x334>)
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042d0:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <HAL_GPIO_Init+0x334>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	43db      	mvns	r3, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4013      	ands	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042f4:	4a12      	ldr	r2, [pc, #72]	; (8004340 <HAL_GPIO_Init+0x334>)
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	3301      	adds	r3, #1
 80042fe:	61fb      	str	r3, [r7, #28]
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	2b0f      	cmp	r3, #15
 8004304:	f67f ae90 	bls.w	8004028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	3724      	adds	r7, #36	; 0x24
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40023800 	.word	0x40023800
 800431c:	40013800 	.word	0x40013800
 8004320:	40020000 	.word	0x40020000
 8004324:	40020400 	.word	0x40020400
 8004328:	40020800 	.word	0x40020800
 800432c:	40020c00 	.word	0x40020c00
 8004330:	40021000 	.word	0x40021000
 8004334:	40021400 	.word	0x40021400
 8004338:	40021800 	.word	0x40021800
 800433c:	40021c00 	.word	0x40021c00
 8004340:	40013c00 	.word	0x40013c00

08004344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	887b      	ldrh	r3, [r7, #2]
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
 8004360:	e001      	b.n	8004366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004366:	7bfb      	ldrb	r3, [r7, #15]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	807b      	strh	r3, [r7, #2]
 8004380:	4613      	mov	r3, r2
 8004382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004384:	787b      	ldrb	r3, [r7, #1]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800438a:	887a      	ldrh	r2, [r7, #2]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004390:	e003      	b.n	800439a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004392:	887b      	ldrh	r3, [r7, #2]
 8004394:	041a      	lsls	r2, r3, #16
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	619a      	str	r2, [r3, #24]
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e12b      	b.n	8004612 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fe f968 	bl	80026a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2224      	movs	r2, #36	; 0x24
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0201 	bic.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800440a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800440c:	f000 fd40 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 8004410:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	4a81      	ldr	r2, [pc, #516]	; (800461c <HAL_I2C_Init+0x274>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d807      	bhi.n	800442c <HAL_I2C_Init+0x84>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4a80      	ldr	r2, [pc, #512]	; (8004620 <HAL_I2C_Init+0x278>)
 8004420:	4293      	cmp	r3, r2
 8004422:	bf94      	ite	ls
 8004424:	2301      	movls	r3, #1
 8004426:	2300      	movhi	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	e006      	b.n	800443a <HAL_I2C_Init+0x92>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4a7d      	ldr	r2, [pc, #500]	; (8004624 <HAL_I2C_Init+0x27c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	bf94      	ite	ls
 8004434:	2301      	movls	r3, #1
 8004436:	2300      	movhi	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e0e7      	b.n	8004612 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4a78      	ldr	r2, [pc, #480]	; (8004628 <HAL_I2C_Init+0x280>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	0c9b      	lsrs	r3, r3, #18
 800444c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4a6a      	ldr	r2, [pc, #424]	; (800461c <HAL_I2C_Init+0x274>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d802      	bhi.n	800447c <HAL_I2C_Init+0xd4>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	3301      	adds	r3, #1
 800447a:	e009      	b.n	8004490 <HAL_I2C_Init+0xe8>
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004482:	fb02 f303 	mul.w	r3, r2, r3
 8004486:	4a69      	ldr	r2, [pc, #420]	; (800462c <HAL_I2C_Init+0x284>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	099b      	lsrs	r3, r3, #6
 800448e:	3301      	adds	r3, #1
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	430b      	orrs	r3, r1
 8004496:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	495c      	ldr	r1, [pc, #368]	; (800461c <HAL_I2C_Init+0x274>)
 80044ac:	428b      	cmp	r3, r1
 80044ae:	d819      	bhi.n	80044e4 <HAL_I2C_Init+0x13c>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	1e59      	subs	r1, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80044be:	1c59      	adds	r1, r3, #1
 80044c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044c4:	400b      	ands	r3, r1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_I2C_Init+0x138>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	1e59      	subs	r1, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80044d8:	3301      	adds	r3, #1
 80044da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044de:	e051      	b.n	8004584 <HAL_I2C_Init+0x1dc>
 80044e0:	2304      	movs	r3, #4
 80044e2:	e04f      	b.n	8004584 <HAL_I2C_Init+0x1dc>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d111      	bne.n	8004510 <HAL_I2C_Init+0x168>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1e58      	subs	r0, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6859      	ldr	r1, [r3, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	440b      	add	r3, r1
 80044fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fe:	3301      	adds	r3, #1
 8004500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004504:	2b00      	cmp	r3, #0
 8004506:	bf0c      	ite	eq
 8004508:	2301      	moveq	r3, #1
 800450a:	2300      	movne	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	e012      	b.n	8004536 <HAL_I2C_Init+0x18e>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	1e58      	subs	r0, r3, #1
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6859      	ldr	r1, [r3, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	0099      	lsls	r1, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	fbb0 f3f3 	udiv	r3, r0, r3
 8004526:	3301      	adds	r3, #1
 8004528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_I2C_Init+0x196>
 800453a:	2301      	movs	r3, #1
 800453c:	e022      	b.n	8004584 <HAL_I2C_Init+0x1dc>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10e      	bne.n	8004564 <HAL_I2C_Init+0x1bc>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1e58      	subs	r0, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6859      	ldr	r1, [r3, #4]
 800454e:	460b      	mov	r3, r1
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	440b      	add	r3, r1
 8004554:	fbb0 f3f3 	udiv	r3, r0, r3
 8004558:	3301      	adds	r3, #1
 800455a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800455e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004562:	e00f      	b.n	8004584 <HAL_I2C_Init+0x1dc>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1e58      	subs	r0, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6859      	ldr	r1, [r3, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	0099      	lsls	r1, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	fbb0 f3f3 	udiv	r3, r0, r3
 800457a:	3301      	adds	r3, #1
 800457c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	6809      	ldr	r1, [r1, #0]
 8004588:	4313      	orrs	r3, r2
 800458a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69da      	ldr	r2, [r3, #28]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6911      	ldr	r1, [r2, #16]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	68d2      	ldr	r2, [r2, #12]
 80045be:	4311      	orrs	r1, r2
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	000186a0 	.word	0x000186a0
 8004620:	001e847f 	.word	0x001e847f
 8004624:	003d08ff 	.word	0x003d08ff
 8004628:	431bde83 	.word	0x431bde83
 800462c:	10624dd3 	.word	0x10624dd3

08004630 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e267      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d075      	beq.n	800473a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800464e:	4b88      	ldr	r3, [pc, #544]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 030c 	and.w	r3, r3, #12
 8004656:	2b04      	cmp	r3, #4
 8004658:	d00c      	beq.n	8004674 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800465a:	4b85      	ldr	r3, [pc, #532]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004662:	2b08      	cmp	r3, #8
 8004664:	d112      	bne.n	800468c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004666:	4b82      	ldr	r3, [pc, #520]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004672:	d10b      	bne.n	800468c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004674:	4b7e      	ldr	r3, [pc, #504]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d05b      	beq.n	8004738 <HAL_RCC_OscConfig+0x108>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d157      	bne.n	8004738 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e242      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004694:	d106      	bne.n	80046a4 <HAL_RCC_OscConfig+0x74>
 8004696:	4b76      	ldr	r3, [pc, #472]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a75      	ldr	r2, [pc, #468]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 800469c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e01d      	b.n	80046e0 <HAL_RCC_OscConfig+0xb0>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046ac:	d10c      	bne.n	80046c8 <HAL_RCC_OscConfig+0x98>
 80046ae:	4b70      	ldr	r3, [pc, #448]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a6f      	ldr	r2, [pc, #444]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	4b6d      	ldr	r3, [pc, #436]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a6c      	ldr	r2, [pc, #432]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	e00b      	b.n	80046e0 <HAL_RCC_OscConfig+0xb0>
 80046c8:	4b69      	ldr	r3, [pc, #420]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a68      	ldr	r2, [pc, #416]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	4b66      	ldr	r3, [pc, #408]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a65      	ldr	r2, [pc, #404]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d013      	beq.n	8004710 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e8:	f7fe fbd6 	bl	8002e98 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046f0:	f7fe fbd2 	bl	8002e98 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b64      	cmp	r3, #100	; 0x64
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e207      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004702:	4b5b      	ldr	r3, [pc, #364]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0xc0>
 800470e:	e014      	b.n	800473a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fe fbc2 	bl	8002e98 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004718:	f7fe fbbe 	bl	8002e98 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	; 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e1f3      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472a:	4b51      	ldr	r3, [pc, #324]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0xe8>
 8004736:	e000      	b.n	800473a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d063      	beq.n	800480e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004746:	4b4a      	ldr	r3, [pc, #296]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00b      	beq.n	800476a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004752:	4b47      	ldr	r3, [pc, #284]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800475a:	2b08      	cmp	r3, #8
 800475c:	d11c      	bne.n	8004798 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800475e:	4b44      	ldr	r3, [pc, #272]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d116      	bne.n	8004798 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476a:	4b41      	ldr	r3, [pc, #260]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <HAL_RCC_OscConfig+0x152>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d001      	beq.n	8004782 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e1c7      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004782:	4b3b      	ldr	r3, [pc, #236]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4937      	ldr	r1, [pc, #220]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004792:	4313      	orrs	r3, r2
 8004794:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004796:	e03a      	b.n	800480e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d020      	beq.n	80047e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a0:	4b34      	ldr	r3, [pc, #208]	; (8004874 <HAL_RCC_OscConfig+0x244>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a6:	f7fe fb77 	bl	8002e98 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ae:	f7fe fb73 	bl	8002e98 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e1a8      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c0:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047cc:	4b28      	ldr	r3, [pc, #160]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4925      	ldr	r1, [pc, #148]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	600b      	str	r3, [r1, #0]
 80047e0:	e015      	b.n	800480e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <HAL_RCC_OscConfig+0x244>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e8:	f7fe fb56 	bl	8002e98 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047f0:	f7fe fb52 	bl	8002e98 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e187      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004802:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d036      	beq.n	8004888 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d016      	beq.n	8004850 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004822:	4b15      	ldr	r3, [pc, #84]	; (8004878 <HAL_RCC_OscConfig+0x248>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004828:	f7fe fb36 	bl	8002e98 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004830:	f7fe fb32 	bl	8002e98 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e167      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004842:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x200>
 800484e:	e01b      	b.n	8004888 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004850:	4b09      	ldr	r3, [pc, #36]	; (8004878 <HAL_RCC_OscConfig+0x248>)
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004856:	f7fe fb1f 	bl	8002e98 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800485c:	e00e      	b.n	800487c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800485e:	f7fe fb1b 	bl	8002e98 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d907      	bls.n	800487c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e150      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
 8004870:	40023800 	.word	0x40023800
 8004874:	42470000 	.word	0x42470000
 8004878:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800487c:	4b88      	ldr	r3, [pc, #544]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 800487e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1ea      	bne.n	800485e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8097 	beq.w	80049c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004896:	2300      	movs	r3, #0
 8004898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800489a:	4b81      	ldr	r3, [pc, #516]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10f      	bne.n	80048c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]
 80048aa:	4b7d      	ldr	r3, [pc, #500]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	4a7c      	ldr	r2, [pc, #496]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 80048b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b4:	6413      	str	r3, [r2, #64]	; 0x40
 80048b6:	4b7a      	ldr	r3, [pc, #488]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c2:	2301      	movs	r3, #1
 80048c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c6:	4b77      	ldr	r3, [pc, #476]	; (8004aa4 <HAL_RCC_OscConfig+0x474>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d118      	bne.n	8004904 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048d2:	4b74      	ldr	r3, [pc, #464]	; (8004aa4 <HAL_RCC_OscConfig+0x474>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a73      	ldr	r2, [pc, #460]	; (8004aa4 <HAL_RCC_OscConfig+0x474>)
 80048d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048de:	f7fe fadb 	bl	8002e98 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e6:	f7fe fad7 	bl	8002e98 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e10c      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f8:	4b6a      	ldr	r3, [pc, #424]	; (8004aa4 <HAL_RCC_OscConfig+0x474>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d106      	bne.n	800491a <HAL_RCC_OscConfig+0x2ea>
 800490c:	4b64      	ldr	r3, [pc, #400]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 800490e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004910:	4a63      	ldr	r2, [pc, #396]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	6713      	str	r3, [r2, #112]	; 0x70
 8004918:	e01c      	b.n	8004954 <HAL_RCC_OscConfig+0x324>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b05      	cmp	r3, #5
 8004920:	d10c      	bne.n	800493c <HAL_RCC_OscConfig+0x30c>
 8004922:	4b5f      	ldr	r3, [pc, #380]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	4a5e      	ldr	r2, [pc, #376]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004928:	f043 0304 	orr.w	r3, r3, #4
 800492c:	6713      	str	r3, [r2, #112]	; 0x70
 800492e:	4b5c      	ldr	r3, [pc, #368]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	4a5b      	ldr	r2, [pc, #364]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	6713      	str	r3, [r2, #112]	; 0x70
 800493a:	e00b      	b.n	8004954 <HAL_RCC_OscConfig+0x324>
 800493c:	4b58      	ldr	r3, [pc, #352]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	4a57      	ldr	r2, [pc, #348]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	6713      	str	r3, [r2, #112]	; 0x70
 8004948:	4b55      	ldr	r3, [pc, #340]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	4a54      	ldr	r2, [pc, #336]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 800494e:	f023 0304 	bic.w	r3, r3, #4
 8004952:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d015      	beq.n	8004988 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495c:	f7fe fa9c 	bl	8002e98 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004962:	e00a      	b.n	800497a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004964:	f7fe fa98 	bl	8002e98 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e0cb      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497a:	4b49      	ldr	r3, [pc, #292]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0ee      	beq.n	8004964 <HAL_RCC_OscConfig+0x334>
 8004986:	e014      	b.n	80049b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004988:	f7fe fa86 	bl	8002e98 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004990:	f7fe fa82 	bl	8002e98 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f241 3288 	movw	r2, #5000	; 0x1388
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e0b5      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a6:	4b3e      	ldr	r3, [pc, #248]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1ee      	bne.n	8004990 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d105      	bne.n	80049c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b8:	4b39      	ldr	r3, [pc, #228]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	4a38      	ldr	r2, [pc, #224]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 80049be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 80a1 	beq.w	8004b10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ce:	4b34      	ldr	r3, [pc, #208]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 030c 	and.w	r3, r3, #12
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d05c      	beq.n	8004a94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d141      	bne.n	8004a66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e2:	4b31      	ldr	r3, [pc, #196]	; (8004aa8 <HAL_RCC_OscConfig+0x478>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e8:	f7fe fa56 	bl	8002e98 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f0:	f7fe fa52 	bl	8002e98 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e087      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a02:	4b27      	ldr	r3, [pc, #156]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69da      	ldr	r2, [r3, #28]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	019b      	lsls	r3, r3, #6
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	085b      	lsrs	r3, r3, #1
 8004a26:	3b01      	subs	r3, #1
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	061b      	lsls	r3, r3, #24
 8004a32:	491b      	ldr	r1, [pc, #108]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a38:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <HAL_RCC_OscConfig+0x478>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3e:	f7fe fa2b 	bl	8002e98 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a46:	f7fe fa27 	bl	8002e98 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e05c      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a58:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x416>
 8004a64:	e054      	b.n	8004b10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a66:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <HAL_RCC_OscConfig+0x478>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6c:	f7fe fa14 	bl	8002e98 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a74:	f7fe fa10 	bl	8002e98 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e045      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a86:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x444>
 8004a92:	e03d      	b.n	8004b10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d107      	bne.n	8004aac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e038      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	40007000 	.word	0x40007000
 8004aa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aac:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <HAL_RCC_OscConfig+0x4ec>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d028      	beq.n	8004b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d121      	bne.n	8004b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d11a      	bne.n	8004b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004adc:	4013      	ands	r3, r2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ae2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d111      	bne.n	8004b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	085b      	lsrs	r3, r3, #1
 8004af4:	3b01      	subs	r3, #1
 8004af6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d107      	bne.n	8004b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40023800 	.word	0x40023800

08004b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0cc      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b34:	4b68      	ldr	r3, [pc, #416]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d90c      	bls.n	8004b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b42:	4b65      	ldr	r3, [pc, #404]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b63      	ldr	r3, [pc, #396]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e0b8      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d020      	beq.n	8004baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b74:	4b59      	ldr	r3, [pc, #356]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4a58      	ldr	r2, [pc, #352]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b8c:	4b53      	ldr	r3, [pc, #332]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	4a52      	ldr	r2, [pc, #328]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b98:	4b50      	ldr	r3, [pc, #320]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	494d      	ldr	r1, [pc, #308]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d044      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d107      	bne.n	8004bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bbe:	4b47      	ldr	r3, [pc, #284]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d119      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e07f      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d003      	beq.n	8004bde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d107      	bne.n	8004bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bde:	4b3f      	ldr	r3, [pc, #252]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e06f      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bee:	4b3b      	ldr	r3, [pc, #236]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e067      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bfe:	4b37      	ldr	r3, [pc, #220]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f023 0203 	bic.w	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	4934      	ldr	r1, [pc, #208]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c10:	f7fe f942 	bl	8002e98 <HAL_GetTick>
 8004c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c16:	e00a      	b.n	8004c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c18:	f7fe f93e 	bl	8002e98 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e04f      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2e:	4b2b      	ldr	r3, [pc, #172]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 020c 	and.w	r2, r3, #12
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d1eb      	bne.n	8004c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c40:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d20c      	bcs.n	8004c68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c56:	4b20      	ldr	r3, [pc, #128]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e032      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c74:	4b19      	ldr	r3, [pc, #100]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4916      	ldr	r1, [pc, #88]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c92:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	490e      	ldr	r1, [pc, #56]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ca6:	f000 f821 	bl	8004cec <HAL_RCC_GetSysClockFreq>
 8004caa:	4602      	mov	r2, r0
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	490a      	ldr	r1, [pc, #40]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb8:	5ccb      	ldrb	r3, [r1, r3]
 8004cba:	fa22 f303 	lsr.w	r3, r2, r3
 8004cbe:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cc2:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe f8a2 	bl	8002e10 <HAL_InitTick>

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40023c00 	.word	0x40023c00
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	08009200 	.word	0x08009200
 8004ce4:	20000034 	.word	0x20000034
 8004ce8:	20000038 	.word	0x20000038

08004cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cf0:	b090      	sub	sp, #64	; 0x40
 8004cf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d04:	4b59      	ldr	r3, [pc, #356]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 030c 	and.w	r3, r3, #12
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d00d      	beq.n	8004d2c <HAL_RCC_GetSysClockFreq+0x40>
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	f200 80a1 	bhi.w	8004e58 <HAL_RCC_GetSysClockFreq+0x16c>
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0x34>
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d003      	beq.n	8004d26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d1e:	e09b      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d20:	4b53      	ldr	r3, [pc, #332]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d22:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004d24:	e09b      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d26:	4b53      	ldr	r3, [pc, #332]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d2a:	e098      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d2c:	4b4f      	ldr	r3, [pc, #316]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d36:	4b4d      	ldr	r3, [pc, #308]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d028      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d42:	4b4a      	ldr	r3, [pc, #296]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	099b      	lsrs	r3, r3, #6
 8004d48:	2200      	movs	r2, #0
 8004d4a:	623b      	str	r3, [r7, #32]
 8004d4c:	627a      	str	r2, [r7, #36]	; 0x24
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d54:	2100      	movs	r1, #0
 8004d56:	4b47      	ldr	r3, [pc, #284]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d58:	fb03 f201 	mul.w	r2, r3, r1
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	fb00 f303 	mul.w	r3, r0, r3
 8004d62:	4413      	add	r3, r2
 8004d64:	4a43      	ldr	r2, [pc, #268]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d66:	fba0 1202 	umull	r1, r2, r0, r2
 8004d6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d6c:	460a      	mov	r2, r1
 8004d6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d72:	4413      	add	r3, r2
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d78:	2200      	movs	r2, #0
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	61fa      	str	r2, [r7, #28]
 8004d7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004d86:	f7fb ff7f 	bl	8000c88 <__aeabi_uldivmod>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4613      	mov	r3, r2
 8004d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d92:	e053      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d94:	4b35      	ldr	r3, [pc, #212]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	099b      	lsrs	r3, r3, #6
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	617a      	str	r2, [r7, #20]
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004da6:	f04f 0b00 	mov.w	fp, #0
 8004daa:	4652      	mov	r2, sl
 8004dac:	465b      	mov	r3, fp
 8004dae:	f04f 0000 	mov.w	r0, #0
 8004db2:	f04f 0100 	mov.w	r1, #0
 8004db6:	0159      	lsls	r1, r3, #5
 8004db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dbc:	0150      	lsls	r0, r2, #5
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	ebb2 080a 	subs.w	r8, r2, sl
 8004dc6:	eb63 090b 	sbc.w	r9, r3, fp
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004dd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004dda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004dde:	ebb2 0408 	subs.w	r4, r2, r8
 8004de2:	eb63 0509 	sbc.w	r5, r3, r9
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	00eb      	lsls	r3, r5, #3
 8004df0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004df4:	00e2      	lsls	r2, r4, #3
 8004df6:	4614      	mov	r4, r2
 8004df8:	461d      	mov	r5, r3
 8004dfa:	eb14 030a 	adds.w	r3, r4, sl
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	eb45 030b 	adc.w	r3, r5, fp
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e12:	4629      	mov	r1, r5
 8004e14:	028b      	lsls	r3, r1, #10
 8004e16:	4621      	mov	r1, r4
 8004e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	028a      	lsls	r2, r1, #10
 8004e20:	4610      	mov	r0, r2
 8004e22:	4619      	mov	r1, r3
 8004e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e26:	2200      	movs	r2, #0
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	60fa      	str	r2, [r7, #12]
 8004e2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e30:	f7fb ff2a 	bl	8000c88 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4613      	mov	r3, r2
 8004e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	3301      	adds	r3, #1
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004e4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e56:	e002      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3740      	adds	r7, #64	; 0x40
 8004e64:	46bd      	mov	sp, r7
 8004e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	00f42400 	.word	0x00f42400
 8004e74:	00b71b00 	.word	0x00b71b00

08004e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	20000034 	.word	0x20000034

08004e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e94:	f7ff fff0 	bl	8004e78 <HAL_RCC_GetHCLKFreq>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	0a9b      	lsrs	r3, r3, #10
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	4903      	ldr	r1, [pc, #12]	; (8004eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea6:	5ccb      	ldrb	r3, [r1, r3]
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	08009210 	.word	0x08009210

08004eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ebc:	f7ff ffdc 	bl	8004e78 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	0b5b      	lsrs	r3, r3, #13
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4903      	ldr	r1, [pc, #12]	; (8004edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	08009210 	.word	0x08009210

08004ee0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e07b      	b.n	8004fea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d108      	bne.n	8004f0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f02:	d009      	beq.n	8004f18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	61da      	str	r2, [r3, #28]
 8004f0a:	e005      	b.n	8004f18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fd fbfe 	bl	8002734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9c:	ea42 0103 	orr.w	r1, r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	0c1b      	lsrs	r3, r3, #16
 8004fb6:	f003 0104 	and.w	r1, r3, #4
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	f003 0210 	and.w	r2, r3, #16
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e041      	b.n	8005088 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7fd fc9d 	bl	8002958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2202      	movs	r2, #2
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3304      	adds	r3, #4
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f000 fd77 	bl	8005b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d001      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e04e      	b.n	8005146 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a23      	ldr	r2, [pc, #140]	; (8005154 <HAL_TIM_Base_Start_IT+0xc4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d022      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d2:	d01d      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1f      	ldr	r2, [pc, #124]	; (8005158 <HAL_TIM_Base_Start_IT+0xc8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d018      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1e      	ldr	r2, [pc, #120]	; (800515c <HAL_TIM_Base_Start_IT+0xcc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d013      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1c      	ldr	r2, [pc, #112]	; (8005160 <HAL_TIM_Base_Start_IT+0xd0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00e      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1b      	ldr	r2, [pc, #108]	; (8005164 <HAL_TIM_Base_Start_IT+0xd4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d009      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a19      	ldr	r2, [pc, #100]	; (8005168 <HAL_TIM_Base_Start_IT+0xd8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a18      	ldr	r2, [pc, #96]	; (800516c <HAL_TIM_Base_Start_IT+0xdc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d111      	bne.n	8005134 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b06      	cmp	r3, #6
 8005120:	d010      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005132:	e007      	b.n	8005144 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40010000 	.word	0x40010000
 8005158:	40000400 	.word	0x40000400
 800515c:	40000800 	.word	0x40000800
 8005160:	40000c00 	.word	0x40000c00
 8005164:	40010400 	.word	0x40010400
 8005168:	40014000 	.word	0x40014000
 800516c:	40001800 	.word	0x40001800

08005170 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0201 	bic.w	r2, r2, #1
 8005186:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6a1a      	ldr	r2, [r3, #32]
 800518e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005192:	4013      	ands	r3, r2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10f      	bne.n	80051b8 <HAL_TIM_Base_Stop_IT+0x48>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6a1a      	ldr	r2, [r3, #32]
 800519e:	f240 4344 	movw	r3, #1092	; 0x444
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d107      	bne.n	80051b8 <HAL_TIM_Base_Stop_IT+0x48>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0201 	bic.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e041      	b.n	8005264 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d106      	bne.n	80051fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7fd fae5 	bl	80027c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3304      	adds	r3, #4
 800520a:	4619      	mov	r1, r3
 800520c:	4610      	mov	r0, r2
 800520e:	f000 fc89 	bl	8005b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d109      	bne.n	8005294 <HAL_TIM_PWM_Start_IT+0x28>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	bf14      	ite	ne
 800528c:	2301      	movne	r3, #1
 800528e:	2300      	moveq	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	e022      	b.n	80052da <HAL_TIM_PWM_Start_IT+0x6e>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b04      	cmp	r3, #4
 8005298:	d109      	bne.n	80052ae <HAL_TIM_PWM_Start_IT+0x42>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	bf14      	ite	ne
 80052a6:	2301      	movne	r3, #1
 80052a8:	2300      	moveq	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	e015      	b.n	80052da <HAL_TIM_PWM_Start_IT+0x6e>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d109      	bne.n	80052c8 <HAL_TIM_PWM_Start_IT+0x5c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	bf14      	ite	ne
 80052c0:	2301      	movne	r3, #1
 80052c2:	2300      	moveq	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	e008      	b.n	80052da <HAL_TIM_PWM_Start_IT+0x6e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	bf14      	ite	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	2300      	moveq	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e0c7      	b.n	8005472 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_PWM_Start_IT+0x86>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f0:	e013      	b.n	800531a <HAL_TIM_PWM_Start_IT+0xae>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d104      	bne.n	8005302 <HAL_TIM_PWM_Start_IT+0x96>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005300:	e00b      	b.n	800531a <HAL_TIM_PWM_Start_IT+0xae>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b08      	cmp	r3, #8
 8005306:	d104      	bne.n	8005312 <HAL_TIM_PWM_Start_IT+0xa6>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005310:	e003      	b.n	800531a <HAL_TIM_PWM_Start_IT+0xae>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b0c      	cmp	r3, #12
 800531e:	d841      	bhi.n	80053a4 <HAL_TIM_PWM_Start_IT+0x138>
 8005320:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005326:	bf00      	nop
 8005328:	0800535d 	.word	0x0800535d
 800532c:	080053a5 	.word	0x080053a5
 8005330:	080053a5 	.word	0x080053a5
 8005334:	080053a5 	.word	0x080053a5
 8005338:	0800536f 	.word	0x0800536f
 800533c:	080053a5 	.word	0x080053a5
 8005340:	080053a5 	.word	0x080053a5
 8005344:	080053a5 	.word	0x080053a5
 8005348:	08005381 	.word	0x08005381
 800534c:	080053a5 	.word	0x080053a5
 8005350:	080053a5 	.word	0x080053a5
 8005354:	080053a5 	.word	0x080053a5
 8005358:	08005393 	.word	0x08005393
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0202 	orr.w	r2, r2, #2
 800536a:	60da      	str	r2, [r3, #12]
      break;
 800536c:	e01d      	b.n	80053aa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0204 	orr.w	r2, r2, #4
 800537c:	60da      	str	r2, [r3, #12]
      break;
 800537e:	e014      	b.n	80053aa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0208 	orr.w	r2, r2, #8
 800538e:	60da      	str	r2, [r3, #12]
      break;
 8005390:	e00b      	b.n	80053aa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 0210 	orr.w	r2, r2, #16
 80053a0:	60da      	str	r2, [r3, #12]
      break;
 80053a2:	e002      	b.n	80053aa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]
      break;
 80053a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d15f      	bne.n	8005470 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2201      	movs	r2, #1
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fe03 	bl	8005fc4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a2e      	ldr	r2, [pc, #184]	; (800547c <HAL_TIM_PWM_Start_IT+0x210>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_TIM_PWM_Start_IT+0x166>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a2c      	ldr	r2, [pc, #176]	; (8005480 <HAL_TIM_PWM_Start_IT+0x214>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d101      	bne.n	80053d6 <HAL_TIM_PWM_Start_IT+0x16a>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <HAL_TIM_PWM_Start_IT+0x16c>
 80053d6:	2300      	movs	r3, #0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a22      	ldr	r2, [pc, #136]	; (800547c <HAL_TIM_PWM_Start_IT+0x210>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d022      	beq.n	800543c <HAL_TIM_PWM_Start_IT+0x1d0>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fe:	d01d      	beq.n	800543c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1f      	ldr	r2, [pc, #124]	; (8005484 <HAL_TIM_PWM_Start_IT+0x218>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d018      	beq.n	800543c <HAL_TIM_PWM_Start_IT+0x1d0>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1e      	ldr	r2, [pc, #120]	; (8005488 <HAL_TIM_PWM_Start_IT+0x21c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d013      	beq.n	800543c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1c      	ldr	r2, [pc, #112]	; (800548c <HAL_TIM_PWM_Start_IT+0x220>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00e      	beq.n	800543c <HAL_TIM_PWM_Start_IT+0x1d0>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a17      	ldr	r2, [pc, #92]	; (8005480 <HAL_TIM_PWM_Start_IT+0x214>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d009      	beq.n	800543c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a18      	ldr	r2, [pc, #96]	; (8005490 <HAL_TIM_PWM_Start_IT+0x224>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d004      	beq.n	800543c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a17      	ldr	r2, [pc, #92]	; (8005494 <HAL_TIM_PWM_Start_IT+0x228>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d111      	bne.n	8005460 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b06      	cmp	r3, #6
 800544c:	d010      	beq.n	8005470 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545e:	e007      	b.n	8005470 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005470:	7bfb      	ldrb	r3, [r7, #15]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40010000 	.word	0x40010000
 8005480:	40010400 	.word	0x40010400
 8005484:	40000400 	.word	0x40000400
 8005488:	40000800 	.word	0x40000800
 800548c:	40000c00 	.word	0x40000c00
 8005490:	40014000 	.word	0x40014000
 8005494:	40001800 	.word	0x40001800

08005498 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e097      	b.n	80055dc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7fd f9cb 	bl	800285c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2202      	movs	r2, #2
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054dc:	f023 0307 	bic.w	r3, r3, #7
 80054e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3304      	adds	r3, #4
 80054ea:	4619      	mov	r1, r3
 80054ec:	4610      	mov	r0, r2
 80054ee:	f000 fb19 	bl	8005b24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551a:	f023 0303 	bic.w	r3, r3, #3
 800551e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	021b      	lsls	r3, r3, #8
 800552a:	4313      	orrs	r3, r2
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005538:	f023 030c 	bic.w	r3, r3, #12
 800553c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005548:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	021b      	lsls	r3, r3, #8
 8005554:	4313      	orrs	r3, r2
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	011a      	lsls	r2, r3, #4
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	031b      	lsls	r3, r3, #12
 8005568:	4313      	orrs	r3, r2
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005576:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800557e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	4313      	orrs	r3, r2
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005604:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800560c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d110      	bne.n	8005636 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d102      	bne.n	8005620 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800561a:	7b7b      	ldrb	r3, [r7, #13]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d001      	beq.n	8005624 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e089      	b.n	8005738 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005634:	e031      	b.n	800569a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b04      	cmp	r3, #4
 800563a:	d110      	bne.n	800565e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800563c:	7bbb      	ldrb	r3, [r7, #14]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d102      	bne.n	8005648 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005642:	7b3b      	ldrb	r3, [r7, #12]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d001      	beq.n	800564c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e075      	b.n	8005738 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800565c:	e01d      	b.n	800569a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d108      	bne.n	8005676 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005664:	7bbb      	ldrb	r3, [r7, #14]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d105      	bne.n	8005676 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800566a:	7b7b      	ldrb	r3, [r7, #13]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d102      	bne.n	8005676 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005670:	7b3b      	ldrb	r3, [r7, #12]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d001      	beq.n	800567a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e05e      	b.n	8005738 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2202      	movs	r2, #2
 8005686:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2202      	movs	r2, #2
 800568e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2202      	movs	r2, #2
 8005696:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d010      	beq.n	80056c8 <HAL_TIM_Encoder_Start_IT+0xe4>
 80056a6:	e01f      	b.n	80056e8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2201      	movs	r2, #1
 80056ae:	2100      	movs	r1, #0
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fc87 	bl	8005fc4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0202 	orr.w	r2, r2, #2
 80056c4:	60da      	str	r2, [r3, #12]
      break;
 80056c6:	e02e      	b.n	8005726 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2201      	movs	r2, #1
 80056ce:	2104      	movs	r1, #4
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fc77 	bl	8005fc4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0204 	orr.w	r2, r2, #4
 80056e4:	60da      	str	r2, [r3, #12]
      break;
 80056e6:	e01e      	b.n	8005726 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2201      	movs	r2, #1
 80056ee:	2100      	movs	r1, #0
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fc67 	bl	8005fc4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2201      	movs	r2, #1
 80056fc:	2104      	movs	r1, #4
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fc60 	bl	8005fc4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0202 	orr.w	r2, r2, #2
 8005712:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0204 	orr.w	r2, r2, #4
 8005722:	60da      	str	r2, [r3, #12]
      break;
 8005724:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0201 	orr.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b02      	cmp	r3, #2
 8005754:	d122      	bne.n	800579c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b02      	cmp	r3, #2
 8005762:	d11b      	bne.n	800579c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0202 	mvn.w	r2, #2
 800576c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f9b0 	bl	8005ae8 <HAL_TIM_IC_CaptureCallback>
 8005788:	e005      	b.n	8005796 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f9a2 	bl	8005ad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f9b3 	bl	8005afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d122      	bne.n	80057f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d11b      	bne.n	80057f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0204 	mvn.w	r2, #4
 80057c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2202      	movs	r2, #2
 80057c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f986 	bl	8005ae8 <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f978 	bl	8005ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f989 	bl	8005afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b08      	cmp	r3, #8
 80057fc:	d122      	bne.n	8005844 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b08      	cmp	r3, #8
 800580a:	d11b      	bne.n	8005844 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0208 	mvn.w	r2, #8
 8005814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2204      	movs	r2, #4
 800581a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f95c 	bl	8005ae8 <HAL_TIM_IC_CaptureCallback>
 8005830:	e005      	b.n	800583e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f94e 	bl	8005ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f95f 	bl	8005afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	2b10      	cmp	r3, #16
 8005850:	d122      	bne.n	8005898 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b10      	cmp	r3, #16
 800585e:	d11b      	bne.n	8005898 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0210 	mvn.w	r2, #16
 8005868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2208      	movs	r2, #8
 800586e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f932 	bl	8005ae8 <HAL_TIM_IC_CaptureCallback>
 8005884:	e005      	b.n	8005892 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f924 	bl	8005ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f935 	bl	8005afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d10e      	bne.n	80058c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d107      	bne.n	80058c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0201 	mvn.w	r2, #1
 80058bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fb fe3e 	bl	8001540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ce:	2b80      	cmp	r3, #128	; 0x80
 80058d0:	d10e      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058dc:	2b80      	cmp	r3, #128	; 0x80
 80058de:	d107      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fc68 	bl	80061c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fa:	2b40      	cmp	r3, #64	; 0x40
 80058fc:	d10e      	bne.n	800591c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	d107      	bne.n	800591c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8fa 	bl	8005b10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b20      	cmp	r3, #32
 8005928:	d10e      	bne.n	8005948 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b20      	cmp	r3, #32
 8005936:	d107      	bne.n	8005948 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0220 	mvn.w	r2, #32
 8005940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fc32 	bl	80061ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005948:	bf00      	nop
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800596a:	2302      	movs	r3, #2
 800596c:	e0ae      	b.n	8005acc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b0c      	cmp	r3, #12
 800597a:	f200 809f 	bhi.w	8005abc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800597e:	a201      	add	r2, pc, #4	; (adr r2, 8005984 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005984:	080059b9 	.word	0x080059b9
 8005988:	08005abd 	.word	0x08005abd
 800598c:	08005abd 	.word	0x08005abd
 8005990:	08005abd 	.word	0x08005abd
 8005994:	080059f9 	.word	0x080059f9
 8005998:	08005abd 	.word	0x08005abd
 800599c:	08005abd 	.word	0x08005abd
 80059a0:	08005abd 	.word	0x08005abd
 80059a4:	08005a3b 	.word	0x08005a3b
 80059a8:	08005abd 	.word	0x08005abd
 80059ac:	08005abd 	.word	0x08005abd
 80059b0:	08005abd 	.word	0x08005abd
 80059b4:	08005a7b 	.word	0x08005a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 f950 	bl	8005c64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0208 	orr.w	r2, r2, #8
 80059d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0204 	bic.w	r2, r2, #4
 80059e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6999      	ldr	r1, [r3, #24]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	619a      	str	r2, [r3, #24]
      break;
 80059f6:	e064      	b.n	8005ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68b9      	ldr	r1, [r7, #8]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 f9a0 	bl	8005d44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6999      	ldr	r1, [r3, #24]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	021a      	lsls	r2, r3, #8
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	619a      	str	r2, [r3, #24]
      break;
 8005a38:	e043      	b.n	8005ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f9f5 	bl	8005e30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69da      	ldr	r2, [r3, #28]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0208 	orr.w	r2, r2, #8
 8005a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0204 	bic.w	r2, r2, #4
 8005a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69d9      	ldr	r1, [r3, #28]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	61da      	str	r2, [r3, #28]
      break;
 8005a78:	e023      	b.n	8005ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fa49 	bl	8005f18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69da      	ldr	r2, [r3, #28]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69d9      	ldr	r1, [r3, #28]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	021a      	lsls	r2, r3, #8
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	61da      	str	r2, [r3, #28]
      break;
 8005aba:	e002      	b.n	8005ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	75fb      	strb	r3, [r7, #23]
      break;
 8005ac0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a40      	ldr	r2, [pc, #256]	; (8005c38 <TIM_Base_SetConfig+0x114>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d013      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b42:	d00f      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a3d      	ldr	r2, [pc, #244]	; (8005c3c <TIM_Base_SetConfig+0x118>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00b      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a3c      	ldr	r2, [pc, #240]	; (8005c40 <TIM_Base_SetConfig+0x11c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d007      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a3b      	ldr	r2, [pc, #236]	; (8005c44 <TIM_Base_SetConfig+0x120>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d003      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a3a      	ldr	r2, [pc, #232]	; (8005c48 <TIM_Base_SetConfig+0x124>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d108      	bne.n	8005b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a2f      	ldr	r2, [pc, #188]	; (8005c38 <TIM_Base_SetConfig+0x114>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d02b      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b84:	d027      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a2c      	ldr	r2, [pc, #176]	; (8005c3c <TIM_Base_SetConfig+0x118>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d023      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a2b      	ldr	r2, [pc, #172]	; (8005c40 <TIM_Base_SetConfig+0x11c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d01f      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a2a      	ldr	r2, [pc, #168]	; (8005c44 <TIM_Base_SetConfig+0x120>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d01b      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a29      	ldr	r2, [pc, #164]	; (8005c48 <TIM_Base_SetConfig+0x124>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d017      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a28      	ldr	r2, [pc, #160]	; (8005c4c <TIM_Base_SetConfig+0x128>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d013      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a27      	ldr	r2, [pc, #156]	; (8005c50 <TIM_Base_SetConfig+0x12c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00f      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a26      	ldr	r2, [pc, #152]	; (8005c54 <TIM_Base_SetConfig+0x130>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00b      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a25      	ldr	r2, [pc, #148]	; (8005c58 <TIM_Base_SetConfig+0x134>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d007      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a24      	ldr	r2, [pc, #144]	; (8005c5c <TIM_Base_SetConfig+0x138>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d003      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a23      	ldr	r2, [pc, #140]	; (8005c60 <TIM_Base_SetConfig+0x13c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d108      	bne.n	8005be8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a0a      	ldr	r2, [pc, #40]	; (8005c38 <TIM_Base_SetConfig+0x114>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_Base_SetConfig+0xf8>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a0c      	ldr	r2, [pc, #48]	; (8005c48 <TIM_Base_SetConfig+0x124>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d103      	bne.n	8005c24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	615a      	str	r2, [r3, #20]
}
 8005c2a:	bf00      	nop
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40010000 	.word	0x40010000
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	40000800 	.word	0x40000800
 8005c44:	40000c00 	.word	0x40000c00
 8005c48:	40010400 	.word	0x40010400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40014400 	.word	0x40014400
 8005c54:	40014800 	.word	0x40014800
 8005c58:	40001800 	.word	0x40001800
 8005c5c:	40001c00 	.word	0x40001c00
 8005c60:	40002000 	.word	0x40002000

08005c64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	f023 0201 	bic.w	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0303 	bic.w	r3, r3, #3
 8005c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f023 0302 	bic.w	r3, r3, #2
 8005cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a20      	ldr	r2, [pc, #128]	; (8005d3c <TIM_OC1_SetConfig+0xd8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_OC1_SetConfig+0x64>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <TIM_OC1_SetConfig+0xdc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d10c      	bne.n	8005ce2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f023 0308 	bic.w	r3, r3, #8
 8005cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f023 0304 	bic.w	r3, r3, #4
 8005ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a15      	ldr	r2, [pc, #84]	; (8005d3c <TIM_OC1_SetConfig+0xd8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_OC1_SetConfig+0x8e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a14      	ldr	r2, [pc, #80]	; (8005d40 <TIM_OC1_SetConfig+0xdc>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d111      	bne.n	8005d16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	621a      	str	r2, [r3, #32]
}
 8005d30:	bf00      	nop
 8005d32:	371c      	adds	r7, #28
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	40010000 	.word	0x40010000
 8005d40:	40010400 	.word	0x40010400

08005d44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	f023 0210 	bic.w	r2, r3, #16
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f023 0320 	bic.w	r3, r3, #32
 8005d8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a22      	ldr	r2, [pc, #136]	; (8005e28 <TIM_OC2_SetConfig+0xe4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d003      	beq.n	8005dac <TIM_OC2_SetConfig+0x68>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a21      	ldr	r2, [pc, #132]	; (8005e2c <TIM_OC2_SetConfig+0xe8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d10d      	bne.n	8005dc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a17      	ldr	r2, [pc, #92]	; (8005e28 <TIM_OC2_SetConfig+0xe4>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d003      	beq.n	8005dd8 <TIM_OC2_SetConfig+0x94>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a16      	ldr	r2, [pc, #88]	; (8005e2c <TIM_OC2_SetConfig+0xe8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d113      	bne.n	8005e00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005de6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	621a      	str	r2, [r3, #32]
}
 8005e1a:	bf00      	nop
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40010000 	.word	0x40010000
 8005e2c:	40010400 	.word	0x40010400

08005e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0303 	bic.w	r3, r3, #3
 8005e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a21      	ldr	r2, [pc, #132]	; (8005f10 <TIM_OC3_SetConfig+0xe0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d003      	beq.n	8005e96 <TIM_OC3_SetConfig+0x66>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a20      	ldr	r2, [pc, #128]	; (8005f14 <TIM_OC3_SetConfig+0xe4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d10d      	bne.n	8005eb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a16      	ldr	r2, [pc, #88]	; (8005f10 <TIM_OC3_SetConfig+0xe0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d003      	beq.n	8005ec2 <TIM_OC3_SetConfig+0x92>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a15      	ldr	r2, [pc, #84]	; (8005f14 <TIM_OC3_SetConfig+0xe4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d113      	bne.n	8005eea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	621a      	str	r2, [r3, #32]
}
 8005f04:	bf00      	nop
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	40010000 	.word	0x40010000
 8005f14:	40010400 	.word	0x40010400

08005f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	031b      	lsls	r3, r3, #12
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a12      	ldr	r2, [pc, #72]	; (8005fbc <TIM_OC4_SetConfig+0xa4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d003      	beq.n	8005f80 <TIM_OC4_SetConfig+0x68>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a11      	ldr	r2, [pc, #68]	; (8005fc0 <TIM_OC4_SetConfig+0xa8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d109      	bne.n	8005f94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	019b      	lsls	r3, r3, #6
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	40010000 	.word	0x40010000
 8005fc0:	40010400 	.word	0x40010400

08005fc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 031f 	and.w	r3, r3, #31
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a1a      	ldr	r2, [r3, #32]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	43db      	mvns	r3, r3
 8005fe6:	401a      	ands	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a1a      	ldr	r2, [r3, #32]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 031f 	and.w	r3, r3, #31
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	621a      	str	r2, [r3, #32]
}
 8006002:	bf00      	nop
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
	...

08006010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006024:	2302      	movs	r3, #2
 8006026:	e05a      	b.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a21      	ldr	r2, [pc, #132]	; (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d022      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006074:	d01d      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a1d      	ldr	r2, [pc, #116]	; (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d018      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a1b      	ldr	r2, [pc, #108]	; (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d013      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a1a      	ldr	r2, [pc, #104]	; (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00e      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a18      	ldr	r2, [pc, #96]	; (80060fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d009      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a17      	ldr	r2, [pc, #92]	; (8006100 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d004      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a15      	ldr	r2, [pc, #84]	; (8006104 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d10c      	bne.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40010000 	.word	0x40010000
 80060f0:	40000400 	.word	0x40000400
 80060f4:	40000800 	.word	0x40000800
 80060f8:	40000c00 	.word	0x40000c00
 80060fc:	40010400 	.word	0x40010400
 8006100:	40014000 	.word	0x40014000
 8006104:	40001800 	.word	0x40001800

08006108 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006120:	2302      	movs	r3, #2
 8006122:	e03d      	b.n	80061a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e03f      	b.n	8006266 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7fc fc5e 	bl	8002abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2224      	movs	r2, #36	; 0x24
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f829 	bl	8006270 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800622c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695a      	ldr	r2, [r3, #20]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800623c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800624c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006274:	b0c0      	sub	sp, #256	; 0x100
 8006276:	af00      	add	r7, sp, #0
 8006278:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	68d9      	ldr	r1, [r3, #12]
 800628e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	ea40 0301 	orr.w	r3, r0, r1
 8006298:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800629a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062c8:	f021 010c 	bic.w	r1, r1, #12
 80062cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062d6:	430b      	orrs	r3, r1
 80062d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ea:	6999      	ldr	r1, [r3, #24]
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	ea40 0301 	orr.w	r3, r0, r1
 80062f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4b8f      	ldr	r3, [pc, #572]	; (800653c <UART_SetConfig+0x2cc>)
 8006300:	429a      	cmp	r2, r3
 8006302:	d005      	beq.n	8006310 <UART_SetConfig+0xa0>
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	4b8d      	ldr	r3, [pc, #564]	; (8006540 <UART_SetConfig+0x2d0>)
 800630c:	429a      	cmp	r2, r3
 800630e:	d104      	bne.n	800631a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006310:	f7fe fdd2 	bl	8004eb8 <HAL_RCC_GetPCLK2Freq>
 8006314:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006318:	e003      	b.n	8006322 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800631a:	f7fe fdb9 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 800631e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800632c:	f040 810c 	bne.w	8006548 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006334:	2200      	movs	r2, #0
 8006336:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800633a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800633e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006342:	4622      	mov	r2, r4
 8006344:	462b      	mov	r3, r5
 8006346:	1891      	adds	r1, r2, r2
 8006348:	65b9      	str	r1, [r7, #88]	; 0x58
 800634a:	415b      	adcs	r3, r3
 800634c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800634e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006352:	4621      	mov	r1, r4
 8006354:	eb12 0801 	adds.w	r8, r2, r1
 8006358:	4629      	mov	r1, r5
 800635a:	eb43 0901 	adc.w	r9, r3, r1
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800636a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800636e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006372:	4690      	mov	r8, r2
 8006374:	4699      	mov	r9, r3
 8006376:	4623      	mov	r3, r4
 8006378:	eb18 0303 	adds.w	r3, r8, r3
 800637c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006380:	462b      	mov	r3, r5
 8006382:	eb49 0303 	adc.w	r3, r9, r3
 8006386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800638a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006396:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800639a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800639e:	460b      	mov	r3, r1
 80063a0:	18db      	adds	r3, r3, r3
 80063a2:	653b      	str	r3, [r7, #80]	; 0x50
 80063a4:	4613      	mov	r3, r2
 80063a6:	eb42 0303 	adc.w	r3, r2, r3
 80063aa:	657b      	str	r3, [r7, #84]	; 0x54
 80063ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063b4:	f7fa fc68 	bl	8000c88 <__aeabi_uldivmod>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4b61      	ldr	r3, [pc, #388]	; (8006544 <UART_SetConfig+0x2d4>)
 80063be:	fba3 2302 	umull	r2, r3, r3, r2
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	011c      	lsls	r4, r3, #4
 80063c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063d8:	4642      	mov	r2, r8
 80063da:	464b      	mov	r3, r9
 80063dc:	1891      	adds	r1, r2, r2
 80063de:	64b9      	str	r1, [r7, #72]	; 0x48
 80063e0:	415b      	adcs	r3, r3
 80063e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063e8:	4641      	mov	r1, r8
 80063ea:	eb12 0a01 	adds.w	sl, r2, r1
 80063ee:	4649      	mov	r1, r9
 80063f0:	eb43 0b01 	adc.w	fp, r3, r1
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006400:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006404:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006408:	4692      	mov	sl, r2
 800640a:	469b      	mov	fp, r3
 800640c:	4643      	mov	r3, r8
 800640e:	eb1a 0303 	adds.w	r3, sl, r3
 8006412:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006416:	464b      	mov	r3, r9
 8006418:	eb4b 0303 	adc.w	r3, fp, r3
 800641c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800642c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006430:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006434:	460b      	mov	r3, r1
 8006436:	18db      	adds	r3, r3, r3
 8006438:	643b      	str	r3, [r7, #64]	; 0x40
 800643a:	4613      	mov	r3, r2
 800643c:	eb42 0303 	adc.w	r3, r2, r3
 8006440:	647b      	str	r3, [r7, #68]	; 0x44
 8006442:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006446:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800644a:	f7fa fc1d 	bl	8000c88 <__aeabi_uldivmod>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	4611      	mov	r1, r2
 8006454:	4b3b      	ldr	r3, [pc, #236]	; (8006544 <UART_SetConfig+0x2d4>)
 8006456:	fba3 2301 	umull	r2, r3, r3, r1
 800645a:	095b      	lsrs	r3, r3, #5
 800645c:	2264      	movs	r2, #100	; 0x64
 800645e:	fb02 f303 	mul.w	r3, r2, r3
 8006462:	1acb      	subs	r3, r1, r3
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800646a:	4b36      	ldr	r3, [pc, #216]	; (8006544 <UART_SetConfig+0x2d4>)
 800646c:	fba3 2302 	umull	r2, r3, r3, r2
 8006470:	095b      	lsrs	r3, r3, #5
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006478:	441c      	add	r4, r3
 800647a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800647e:	2200      	movs	r2, #0
 8006480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006484:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006488:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800648c:	4642      	mov	r2, r8
 800648e:	464b      	mov	r3, r9
 8006490:	1891      	adds	r1, r2, r2
 8006492:	63b9      	str	r1, [r7, #56]	; 0x38
 8006494:	415b      	adcs	r3, r3
 8006496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006498:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800649c:	4641      	mov	r1, r8
 800649e:	1851      	adds	r1, r2, r1
 80064a0:	6339      	str	r1, [r7, #48]	; 0x30
 80064a2:	4649      	mov	r1, r9
 80064a4:	414b      	adcs	r3, r1
 80064a6:	637b      	str	r3, [r7, #52]	; 0x34
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064b4:	4659      	mov	r1, fp
 80064b6:	00cb      	lsls	r3, r1, #3
 80064b8:	4651      	mov	r1, sl
 80064ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064be:	4651      	mov	r1, sl
 80064c0:	00ca      	lsls	r2, r1, #3
 80064c2:	4610      	mov	r0, r2
 80064c4:	4619      	mov	r1, r3
 80064c6:	4603      	mov	r3, r0
 80064c8:	4642      	mov	r2, r8
 80064ca:	189b      	adds	r3, r3, r2
 80064cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064d0:	464b      	mov	r3, r9
 80064d2:	460a      	mov	r2, r1
 80064d4:	eb42 0303 	adc.w	r3, r2, r3
 80064d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064f0:	460b      	mov	r3, r1
 80064f2:	18db      	adds	r3, r3, r3
 80064f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f6:	4613      	mov	r3, r2
 80064f8:	eb42 0303 	adc.w	r3, r2, r3
 80064fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006502:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006506:	f7fa fbbf 	bl	8000c88 <__aeabi_uldivmod>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4b0d      	ldr	r3, [pc, #52]	; (8006544 <UART_SetConfig+0x2d4>)
 8006510:	fba3 1302 	umull	r1, r3, r3, r2
 8006514:	095b      	lsrs	r3, r3, #5
 8006516:	2164      	movs	r1, #100	; 0x64
 8006518:	fb01 f303 	mul.w	r3, r1, r3
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	3332      	adds	r3, #50	; 0x32
 8006522:	4a08      	ldr	r2, [pc, #32]	; (8006544 <UART_SetConfig+0x2d4>)
 8006524:	fba2 2303 	umull	r2, r3, r2, r3
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	f003 0207 	and.w	r2, r3, #7
 800652e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4422      	add	r2, r4
 8006536:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006538:	e105      	b.n	8006746 <UART_SetConfig+0x4d6>
 800653a:	bf00      	nop
 800653c:	40011000 	.word	0x40011000
 8006540:	40011400 	.word	0x40011400
 8006544:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800654c:	2200      	movs	r2, #0
 800654e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006552:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006556:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800655a:	4642      	mov	r2, r8
 800655c:	464b      	mov	r3, r9
 800655e:	1891      	adds	r1, r2, r2
 8006560:	6239      	str	r1, [r7, #32]
 8006562:	415b      	adcs	r3, r3
 8006564:	627b      	str	r3, [r7, #36]	; 0x24
 8006566:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800656a:	4641      	mov	r1, r8
 800656c:	1854      	adds	r4, r2, r1
 800656e:	4649      	mov	r1, r9
 8006570:	eb43 0501 	adc.w	r5, r3, r1
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	00eb      	lsls	r3, r5, #3
 800657e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006582:	00e2      	lsls	r2, r4, #3
 8006584:	4614      	mov	r4, r2
 8006586:	461d      	mov	r5, r3
 8006588:	4643      	mov	r3, r8
 800658a:	18e3      	adds	r3, r4, r3
 800658c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006590:	464b      	mov	r3, r9
 8006592:	eb45 0303 	adc.w	r3, r5, r3
 8006596:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800659a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	f04f 0300 	mov.w	r3, #0
 80065b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065b6:	4629      	mov	r1, r5
 80065b8:	008b      	lsls	r3, r1, #2
 80065ba:	4621      	mov	r1, r4
 80065bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065c0:	4621      	mov	r1, r4
 80065c2:	008a      	lsls	r2, r1, #2
 80065c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065c8:	f7fa fb5e 	bl	8000c88 <__aeabi_uldivmod>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4b60      	ldr	r3, [pc, #384]	; (8006754 <UART_SetConfig+0x4e4>)
 80065d2:	fba3 2302 	umull	r2, r3, r3, r2
 80065d6:	095b      	lsrs	r3, r3, #5
 80065d8:	011c      	lsls	r4, r3, #4
 80065da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065ec:	4642      	mov	r2, r8
 80065ee:	464b      	mov	r3, r9
 80065f0:	1891      	adds	r1, r2, r2
 80065f2:	61b9      	str	r1, [r7, #24]
 80065f4:	415b      	adcs	r3, r3
 80065f6:	61fb      	str	r3, [r7, #28]
 80065f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065fc:	4641      	mov	r1, r8
 80065fe:	1851      	adds	r1, r2, r1
 8006600:	6139      	str	r1, [r7, #16]
 8006602:	4649      	mov	r1, r9
 8006604:	414b      	adcs	r3, r1
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006614:	4659      	mov	r1, fp
 8006616:	00cb      	lsls	r3, r1, #3
 8006618:	4651      	mov	r1, sl
 800661a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800661e:	4651      	mov	r1, sl
 8006620:	00ca      	lsls	r2, r1, #3
 8006622:	4610      	mov	r0, r2
 8006624:	4619      	mov	r1, r3
 8006626:	4603      	mov	r3, r0
 8006628:	4642      	mov	r2, r8
 800662a:	189b      	adds	r3, r3, r2
 800662c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006630:	464b      	mov	r3, r9
 8006632:	460a      	mov	r2, r1
 8006634:	eb42 0303 	adc.w	r3, r2, r3
 8006638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800663c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	67bb      	str	r3, [r7, #120]	; 0x78
 8006646:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006654:	4649      	mov	r1, r9
 8006656:	008b      	lsls	r3, r1, #2
 8006658:	4641      	mov	r1, r8
 800665a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800665e:	4641      	mov	r1, r8
 8006660:	008a      	lsls	r2, r1, #2
 8006662:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006666:	f7fa fb0f 	bl	8000c88 <__aeabi_uldivmod>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	4b39      	ldr	r3, [pc, #228]	; (8006754 <UART_SetConfig+0x4e4>)
 8006670:	fba3 1302 	umull	r1, r3, r3, r2
 8006674:	095b      	lsrs	r3, r3, #5
 8006676:	2164      	movs	r1, #100	; 0x64
 8006678:	fb01 f303 	mul.w	r3, r1, r3
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	3332      	adds	r3, #50	; 0x32
 8006682:	4a34      	ldr	r2, [pc, #208]	; (8006754 <UART_SetConfig+0x4e4>)
 8006684:	fba2 2303 	umull	r2, r3, r2, r3
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800668e:	441c      	add	r4, r3
 8006690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006694:	2200      	movs	r2, #0
 8006696:	673b      	str	r3, [r7, #112]	; 0x70
 8006698:	677a      	str	r2, [r7, #116]	; 0x74
 800669a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800669e:	4642      	mov	r2, r8
 80066a0:	464b      	mov	r3, r9
 80066a2:	1891      	adds	r1, r2, r2
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	415b      	adcs	r3, r3
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066ae:	4641      	mov	r1, r8
 80066b0:	1851      	adds	r1, r2, r1
 80066b2:	6039      	str	r1, [r7, #0]
 80066b4:	4649      	mov	r1, r9
 80066b6:	414b      	adcs	r3, r1
 80066b8:	607b      	str	r3, [r7, #4]
 80066ba:	f04f 0200 	mov.w	r2, #0
 80066be:	f04f 0300 	mov.w	r3, #0
 80066c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066c6:	4659      	mov	r1, fp
 80066c8:	00cb      	lsls	r3, r1, #3
 80066ca:	4651      	mov	r1, sl
 80066cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066d0:	4651      	mov	r1, sl
 80066d2:	00ca      	lsls	r2, r1, #3
 80066d4:	4610      	mov	r0, r2
 80066d6:	4619      	mov	r1, r3
 80066d8:	4603      	mov	r3, r0
 80066da:	4642      	mov	r2, r8
 80066dc:	189b      	adds	r3, r3, r2
 80066de:	66bb      	str	r3, [r7, #104]	; 0x68
 80066e0:	464b      	mov	r3, r9
 80066e2:	460a      	mov	r2, r1
 80066e4:	eb42 0303 	adc.w	r3, r2, r3
 80066e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	663b      	str	r3, [r7, #96]	; 0x60
 80066f4:	667a      	str	r2, [r7, #100]	; 0x64
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006702:	4649      	mov	r1, r9
 8006704:	008b      	lsls	r3, r1, #2
 8006706:	4641      	mov	r1, r8
 8006708:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800670c:	4641      	mov	r1, r8
 800670e:	008a      	lsls	r2, r1, #2
 8006710:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006714:	f7fa fab8 	bl	8000c88 <__aeabi_uldivmod>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	4b0d      	ldr	r3, [pc, #52]	; (8006754 <UART_SetConfig+0x4e4>)
 800671e:	fba3 1302 	umull	r1, r3, r3, r2
 8006722:	095b      	lsrs	r3, r3, #5
 8006724:	2164      	movs	r1, #100	; 0x64
 8006726:	fb01 f303 	mul.w	r3, r1, r3
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	011b      	lsls	r3, r3, #4
 800672e:	3332      	adds	r3, #50	; 0x32
 8006730:	4a08      	ldr	r2, [pc, #32]	; (8006754 <UART_SetConfig+0x4e4>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	f003 020f 	and.w	r2, r3, #15
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4422      	add	r2, r4
 8006744:	609a      	str	r2, [r3, #8]
}
 8006746:	bf00      	nop
 8006748:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800674c:	46bd      	mov	sp, r7
 800674e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006752:	bf00      	nop
 8006754:	51eb851f 	.word	0x51eb851f

08006758 <__errno>:
 8006758:	4b01      	ldr	r3, [pc, #4]	; (8006760 <__errno+0x8>)
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	20000040 	.word	0x20000040

08006764 <__libc_init_array>:
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	4d0d      	ldr	r5, [pc, #52]	; (800679c <__libc_init_array+0x38>)
 8006768:	4c0d      	ldr	r4, [pc, #52]	; (80067a0 <__libc_init_array+0x3c>)
 800676a:	1b64      	subs	r4, r4, r5
 800676c:	10a4      	asrs	r4, r4, #2
 800676e:	2600      	movs	r6, #0
 8006770:	42a6      	cmp	r6, r4
 8006772:	d109      	bne.n	8006788 <__libc_init_array+0x24>
 8006774:	4d0b      	ldr	r5, [pc, #44]	; (80067a4 <__libc_init_array+0x40>)
 8006776:	4c0c      	ldr	r4, [pc, #48]	; (80067a8 <__libc_init_array+0x44>)
 8006778:	f002 fd36 	bl	80091e8 <_init>
 800677c:	1b64      	subs	r4, r4, r5
 800677e:	10a4      	asrs	r4, r4, #2
 8006780:	2600      	movs	r6, #0
 8006782:	42a6      	cmp	r6, r4
 8006784:	d105      	bne.n	8006792 <__libc_init_array+0x2e>
 8006786:	bd70      	pop	{r4, r5, r6, pc}
 8006788:	f855 3b04 	ldr.w	r3, [r5], #4
 800678c:	4798      	blx	r3
 800678e:	3601      	adds	r6, #1
 8006790:	e7ee      	b.n	8006770 <__libc_init_array+0xc>
 8006792:	f855 3b04 	ldr.w	r3, [r5], #4
 8006796:	4798      	blx	r3
 8006798:	3601      	adds	r6, #1
 800679a:	e7f2      	b.n	8006782 <__libc_init_array+0x1e>
 800679c:	08009604 	.word	0x08009604
 80067a0:	08009604 	.word	0x08009604
 80067a4:	08009604 	.word	0x08009604
 80067a8:	08009608 	.word	0x08009608

080067ac <memset>:
 80067ac:	4402      	add	r2, r0
 80067ae:	4603      	mov	r3, r0
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d100      	bne.n	80067b6 <memset+0xa>
 80067b4:	4770      	bx	lr
 80067b6:	f803 1b01 	strb.w	r1, [r3], #1
 80067ba:	e7f9      	b.n	80067b0 <memset+0x4>

080067bc <__cvt>:
 80067bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067c0:	ec55 4b10 	vmov	r4, r5, d0
 80067c4:	2d00      	cmp	r5, #0
 80067c6:	460e      	mov	r6, r1
 80067c8:	4619      	mov	r1, r3
 80067ca:	462b      	mov	r3, r5
 80067cc:	bfbb      	ittet	lt
 80067ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80067d2:	461d      	movlt	r5, r3
 80067d4:	2300      	movge	r3, #0
 80067d6:	232d      	movlt	r3, #45	; 0x2d
 80067d8:	700b      	strb	r3, [r1, #0]
 80067da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80067e0:	4691      	mov	r9, r2
 80067e2:	f023 0820 	bic.w	r8, r3, #32
 80067e6:	bfbc      	itt	lt
 80067e8:	4622      	movlt	r2, r4
 80067ea:	4614      	movlt	r4, r2
 80067ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067f0:	d005      	beq.n	80067fe <__cvt+0x42>
 80067f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80067f6:	d100      	bne.n	80067fa <__cvt+0x3e>
 80067f8:	3601      	adds	r6, #1
 80067fa:	2102      	movs	r1, #2
 80067fc:	e000      	b.n	8006800 <__cvt+0x44>
 80067fe:	2103      	movs	r1, #3
 8006800:	ab03      	add	r3, sp, #12
 8006802:	9301      	str	r3, [sp, #4]
 8006804:	ab02      	add	r3, sp, #8
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	ec45 4b10 	vmov	d0, r4, r5
 800680c:	4653      	mov	r3, sl
 800680e:	4632      	mov	r2, r6
 8006810:	f000 fcca 	bl	80071a8 <_dtoa_r>
 8006814:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006818:	4607      	mov	r7, r0
 800681a:	d102      	bne.n	8006822 <__cvt+0x66>
 800681c:	f019 0f01 	tst.w	r9, #1
 8006820:	d022      	beq.n	8006868 <__cvt+0xac>
 8006822:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006826:	eb07 0906 	add.w	r9, r7, r6
 800682a:	d110      	bne.n	800684e <__cvt+0x92>
 800682c:	783b      	ldrb	r3, [r7, #0]
 800682e:	2b30      	cmp	r3, #48	; 0x30
 8006830:	d10a      	bne.n	8006848 <__cvt+0x8c>
 8006832:	2200      	movs	r2, #0
 8006834:	2300      	movs	r3, #0
 8006836:	4620      	mov	r0, r4
 8006838:	4629      	mov	r1, r5
 800683a:	f7fa f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800683e:	b918      	cbnz	r0, 8006848 <__cvt+0x8c>
 8006840:	f1c6 0601 	rsb	r6, r6, #1
 8006844:	f8ca 6000 	str.w	r6, [sl]
 8006848:	f8da 3000 	ldr.w	r3, [sl]
 800684c:	4499      	add	r9, r3
 800684e:	2200      	movs	r2, #0
 8006850:	2300      	movs	r3, #0
 8006852:	4620      	mov	r0, r4
 8006854:	4629      	mov	r1, r5
 8006856:	f7fa f937 	bl	8000ac8 <__aeabi_dcmpeq>
 800685a:	b108      	cbz	r0, 8006860 <__cvt+0xa4>
 800685c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006860:	2230      	movs	r2, #48	; 0x30
 8006862:	9b03      	ldr	r3, [sp, #12]
 8006864:	454b      	cmp	r3, r9
 8006866:	d307      	bcc.n	8006878 <__cvt+0xbc>
 8006868:	9b03      	ldr	r3, [sp, #12]
 800686a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800686c:	1bdb      	subs	r3, r3, r7
 800686e:	4638      	mov	r0, r7
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	b004      	add	sp, #16
 8006874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006878:	1c59      	adds	r1, r3, #1
 800687a:	9103      	str	r1, [sp, #12]
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	e7f0      	b.n	8006862 <__cvt+0xa6>

08006880 <__exponent>:
 8006880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006882:	4603      	mov	r3, r0
 8006884:	2900      	cmp	r1, #0
 8006886:	bfb8      	it	lt
 8006888:	4249      	neglt	r1, r1
 800688a:	f803 2b02 	strb.w	r2, [r3], #2
 800688e:	bfb4      	ite	lt
 8006890:	222d      	movlt	r2, #45	; 0x2d
 8006892:	222b      	movge	r2, #43	; 0x2b
 8006894:	2909      	cmp	r1, #9
 8006896:	7042      	strb	r2, [r0, #1]
 8006898:	dd2a      	ble.n	80068f0 <__exponent+0x70>
 800689a:	f10d 0407 	add.w	r4, sp, #7
 800689e:	46a4      	mov	ip, r4
 80068a0:	270a      	movs	r7, #10
 80068a2:	46a6      	mov	lr, r4
 80068a4:	460a      	mov	r2, r1
 80068a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80068aa:	fb07 1516 	mls	r5, r7, r6, r1
 80068ae:	3530      	adds	r5, #48	; 0x30
 80068b0:	2a63      	cmp	r2, #99	; 0x63
 80068b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80068b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80068ba:	4631      	mov	r1, r6
 80068bc:	dcf1      	bgt.n	80068a2 <__exponent+0x22>
 80068be:	3130      	adds	r1, #48	; 0x30
 80068c0:	f1ae 0502 	sub.w	r5, lr, #2
 80068c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80068c8:	1c44      	adds	r4, r0, #1
 80068ca:	4629      	mov	r1, r5
 80068cc:	4561      	cmp	r1, ip
 80068ce:	d30a      	bcc.n	80068e6 <__exponent+0x66>
 80068d0:	f10d 0209 	add.w	r2, sp, #9
 80068d4:	eba2 020e 	sub.w	r2, r2, lr
 80068d8:	4565      	cmp	r5, ip
 80068da:	bf88      	it	hi
 80068dc:	2200      	movhi	r2, #0
 80068de:	4413      	add	r3, r2
 80068e0:	1a18      	subs	r0, r3, r0
 80068e2:	b003      	add	sp, #12
 80068e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80068ee:	e7ed      	b.n	80068cc <__exponent+0x4c>
 80068f0:	2330      	movs	r3, #48	; 0x30
 80068f2:	3130      	adds	r1, #48	; 0x30
 80068f4:	7083      	strb	r3, [r0, #2]
 80068f6:	70c1      	strb	r1, [r0, #3]
 80068f8:	1d03      	adds	r3, r0, #4
 80068fa:	e7f1      	b.n	80068e0 <__exponent+0x60>

080068fc <_printf_float>:
 80068fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006900:	ed2d 8b02 	vpush	{d8}
 8006904:	b08d      	sub	sp, #52	; 0x34
 8006906:	460c      	mov	r4, r1
 8006908:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800690c:	4616      	mov	r6, r2
 800690e:	461f      	mov	r7, r3
 8006910:	4605      	mov	r5, r0
 8006912:	f001 fa37 	bl	8007d84 <_localeconv_r>
 8006916:	f8d0 a000 	ldr.w	sl, [r0]
 800691a:	4650      	mov	r0, sl
 800691c:	f7f9 fc58 	bl	80001d0 <strlen>
 8006920:	2300      	movs	r3, #0
 8006922:	930a      	str	r3, [sp, #40]	; 0x28
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	9305      	str	r3, [sp, #20]
 8006928:	f8d8 3000 	ldr.w	r3, [r8]
 800692c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006930:	3307      	adds	r3, #7
 8006932:	f023 0307 	bic.w	r3, r3, #7
 8006936:	f103 0208 	add.w	r2, r3, #8
 800693a:	f8c8 2000 	str.w	r2, [r8]
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006946:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800694a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800694e:	9307      	str	r3, [sp, #28]
 8006950:	f8cd 8018 	str.w	r8, [sp, #24]
 8006954:	ee08 0a10 	vmov	s16, r0
 8006958:	4b9f      	ldr	r3, [pc, #636]	; (8006bd8 <_printf_float+0x2dc>)
 800695a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800695e:	f04f 32ff 	mov.w	r2, #4294967295
 8006962:	f7fa f8e3 	bl	8000b2c <__aeabi_dcmpun>
 8006966:	bb88      	cbnz	r0, 80069cc <_printf_float+0xd0>
 8006968:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800696c:	4b9a      	ldr	r3, [pc, #616]	; (8006bd8 <_printf_float+0x2dc>)
 800696e:	f04f 32ff 	mov.w	r2, #4294967295
 8006972:	f7fa f8bd 	bl	8000af0 <__aeabi_dcmple>
 8006976:	bb48      	cbnz	r0, 80069cc <_printf_float+0xd0>
 8006978:	2200      	movs	r2, #0
 800697a:	2300      	movs	r3, #0
 800697c:	4640      	mov	r0, r8
 800697e:	4649      	mov	r1, r9
 8006980:	f7fa f8ac 	bl	8000adc <__aeabi_dcmplt>
 8006984:	b110      	cbz	r0, 800698c <_printf_float+0x90>
 8006986:	232d      	movs	r3, #45	; 0x2d
 8006988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800698c:	4b93      	ldr	r3, [pc, #588]	; (8006bdc <_printf_float+0x2e0>)
 800698e:	4894      	ldr	r0, [pc, #592]	; (8006be0 <_printf_float+0x2e4>)
 8006990:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006994:	bf94      	ite	ls
 8006996:	4698      	movls	r8, r3
 8006998:	4680      	movhi	r8, r0
 800699a:	2303      	movs	r3, #3
 800699c:	6123      	str	r3, [r4, #16]
 800699e:	9b05      	ldr	r3, [sp, #20]
 80069a0:	f023 0204 	bic.w	r2, r3, #4
 80069a4:	6022      	str	r2, [r4, #0]
 80069a6:	f04f 0900 	mov.w	r9, #0
 80069aa:	9700      	str	r7, [sp, #0]
 80069ac:	4633      	mov	r3, r6
 80069ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80069b0:	4621      	mov	r1, r4
 80069b2:	4628      	mov	r0, r5
 80069b4:	f000 f9d8 	bl	8006d68 <_printf_common>
 80069b8:	3001      	adds	r0, #1
 80069ba:	f040 8090 	bne.w	8006ade <_printf_float+0x1e2>
 80069be:	f04f 30ff 	mov.w	r0, #4294967295
 80069c2:	b00d      	add	sp, #52	; 0x34
 80069c4:	ecbd 8b02 	vpop	{d8}
 80069c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069cc:	4642      	mov	r2, r8
 80069ce:	464b      	mov	r3, r9
 80069d0:	4640      	mov	r0, r8
 80069d2:	4649      	mov	r1, r9
 80069d4:	f7fa f8aa 	bl	8000b2c <__aeabi_dcmpun>
 80069d8:	b140      	cbz	r0, 80069ec <_printf_float+0xf0>
 80069da:	464b      	mov	r3, r9
 80069dc:	2b00      	cmp	r3, #0
 80069de:	bfbc      	itt	lt
 80069e0:	232d      	movlt	r3, #45	; 0x2d
 80069e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069e6:	487f      	ldr	r0, [pc, #508]	; (8006be4 <_printf_float+0x2e8>)
 80069e8:	4b7f      	ldr	r3, [pc, #508]	; (8006be8 <_printf_float+0x2ec>)
 80069ea:	e7d1      	b.n	8006990 <_printf_float+0x94>
 80069ec:	6863      	ldr	r3, [r4, #4]
 80069ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80069f2:	9206      	str	r2, [sp, #24]
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	d13f      	bne.n	8006a78 <_printf_float+0x17c>
 80069f8:	2306      	movs	r3, #6
 80069fa:	6063      	str	r3, [r4, #4]
 80069fc:	9b05      	ldr	r3, [sp, #20]
 80069fe:	6861      	ldr	r1, [r4, #4]
 8006a00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a04:	2300      	movs	r3, #0
 8006a06:	9303      	str	r3, [sp, #12]
 8006a08:	ab0a      	add	r3, sp, #40	; 0x28
 8006a0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a0e:	ab09      	add	r3, sp, #36	; 0x24
 8006a10:	ec49 8b10 	vmov	d0, r8, r9
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	6022      	str	r2, [r4, #0]
 8006a18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	f7ff fecd 	bl	80067bc <__cvt>
 8006a22:	9b06      	ldr	r3, [sp, #24]
 8006a24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a26:	2b47      	cmp	r3, #71	; 0x47
 8006a28:	4680      	mov	r8, r0
 8006a2a:	d108      	bne.n	8006a3e <_printf_float+0x142>
 8006a2c:	1cc8      	adds	r0, r1, #3
 8006a2e:	db02      	blt.n	8006a36 <_printf_float+0x13a>
 8006a30:	6863      	ldr	r3, [r4, #4]
 8006a32:	4299      	cmp	r1, r3
 8006a34:	dd41      	ble.n	8006aba <_printf_float+0x1be>
 8006a36:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a3a:	fa5f fb8b 	uxtb.w	fp, fp
 8006a3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a42:	d820      	bhi.n	8006a86 <_printf_float+0x18a>
 8006a44:	3901      	subs	r1, #1
 8006a46:	465a      	mov	r2, fp
 8006a48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a4c:	9109      	str	r1, [sp, #36]	; 0x24
 8006a4e:	f7ff ff17 	bl	8006880 <__exponent>
 8006a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a54:	1813      	adds	r3, r2, r0
 8006a56:	2a01      	cmp	r2, #1
 8006a58:	4681      	mov	r9, r0
 8006a5a:	6123      	str	r3, [r4, #16]
 8006a5c:	dc02      	bgt.n	8006a64 <_printf_float+0x168>
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	07d2      	lsls	r2, r2, #31
 8006a62:	d501      	bpl.n	8006a68 <_printf_float+0x16c>
 8006a64:	3301      	adds	r3, #1
 8006a66:	6123      	str	r3, [r4, #16]
 8006a68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d09c      	beq.n	80069aa <_printf_float+0xae>
 8006a70:	232d      	movs	r3, #45	; 0x2d
 8006a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a76:	e798      	b.n	80069aa <_printf_float+0xae>
 8006a78:	9a06      	ldr	r2, [sp, #24]
 8006a7a:	2a47      	cmp	r2, #71	; 0x47
 8006a7c:	d1be      	bne.n	80069fc <_printf_float+0x100>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1bc      	bne.n	80069fc <_printf_float+0x100>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e7b9      	b.n	80069fa <_printf_float+0xfe>
 8006a86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a8a:	d118      	bne.n	8006abe <_printf_float+0x1c2>
 8006a8c:	2900      	cmp	r1, #0
 8006a8e:	6863      	ldr	r3, [r4, #4]
 8006a90:	dd0b      	ble.n	8006aaa <_printf_float+0x1ae>
 8006a92:	6121      	str	r1, [r4, #16]
 8006a94:	b913      	cbnz	r3, 8006a9c <_printf_float+0x1a0>
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	07d0      	lsls	r0, r2, #31
 8006a9a:	d502      	bpl.n	8006aa2 <_printf_float+0x1a6>
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	440b      	add	r3, r1
 8006aa0:	6123      	str	r3, [r4, #16]
 8006aa2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006aa4:	f04f 0900 	mov.w	r9, #0
 8006aa8:	e7de      	b.n	8006a68 <_printf_float+0x16c>
 8006aaa:	b913      	cbnz	r3, 8006ab2 <_printf_float+0x1b6>
 8006aac:	6822      	ldr	r2, [r4, #0]
 8006aae:	07d2      	lsls	r2, r2, #31
 8006ab0:	d501      	bpl.n	8006ab6 <_printf_float+0x1ba>
 8006ab2:	3302      	adds	r3, #2
 8006ab4:	e7f4      	b.n	8006aa0 <_printf_float+0x1a4>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e7f2      	b.n	8006aa0 <_printf_float+0x1a4>
 8006aba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac0:	4299      	cmp	r1, r3
 8006ac2:	db05      	blt.n	8006ad0 <_printf_float+0x1d4>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	6121      	str	r1, [r4, #16]
 8006ac8:	07d8      	lsls	r0, r3, #31
 8006aca:	d5ea      	bpl.n	8006aa2 <_printf_float+0x1a6>
 8006acc:	1c4b      	adds	r3, r1, #1
 8006ace:	e7e7      	b.n	8006aa0 <_printf_float+0x1a4>
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	bfd4      	ite	le
 8006ad4:	f1c1 0202 	rsble	r2, r1, #2
 8006ad8:	2201      	movgt	r2, #1
 8006ada:	4413      	add	r3, r2
 8006adc:	e7e0      	b.n	8006aa0 <_printf_float+0x1a4>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	055a      	lsls	r2, r3, #21
 8006ae2:	d407      	bmi.n	8006af4 <_printf_float+0x1f8>
 8006ae4:	6923      	ldr	r3, [r4, #16]
 8006ae6:	4642      	mov	r2, r8
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	47b8      	blx	r7
 8006aee:	3001      	adds	r0, #1
 8006af0:	d12c      	bne.n	8006b4c <_printf_float+0x250>
 8006af2:	e764      	b.n	80069be <_printf_float+0xc2>
 8006af4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006af8:	f240 80e0 	bls.w	8006cbc <_printf_float+0x3c0>
 8006afc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b00:	2200      	movs	r2, #0
 8006b02:	2300      	movs	r3, #0
 8006b04:	f7f9 ffe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d034      	beq.n	8006b76 <_printf_float+0x27a>
 8006b0c:	4a37      	ldr	r2, [pc, #220]	; (8006bec <_printf_float+0x2f0>)
 8006b0e:	2301      	movs	r3, #1
 8006b10:	4631      	mov	r1, r6
 8006b12:	4628      	mov	r0, r5
 8006b14:	47b8      	blx	r7
 8006b16:	3001      	adds	r0, #1
 8006b18:	f43f af51 	beq.w	80069be <_printf_float+0xc2>
 8006b1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b20:	429a      	cmp	r2, r3
 8006b22:	db02      	blt.n	8006b2a <_printf_float+0x22e>
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	07d8      	lsls	r0, r3, #31
 8006b28:	d510      	bpl.n	8006b4c <_printf_float+0x250>
 8006b2a:	ee18 3a10 	vmov	r3, s16
 8006b2e:	4652      	mov	r2, sl
 8006b30:	4631      	mov	r1, r6
 8006b32:	4628      	mov	r0, r5
 8006b34:	47b8      	blx	r7
 8006b36:	3001      	adds	r0, #1
 8006b38:	f43f af41 	beq.w	80069be <_printf_float+0xc2>
 8006b3c:	f04f 0800 	mov.w	r8, #0
 8006b40:	f104 091a 	add.w	r9, r4, #26
 8006b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b46:	3b01      	subs	r3, #1
 8006b48:	4543      	cmp	r3, r8
 8006b4a:	dc09      	bgt.n	8006b60 <_printf_float+0x264>
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	079b      	lsls	r3, r3, #30
 8006b50:	f100 8105 	bmi.w	8006d5e <_printf_float+0x462>
 8006b54:	68e0      	ldr	r0, [r4, #12]
 8006b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b58:	4298      	cmp	r0, r3
 8006b5a:	bfb8      	it	lt
 8006b5c:	4618      	movlt	r0, r3
 8006b5e:	e730      	b.n	80069c2 <_printf_float+0xc6>
 8006b60:	2301      	movs	r3, #1
 8006b62:	464a      	mov	r2, r9
 8006b64:	4631      	mov	r1, r6
 8006b66:	4628      	mov	r0, r5
 8006b68:	47b8      	blx	r7
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	f43f af27 	beq.w	80069be <_printf_float+0xc2>
 8006b70:	f108 0801 	add.w	r8, r8, #1
 8006b74:	e7e6      	b.n	8006b44 <_printf_float+0x248>
 8006b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	dc39      	bgt.n	8006bf0 <_printf_float+0x2f4>
 8006b7c:	4a1b      	ldr	r2, [pc, #108]	; (8006bec <_printf_float+0x2f0>)
 8006b7e:	2301      	movs	r3, #1
 8006b80:	4631      	mov	r1, r6
 8006b82:	4628      	mov	r0, r5
 8006b84:	47b8      	blx	r7
 8006b86:	3001      	adds	r0, #1
 8006b88:	f43f af19 	beq.w	80069be <_printf_float+0xc2>
 8006b8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b90:	4313      	orrs	r3, r2
 8006b92:	d102      	bne.n	8006b9a <_printf_float+0x29e>
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	07d9      	lsls	r1, r3, #31
 8006b98:	d5d8      	bpl.n	8006b4c <_printf_float+0x250>
 8006b9a:	ee18 3a10 	vmov	r3, s16
 8006b9e:	4652      	mov	r2, sl
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	47b8      	blx	r7
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	f43f af09 	beq.w	80069be <_printf_float+0xc2>
 8006bac:	f04f 0900 	mov.w	r9, #0
 8006bb0:	f104 0a1a 	add.w	sl, r4, #26
 8006bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb6:	425b      	negs	r3, r3
 8006bb8:	454b      	cmp	r3, r9
 8006bba:	dc01      	bgt.n	8006bc0 <_printf_float+0x2c4>
 8006bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bbe:	e792      	b.n	8006ae6 <_printf_float+0x1ea>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	4652      	mov	r2, sl
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	47b8      	blx	r7
 8006bca:	3001      	adds	r0, #1
 8006bcc:	f43f aef7 	beq.w	80069be <_printf_float+0xc2>
 8006bd0:	f109 0901 	add.w	r9, r9, #1
 8006bd4:	e7ee      	b.n	8006bb4 <_printf_float+0x2b8>
 8006bd6:	bf00      	nop
 8006bd8:	7fefffff 	.word	0x7fefffff
 8006bdc:	08009224 	.word	0x08009224
 8006be0:	08009228 	.word	0x08009228
 8006be4:	08009230 	.word	0x08009230
 8006be8:	0800922c 	.word	0x0800922c
 8006bec:	08009234 	.word	0x08009234
 8006bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	bfa8      	it	ge
 8006bf8:	461a      	movge	r2, r3
 8006bfa:	2a00      	cmp	r2, #0
 8006bfc:	4691      	mov	r9, r2
 8006bfe:	dc37      	bgt.n	8006c70 <_printf_float+0x374>
 8006c00:	f04f 0b00 	mov.w	fp, #0
 8006c04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c08:	f104 021a 	add.w	r2, r4, #26
 8006c0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c0e:	9305      	str	r3, [sp, #20]
 8006c10:	eba3 0309 	sub.w	r3, r3, r9
 8006c14:	455b      	cmp	r3, fp
 8006c16:	dc33      	bgt.n	8006c80 <_printf_float+0x384>
 8006c18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	db3b      	blt.n	8006c98 <_printf_float+0x39c>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	07da      	lsls	r2, r3, #31
 8006c24:	d438      	bmi.n	8006c98 <_printf_float+0x39c>
 8006c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c28:	9a05      	ldr	r2, [sp, #20]
 8006c2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c2c:	1a9a      	subs	r2, r3, r2
 8006c2e:	eba3 0901 	sub.w	r9, r3, r1
 8006c32:	4591      	cmp	r9, r2
 8006c34:	bfa8      	it	ge
 8006c36:	4691      	movge	r9, r2
 8006c38:	f1b9 0f00 	cmp.w	r9, #0
 8006c3c:	dc35      	bgt.n	8006caa <_printf_float+0x3ae>
 8006c3e:	f04f 0800 	mov.w	r8, #0
 8006c42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c46:	f104 0a1a 	add.w	sl, r4, #26
 8006c4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	eba3 0309 	sub.w	r3, r3, r9
 8006c54:	4543      	cmp	r3, r8
 8006c56:	f77f af79 	ble.w	8006b4c <_printf_float+0x250>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	4631      	mov	r1, r6
 8006c60:	4628      	mov	r0, r5
 8006c62:	47b8      	blx	r7
 8006c64:	3001      	adds	r0, #1
 8006c66:	f43f aeaa 	beq.w	80069be <_printf_float+0xc2>
 8006c6a:	f108 0801 	add.w	r8, r8, #1
 8006c6e:	e7ec      	b.n	8006c4a <_printf_float+0x34e>
 8006c70:	4613      	mov	r3, r2
 8006c72:	4631      	mov	r1, r6
 8006c74:	4642      	mov	r2, r8
 8006c76:	4628      	mov	r0, r5
 8006c78:	47b8      	blx	r7
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d1c0      	bne.n	8006c00 <_printf_float+0x304>
 8006c7e:	e69e      	b.n	80069be <_printf_float+0xc2>
 8006c80:	2301      	movs	r3, #1
 8006c82:	4631      	mov	r1, r6
 8006c84:	4628      	mov	r0, r5
 8006c86:	9205      	str	r2, [sp, #20]
 8006c88:	47b8      	blx	r7
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	f43f ae97 	beq.w	80069be <_printf_float+0xc2>
 8006c90:	9a05      	ldr	r2, [sp, #20]
 8006c92:	f10b 0b01 	add.w	fp, fp, #1
 8006c96:	e7b9      	b.n	8006c0c <_printf_float+0x310>
 8006c98:	ee18 3a10 	vmov	r3, s16
 8006c9c:	4652      	mov	r2, sl
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	47b8      	blx	r7
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d1be      	bne.n	8006c26 <_printf_float+0x32a>
 8006ca8:	e689      	b.n	80069be <_printf_float+0xc2>
 8006caa:	9a05      	ldr	r2, [sp, #20]
 8006cac:	464b      	mov	r3, r9
 8006cae:	4442      	add	r2, r8
 8006cb0:	4631      	mov	r1, r6
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	47b8      	blx	r7
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	d1c1      	bne.n	8006c3e <_printf_float+0x342>
 8006cba:	e680      	b.n	80069be <_printf_float+0xc2>
 8006cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cbe:	2a01      	cmp	r2, #1
 8006cc0:	dc01      	bgt.n	8006cc6 <_printf_float+0x3ca>
 8006cc2:	07db      	lsls	r3, r3, #31
 8006cc4:	d538      	bpl.n	8006d38 <_printf_float+0x43c>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	4642      	mov	r2, r8
 8006cca:	4631      	mov	r1, r6
 8006ccc:	4628      	mov	r0, r5
 8006cce:	47b8      	blx	r7
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	f43f ae74 	beq.w	80069be <_printf_float+0xc2>
 8006cd6:	ee18 3a10 	vmov	r3, s16
 8006cda:	4652      	mov	r2, sl
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4628      	mov	r0, r5
 8006ce0:	47b8      	blx	r7
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	f43f ae6b 	beq.w	80069be <_printf_float+0xc2>
 8006ce8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cec:	2200      	movs	r2, #0
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f7f9 feea 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cf4:	b9d8      	cbnz	r0, 8006d2e <_printf_float+0x432>
 8006cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf8:	f108 0201 	add.w	r2, r8, #1
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	4631      	mov	r1, r6
 8006d00:	4628      	mov	r0, r5
 8006d02:	47b8      	blx	r7
 8006d04:	3001      	adds	r0, #1
 8006d06:	d10e      	bne.n	8006d26 <_printf_float+0x42a>
 8006d08:	e659      	b.n	80069be <_printf_float+0xc2>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	4652      	mov	r2, sl
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4628      	mov	r0, r5
 8006d12:	47b8      	blx	r7
 8006d14:	3001      	adds	r0, #1
 8006d16:	f43f ae52 	beq.w	80069be <_printf_float+0xc2>
 8006d1a:	f108 0801 	add.w	r8, r8, #1
 8006d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d20:	3b01      	subs	r3, #1
 8006d22:	4543      	cmp	r3, r8
 8006d24:	dcf1      	bgt.n	8006d0a <_printf_float+0x40e>
 8006d26:	464b      	mov	r3, r9
 8006d28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d2c:	e6dc      	b.n	8006ae8 <_printf_float+0x1ec>
 8006d2e:	f04f 0800 	mov.w	r8, #0
 8006d32:	f104 0a1a 	add.w	sl, r4, #26
 8006d36:	e7f2      	b.n	8006d1e <_printf_float+0x422>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	4642      	mov	r2, r8
 8006d3c:	e7df      	b.n	8006cfe <_printf_float+0x402>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	464a      	mov	r2, r9
 8006d42:	4631      	mov	r1, r6
 8006d44:	4628      	mov	r0, r5
 8006d46:	47b8      	blx	r7
 8006d48:	3001      	adds	r0, #1
 8006d4a:	f43f ae38 	beq.w	80069be <_printf_float+0xc2>
 8006d4e:	f108 0801 	add.w	r8, r8, #1
 8006d52:	68e3      	ldr	r3, [r4, #12]
 8006d54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d56:	1a5b      	subs	r3, r3, r1
 8006d58:	4543      	cmp	r3, r8
 8006d5a:	dcf0      	bgt.n	8006d3e <_printf_float+0x442>
 8006d5c:	e6fa      	b.n	8006b54 <_printf_float+0x258>
 8006d5e:	f04f 0800 	mov.w	r8, #0
 8006d62:	f104 0919 	add.w	r9, r4, #25
 8006d66:	e7f4      	b.n	8006d52 <_printf_float+0x456>

08006d68 <_printf_common>:
 8006d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6c:	4616      	mov	r6, r2
 8006d6e:	4699      	mov	r9, r3
 8006d70:	688a      	ldr	r2, [r1, #8]
 8006d72:	690b      	ldr	r3, [r1, #16]
 8006d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	bfb8      	it	lt
 8006d7c:	4613      	movlt	r3, r2
 8006d7e:	6033      	str	r3, [r6, #0]
 8006d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d84:	4607      	mov	r7, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	b10a      	cbz	r2, 8006d8e <_printf_common+0x26>
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	6033      	str	r3, [r6, #0]
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	0699      	lsls	r1, r3, #26
 8006d92:	bf42      	ittt	mi
 8006d94:	6833      	ldrmi	r3, [r6, #0]
 8006d96:	3302      	addmi	r3, #2
 8006d98:	6033      	strmi	r3, [r6, #0]
 8006d9a:	6825      	ldr	r5, [r4, #0]
 8006d9c:	f015 0506 	ands.w	r5, r5, #6
 8006da0:	d106      	bne.n	8006db0 <_printf_common+0x48>
 8006da2:	f104 0a19 	add.w	sl, r4, #25
 8006da6:	68e3      	ldr	r3, [r4, #12]
 8006da8:	6832      	ldr	r2, [r6, #0]
 8006daa:	1a9b      	subs	r3, r3, r2
 8006dac:	42ab      	cmp	r3, r5
 8006dae:	dc26      	bgt.n	8006dfe <_printf_common+0x96>
 8006db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006db4:	1e13      	subs	r3, r2, #0
 8006db6:	6822      	ldr	r2, [r4, #0]
 8006db8:	bf18      	it	ne
 8006dba:	2301      	movne	r3, #1
 8006dbc:	0692      	lsls	r2, r2, #26
 8006dbe:	d42b      	bmi.n	8006e18 <_printf_common+0xb0>
 8006dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	47c0      	blx	r8
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d01e      	beq.n	8006e0c <_printf_common+0xa4>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	68e5      	ldr	r5, [r4, #12]
 8006dd2:	6832      	ldr	r2, [r6, #0]
 8006dd4:	f003 0306 	and.w	r3, r3, #6
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	bf08      	it	eq
 8006ddc:	1aad      	subeq	r5, r5, r2
 8006dde:	68a3      	ldr	r3, [r4, #8]
 8006de0:	6922      	ldr	r2, [r4, #16]
 8006de2:	bf0c      	ite	eq
 8006de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006de8:	2500      	movne	r5, #0
 8006dea:	4293      	cmp	r3, r2
 8006dec:	bfc4      	itt	gt
 8006dee:	1a9b      	subgt	r3, r3, r2
 8006df0:	18ed      	addgt	r5, r5, r3
 8006df2:	2600      	movs	r6, #0
 8006df4:	341a      	adds	r4, #26
 8006df6:	42b5      	cmp	r5, r6
 8006df8:	d11a      	bne.n	8006e30 <_printf_common+0xc8>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e008      	b.n	8006e10 <_printf_common+0xa8>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4652      	mov	r2, sl
 8006e02:	4649      	mov	r1, r9
 8006e04:	4638      	mov	r0, r7
 8006e06:	47c0      	blx	r8
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d103      	bne.n	8006e14 <_printf_common+0xac>
 8006e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e14:	3501      	adds	r5, #1
 8006e16:	e7c6      	b.n	8006da6 <_printf_common+0x3e>
 8006e18:	18e1      	adds	r1, r4, r3
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	2030      	movs	r0, #48	; 0x30
 8006e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e22:	4422      	add	r2, r4
 8006e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e2c:	3302      	adds	r3, #2
 8006e2e:	e7c7      	b.n	8006dc0 <_printf_common+0x58>
 8006e30:	2301      	movs	r3, #1
 8006e32:	4622      	mov	r2, r4
 8006e34:	4649      	mov	r1, r9
 8006e36:	4638      	mov	r0, r7
 8006e38:	47c0      	blx	r8
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	d0e6      	beq.n	8006e0c <_printf_common+0xa4>
 8006e3e:	3601      	adds	r6, #1
 8006e40:	e7d9      	b.n	8006df6 <_printf_common+0x8e>
	...

08006e44 <_printf_i>:
 8006e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e48:	7e0f      	ldrb	r7, [r1, #24]
 8006e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e4c:	2f78      	cmp	r7, #120	; 0x78
 8006e4e:	4691      	mov	r9, r2
 8006e50:	4680      	mov	r8, r0
 8006e52:	460c      	mov	r4, r1
 8006e54:	469a      	mov	sl, r3
 8006e56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e5a:	d807      	bhi.n	8006e6c <_printf_i+0x28>
 8006e5c:	2f62      	cmp	r7, #98	; 0x62
 8006e5e:	d80a      	bhi.n	8006e76 <_printf_i+0x32>
 8006e60:	2f00      	cmp	r7, #0
 8006e62:	f000 80d8 	beq.w	8007016 <_printf_i+0x1d2>
 8006e66:	2f58      	cmp	r7, #88	; 0x58
 8006e68:	f000 80a3 	beq.w	8006fb2 <_printf_i+0x16e>
 8006e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e74:	e03a      	b.n	8006eec <_printf_i+0xa8>
 8006e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e7a:	2b15      	cmp	r3, #21
 8006e7c:	d8f6      	bhi.n	8006e6c <_printf_i+0x28>
 8006e7e:	a101      	add	r1, pc, #4	; (adr r1, 8006e84 <_printf_i+0x40>)
 8006e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e84:	08006edd 	.word	0x08006edd
 8006e88:	08006ef1 	.word	0x08006ef1
 8006e8c:	08006e6d 	.word	0x08006e6d
 8006e90:	08006e6d 	.word	0x08006e6d
 8006e94:	08006e6d 	.word	0x08006e6d
 8006e98:	08006e6d 	.word	0x08006e6d
 8006e9c:	08006ef1 	.word	0x08006ef1
 8006ea0:	08006e6d 	.word	0x08006e6d
 8006ea4:	08006e6d 	.word	0x08006e6d
 8006ea8:	08006e6d 	.word	0x08006e6d
 8006eac:	08006e6d 	.word	0x08006e6d
 8006eb0:	08006ffd 	.word	0x08006ffd
 8006eb4:	08006f21 	.word	0x08006f21
 8006eb8:	08006fdf 	.word	0x08006fdf
 8006ebc:	08006e6d 	.word	0x08006e6d
 8006ec0:	08006e6d 	.word	0x08006e6d
 8006ec4:	0800701f 	.word	0x0800701f
 8006ec8:	08006e6d 	.word	0x08006e6d
 8006ecc:	08006f21 	.word	0x08006f21
 8006ed0:	08006e6d 	.word	0x08006e6d
 8006ed4:	08006e6d 	.word	0x08006e6d
 8006ed8:	08006fe7 	.word	0x08006fe7
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	1d1a      	adds	r2, r3, #4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	602a      	str	r2, [r5, #0]
 8006ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eec:	2301      	movs	r3, #1
 8006eee:	e0a3      	b.n	8007038 <_printf_i+0x1f4>
 8006ef0:	6820      	ldr	r0, [r4, #0]
 8006ef2:	6829      	ldr	r1, [r5, #0]
 8006ef4:	0606      	lsls	r6, r0, #24
 8006ef6:	f101 0304 	add.w	r3, r1, #4
 8006efa:	d50a      	bpl.n	8006f12 <_printf_i+0xce>
 8006efc:	680e      	ldr	r6, [r1, #0]
 8006efe:	602b      	str	r3, [r5, #0]
 8006f00:	2e00      	cmp	r6, #0
 8006f02:	da03      	bge.n	8006f0c <_printf_i+0xc8>
 8006f04:	232d      	movs	r3, #45	; 0x2d
 8006f06:	4276      	negs	r6, r6
 8006f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f0c:	485e      	ldr	r0, [pc, #376]	; (8007088 <_printf_i+0x244>)
 8006f0e:	230a      	movs	r3, #10
 8006f10:	e019      	b.n	8006f46 <_printf_i+0x102>
 8006f12:	680e      	ldr	r6, [r1, #0]
 8006f14:	602b      	str	r3, [r5, #0]
 8006f16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f1a:	bf18      	it	ne
 8006f1c:	b236      	sxthne	r6, r6
 8006f1e:	e7ef      	b.n	8006f00 <_printf_i+0xbc>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	6820      	ldr	r0, [r4, #0]
 8006f24:	1d19      	adds	r1, r3, #4
 8006f26:	6029      	str	r1, [r5, #0]
 8006f28:	0601      	lsls	r1, r0, #24
 8006f2a:	d501      	bpl.n	8006f30 <_printf_i+0xec>
 8006f2c:	681e      	ldr	r6, [r3, #0]
 8006f2e:	e002      	b.n	8006f36 <_printf_i+0xf2>
 8006f30:	0646      	lsls	r6, r0, #25
 8006f32:	d5fb      	bpl.n	8006f2c <_printf_i+0xe8>
 8006f34:	881e      	ldrh	r6, [r3, #0]
 8006f36:	4854      	ldr	r0, [pc, #336]	; (8007088 <_printf_i+0x244>)
 8006f38:	2f6f      	cmp	r7, #111	; 0x6f
 8006f3a:	bf0c      	ite	eq
 8006f3c:	2308      	moveq	r3, #8
 8006f3e:	230a      	movne	r3, #10
 8006f40:	2100      	movs	r1, #0
 8006f42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f46:	6865      	ldr	r5, [r4, #4]
 8006f48:	60a5      	str	r5, [r4, #8]
 8006f4a:	2d00      	cmp	r5, #0
 8006f4c:	bfa2      	ittt	ge
 8006f4e:	6821      	ldrge	r1, [r4, #0]
 8006f50:	f021 0104 	bicge.w	r1, r1, #4
 8006f54:	6021      	strge	r1, [r4, #0]
 8006f56:	b90e      	cbnz	r6, 8006f5c <_printf_i+0x118>
 8006f58:	2d00      	cmp	r5, #0
 8006f5a:	d04d      	beq.n	8006ff8 <_printf_i+0x1b4>
 8006f5c:	4615      	mov	r5, r2
 8006f5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f62:	fb03 6711 	mls	r7, r3, r1, r6
 8006f66:	5dc7      	ldrb	r7, [r0, r7]
 8006f68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f6c:	4637      	mov	r7, r6
 8006f6e:	42bb      	cmp	r3, r7
 8006f70:	460e      	mov	r6, r1
 8006f72:	d9f4      	bls.n	8006f5e <_printf_i+0x11a>
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d10b      	bne.n	8006f90 <_printf_i+0x14c>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	07de      	lsls	r6, r3, #31
 8006f7c:	d508      	bpl.n	8006f90 <_printf_i+0x14c>
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	6861      	ldr	r1, [r4, #4]
 8006f82:	4299      	cmp	r1, r3
 8006f84:	bfde      	ittt	le
 8006f86:	2330      	movle	r3, #48	; 0x30
 8006f88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f90:	1b52      	subs	r2, r2, r5
 8006f92:	6122      	str	r2, [r4, #16]
 8006f94:	f8cd a000 	str.w	sl, [sp]
 8006f98:	464b      	mov	r3, r9
 8006f9a:	aa03      	add	r2, sp, #12
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	f7ff fee2 	bl	8006d68 <_printf_common>
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d14c      	bne.n	8007042 <_printf_i+0x1fe>
 8006fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fac:	b004      	add	sp, #16
 8006fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb2:	4835      	ldr	r0, [pc, #212]	; (8007088 <_printf_i+0x244>)
 8006fb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006fb8:	6829      	ldr	r1, [r5, #0]
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006fc0:	6029      	str	r1, [r5, #0]
 8006fc2:	061d      	lsls	r5, r3, #24
 8006fc4:	d514      	bpl.n	8006ff0 <_printf_i+0x1ac>
 8006fc6:	07df      	lsls	r7, r3, #31
 8006fc8:	bf44      	itt	mi
 8006fca:	f043 0320 	orrmi.w	r3, r3, #32
 8006fce:	6023      	strmi	r3, [r4, #0]
 8006fd0:	b91e      	cbnz	r6, 8006fda <_printf_i+0x196>
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	f023 0320 	bic.w	r3, r3, #32
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	2310      	movs	r3, #16
 8006fdc:	e7b0      	b.n	8006f40 <_printf_i+0xfc>
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	f043 0320 	orr.w	r3, r3, #32
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	2378      	movs	r3, #120	; 0x78
 8006fe8:	4828      	ldr	r0, [pc, #160]	; (800708c <_printf_i+0x248>)
 8006fea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fee:	e7e3      	b.n	8006fb8 <_printf_i+0x174>
 8006ff0:	0659      	lsls	r1, r3, #25
 8006ff2:	bf48      	it	mi
 8006ff4:	b2b6      	uxthmi	r6, r6
 8006ff6:	e7e6      	b.n	8006fc6 <_printf_i+0x182>
 8006ff8:	4615      	mov	r5, r2
 8006ffa:	e7bb      	b.n	8006f74 <_printf_i+0x130>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	6826      	ldr	r6, [r4, #0]
 8007000:	6961      	ldr	r1, [r4, #20]
 8007002:	1d18      	adds	r0, r3, #4
 8007004:	6028      	str	r0, [r5, #0]
 8007006:	0635      	lsls	r5, r6, #24
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	d501      	bpl.n	8007010 <_printf_i+0x1cc>
 800700c:	6019      	str	r1, [r3, #0]
 800700e:	e002      	b.n	8007016 <_printf_i+0x1d2>
 8007010:	0670      	lsls	r0, r6, #25
 8007012:	d5fb      	bpl.n	800700c <_printf_i+0x1c8>
 8007014:	8019      	strh	r1, [r3, #0]
 8007016:	2300      	movs	r3, #0
 8007018:	6123      	str	r3, [r4, #16]
 800701a:	4615      	mov	r5, r2
 800701c:	e7ba      	b.n	8006f94 <_printf_i+0x150>
 800701e:	682b      	ldr	r3, [r5, #0]
 8007020:	1d1a      	adds	r2, r3, #4
 8007022:	602a      	str	r2, [r5, #0]
 8007024:	681d      	ldr	r5, [r3, #0]
 8007026:	6862      	ldr	r2, [r4, #4]
 8007028:	2100      	movs	r1, #0
 800702a:	4628      	mov	r0, r5
 800702c:	f7f9 f8d8 	bl	80001e0 <memchr>
 8007030:	b108      	cbz	r0, 8007036 <_printf_i+0x1f2>
 8007032:	1b40      	subs	r0, r0, r5
 8007034:	6060      	str	r0, [r4, #4]
 8007036:	6863      	ldr	r3, [r4, #4]
 8007038:	6123      	str	r3, [r4, #16]
 800703a:	2300      	movs	r3, #0
 800703c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007040:	e7a8      	b.n	8006f94 <_printf_i+0x150>
 8007042:	6923      	ldr	r3, [r4, #16]
 8007044:	462a      	mov	r2, r5
 8007046:	4649      	mov	r1, r9
 8007048:	4640      	mov	r0, r8
 800704a:	47d0      	blx	sl
 800704c:	3001      	adds	r0, #1
 800704e:	d0ab      	beq.n	8006fa8 <_printf_i+0x164>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	079b      	lsls	r3, r3, #30
 8007054:	d413      	bmi.n	800707e <_printf_i+0x23a>
 8007056:	68e0      	ldr	r0, [r4, #12]
 8007058:	9b03      	ldr	r3, [sp, #12]
 800705a:	4298      	cmp	r0, r3
 800705c:	bfb8      	it	lt
 800705e:	4618      	movlt	r0, r3
 8007060:	e7a4      	b.n	8006fac <_printf_i+0x168>
 8007062:	2301      	movs	r3, #1
 8007064:	4632      	mov	r2, r6
 8007066:	4649      	mov	r1, r9
 8007068:	4640      	mov	r0, r8
 800706a:	47d0      	blx	sl
 800706c:	3001      	adds	r0, #1
 800706e:	d09b      	beq.n	8006fa8 <_printf_i+0x164>
 8007070:	3501      	adds	r5, #1
 8007072:	68e3      	ldr	r3, [r4, #12]
 8007074:	9903      	ldr	r1, [sp, #12]
 8007076:	1a5b      	subs	r3, r3, r1
 8007078:	42ab      	cmp	r3, r5
 800707a:	dcf2      	bgt.n	8007062 <_printf_i+0x21e>
 800707c:	e7eb      	b.n	8007056 <_printf_i+0x212>
 800707e:	2500      	movs	r5, #0
 8007080:	f104 0619 	add.w	r6, r4, #25
 8007084:	e7f5      	b.n	8007072 <_printf_i+0x22e>
 8007086:	bf00      	nop
 8007088:	08009236 	.word	0x08009236
 800708c:	08009247 	.word	0x08009247

08007090 <quorem>:
 8007090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	6903      	ldr	r3, [r0, #16]
 8007096:	690c      	ldr	r4, [r1, #16]
 8007098:	42a3      	cmp	r3, r4
 800709a:	4607      	mov	r7, r0
 800709c:	f2c0 8081 	blt.w	80071a2 <quorem+0x112>
 80070a0:	3c01      	subs	r4, #1
 80070a2:	f101 0814 	add.w	r8, r1, #20
 80070a6:	f100 0514 	add.w	r5, r0, #20
 80070aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070b8:	3301      	adds	r3, #1
 80070ba:	429a      	cmp	r2, r3
 80070bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80070c8:	d331      	bcc.n	800712e <quorem+0x9e>
 80070ca:	f04f 0e00 	mov.w	lr, #0
 80070ce:	4640      	mov	r0, r8
 80070d0:	46ac      	mov	ip, r5
 80070d2:	46f2      	mov	sl, lr
 80070d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80070d8:	b293      	uxth	r3, r2
 80070da:	fb06 e303 	mla	r3, r6, r3, lr
 80070de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	ebaa 0303 	sub.w	r3, sl, r3
 80070e8:	f8dc a000 	ldr.w	sl, [ip]
 80070ec:	0c12      	lsrs	r2, r2, #16
 80070ee:	fa13 f38a 	uxtah	r3, r3, sl
 80070f2:	fb06 e202 	mla	r2, r6, r2, lr
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	9b00      	ldr	r3, [sp, #0]
 80070fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070fe:	b292      	uxth	r2, r2
 8007100:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007104:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007108:	f8bd 3000 	ldrh.w	r3, [sp]
 800710c:	4581      	cmp	r9, r0
 800710e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007112:	f84c 3b04 	str.w	r3, [ip], #4
 8007116:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800711a:	d2db      	bcs.n	80070d4 <quorem+0x44>
 800711c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007120:	b92b      	cbnz	r3, 800712e <quorem+0x9e>
 8007122:	9b01      	ldr	r3, [sp, #4]
 8007124:	3b04      	subs	r3, #4
 8007126:	429d      	cmp	r5, r3
 8007128:	461a      	mov	r2, r3
 800712a:	d32e      	bcc.n	800718a <quorem+0xfa>
 800712c:	613c      	str	r4, [r7, #16]
 800712e:	4638      	mov	r0, r7
 8007130:	f001 f8c4 	bl	80082bc <__mcmp>
 8007134:	2800      	cmp	r0, #0
 8007136:	db24      	blt.n	8007182 <quorem+0xf2>
 8007138:	3601      	adds	r6, #1
 800713a:	4628      	mov	r0, r5
 800713c:	f04f 0c00 	mov.w	ip, #0
 8007140:	f858 2b04 	ldr.w	r2, [r8], #4
 8007144:	f8d0 e000 	ldr.w	lr, [r0]
 8007148:	b293      	uxth	r3, r2
 800714a:	ebac 0303 	sub.w	r3, ip, r3
 800714e:	0c12      	lsrs	r2, r2, #16
 8007150:	fa13 f38e 	uxtah	r3, r3, lr
 8007154:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800715c:	b29b      	uxth	r3, r3
 800715e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007162:	45c1      	cmp	r9, r8
 8007164:	f840 3b04 	str.w	r3, [r0], #4
 8007168:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800716c:	d2e8      	bcs.n	8007140 <quorem+0xb0>
 800716e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007176:	b922      	cbnz	r2, 8007182 <quorem+0xf2>
 8007178:	3b04      	subs	r3, #4
 800717a:	429d      	cmp	r5, r3
 800717c:	461a      	mov	r2, r3
 800717e:	d30a      	bcc.n	8007196 <quorem+0x106>
 8007180:	613c      	str	r4, [r7, #16]
 8007182:	4630      	mov	r0, r6
 8007184:	b003      	add	sp, #12
 8007186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718a:	6812      	ldr	r2, [r2, #0]
 800718c:	3b04      	subs	r3, #4
 800718e:	2a00      	cmp	r2, #0
 8007190:	d1cc      	bne.n	800712c <quorem+0x9c>
 8007192:	3c01      	subs	r4, #1
 8007194:	e7c7      	b.n	8007126 <quorem+0x96>
 8007196:	6812      	ldr	r2, [r2, #0]
 8007198:	3b04      	subs	r3, #4
 800719a:	2a00      	cmp	r2, #0
 800719c:	d1f0      	bne.n	8007180 <quorem+0xf0>
 800719e:	3c01      	subs	r4, #1
 80071a0:	e7eb      	b.n	800717a <quorem+0xea>
 80071a2:	2000      	movs	r0, #0
 80071a4:	e7ee      	b.n	8007184 <quorem+0xf4>
	...

080071a8 <_dtoa_r>:
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	ed2d 8b04 	vpush	{d8-d9}
 80071b0:	ec57 6b10 	vmov	r6, r7, d0
 80071b4:	b093      	sub	sp, #76	; 0x4c
 80071b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80071bc:	9106      	str	r1, [sp, #24]
 80071be:	ee10 aa10 	vmov	sl, s0
 80071c2:	4604      	mov	r4, r0
 80071c4:	9209      	str	r2, [sp, #36]	; 0x24
 80071c6:	930c      	str	r3, [sp, #48]	; 0x30
 80071c8:	46bb      	mov	fp, r7
 80071ca:	b975      	cbnz	r5, 80071ea <_dtoa_r+0x42>
 80071cc:	2010      	movs	r0, #16
 80071ce:	f000 fddd 	bl	8007d8c <malloc>
 80071d2:	4602      	mov	r2, r0
 80071d4:	6260      	str	r0, [r4, #36]	; 0x24
 80071d6:	b920      	cbnz	r0, 80071e2 <_dtoa_r+0x3a>
 80071d8:	4ba7      	ldr	r3, [pc, #668]	; (8007478 <_dtoa_r+0x2d0>)
 80071da:	21ea      	movs	r1, #234	; 0xea
 80071dc:	48a7      	ldr	r0, [pc, #668]	; (800747c <_dtoa_r+0x2d4>)
 80071de:	f001 fa75 	bl	80086cc <__assert_func>
 80071e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071e6:	6005      	str	r5, [r0, #0]
 80071e8:	60c5      	str	r5, [r0, #12]
 80071ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ec:	6819      	ldr	r1, [r3, #0]
 80071ee:	b151      	cbz	r1, 8007206 <_dtoa_r+0x5e>
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	604a      	str	r2, [r1, #4]
 80071f4:	2301      	movs	r3, #1
 80071f6:	4093      	lsls	r3, r2
 80071f8:	608b      	str	r3, [r1, #8]
 80071fa:	4620      	mov	r0, r4
 80071fc:	f000 fe1c 	bl	8007e38 <_Bfree>
 8007200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	1e3b      	subs	r3, r7, #0
 8007208:	bfaa      	itet	ge
 800720a:	2300      	movge	r3, #0
 800720c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007210:	f8c8 3000 	strge.w	r3, [r8]
 8007214:	4b9a      	ldr	r3, [pc, #616]	; (8007480 <_dtoa_r+0x2d8>)
 8007216:	bfbc      	itt	lt
 8007218:	2201      	movlt	r2, #1
 800721a:	f8c8 2000 	strlt.w	r2, [r8]
 800721e:	ea33 030b 	bics.w	r3, r3, fp
 8007222:	d11b      	bne.n	800725c <_dtoa_r+0xb4>
 8007224:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007226:	f242 730f 	movw	r3, #9999	; 0x270f
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007230:	4333      	orrs	r3, r6
 8007232:	f000 8592 	beq.w	8007d5a <_dtoa_r+0xbb2>
 8007236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007238:	b963      	cbnz	r3, 8007254 <_dtoa_r+0xac>
 800723a:	4b92      	ldr	r3, [pc, #584]	; (8007484 <_dtoa_r+0x2dc>)
 800723c:	e022      	b.n	8007284 <_dtoa_r+0xdc>
 800723e:	4b92      	ldr	r3, [pc, #584]	; (8007488 <_dtoa_r+0x2e0>)
 8007240:	9301      	str	r3, [sp, #4]
 8007242:	3308      	adds	r3, #8
 8007244:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	9801      	ldr	r0, [sp, #4]
 800724a:	b013      	add	sp, #76	; 0x4c
 800724c:	ecbd 8b04 	vpop	{d8-d9}
 8007250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007254:	4b8b      	ldr	r3, [pc, #556]	; (8007484 <_dtoa_r+0x2dc>)
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	3303      	adds	r3, #3
 800725a:	e7f3      	b.n	8007244 <_dtoa_r+0x9c>
 800725c:	2200      	movs	r2, #0
 800725e:	2300      	movs	r3, #0
 8007260:	4650      	mov	r0, sl
 8007262:	4659      	mov	r1, fp
 8007264:	f7f9 fc30 	bl	8000ac8 <__aeabi_dcmpeq>
 8007268:	ec4b ab19 	vmov	d9, sl, fp
 800726c:	4680      	mov	r8, r0
 800726e:	b158      	cbz	r0, 8007288 <_dtoa_r+0xe0>
 8007270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007272:	2301      	movs	r3, #1
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 856b 	beq.w	8007d54 <_dtoa_r+0xbac>
 800727e:	4883      	ldr	r0, [pc, #524]	; (800748c <_dtoa_r+0x2e4>)
 8007280:	6018      	str	r0, [r3, #0]
 8007282:	1e43      	subs	r3, r0, #1
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	e7df      	b.n	8007248 <_dtoa_r+0xa0>
 8007288:	ec4b ab10 	vmov	d0, sl, fp
 800728c:	aa10      	add	r2, sp, #64	; 0x40
 800728e:	a911      	add	r1, sp, #68	; 0x44
 8007290:	4620      	mov	r0, r4
 8007292:	f001 f8b9 	bl	8008408 <__d2b>
 8007296:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800729a:	ee08 0a10 	vmov	s16, r0
 800729e:	2d00      	cmp	r5, #0
 80072a0:	f000 8084 	beq.w	80073ac <_dtoa_r+0x204>
 80072a4:	ee19 3a90 	vmov	r3, s19
 80072a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80072b0:	4656      	mov	r6, sl
 80072b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80072b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80072ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80072be:	4b74      	ldr	r3, [pc, #464]	; (8007490 <_dtoa_r+0x2e8>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	4630      	mov	r0, r6
 80072c4:	4639      	mov	r1, r7
 80072c6:	f7f8 ffdf 	bl	8000288 <__aeabi_dsub>
 80072ca:	a365      	add	r3, pc, #404	; (adr r3, 8007460 <_dtoa_r+0x2b8>)
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f7f9 f992 	bl	80005f8 <__aeabi_dmul>
 80072d4:	a364      	add	r3, pc, #400	; (adr r3, 8007468 <_dtoa_r+0x2c0>)
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	f7f8 ffd7 	bl	800028c <__adddf3>
 80072de:	4606      	mov	r6, r0
 80072e0:	4628      	mov	r0, r5
 80072e2:	460f      	mov	r7, r1
 80072e4:	f7f9 f91e 	bl	8000524 <__aeabi_i2d>
 80072e8:	a361      	add	r3, pc, #388	; (adr r3, 8007470 <_dtoa_r+0x2c8>)
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	f7f9 f983 	bl	80005f8 <__aeabi_dmul>
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	4630      	mov	r0, r6
 80072f8:	4639      	mov	r1, r7
 80072fa:	f7f8 ffc7 	bl	800028c <__adddf3>
 80072fe:	4606      	mov	r6, r0
 8007300:	460f      	mov	r7, r1
 8007302:	f7f9 fc29 	bl	8000b58 <__aeabi_d2iz>
 8007306:	2200      	movs	r2, #0
 8007308:	9000      	str	r0, [sp, #0]
 800730a:	2300      	movs	r3, #0
 800730c:	4630      	mov	r0, r6
 800730e:	4639      	mov	r1, r7
 8007310:	f7f9 fbe4 	bl	8000adc <__aeabi_dcmplt>
 8007314:	b150      	cbz	r0, 800732c <_dtoa_r+0x184>
 8007316:	9800      	ldr	r0, [sp, #0]
 8007318:	f7f9 f904 	bl	8000524 <__aeabi_i2d>
 800731c:	4632      	mov	r2, r6
 800731e:	463b      	mov	r3, r7
 8007320:	f7f9 fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007324:	b910      	cbnz	r0, 800732c <_dtoa_r+0x184>
 8007326:	9b00      	ldr	r3, [sp, #0]
 8007328:	3b01      	subs	r3, #1
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	9b00      	ldr	r3, [sp, #0]
 800732e:	2b16      	cmp	r3, #22
 8007330:	d85a      	bhi.n	80073e8 <_dtoa_r+0x240>
 8007332:	9a00      	ldr	r2, [sp, #0]
 8007334:	4b57      	ldr	r3, [pc, #348]	; (8007494 <_dtoa_r+0x2ec>)
 8007336:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	ec51 0b19 	vmov	r0, r1, d9
 8007342:	f7f9 fbcb 	bl	8000adc <__aeabi_dcmplt>
 8007346:	2800      	cmp	r0, #0
 8007348:	d050      	beq.n	80073ec <_dtoa_r+0x244>
 800734a:	9b00      	ldr	r3, [sp, #0]
 800734c:	3b01      	subs	r3, #1
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	2300      	movs	r3, #0
 8007352:	930b      	str	r3, [sp, #44]	; 0x2c
 8007354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007356:	1b5d      	subs	r5, r3, r5
 8007358:	1e6b      	subs	r3, r5, #1
 800735a:	9305      	str	r3, [sp, #20]
 800735c:	bf45      	ittet	mi
 800735e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007362:	9304      	strmi	r3, [sp, #16]
 8007364:	2300      	movpl	r3, #0
 8007366:	2300      	movmi	r3, #0
 8007368:	bf4c      	ite	mi
 800736a:	9305      	strmi	r3, [sp, #20]
 800736c:	9304      	strpl	r3, [sp, #16]
 800736e:	9b00      	ldr	r3, [sp, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	db3d      	blt.n	80073f0 <_dtoa_r+0x248>
 8007374:	9b05      	ldr	r3, [sp, #20]
 8007376:	9a00      	ldr	r2, [sp, #0]
 8007378:	920a      	str	r2, [sp, #40]	; 0x28
 800737a:	4413      	add	r3, r2
 800737c:	9305      	str	r3, [sp, #20]
 800737e:	2300      	movs	r3, #0
 8007380:	9307      	str	r3, [sp, #28]
 8007382:	9b06      	ldr	r3, [sp, #24]
 8007384:	2b09      	cmp	r3, #9
 8007386:	f200 8089 	bhi.w	800749c <_dtoa_r+0x2f4>
 800738a:	2b05      	cmp	r3, #5
 800738c:	bfc4      	itt	gt
 800738e:	3b04      	subgt	r3, #4
 8007390:	9306      	strgt	r3, [sp, #24]
 8007392:	9b06      	ldr	r3, [sp, #24]
 8007394:	f1a3 0302 	sub.w	r3, r3, #2
 8007398:	bfcc      	ite	gt
 800739a:	2500      	movgt	r5, #0
 800739c:	2501      	movle	r5, #1
 800739e:	2b03      	cmp	r3, #3
 80073a0:	f200 8087 	bhi.w	80074b2 <_dtoa_r+0x30a>
 80073a4:	e8df f003 	tbb	[pc, r3]
 80073a8:	59383a2d 	.word	0x59383a2d
 80073ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80073b0:	441d      	add	r5, r3
 80073b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80073b6:	2b20      	cmp	r3, #32
 80073b8:	bfc1      	itttt	gt
 80073ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80073c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80073c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80073ca:	bfda      	itte	le
 80073cc:	f1c3 0320 	rsble	r3, r3, #32
 80073d0:	fa06 f003 	lslle.w	r0, r6, r3
 80073d4:	4318      	orrgt	r0, r3
 80073d6:	f7f9 f895 	bl	8000504 <__aeabi_ui2d>
 80073da:	2301      	movs	r3, #1
 80073dc:	4606      	mov	r6, r0
 80073de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80073e2:	3d01      	subs	r5, #1
 80073e4:	930e      	str	r3, [sp, #56]	; 0x38
 80073e6:	e76a      	b.n	80072be <_dtoa_r+0x116>
 80073e8:	2301      	movs	r3, #1
 80073ea:	e7b2      	b.n	8007352 <_dtoa_r+0x1aa>
 80073ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80073ee:	e7b1      	b.n	8007354 <_dtoa_r+0x1ac>
 80073f0:	9b04      	ldr	r3, [sp, #16]
 80073f2:	9a00      	ldr	r2, [sp, #0]
 80073f4:	1a9b      	subs	r3, r3, r2
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	4253      	negs	r3, r2
 80073fa:	9307      	str	r3, [sp, #28]
 80073fc:	2300      	movs	r3, #0
 80073fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007400:	e7bf      	b.n	8007382 <_dtoa_r+0x1da>
 8007402:	2300      	movs	r3, #0
 8007404:	9308      	str	r3, [sp, #32]
 8007406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007408:	2b00      	cmp	r3, #0
 800740a:	dc55      	bgt.n	80074b8 <_dtoa_r+0x310>
 800740c:	2301      	movs	r3, #1
 800740e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007412:	461a      	mov	r2, r3
 8007414:	9209      	str	r2, [sp, #36]	; 0x24
 8007416:	e00c      	b.n	8007432 <_dtoa_r+0x28a>
 8007418:	2301      	movs	r3, #1
 800741a:	e7f3      	b.n	8007404 <_dtoa_r+0x25c>
 800741c:	2300      	movs	r3, #0
 800741e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007420:	9308      	str	r3, [sp, #32]
 8007422:	9b00      	ldr	r3, [sp, #0]
 8007424:	4413      	add	r3, r2
 8007426:	9302      	str	r3, [sp, #8]
 8007428:	3301      	adds	r3, #1
 800742a:	2b01      	cmp	r3, #1
 800742c:	9303      	str	r3, [sp, #12]
 800742e:	bfb8      	it	lt
 8007430:	2301      	movlt	r3, #1
 8007432:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007434:	2200      	movs	r2, #0
 8007436:	6042      	str	r2, [r0, #4]
 8007438:	2204      	movs	r2, #4
 800743a:	f102 0614 	add.w	r6, r2, #20
 800743e:	429e      	cmp	r6, r3
 8007440:	6841      	ldr	r1, [r0, #4]
 8007442:	d93d      	bls.n	80074c0 <_dtoa_r+0x318>
 8007444:	4620      	mov	r0, r4
 8007446:	f000 fcb7 	bl	8007db8 <_Balloc>
 800744a:	9001      	str	r0, [sp, #4]
 800744c:	2800      	cmp	r0, #0
 800744e:	d13b      	bne.n	80074c8 <_dtoa_r+0x320>
 8007450:	4b11      	ldr	r3, [pc, #68]	; (8007498 <_dtoa_r+0x2f0>)
 8007452:	4602      	mov	r2, r0
 8007454:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007458:	e6c0      	b.n	80071dc <_dtoa_r+0x34>
 800745a:	2301      	movs	r3, #1
 800745c:	e7df      	b.n	800741e <_dtoa_r+0x276>
 800745e:	bf00      	nop
 8007460:	636f4361 	.word	0x636f4361
 8007464:	3fd287a7 	.word	0x3fd287a7
 8007468:	8b60c8b3 	.word	0x8b60c8b3
 800746c:	3fc68a28 	.word	0x3fc68a28
 8007470:	509f79fb 	.word	0x509f79fb
 8007474:	3fd34413 	.word	0x3fd34413
 8007478:	08009265 	.word	0x08009265
 800747c:	0800927c 	.word	0x0800927c
 8007480:	7ff00000 	.word	0x7ff00000
 8007484:	08009261 	.word	0x08009261
 8007488:	08009258 	.word	0x08009258
 800748c:	08009235 	.word	0x08009235
 8007490:	3ff80000 	.word	0x3ff80000
 8007494:	08009370 	.word	0x08009370
 8007498:	080092d7 	.word	0x080092d7
 800749c:	2501      	movs	r5, #1
 800749e:	2300      	movs	r3, #0
 80074a0:	9306      	str	r3, [sp, #24]
 80074a2:	9508      	str	r5, [sp, #32]
 80074a4:	f04f 33ff 	mov.w	r3, #4294967295
 80074a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80074ac:	2200      	movs	r2, #0
 80074ae:	2312      	movs	r3, #18
 80074b0:	e7b0      	b.n	8007414 <_dtoa_r+0x26c>
 80074b2:	2301      	movs	r3, #1
 80074b4:	9308      	str	r3, [sp, #32]
 80074b6:	e7f5      	b.n	80074a4 <_dtoa_r+0x2fc>
 80074b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80074be:	e7b8      	b.n	8007432 <_dtoa_r+0x28a>
 80074c0:	3101      	adds	r1, #1
 80074c2:	6041      	str	r1, [r0, #4]
 80074c4:	0052      	lsls	r2, r2, #1
 80074c6:	e7b8      	b.n	800743a <_dtoa_r+0x292>
 80074c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ca:	9a01      	ldr	r2, [sp, #4]
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	9b03      	ldr	r3, [sp, #12]
 80074d0:	2b0e      	cmp	r3, #14
 80074d2:	f200 809d 	bhi.w	8007610 <_dtoa_r+0x468>
 80074d6:	2d00      	cmp	r5, #0
 80074d8:	f000 809a 	beq.w	8007610 <_dtoa_r+0x468>
 80074dc:	9b00      	ldr	r3, [sp, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	dd32      	ble.n	8007548 <_dtoa_r+0x3a0>
 80074e2:	4ab7      	ldr	r2, [pc, #732]	; (80077c0 <_dtoa_r+0x618>)
 80074e4:	f003 030f 	and.w	r3, r3, #15
 80074e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074f0:	9b00      	ldr	r3, [sp, #0]
 80074f2:	05d8      	lsls	r0, r3, #23
 80074f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80074f8:	d516      	bpl.n	8007528 <_dtoa_r+0x380>
 80074fa:	4bb2      	ldr	r3, [pc, #712]	; (80077c4 <_dtoa_r+0x61c>)
 80074fc:	ec51 0b19 	vmov	r0, r1, d9
 8007500:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007504:	f7f9 f9a2 	bl	800084c <__aeabi_ddiv>
 8007508:	f007 070f 	and.w	r7, r7, #15
 800750c:	4682      	mov	sl, r0
 800750e:	468b      	mov	fp, r1
 8007510:	2503      	movs	r5, #3
 8007512:	4eac      	ldr	r6, [pc, #688]	; (80077c4 <_dtoa_r+0x61c>)
 8007514:	b957      	cbnz	r7, 800752c <_dtoa_r+0x384>
 8007516:	4642      	mov	r2, r8
 8007518:	464b      	mov	r3, r9
 800751a:	4650      	mov	r0, sl
 800751c:	4659      	mov	r1, fp
 800751e:	f7f9 f995 	bl	800084c <__aeabi_ddiv>
 8007522:	4682      	mov	sl, r0
 8007524:	468b      	mov	fp, r1
 8007526:	e028      	b.n	800757a <_dtoa_r+0x3d2>
 8007528:	2502      	movs	r5, #2
 800752a:	e7f2      	b.n	8007512 <_dtoa_r+0x36a>
 800752c:	07f9      	lsls	r1, r7, #31
 800752e:	d508      	bpl.n	8007542 <_dtoa_r+0x39a>
 8007530:	4640      	mov	r0, r8
 8007532:	4649      	mov	r1, r9
 8007534:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007538:	f7f9 f85e 	bl	80005f8 <__aeabi_dmul>
 800753c:	3501      	adds	r5, #1
 800753e:	4680      	mov	r8, r0
 8007540:	4689      	mov	r9, r1
 8007542:	107f      	asrs	r7, r7, #1
 8007544:	3608      	adds	r6, #8
 8007546:	e7e5      	b.n	8007514 <_dtoa_r+0x36c>
 8007548:	f000 809b 	beq.w	8007682 <_dtoa_r+0x4da>
 800754c:	9b00      	ldr	r3, [sp, #0]
 800754e:	4f9d      	ldr	r7, [pc, #628]	; (80077c4 <_dtoa_r+0x61c>)
 8007550:	425e      	negs	r6, r3
 8007552:	4b9b      	ldr	r3, [pc, #620]	; (80077c0 <_dtoa_r+0x618>)
 8007554:	f006 020f 	and.w	r2, r6, #15
 8007558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	ec51 0b19 	vmov	r0, r1, d9
 8007564:	f7f9 f848 	bl	80005f8 <__aeabi_dmul>
 8007568:	1136      	asrs	r6, r6, #4
 800756a:	4682      	mov	sl, r0
 800756c:	468b      	mov	fp, r1
 800756e:	2300      	movs	r3, #0
 8007570:	2502      	movs	r5, #2
 8007572:	2e00      	cmp	r6, #0
 8007574:	d17a      	bne.n	800766c <_dtoa_r+0x4c4>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1d3      	bne.n	8007522 <_dtoa_r+0x37a>
 800757a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 8082 	beq.w	8007686 <_dtoa_r+0x4de>
 8007582:	4b91      	ldr	r3, [pc, #580]	; (80077c8 <_dtoa_r+0x620>)
 8007584:	2200      	movs	r2, #0
 8007586:	4650      	mov	r0, sl
 8007588:	4659      	mov	r1, fp
 800758a:	f7f9 faa7 	bl	8000adc <__aeabi_dcmplt>
 800758e:	2800      	cmp	r0, #0
 8007590:	d079      	beq.n	8007686 <_dtoa_r+0x4de>
 8007592:	9b03      	ldr	r3, [sp, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d076      	beq.n	8007686 <_dtoa_r+0x4de>
 8007598:	9b02      	ldr	r3, [sp, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	dd36      	ble.n	800760c <_dtoa_r+0x464>
 800759e:	9b00      	ldr	r3, [sp, #0]
 80075a0:	4650      	mov	r0, sl
 80075a2:	4659      	mov	r1, fp
 80075a4:	1e5f      	subs	r7, r3, #1
 80075a6:	2200      	movs	r2, #0
 80075a8:	4b88      	ldr	r3, [pc, #544]	; (80077cc <_dtoa_r+0x624>)
 80075aa:	f7f9 f825 	bl	80005f8 <__aeabi_dmul>
 80075ae:	9e02      	ldr	r6, [sp, #8]
 80075b0:	4682      	mov	sl, r0
 80075b2:	468b      	mov	fp, r1
 80075b4:	3501      	adds	r5, #1
 80075b6:	4628      	mov	r0, r5
 80075b8:	f7f8 ffb4 	bl	8000524 <__aeabi_i2d>
 80075bc:	4652      	mov	r2, sl
 80075be:	465b      	mov	r3, fp
 80075c0:	f7f9 f81a 	bl	80005f8 <__aeabi_dmul>
 80075c4:	4b82      	ldr	r3, [pc, #520]	; (80077d0 <_dtoa_r+0x628>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	f7f8 fe60 	bl	800028c <__adddf3>
 80075cc:	46d0      	mov	r8, sl
 80075ce:	46d9      	mov	r9, fp
 80075d0:	4682      	mov	sl, r0
 80075d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80075d6:	2e00      	cmp	r6, #0
 80075d8:	d158      	bne.n	800768c <_dtoa_r+0x4e4>
 80075da:	4b7e      	ldr	r3, [pc, #504]	; (80077d4 <_dtoa_r+0x62c>)
 80075dc:	2200      	movs	r2, #0
 80075de:	4640      	mov	r0, r8
 80075e0:	4649      	mov	r1, r9
 80075e2:	f7f8 fe51 	bl	8000288 <__aeabi_dsub>
 80075e6:	4652      	mov	r2, sl
 80075e8:	465b      	mov	r3, fp
 80075ea:	4680      	mov	r8, r0
 80075ec:	4689      	mov	r9, r1
 80075ee:	f7f9 fa93 	bl	8000b18 <__aeabi_dcmpgt>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	f040 8295 	bne.w	8007b22 <_dtoa_r+0x97a>
 80075f8:	4652      	mov	r2, sl
 80075fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80075fe:	4640      	mov	r0, r8
 8007600:	4649      	mov	r1, r9
 8007602:	f7f9 fa6b 	bl	8000adc <__aeabi_dcmplt>
 8007606:	2800      	cmp	r0, #0
 8007608:	f040 8289 	bne.w	8007b1e <_dtoa_r+0x976>
 800760c:	ec5b ab19 	vmov	sl, fp, d9
 8007610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007612:	2b00      	cmp	r3, #0
 8007614:	f2c0 8148 	blt.w	80078a8 <_dtoa_r+0x700>
 8007618:	9a00      	ldr	r2, [sp, #0]
 800761a:	2a0e      	cmp	r2, #14
 800761c:	f300 8144 	bgt.w	80078a8 <_dtoa_r+0x700>
 8007620:	4b67      	ldr	r3, [pc, #412]	; (80077c0 <_dtoa_r+0x618>)
 8007622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007626:	e9d3 8900 	ldrd	r8, r9, [r3]
 800762a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800762c:	2b00      	cmp	r3, #0
 800762e:	f280 80d5 	bge.w	80077dc <_dtoa_r+0x634>
 8007632:	9b03      	ldr	r3, [sp, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	f300 80d1 	bgt.w	80077dc <_dtoa_r+0x634>
 800763a:	f040 826f 	bne.w	8007b1c <_dtoa_r+0x974>
 800763e:	4b65      	ldr	r3, [pc, #404]	; (80077d4 <_dtoa_r+0x62c>)
 8007640:	2200      	movs	r2, #0
 8007642:	4640      	mov	r0, r8
 8007644:	4649      	mov	r1, r9
 8007646:	f7f8 ffd7 	bl	80005f8 <__aeabi_dmul>
 800764a:	4652      	mov	r2, sl
 800764c:	465b      	mov	r3, fp
 800764e:	f7f9 fa59 	bl	8000b04 <__aeabi_dcmpge>
 8007652:	9e03      	ldr	r6, [sp, #12]
 8007654:	4637      	mov	r7, r6
 8007656:	2800      	cmp	r0, #0
 8007658:	f040 8245 	bne.w	8007ae6 <_dtoa_r+0x93e>
 800765c:	9d01      	ldr	r5, [sp, #4]
 800765e:	2331      	movs	r3, #49	; 0x31
 8007660:	f805 3b01 	strb.w	r3, [r5], #1
 8007664:	9b00      	ldr	r3, [sp, #0]
 8007666:	3301      	adds	r3, #1
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	e240      	b.n	8007aee <_dtoa_r+0x946>
 800766c:	07f2      	lsls	r2, r6, #31
 800766e:	d505      	bpl.n	800767c <_dtoa_r+0x4d4>
 8007670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007674:	f7f8 ffc0 	bl	80005f8 <__aeabi_dmul>
 8007678:	3501      	adds	r5, #1
 800767a:	2301      	movs	r3, #1
 800767c:	1076      	asrs	r6, r6, #1
 800767e:	3708      	adds	r7, #8
 8007680:	e777      	b.n	8007572 <_dtoa_r+0x3ca>
 8007682:	2502      	movs	r5, #2
 8007684:	e779      	b.n	800757a <_dtoa_r+0x3d2>
 8007686:	9f00      	ldr	r7, [sp, #0]
 8007688:	9e03      	ldr	r6, [sp, #12]
 800768a:	e794      	b.n	80075b6 <_dtoa_r+0x40e>
 800768c:	9901      	ldr	r1, [sp, #4]
 800768e:	4b4c      	ldr	r3, [pc, #304]	; (80077c0 <_dtoa_r+0x618>)
 8007690:	4431      	add	r1, r6
 8007692:	910d      	str	r1, [sp, #52]	; 0x34
 8007694:	9908      	ldr	r1, [sp, #32]
 8007696:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800769a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800769e:	2900      	cmp	r1, #0
 80076a0:	d043      	beq.n	800772a <_dtoa_r+0x582>
 80076a2:	494d      	ldr	r1, [pc, #308]	; (80077d8 <_dtoa_r+0x630>)
 80076a4:	2000      	movs	r0, #0
 80076a6:	f7f9 f8d1 	bl	800084c <__aeabi_ddiv>
 80076aa:	4652      	mov	r2, sl
 80076ac:	465b      	mov	r3, fp
 80076ae:	f7f8 fdeb 	bl	8000288 <__aeabi_dsub>
 80076b2:	9d01      	ldr	r5, [sp, #4]
 80076b4:	4682      	mov	sl, r0
 80076b6:	468b      	mov	fp, r1
 80076b8:	4649      	mov	r1, r9
 80076ba:	4640      	mov	r0, r8
 80076bc:	f7f9 fa4c 	bl	8000b58 <__aeabi_d2iz>
 80076c0:	4606      	mov	r6, r0
 80076c2:	f7f8 ff2f 	bl	8000524 <__aeabi_i2d>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4640      	mov	r0, r8
 80076cc:	4649      	mov	r1, r9
 80076ce:	f7f8 fddb 	bl	8000288 <__aeabi_dsub>
 80076d2:	3630      	adds	r6, #48	; 0x30
 80076d4:	f805 6b01 	strb.w	r6, [r5], #1
 80076d8:	4652      	mov	r2, sl
 80076da:	465b      	mov	r3, fp
 80076dc:	4680      	mov	r8, r0
 80076de:	4689      	mov	r9, r1
 80076e0:	f7f9 f9fc 	bl	8000adc <__aeabi_dcmplt>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d163      	bne.n	80077b0 <_dtoa_r+0x608>
 80076e8:	4642      	mov	r2, r8
 80076ea:	464b      	mov	r3, r9
 80076ec:	4936      	ldr	r1, [pc, #216]	; (80077c8 <_dtoa_r+0x620>)
 80076ee:	2000      	movs	r0, #0
 80076f0:	f7f8 fdca 	bl	8000288 <__aeabi_dsub>
 80076f4:	4652      	mov	r2, sl
 80076f6:	465b      	mov	r3, fp
 80076f8:	f7f9 f9f0 	bl	8000adc <__aeabi_dcmplt>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	f040 80b5 	bne.w	800786c <_dtoa_r+0x6c4>
 8007702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007704:	429d      	cmp	r5, r3
 8007706:	d081      	beq.n	800760c <_dtoa_r+0x464>
 8007708:	4b30      	ldr	r3, [pc, #192]	; (80077cc <_dtoa_r+0x624>)
 800770a:	2200      	movs	r2, #0
 800770c:	4650      	mov	r0, sl
 800770e:	4659      	mov	r1, fp
 8007710:	f7f8 ff72 	bl	80005f8 <__aeabi_dmul>
 8007714:	4b2d      	ldr	r3, [pc, #180]	; (80077cc <_dtoa_r+0x624>)
 8007716:	4682      	mov	sl, r0
 8007718:	468b      	mov	fp, r1
 800771a:	4640      	mov	r0, r8
 800771c:	4649      	mov	r1, r9
 800771e:	2200      	movs	r2, #0
 8007720:	f7f8 ff6a 	bl	80005f8 <__aeabi_dmul>
 8007724:	4680      	mov	r8, r0
 8007726:	4689      	mov	r9, r1
 8007728:	e7c6      	b.n	80076b8 <_dtoa_r+0x510>
 800772a:	4650      	mov	r0, sl
 800772c:	4659      	mov	r1, fp
 800772e:	f7f8 ff63 	bl	80005f8 <__aeabi_dmul>
 8007732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007734:	9d01      	ldr	r5, [sp, #4]
 8007736:	930f      	str	r3, [sp, #60]	; 0x3c
 8007738:	4682      	mov	sl, r0
 800773a:	468b      	mov	fp, r1
 800773c:	4649      	mov	r1, r9
 800773e:	4640      	mov	r0, r8
 8007740:	f7f9 fa0a 	bl	8000b58 <__aeabi_d2iz>
 8007744:	4606      	mov	r6, r0
 8007746:	f7f8 feed 	bl	8000524 <__aeabi_i2d>
 800774a:	3630      	adds	r6, #48	; 0x30
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	4640      	mov	r0, r8
 8007752:	4649      	mov	r1, r9
 8007754:	f7f8 fd98 	bl	8000288 <__aeabi_dsub>
 8007758:	f805 6b01 	strb.w	r6, [r5], #1
 800775c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800775e:	429d      	cmp	r5, r3
 8007760:	4680      	mov	r8, r0
 8007762:	4689      	mov	r9, r1
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	d124      	bne.n	80077b4 <_dtoa_r+0x60c>
 800776a:	4b1b      	ldr	r3, [pc, #108]	; (80077d8 <_dtoa_r+0x630>)
 800776c:	4650      	mov	r0, sl
 800776e:	4659      	mov	r1, fp
 8007770:	f7f8 fd8c 	bl	800028c <__adddf3>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4640      	mov	r0, r8
 800777a:	4649      	mov	r1, r9
 800777c:	f7f9 f9cc 	bl	8000b18 <__aeabi_dcmpgt>
 8007780:	2800      	cmp	r0, #0
 8007782:	d173      	bne.n	800786c <_dtoa_r+0x6c4>
 8007784:	4652      	mov	r2, sl
 8007786:	465b      	mov	r3, fp
 8007788:	4913      	ldr	r1, [pc, #76]	; (80077d8 <_dtoa_r+0x630>)
 800778a:	2000      	movs	r0, #0
 800778c:	f7f8 fd7c 	bl	8000288 <__aeabi_dsub>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	4640      	mov	r0, r8
 8007796:	4649      	mov	r1, r9
 8007798:	f7f9 f9a0 	bl	8000adc <__aeabi_dcmplt>
 800779c:	2800      	cmp	r0, #0
 800779e:	f43f af35 	beq.w	800760c <_dtoa_r+0x464>
 80077a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80077a4:	1e6b      	subs	r3, r5, #1
 80077a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80077a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077ac:	2b30      	cmp	r3, #48	; 0x30
 80077ae:	d0f8      	beq.n	80077a2 <_dtoa_r+0x5fa>
 80077b0:	9700      	str	r7, [sp, #0]
 80077b2:	e049      	b.n	8007848 <_dtoa_r+0x6a0>
 80077b4:	4b05      	ldr	r3, [pc, #20]	; (80077cc <_dtoa_r+0x624>)
 80077b6:	f7f8 ff1f 	bl	80005f8 <__aeabi_dmul>
 80077ba:	4680      	mov	r8, r0
 80077bc:	4689      	mov	r9, r1
 80077be:	e7bd      	b.n	800773c <_dtoa_r+0x594>
 80077c0:	08009370 	.word	0x08009370
 80077c4:	08009348 	.word	0x08009348
 80077c8:	3ff00000 	.word	0x3ff00000
 80077cc:	40240000 	.word	0x40240000
 80077d0:	401c0000 	.word	0x401c0000
 80077d4:	40140000 	.word	0x40140000
 80077d8:	3fe00000 	.word	0x3fe00000
 80077dc:	9d01      	ldr	r5, [sp, #4]
 80077de:	4656      	mov	r6, sl
 80077e0:	465f      	mov	r7, fp
 80077e2:	4642      	mov	r2, r8
 80077e4:	464b      	mov	r3, r9
 80077e6:	4630      	mov	r0, r6
 80077e8:	4639      	mov	r1, r7
 80077ea:	f7f9 f82f 	bl	800084c <__aeabi_ddiv>
 80077ee:	f7f9 f9b3 	bl	8000b58 <__aeabi_d2iz>
 80077f2:	4682      	mov	sl, r0
 80077f4:	f7f8 fe96 	bl	8000524 <__aeabi_i2d>
 80077f8:	4642      	mov	r2, r8
 80077fa:	464b      	mov	r3, r9
 80077fc:	f7f8 fefc 	bl	80005f8 <__aeabi_dmul>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4630      	mov	r0, r6
 8007806:	4639      	mov	r1, r7
 8007808:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800780c:	f7f8 fd3c 	bl	8000288 <__aeabi_dsub>
 8007810:	f805 6b01 	strb.w	r6, [r5], #1
 8007814:	9e01      	ldr	r6, [sp, #4]
 8007816:	9f03      	ldr	r7, [sp, #12]
 8007818:	1bae      	subs	r6, r5, r6
 800781a:	42b7      	cmp	r7, r6
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	d135      	bne.n	800788e <_dtoa_r+0x6e6>
 8007822:	f7f8 fd33 	bl	800028c <__adddf3>
 8007826:	4642      	mov	r2, r8
 8007828:	464b      	mov	r3, r9
 800782a:	4606      	mov	r6, r0
 800782c:	460f      	mov	r7, r1
 800782e:	f7f9 f973 	bl	8000b18 <__aeabi_dcmpgt>
 8007832:	b9d0      	cbnz	r0, 800786a <_dtoa_r+0x6c2>
 8007834:	4642      	mov	r2, r8
 8007836:	464b      	mov	r3, r9
 8007838:	4630      	mov	r0, r6
 800783a:	4639      	mov	r1, r7
 800783c:	f7f9 f944 	bl	8000ac8 <__aeabi_dcmpeq>
 8007840:	b110      	cbz	r0, 8007848 <_dtoa_r+0x6a0>
 8007842:	f01a 0f01 	tst.w	sl, #1
 8007846:	d110      	bne.n	800786a <_dtoa_r+0x6c2>
 8007848:	4620      	mov	r0, r4
 800784a:	ee18 1a10 	vmov	r1, s16
 800784e:	f000 faf3 	bl	8007e38 <_Bfree>
 8007852:	2300      	movs	r3, #0
 8007854:	9800      	ldr	r0, [sp, #0]
 8007856:	702b      	strb	r3, [r5, #0]
 8007858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800785a:	3001      	adds	r0, #1
 800785c:	6018      	str	r0, [r3, #0]
 800785e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007860:	2b00      	cmp	r3, #0
 8007862:	f43f acf1 	beq.w	8007248 <_dtoa_r+0xa0>
 8007866:	601d      	str	r5, [r3, #0]
 8007868:	e4ee      	b.n	8007248 <_dtoa_r+0xa0>
 800786a:	9f00      	ldr	r7, [sp, #0]
 800786c:	462b      	mov	r3, r5
 800786e:	461d      	mov	r5, r3
 8007870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007874:	2a39      	cmp	r2, #57	; 0x39
 8007876:	d106      	bne.n	8007886 <_dtoa_r+0x6de>
 8007878:	9a01      	ldr	r2, [sp, #4]
 800787a:	429a      	cmp	r2, r3
 800787c:	d1f7      	bne.n	800786e <_dtoa_r+0x6c6>
 800787e:	9901      	ldr	r1, [sp, #4]
 8007880:	2230      	movs	r2, #48	; 0x30
 8007882:	3701      	adds	r7, #1
 8007884:	700a      	strb	r2, [r1, #0]
 8007886:	781a      	ldrb	r2, [r3, #0]
 8007888:	3201      	adds	r2, #1
 800788a:	701a      	strb	r2, [r3, #0]
 800788c:	e790      	b.n	80077b0 <_dtoa_r+0x608>
 800788e:	4ba6      	ldr	r3, [pc, #664]	; (8007b28 <_dtoa_r+0x980>)
 8007890:	2200      	movs	r2, #0
 8007892:	f7f8 feb1 	bl	80005f8 <__aeabi_dmul>
 8007896:	2200      	movs	r2, #0
 8007898:	2300      	movs	r3, #0
 800789a:	4606      	mov	r6, r0
 800789c:	460f      	mov	r7, r1
 800789e:	f7f9 f913 	bl	8000ac8 <__aeabi_dcmpeq>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d09d      	beq.n	80077e2 <_dtoa_r+0x63a>
 80078a6:	e7cf      	b.n	8007848 <_dtoa_r+0x6a0>
 80078a8:	9a08      	ldr	r2, [sp, #32]
 80078aa:	2a00      	cmp	r2, #0
 80078ac:	f000 80d7 	beq.w	8007a5e <_dtoa_r+0x8b6>
 80078b0:	9a06      	ldr	r2, [sp, #24]
 80078b2:	2a01      	cmp	r2, #1
 80078b4:	f300 80ba 	bgt.w	8007a2c <_dtoa_r+0x884>
 80078b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	f000 80b2 	beq.w	8007a24 <_dtoa_r+0x87c>
 80078c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078c4:	9e07      	ldr	r6, [sp, #28]
 80078c6:	9d04      	ldr	r5, [sp, #16]
 80078c8:	9a04      	ldr	r2, [sp, #16]
 80078ca:	441a      	add	r2, r3
 80078cc:	9204      	str	r2, [sp, #16]
 80078ce:	9a05      	ldr	r2, [sp, #20]
 80078d0:	2101      	movs	r1, #1
 80078d2:	441a      	add	r2, r3
 80078d4:	4620      	mov	r0, r4
 80078d6:	9205      	str	r2, [sp, #20]
 80078d8:	f000 fb66 	bl	8007fa8 <__i2b>
 80078dc:	4607      	mov	r7, r0
 80078de:	2d00      	cmp	r5, #0
 80078e0:	dd0c      	ble.n	80078fc <_dtoa_r+0x754>
 80078e2:	9b05      	ldr	r3, [sp, #20]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	dd09      	ble.n	80078fc <_dtoa_r+0x754>
 80078e8:	42ab      	cmp	r3, r5
 80078ea:	9a04      	ldr	r2, [sp, #16]
 80078ec:	bfa8      	it	ge
 80078ee:	462b      	movge	r3, r5
 80078f0:	1ad2      	subs	r2, r2, r3
 80078f2:	9204      	str	r2, [sp, #16]
 80078f4:	9a05      	ldr	r2, [sp, #20]
 80078f6:	1aed      	subs	r5, r5, r3
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	9305      	str	r3, [sp, #20]
 80078fc:	9b07      	ldr	r3, [sp, #28]
 80078fe:	b31b      	cbz	r3, 8007948 <_dtoa_r+0x7a0>
 8007900:	9b08      	ldr	r3, [sp, #32]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 80af 	beq.w	8007a66 <_dtoa_r+0x8be>
 8007908:	2e00      	cmp	r6, #0
 800790a:	dd13      	ble.n	8007934 <_dtoa_r+0x78c>
 800790c:	4639      	mov	r1, r7
 800790e:	4632      	mov	r2, r6
 8007910:	4620      	mov	r0, r4
 8007912:	f000 fc09 	bl	8008128 <__pow5mult>
 8007916:	ee18 2a10 	vmov	r2, s16
 800791a:	4601      	mov	r1, r0
 800791c:	4607      	mov	r7, r0
 800791e:	4620      	mov	r0, r4
 8007920:	f000 fb58 	bl	8007fd4 <__multiply>
 8007924:	ee18 1a10 	vmov	r1, s16
 8007928:	4680      	mov	r8, r0
 800792a:	4620      	mov	r0, r4
 800792c:	f000 fa84 	bl	8007e38 <_Bfree>
 8007930:	ee08 8a10 	vmov	s16, r8
 8007934:	9b07      	ldr	r3, [sp, #28]
 8007936:	1b9a      	subs	r2, r3, r6
 8007938:	d006      	beq.n	8007948 <_dtoa_r+0x7a0>
 800793a:	ee18 1a10 	vmov	r1, s16
 800793e:	4620      	mov	r0, r4
 8007940:	f000 fbf2 	bl	8008128 <__pow5mult>
 8007944:	ee08 0a10 	vmov	s16, r0
 8007948:	2101      	movs	r1, #1
 800794a:	4620      	mov	r0, r4
 800794c:	f000 fb2c 	bl	8007fa8 <__i2b>
 8007950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007952:	2b00      	cmp	r3, #0
 8007954:	4606      	mov	r6, r0
 8007956:	f340 8088 	ble.w	8007a6a <_dtoa_r+0x8c2>
 800795a:	461a      	mov	r2, r3
 800795c:	4601      	mov	r1, r0
 800795e:	4620      	mov	r0, r4
 8007960:	f000 fbe2 	bl	8008128 <__pow5mult>
 8007964:	9b06      	ldr	r3, [sp, #24]
 8007966:	2b01      	cmp	r3, #1
 8007968:	4606      	mov	r6, r0
 800796a:	f340 8081 	ble.w	8007a70 <_dtoa_r+0x8c8>
 800796e:	f04f 0800 	mov.w	r8, #0
 8007972:	6933      	ldr	r3, [r6, #16]
 8007974:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007978:	6918      	ldr	r0, [r3, #16]
 800797a:	f000 fac5 	bl	8007f08 <__hi0bits>
 800797e:	f1c0 0020 	rsb	r0, r0, #32
 8007982:	9b05      	ldr	r3, [sp, #20]
 8007984:	4418      	add	r0, r3
 8007986:	f010 001f 	ands.w	r0, r0, #31
 800798a:	f000 8092 	beq.w	8007ab2 <_dtoa_r+0x90a>
 800798e:	f1c0 0320 	rsb	r3, r0, #32
 8007992:	2b04      	cmp	r3, #4
 8007994:	f340 808a 	ble.w	8007aac <_dtoa_r+0x904>
 8007998:	f1c0 001c 	rsb	r0, r0, #28
 800799c:	9b04      	ldr	r3, [sp, #16]
 800799e:	4403      	add	r3, r0
 80079a0:	9304      	str	r3, [sp, #16]
 80079a2:	9b05      	ldr	r3, [sp, #20]
 80079a4:	4403      	add	r3, r0
 80079a6:	4405      	add	r5, r0
 80079a8:	9305      	str	r3, [sp, #20]
 80079aa:	9b04      	ldr	r3, [sp, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	dd07      	ble.n	80079c0 <_dtoa_r+0x818>
 80079b0:	ee18 1a10 	vmov	r1, s16
 80079b4:	461a      	mov	r2, r3
 80079b6:	4620      	mov	r0, r4
 80079b8:	f000 fc10 	bl	80081dc <__lshift>
 80079bc:	ee08 0a10 	vmov	s16, r0
 80079c0:	9b05      	ldr	r3, [sp, #20]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	dd05      	ble.n	80079d2 <_dtoa_r+0x82a>
 80079c6:	4631      	mov	r1, r6
 80079c8:	461a      	mov	r2, r3
 80079ca:	4620      	mov	r0, r4
 80079cc:	f000 fc06 	bl	80081dc <__lshift>
 80079d0:	4606      	mov	r6, r0
 80079d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d06e      	beq.n	8007ab6 <_dtoa_r+0x90e>
 80079d8:	ee18 0a10 	vmov	r0, s16
 80079dc:	4631      	mov	r1, r6
 80079de:	f000 fc6d 	bl	80082bc <__mcmp>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	da67      	bge.n	8007ab6 <_dtoa_r+0x90e>
 80079e6:	9b00      	ldr	r3, [sp, #0]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	ee18 1a10 	vmov	r1, s16
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	220a      	movs	r2, #10
 80079f2:	2300      	movs	r3, #0
 80079f4:	4620      	mov	r0, r4
 80079f6:	f000 fa41 	bl	8007e7c <__multadd>
 80079fa:	9b08      	ldr	r3, [sp, #32]
 80079fc:	ee08 0a10 	vmov	s16, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 81b1 	beq.w	8007d68 <_dtoa_r+0xbc0>
 8007a06:	2300      	movs	r3, #0
 8007a08:	4639      	mov	r1, r7
 8007a0a:	220a      	movs	r2, #10
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f000 fa35 	bl	8007e7c <__multadd>
 8007a12:	9b02      	ldr	r3, [sp, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	4607      	mov	r7, r0
 8007a18:	f300 808e 	bgt.w	8007b38 <_dtoa_r+0x990>
 8007a1c:	9b06      	ldr	r3, [sp, #24]
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	dc51      	bgt.n	8007ac6 <_dtoa_r+0x91e>
 8007a22:	e089      	b.n	8007b38 <_dtoa_r+0x990>
 8007a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a2a:	e74b      	b.n	80078c4 <_dtoa_r+0x71c>
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	1e5e      	subs	r6, r3, #1
 8007a30:	9b07      	ldr	r3, [sp, #28]
 8007a32:	42b3      	cmp	r3, r6
 8007a34:	bfbf      	itttt	lt
 8007a36:	9b07      	ldrlt	r3, [sp, #28]
 8007a38:	9607      	strlt	r6, [sp, #28]
 8007a3a:	1af2      	sublt	r2, r6, r3
 8007a3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007a3e:	bfb6      	itet	lt
 8007a40:	189b      	addlt	r3, r3, r2
 8007a42:	1b9e      	subge	r6, r3, r6
 8007a44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007a46:	9b03      	ldr	r3, [sp, #12]
 8007a48:	bfb8      	it	lt
 8007a4a:	2600      	movlt	r6, #0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	bfb7      	itett	lt
 8007a50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007a54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007a58:	1a9d      	sublt	r5, r3, r2
 8007a5a:	2300      	movlt	r3, #0
 8007a5c:	e734      	b.n	80078c8 <_dtoa_r+0x720>
 8007a5e:	9e07      	ldr	r6, [sp, #28]
 8007a60:	9d04      	ldr	r5, [sp, #16]
 8007a62:	9f08      	ldr	r7, [sp, #32]
 8007a64:	e73b      	b.n	80078de <_dtoa_r+0x736>
 8007a66:	9a07      	ldr	r2, [sp, #28]
 8007a68:	e767      	b.n	800793a <_dtoa_r+0x792>
 8007a6a:	9b06      	ldr	r3, [sp, #24]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	dc18      	bgt.n	8007aa2 <_dtoa_r+0x8fa>
 8007a70:	f1ba 0f00 	cmp.w	sl, #0
 8007a74:	d115      	bne.n	8007aa2 <_dtoa_r+0x8fa>
 8007a76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a7a:	b993      	cbnz	r3, 8007aa2 <_dtoa_r+0x8fa>
 8007a7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a80:	0d1b      	lsrs	r3, r3, #20
 8007a82:	051b      	lsls	r3, r3, #20
 8007a84:	b183      	cbz	r3, 8007aa8 <_dtoa_r+0x900>
 8007a86:	9b04      	ldr	r3, [sp, #16]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	9304      	str	r3, [sp, #16]
 8007a8c:	9b05      	ldr	r3, [sp, #20]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	9305      	str	r3, [sp, #20]
 8007a92:	f04f 0801 	mov.w	r8, #1
 8007a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f47f af6a 	bne.w	8007972 <_dtoa_r+0x7ca>
 8007a9e:	2001      	movs	r0, #1
 8007aa0:	e76f      	b.n	8007982 <_dtoa_r+0x7da>
 8007aa2:	f04f 0800 	mov.w	r8, #0
 8007aa6:	e7f6      	b.n	8007a96 <_dtoa_r+0x8ee>
 8007aa8:	4698      	mov	r8, r3
 8007aaa:	e7f4      	b.n	8007a96 <_dtoa_r+0x8ee>
 8007aac:	f43f af7d 	beq.w	80079aa <_dtoa_r+0x802>
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	301c      	adds	r0, #28
 8007ab4:	e772      	b.n	800799c <_dtoa_r+0x7f4>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	dc37      	bgt.n	8007b2c <_dtoa_r+0x984>
 8007abc:	9b06      	ldr	r3, [sp, #24]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	dd34      	ble.n	8007b2c <_dtoa_r+0x984>
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	9302      	str	r3, [sp, #8]
 8007ac6:	9b02      	ldr	r3, [sp, #8]
 8007ac8:	b96b      	cbnz	r3, 8007ae6 <_dtoa_r+0x93e>
 8007aca:	4631      	mov	r1, r6
 8007acc:	2205      	movs	r2, #5
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f000 f9d4 	bl	8007e7c <__multadd>
 8007ad4:	4601      	mov	r1, r0
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	ee18 0a10 	vmov	r0, s16
 8007adc:	f000 fbee 	bl	80082bc <__mcmp>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	f73f adbb 	bgt.w	800765c <_dtoa_r+0x4b4>
 8007ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae8:	9d01      	ldr	r5, [sp, #4]
 8007aea:	43db      	mvns	r3, r3
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	f04f 0800 	mov.w	r8, #0
 8007af2:	4631      	mov	r1, r6
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 f99f 	bl	8007e38 <_Bfree>
 8007afa:	2f00      	cmp	r7, #0
 8007afc:	f43f aea4 	beq.w	8007848 <_dtoa_r+0x6a0>
 8007b00:	f1b8 0f00 	cmp.w	r8, #0
 8007b04:	d005      	beq.n	8007b12 <_dtoa_r+0x96a>
 8007b06:	45b8      	cmp	r8, r7
 8007b08:	d003      	beq.n	8007b12 <_dtoa_r+0x96a>
 8007b0a:	4641      	mov	r1, r8
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f000 f993 	bl	8007e38 <_Bfree>
 8007b12:	4639      	mov	r1, r7
 8007b14:	4620      	mov	r0, r4
 8007b16:	f000 f98f 	bl	8007e38 <_Bfree>
 8007b1a:	e695      	b.n	8007848 <_dtoa_r+0x6a0>
 8007b1c:	2600      	movs	r6, #0
 8007b1e:	4637      	mov	r7, r6
 8007b20:	e7e1      	b.n	8007ae6 <_dtoa_r+0x93e>
 8007b22:	9700      	str	r7, [sp, #0]
 8007b24:	4637      	mov	r7, r6
 8007b26:	e599      	b.n	800765c <_dtoa_r+0x4b4>
 8007b28:	40240000 	.word	0x40240000
 8007b2c:	9b08      	ldr	r3, [sp, #32]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 80ca 	beq.w	8007cc8 <_dtoa_r+0xb20>
 8007b34:	9b03      	ldr	r3, [sp, #12]
 8007b36:	9302      	str	r3, [sp, #8]
 8007b38:	2d00      	cmp	r5, #0
 8007b3a:	dd05      	ble.n	8007b48 <_dtoa_r+0x9a0>
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	462a      	mov	r2, r5
 8007b40:	4620      	mov	r0, r4
 8007b42:	f000 fb4b 	bl	80081dc <__lshift>
 8007b46:	4607      	mov	r7, r0
 8007b48:	f1b8 0f00 	cmp.w	r8, #0
 8007b4c:	d05b      	beq.n	8007c06 <_dtoa_r+0xa5e>
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	4620      	mov	r0, r4
 8007b52:	f000 f931 	bl	8007db8 <_Balloc>
 8007b56:	4605      	mov	r5, r0
 8007b58:	b928      	cbnz	r0, 8007b66 <_dtoa_r+0x9be>
 8007b5a:	4b87      	ldr	r3, [pc, #540]	; (8007d78 <_dtoa_r+0xbd0>)
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b62:	f7ff bb3b 	b.w	80071dc <_dtoa_r+0x34>
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	3202      	adds	r2, #2
 8007b6a:	0092      	lsls	r2, r2, #2
 8007b6c:	f107 010c 	add.w	r1, r7, #12
 8007b70:	300c      	adds	r0, #12
 8007b72:	f000 f913 	bl	8007d9c <memcpy>
 8007b76:	2201      	movs	r2, #1
 8007b78:	4629      	mov	r1, r5
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f000 fb2e 	bl	80081dc <__lshift>
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	f103 0901 	add.w	r9, r3, #1
 8007b86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	9305      	str	r3, [sp, #20]
 8007b8e:	f00a 0301 	and.w	r3, sl, #1
 8007b92:	46b8      	mov	r8, r7
 8007b94:	9304      	str	r3, [sp, #16]
 8007b96:	4607      	mov	r7, r0
 8007b98:	4631      	mov	r1, r6
 8007b9a:	ee18 0a10 	vmov	r0, s16
 8007b9e:	f7ff fa77 	bl	8007090 <quorem>
 8007ba2:	4641      	mov	r1, r8
 8007ba4:	9002      	str	r0, [sp, #8]
 8007ba6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007baa:	ee18 0a10 	vmov	r0, s16
 8007bae:	f000 fb85 	bl	80082bc <__mcmp>
 8007bb2:	463a      	mov	r2, r7
 8007bb4:	9003      	str	r0, [sp, #12]
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f000 fb9b 	bl	80082f4 <__mdiff>
 8007bbe:	68c2      	ldr	r2, [r0, #12]
 8007bc0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007bc4:	4605      	mov	r5, r0
 8007bc6:	bb02      	cbnz	r2, 8007c0a <_dtoa_r+0xa62>
 8007bc8:	4601      	mov	r1, r0
 8007bca:	ee18 0a10 	vmov	r0, s16
 8007bce:	f000 fb75 	bl	80082bc <__mcmp>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	9207      	str	r2, [sp, #28]
 8007bda:	f000 f92d 	bl	8007e38 <_Bfree>
 8007bde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007be2:	ea43 0102 	orr.w	r1, r3, r2
 8007be6:	9b04      	ldr	r3, [sp, #16]
 8007be8:	430b      	orrs	r3, r1
 8007bea:	464d      	mov	r5, r9
 8007bec:	d10f      	bne.n	8007c0e <_dtoa_r+0xa66>
 8007bee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007bf2:	d02a      	beq.n	8007c4a <_dtoa_r+0xaa2>
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	dd02      	ble.n	8007c00 <_dtoa_r+0xa58>
 8007bfa:	9b02      	ldr	r3, [sp, #8]
 8007bfc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007c00:	f88b a000 	strb.w	sl, [fp]
 8007c04:	e775      	b.n	8007af2 <_dtoa_r+0x94a>
 8007c06:	4638      	mov	r0, r7
 8007c08:	e7ba      	b.n	8007b80 <_dtoa_r+0x9d8>
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	e7e2      	b.n	8007bd4 <_dtoa_r+0xa2c>
 8007c0e:	9b03      	ldr	r3, [sp, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	db04      	blt.n	8007c1e <_dtoa_r+0xa76>
 8007c14:	9906      	ldr	r1, [sp, #24]
 8007c16:	430b      	orrs	r3, r1
 8007c18:	9904      	ldr	r1, [sp, #16]
 8007c1a:	430b      	orrs	r3, r1
 8007c1c:	d122      	bne.n	8007c64 <_dtoa_r+0xabc>
 8007c1e:	2a00      	cmp	r2, #0
 8007c20:	ddee      	ble.n	8007c00 <_dtoa_r+0xa58>
 8007c22:	ee18 1a10 	vmov	r1, s16
 8007c26:	2201      	movs	r2, #1
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 fad7 	bl	80081dc <__lshift>
 8007c2e:	4631      	mov	r1, r6
 8007c30:	ee08 0a10 	vmov	s16, r0
 8007c34:	f000 fb42 	bl	80082bc <__mcmp>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	dc03      	bgt.n	8007c44 <_dtoa_r+0xa9c>
 8007c3c:	d1e0      	bne.n	8007c00 <_dtoa_r+0xa58>
 8007c3e:	f01a 0f01 	tst.w	sl, #1
 8007c42:	d0dd      	beq.n	8007c00 <_dtoa_r+0xa58>
 8007c44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c48:	d1d7      	bne.n	8007bfa <_dtoa_r+0xa52>
 8007c4a:	2339      	movs	r3, #57	; 0x39
 8007c4c:	f88b 3000 	strb.w	r3, [fp]
 8007c50:	462b      	mov	r3, r5
 8007c52:	461d      	mov	r5, r3
 8007c54:	3b01      	subs	r3, #1
 8007c56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c5a:	2a39      	cmp	r2, #57	; 0x39
 8007c5c:	d071      	beq.n	8007d42 <_dtoa_r+0xb9a>
 8007c5e:	3201      	adds	r2, #1
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	e746      	b.n	8007af2 <_dtoa_r+0x94a>
 8007c64:	2a00      	cmp	r2, #0
 8007c66:	dd07      	ble.n	8007c78 <_dtoa_r+0xad0>
 8007c68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c6c:	d0ed      	beq.n	8007c4a <_dtoa_r+0xaa2>
 8007c6e:	f10a 0301 	add.w	r3, sl, #1
 8007c72:	f88b 3000 	strb.w	r3, [fp]
 8007c76:	e73c      	b.n	8007af2 <_dtoa_r+0x94a>
 8007c78:	9b05      	ldr	r3, [sp, #20]
 8007c7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007c7e:	4599      	cmp	r9, r3
 8007c80:	d047      	beq.n	8007d12 <_dtoa_r+0xb6a>
 8007c82:	ee18 1a10 	vmov	r1, s16
 8007c86:	2300      	movs	r3, #0
 8007c88:	220a      	movs	r2, #10
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f000 f8f6 	bl	8007e7c <__multadd>
 8007c90:	45b8      	cmp	r8, r7
 8007c92:	ee08 0a10 	vmov	s16, r0
 8007c96:	f04f 0300 	mov.w	r3, #0
 8007c9a:	f04f 020a 	mov.w	r2, #10
 8007c9e:	4641      	mov	r1, r8
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	d106      	bne.n	8007cb2 <_dtoa_r+0xb0a>
 8007ca4:	f000 f8ea 	bl	8007e7c <__multadd>
 8007ca8:	4680      	mov	r8, r0
 8007caa:	4607      	mov	r7, r0
 8007cac:	f109 0901 	add.w	r9, r9, #1
 8007cb0:	e772      	b.n	8007b98 <_dtoa_r+0x9f0>
 8007cb2:	f000 f8e3 	bl	8007e7c <__multadd>
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	4680      	mov	r8, r0
 8007cba:	2300      	movs	r3, #0
 8007cbc:	220a      	movs	r2, #10
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 f8dc 	bl	8007e7c <__multadd>
 8007cc4:	4607      	mov	r7, r0
 8007cc6:	e7f1      	b.n	8007cac <_dtoa_r+0xb04>
 8007cc8:	9b03      	ldr	r3, [sp, #12]
 8007cca:	9302      	str	r3, [sp, #8]
 8007ccc:	9d01      	ldr	r5, [sp, #4]
 8007cce:	ee18 0a10 	vmov	r0, s16
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	f7ff f9dc 	bl	8007090 <quorem>
 8007cd8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007cdc:	9b01      	ldr	r3, [sp, #4]
 8007cde:	f805 ab01 	strb.w	sl, [r5], #1
 8007ce2:	1aea      	subs	r2, r5, r3
 8007ce4:	9b02      	ldr	r3, [sp, #8]
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	dd09      	ble.n	8007cfe <_dtoa_r+0xb56>
 8007cea:	ee18 1a10 	vmov	r1, s16
 8007cee:	2300      	movs	r3, #0
 8007cf0:	220a      	movs	r2, #10
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 f8c2 	bl	8007e7c <__multadd>
 8007cf8:	ee08 0a10 	vmov	s16, r0
 8007cfc:	e7e7      	b.n	8007cce <_dtoa_r+0xb26>
 8007cfe:	9b02      	ldr	r3, [sp, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	bfc8      	it	gt
 8007d04:	461d      	movgt	r5, r3
 8007d06:	9b01      	ldr	r3, [sp, #4]
 8007d08:	bfd8      	it	le
 8007d0a:	2501      	movle	r5, #1
 8007d0c:	441d      	add	r5, r3
 8007d0e:	f04f 0800 	mov.w	r8, #0
 8007d12:	ee18 1a10 	vmov	r1, s16
 8007d16:	2201      	movs	r2, #1
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 fa5f 	bl	80081dc <__lshift>
 8007d1e:	4631      	mov	r1, r6
 8007d20:	ee08 0a10 	vmov	s16, r0
 8007d24:	f000 faca 	bl	80082bc <__mcmp>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	dc91      	bgt.n	8007c50 <_dtoa_r+0xaa8>
 8007d2c:	d102      	bne.n	8007d34 <_dtoa_r+0xb8c>
 8007d2e:	f01a 0f01 	tst.w	sl, #1
 8007d32:	d18d      	bne.n	8007c50 <_dtoa_r+0xaa8>
 8007d34:	462b      	mov	r3, r5
 8007d36:	461d      	mov	r5, r3
 8007d38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d3c:	2a30      	cmp	r2, #48	; 0x30
 8007d3e:	d0fa      	beq.n	8007d36 <_dtoa_r+0xb8e>
 8007d40:	e6d7      	b.n	8007af2 <_dtoa_r+0x94a>
 8007d42:	9a01      	ldr	r2, [sp, #4]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d184      	bne.n	8007c52 <_dtoa_r+0xaaa>
 8007d48:	9b00      	ldr	r3, [sp, #0]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	2331      	movs	r3, #49	; 0x31
 8007d50:	7013      	strb	r3, [r2, #0]
 8007d52:	e6ce      	b.n	8007af2 <_dtoa_r+0x94a>
 8007d54:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <_dtoa_r+0xbd4>)
 8007d56:	f7ff ba95 	b.w	8007284 <_dtoa_r+0xdc>
 8007d5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f47f aa6e 	bne.w	800723e <_dtoa_r+0x96>
 8007d62:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <_dtoa_r+0xbd8>)
 8007d64:	f7ff ba8e 	b.w	8007284 <_dtoa_r+0xdc>
 8007d68:	9b02      	ldr	r3, [sp, #8]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	dcae      	bgt.n	8007ccc <_dtoa_r+0xb24>
 8007d6e:	9b06      	ldr	r3, [sp, #24]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	f73f aea8 	bgt.w	8007ac6 <_dtoa_r+0x91e>
 8007d76:	e7a9      	b.n	8007ccc <_dtoa_r+0xb24>
 8007d78:	080092d7 	.word	0x080092d7
 8007d7c:	08009234 	.word	0x08009234
 8007d80:	08009258 	.word	0x08009258

08007d84 <_localeconv_r>:
 8007d84:	4800      	ldr	r0, [pc, #0]	; (8007d88 <_localeconv_r+0x4>)
 8007d86:	4770      	bx	lr
 8007d88:	20000194 	.word	0x20000194

08007d8c <malloc>:
 8007d8c:	4b02      	ldr	r3, [pc, #8]	; (8007d98 <malloc+0xc>)
 8007d8e:	4601      	mov	r1, r0
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	f000 bc17 	b.w	80085c4 <_malloc_r>
 8007d96:	bf00      	nop
 8007d98:	20000040 	.word	0x20000040

08007d9c <memcpy>:
 8007d9c:	440a      	add	r2, r1
 8007d9e:	4291      	cmp	r1, r2
 8007da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007da4:	d100      	bne.n	8007da8 <memcpy+0xc>
 8007da6:	4770      	bx	lr
 8007da8:	b510      	push	{r4, lr}
 8007daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007db2:	4291      	cmp	r1, r2
 8007db4:	d1f9      	bne.n	8007daa <memcpy+0xe>
 8007db6:	bd10      	pop	{r4, pc}

08007db8 <_Balloc>:
 8007db8:	b570      	push	{r4, r5, r6, lr}
 8007dba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	460d      	mov	r5, r1
 8007dc0:	b976      	cbnz	r6, 8007de0 <_Balloc+0x28>
 8007dc2:	2010      	movs	r0, #16
 8007dc4:	f7ff ffe2 	bl	8007d8c <malloc>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	6260      	str	r0, [r4, #36]	; 0x24
 8007dcc:	b920      	cbnz	r0, 8007dd8 <_Balloc+0x20>
 8007dce:	4b18      	ldr	r3, [pc, #96]	; (8007e30 <_Balloc+0x78>)
 8007dd0:	4818      	ldr	r0, [pc, #96]	; (8007e34 <_Balloc+0x7c>)
 8007dd2:	2166      	movs	r1, #102	; 0x66
 8007dd4:	f000 fc7a 	bl	80086cc <__assert_func>
 8007dd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ddc:	6006      	str	r6, [r0, #0]
 8007dde:	60c6      	str	r6, [r0, #12]
 8007de0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007de2:	68f3      	ldr	r3, [r6, #12]
 8007de4:	b183      	cbz	r3, 8007e08 <_Balloc+0x50>
 8007de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007dee:	b9b8      	cbnz	r0, 8007e20 <_Balloc+0x68>
 8007df0:	2101      	movs	r1, #1
 8007df2:	fa01 f605 	lsl.w	r6, r1, r5
 8007df6:	1d72      	adds	r2, r6, #5
 8007df8:	0092      	lsls	r2, r2, #2
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f000 fb60 	bl	80084c0 <_calloc_r>
 8007e00:	b160      	cbz	r0, 8007e1c <_Balloc+0x64>
 8007e02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e06:	e00e      	b.n	8007e26 <_Balloc+0x6e>
 8007e08:	2221      	movs	r2, #33	; 0x21
 8007e0a:	2104      	movs	r1, #4
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f000 fb57 	bl	80084c0 <_calloc_r>
 8007e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e14:	60f0      	str	r0, [r6, #12]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1e4      	bne.n	8007de6 <_Balloc+0x2e>
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
 8007e20:	6802      	ldr	r2, [r0, #0]
 8007e22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e26:	2300      	movs	r3, #0
 8007e28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e2c:	e7f7      	b.n	8007e1e <_Balloc+0x66>
 8007e2e:	bf00      	nop
 8007e30:	08009265 	.word	0x08009265
 8007e34:	080092e8 	.word	0x080092e8

08007e38 <_Bfree>:
 8007e38:	b570      	push	{r4, r5, r6, lr}
 8007e3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	460c      	mov	r4, r1
 8007e40:	b976      	cbnz	r6, 8007e60 <_Bfree+0x28>
 8007e42:	2010      	movs	r0, #16
 8007e44:	f7ff ffa2 	bl	8007d8c <malloc>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	6268      	str	r0, [r5, #36]	; 0x24
 8007e4c:	b920      	cbnz	r0, 8007e58 <_Bfree+0x20>
 8007e4e:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <_Bfree+0x3c>)
 8007e50:	4809      	ldr	r0, [pc, #36]	; (8007e78 <_Bfree+0x40>)
 8007e52:	218a      	movs	r1, #138	; 0x8a
 8007e54:	f000 fc3a 	bl	80086cc <__assert_func>
 8007e58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e5c:	6006      	str	r6, [r0, #0]
 8007e5e:	60c6      	str	r6, [r0, #12]
 8007e60:	b13c      	cbz	r4, 8007e72 <_Bfree+0x3a>
 8007e62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e64:	6862      	ldr	r2, [r4, #4]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e6c:	6021      	str	r1, [r4, #0]
 8007e6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e72:	bd70      	pop	{r4, r5, r6, pc}
 8007e74:	08009265 	.word	0x08009265
 8007e78:	080092e8 	.word	0x080092e8

08007e7c <__multadd>:
 8007e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e80:	690d      	ldr	r5, [r1, #16]
 8007e82:	4607      	mov	r7, r0
 8007e84:	460c      	mov	r4, r1
 8007e86:	461e      	mov	r6, r3
 8007e88:	f101 0c14 	add.w	ip, r1, #20
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	f8dc 3000 	ldr.w	r3, [ip]
 8007e92:	b299      	uxth	r1, r3
 8007e94:	fb02 6101 	mla	r1, r2, r1, r6
 8007e98:	0c1e      	lsrs	r6, r3, #16
 8007e9a:	0c0b      	lsrs	r3, r1, #16
 8007e9c:	fb02 3306 	mla	r3, r2, r6, r3
 8007ea0:	b289      	uxth	r1, r1
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ea8:	4285      	cmp	r5, r0
 8007eaa:	f84c 1b04 	str.w	r1, [ip], #4
 8007eae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007eb2:	dcec      	bgt.n	8007e8e <__multadd+0x12>
 8007eb4:	b30e      	cbz	r6, 8007efa <__multadd+0x7e>
 8007eb6:	68a3      	ldr	r3, [r4, #8]
 8007eb8:	42ab      	cmp	r3, r5
 8007eba:	dc19      	bgt.n	8007ef0 <__multadd+0x74>
 8007ebc:	6861      	ldr	r1, [r4, #4]
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	3101      	adds	r1, #1
 8007ec2:	f7ff ff79 	bl	8007db8 <_Balloc>
 8007ec6:	4680      	mov	r8, r0
 8007ec8:	b928      	cbnz	r0, 8007ed6 <__multadd+0x5a>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	4b0c      	ldr	r3, [pc, #48]	; (8007f00 <__multadd+0x84>)
 8007ece:	480d      	ldr	r0, [pc, #52]	; (8007f04 <__multadd+0x88>)
 8007ed0:	21b5      	movs	r1, #181	; 0xb5
 8007ed2:	f000 fbfb 	bl	80086cc <__assert_func>
 8007ed6:	6922      	ldr	r2, [r4, #16]
 8007ed8:	3202      	adds	r2, #2
 8007eda:	f104 010c 	add.w	r1, r4, #12
 8007ede:	0092      	lsls	r2, r2, #2
 8007ee0:	300c      	adds	r0, #12
 8007ee2:	f7ff ff5b 	bl	8007d9c <memcpy>
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	4638      	mov	r0, r7
 8007eea:	f7ff ffa5 	bl	8007e38 <_Bfree>
 8007eee:	4644      	mov	r4, r8
 8007ef0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ef4:	3501      	adds	r5, #1
 8007ef6:	615e      	str	r6, [r3, #20]
 8007ef8:	6125      	str	r5, [r4, #16]
 8007efa:	4620      	mov	r0, r4
 8007efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f00:	080092d7 	.word	0x080092d7
 8007f04:	080092e8 	.word	0x080092e8

08007f08 <__hi0bits>:
 8007f08:	0c03      	lsrs	r3, r0, #16
 8007f0a:	041b      	lsls	r3, r3, #16
 8007f0c:	b9d3      	cbnz	r3, 8007f44 <__hi0bits+0x3c>
 8007f0e:	0400      	lsls	r0, r0, #16
 8007f10:	2310      	movs	r3, #16
 8007f12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f16:	bf04      	itt	eq
 8007f18:	0200      	lsleq	r0, r0, #8
 8007f1a:	3308      	addeq	r3, #8
 8007f1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f20:	bf04      	itt	eq
 8007f22:	0100      	lsleq	r0, r0, #4
 8007f24:	3304      	addeq	r3, #4
 8007f26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f2a:	bf04      	itt	eq
 8007f2c:	0080      	lsleq	r0, r0, #2
 8007f2e:	3302      	addeq	r3, #2
 8007f30:	2800      	cmp	r0, #0
 8007f32:	db05      	blt.n	8007f40 <__hi0bits+0x38>
 8007f34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f38:	f103 0301 	add.w	r3, r3, #1
 8007f3c:	bf08      	it	eq
 8007f3e:	2320      	moveq	r3, #32
 8007f40:	4618      	mov	r0, r3
 8007f42:	4770      	bx	lr
 8007f44:	2300      	movs	r3, #0
 8007f46:	e7e4      	b.n	8007f12 <__hi0bits+0xa>

08007f48 <__lo0bits>:
 8007f48:	6803      	ldr	r3, [r0, #0]
 8007f4a:	f013 0207 	ands.w	r2, r3, #7
 8007f4e:	4601      	mov	r1, r0
 8007f50:	d00b      	beq.n	8007f6a <__lo0bits+0x22>
 8007f52:	07da      	lsls	r2, r3, #31
 8007f54:	d423      	bmi.n	8007f9e <__lo0bits+0x56>
 8007f56:	0798      	lsls	r0, r3, #30
 8007f58:	bf49      	itett	mi
 8007f5a:	085b      	lsrmi	r3, r3, #1
 8007f5c:	089b      	lsrpl	r3, r3, #2
 8007f5e:	2001      	movmi	r0, #1
 8007f60:	600b      	strmi	r3, [r1, #0]
 8007f62:	bf5c      	itt	pl
 8007f64:	600b      	strpl	r3, [r1, #0]
 8007f66:	2002      	movpl	r0, #2
 8007f68:	4770      	bx	lr
 8007f6a:	b298      	uxth	r0, r3
 8007f6c:	b9a8      	cbnz	r0, 8007f9a <__lo0bits+0x52>
 8007f6e:	0c1b      	lsrs	r3, r3, #16
 8007f70:	2010      	movs	r0, #16
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	b90a      	cbnz	r2, 8007f7a <__lo0bits+0x32>
 8007f76:	3008      	adds	r0, #8
 8007f78:	0a1b      	lsrs	r3, r3, #8
 8007f7a:	071a      	lsls	r2, r3, #28
 8007f7c:	bf04      	itt	eq
 8007f7e:	091b      	lsreq	r3, r3, #4
 8007f80:	3004      	addeq	r0, #4
 8007f82:	079a      	lsls	r2, r3, #30
 8007f84:	bf04      	itt	eq
 8007f86:	089b      	lsreq	r3, r3, #2
 8007f88:	3002      	addeq	r0, #2
 8007f8a:	07da      	lsls	r2, r3, #31
 8007f8c:	d403      	bmi.n	8007f96 <__lo0bits+0x4e>
 8007f8e:	085b      	lsrs	r3, r3, #1
 8007f90:	f100 0001 	add.w	r0, r0, #1
 8007f94:	d005      	beq.n	8007fa2 <__lo0bits+0x5a>
 8007f96:	600b      	str	r3, [r1, #0]
 8007f98:	4770      	bx	lr
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	e7e9      	b.n	8007f72 <__lo0bits+0x2a>
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	4770      	bx	lr
 8007fa2:	2020      	movs	r0, #32
 8007fa4:	4770      	bx	lr
	...

08007fa8 <__i2b>:
 8007fa8:	b510      	push	{r4, lr}
 8007faa:	460c      	mov	r4, r1
 8007fac:	2101      	movs	r1, #1
 8007fae:	f7ff ff03 	bl	8007db8 <_Balloc>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	b928      	cbnz	r0, 8007fc2 <__i2b+0x1a>
 8007fb6:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <__i2b+0x24>)
 8007fb8:	4805      	ldr	r0, [pc, #20]	; (8007fd0 <__i2b+0x28>)
 8007fba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007fbe:	f000 fb85 	bl	80086cc <__assert_func>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	6144      	str	r4, [r0, #20]
 8007fc6:	6103      	str	r3, [r0, #16]
 8007fc8:	bd10      	pop	{r4, pc}
 8007fca:	bf00      	nop
 8007fcc:	080092d7 	.word	0x080092d7
 8007fd0:	080092e8 	.word	0x080092e8

08007fd4 <__multiply>:
 8007fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd8:	4691      	mov	r9, r2
 8007fda:	690a      	ldr	r2, [r1, #16]
 8007fdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	bfb8      	it	lt
 8007fe4:	460b      	movlt	r3, r1
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	bfbc      	itt	lt
 8007fea:	464c      	movlt	r4, r9
 8007fec:	4699      	movlt	r9, r3
 8007fee:	6927      	ldr	r7, [r4, #16]
 8007ff0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ff4:	68a3      	ldr	r3, [r4, #8]
 8007ff6:	6861      	ldr	r1, [r4, #4]
 8007ff8:	eb07 060a 	add.w	r6, r7, sl
 8007ffc:	42b3      	cmp	r3, r6
 8007ffe:	b085      	sub	sp, #20
 8008000:	bfb8      	it	lt
 8008002:	3101      	addlt	r1, #1
 8008004:	f7ff fed8 	bl	8007db8 <_Balloc>
 8008008:	b930      	cbnz	r0, 8008018 <__multiply+0x44>
 800800a:	4602      	mov	r2, r0
 800800c:	4b44      	ldr	r3, [pc, #272]	; (8008120 <__multiply+0x14c>)
 800800e:	4845      	ldr	r0, [pc, #276]	; (8008124 <__multiply+0x150>)
 8008010:	f240 115d 	movw	r1, #349	; 0x15d
 8008014:	f000 fb5a 	bl	80086cc <__assert_func>
 8008018:	f100 0514 	add.w	r5, r0, #20
 800801c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008020:	462b      	mov	r3, r5
 8008022:	2200      	movs	r2, #0
 8008024:	4543      	cmp	r3, r8
 8008026:	d321      	bcc.n	800806c <__multiply+0x98>
 8008028:	f104 0314 	add.w	r3, r4, #20
 800802c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008030:	f109 0314 	add.w	r3, r9, #20
 8008034:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008038:	9202      	str	r2, [sp, #8]
 800803a:	1b3a      	subs	r2, r7, r4
 800803c:	3a15      	subs	r2, #21
 800803e:	f022 0203 	bic.w	r2, r2, #3
 8008042:	3204      	adds	r2, #4
 8008044:	f104 0115 	add.w	r1, r4, #21
 8008048:	428f      	cmp	r7, r1
 800804a:	bf38      	it	cc
 800804c:	2204      	movcc	r2, #4
 800804e:	9201      	str	r2, [sp, #4]
 8008050:	9a02      	ldr	r2, [sp, #8]
 8008052:	9303      	str	r3, [sp, #12]
 8008054:	429a      	cmp	r2, r3
 8008056:	d80c      	bhi.n	8008072 <__multiply+0x9e>
 8008058:	2e00      	cmp	r6, #0
 800805a:	dd03      	ble.n	8008064 <__multiply+0x90>
 800805c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008060:	2b00      	cmp	r3, #0
 8008062:	d05a      	beq.n	800811a <__multiply+0x146>
 8008064:	6106      	str	r6, [r0, #16]
 8008066:	b005      	add	sp, #20
 8008068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806c:	f843 2b04 	str.w	r2, [r3], #4
 8008070:	e7d8      	b.n	8008024 <__multiply+0x50>
 8008072:	f8b3 a000 	ldrh.w	sl, [r3]
 8008076:	f1ba 0f00 	cmp.w	sl, #0
 800807a:	d024      	beq.n	80080c6 <__multiply+0xf2>
 800807c:	f104 0e14 	add.w	lr, r4, #20
 8008080:	46a9      	mov	r9, r5
 8008082:	f04f 0c00 	mov.w	ip, #0
 8008086:	f85e 2b04 	ldr.w	r2, [lr], #4
 800808a:	f8d9 1000 	ldr.w	r1, [r9]
 800808e:	fa1f fb82 	uxth.w	fp, r2
 8008092:	b289      	uxth	r1, r1
 8008094:	fb0a 110b 	mla	r1, sl, fp, r1
 8008098:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800809c:	f8d9 2000 	ldr.w	r2, [r9]
 80080a0:	4461      	add	r1, ip
 80080a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80080aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080ae:	b289      	uxth	r1, r1
 80080b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080b4:	4577      	cmp	r7, lr
 80080b6:	f849 1b04 	str.w	r1, [r9], #4
 80080ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080be:	d8e2      	bhi.n	8008086 <__multiply+0xb2>
 80080c0:	9a01      	ldr	r2, [sp, #4]
 80080c2:	f845 c002 	str.w	ip, [r5, r2]
 80080c6:	9a03      	ldr	r2, [sp, #12]
 80080c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80080cc:	3304      	adds	r3, #4
 80080ce:	f1b9 0f00 	cmp.w	r9, #0
 80080d2:	d020      	beq.n	8008116 <__multiply+0x142>
 80080d4:	6829      	ldr	r1, [r5, #0]
 80080d6:	f104 0c14 	add.w	ip, r4, #20
 80080da:	46ae      	mov	lr, r5
 80080dc:	f04f 0a00 	mov.w	sl, #0
 80080e0:	f8bc b000 	ldrh.w	fp, [ip]
 80080e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80080e8:	fb09 220b 	mla	r2, r9, fp, r2
 80080ec:	4492      	add	sl, r2
 80080ee:	b289      	uxth	r1, r1
 80080f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80080f4:	f84e 1b04 	str.w	r1, [lr], #4
 80080f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80080fc:	f8be 1000 	ldrh.w	r1, [lr]
 8008100:	0c12      	lsrs	r2, r2, #16
 8008102:	fb09 1102 	mla	r1, r9, r2, r1
 8008106:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800810a:	4567      	cmp	r7, ip
 800810c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008110:	d8e6      	bhi.n	80080e0 <__multiply+0x10c>
 8008112:	9a01      	ldr	r2, [sp, #4]
 8008114:	50a9      	str	r1, [r5, r2]
 8008116:	3504      	adds	r5, #4
 8008118:	e79a      	b.n	8008050 <__multiply+0x7c>
 800811a:	3e01      	subs	r6, #1
 800811c:	e79c      	b.n	8008058 <__multiply+0x84>
 800811e:	bf00      	nop
 8008120:	080092d7 	.word	0x080092d7
 8008124:	080092e8 	.word	0x080092e8

08008128 <__pow5mult>:
 8008128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800812c:	4615      	mov	r5, r2
 800812e:	f012 0203 	ands.w	r2, r2, #3
 8008132:	4606      	mov	r6, r0
 8008134:	460f      	mov	r7, r1
 8008136:	d007      	beq.n	8008148 <__pow5mult+0x20>
 8008138:	4c25      	ldr	r4, [pc, #148]	; (80081d0 <__pow5mult+0xa8>)
 800813a:	3a01      	subs	r2, #1
 800813c:	2300      	movs	r3, #0
 800813e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008142:	f7ff fe9b 	bl	8007e7c <__multadd>
 8008146:	4607      	mov	r7, r0
 8008148:	10ad      	asrs	r5, r5, #2
 800814a:	d03d      	beq.n	80081c8 <__pow5mult+0xa0>
 800814c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800814e:	b97c      	cbnz	r4, 8008170 <__pow5mult+0x48>
 8008150:	2010      	movs	r0, #16
 8008152:	f7ff fe1b 	bl	8007d8c <malloc>
 8008156:	4602      	mov	r2, r0
 8008158:	6270      	str	r0, [r6, #36]	; 0x24
 800815a:	b928      	cbnz	r0, 8008168 <__pow5mult+0x40>
 800815c:	4b1d      	ldr	r3, [pc, #116]	; (80081d4 <__pow5mult+0xac>)
 800815e:	481e      	ldr	r0, [pc, #120]	; (80081d8 <__pow5mult+0xb0>)
 8008160:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008164:	f000 fab2 	bl	80086cc <__assert_func>
 8008168:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800816c:	6004      	str	r4, [r0, #0]
 800816e:	60c4      	str	r4, [r0, #12]
 8008170:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008174:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008178:	b94c      	cbnz	r4, 800818e <__pow5mult+0x66>
 800817a:	f240 2171 	movw	r1, #625	; 0x271
 800817e:	4630      	mov	r0, r6
 8008180:	f7ff ff12 	bl	8007fa8 <__i2b>
 8008184:	2300      	movs	r3, #0
 8008186:	f8c8 0008 	str.w	r0, [r8, #8]
 800818a:	4604      	mov	r4, r0
 800818c:	6003      	str	r3, [r0, #0]
 800818e:	f04f 0900 	mov.w	r9, #0
 8008192:	07eb      	lsls	r3, r5, #31
 8008194:	d50a      	bpl.n	80081ac <__pow5mult+0x84>
 8008196:	4639      	mov	r1, r7
 8008198:	4622      	mov	r2, r4
 800819a:	4630      	mov	r0, r6
 800819c:	f7ff ff1a 	bl	8007fd4 <__multiply>
 80081a0:	4639      	mov	r1, r7
 80081a2:	4680      	mov	r8, r0
 80081a4:	4630      	mov	r0, r6
 80081a6:	f7ff fe47 	bl	8007e38 <_Bfree>
 80081aa:	4647      	mov	r7, r8
 80081ac:	106d      	asrs	r5, r5, #1
 80081ae:	d00b      	beq.n	80081c8 <__pow5mult+0xa0>
 80081b0:	6820      	ldr	r0, [r4, #0]
 80081b2:	b938      	cbnz	r0, 80081c4 <__pow5mult+0x9c>
 80081b4:	4622      	mov	r2, r4
 80081b6:	4621      	mov	r1, r4
 80081b8:	4630      	mov	r0, r6
 80081ba:	f7ff ff0b 	bl	8007fd4 <__multiply>
 80081be:	6020      	str	r0, [r4, #0]
 80081c0:	f8c0 9000 	str.w	r9, [r0]
 80081c4:	4604      	mov	r4, r0
 80081c6:	e7e4      	b.n	8008192 <__pow5mult+0x6a>
 80081c8:	4638      	mov	r0, r7
 80081ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ce:	bf00      	nop
 80081d0:	08009438 	.word	0x08009438
 80081d4:	08009265 	.word	0x08009265
 80081d8:	080092e8 	.word	0x080092e8

080081dc <__lshift>:
 80081dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e0:	460c      	mov	r4, r1
 80081e2:	6849      	ldr	r1, [r1, #4]
 80081e4:	6923      	ldr	r3, [r4, #16]
 80081e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80081ea:	68a3      	ldr	r3, [r4, #8]
 80081ec:	4607      	mov	r7, r0
 80081ee:	4691      	mov	r9, r2
 80081f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80081f4:	f108 0601 	add.w	r6, r8, #1
 80081f8:	42b3      	cmp	r3, r6
 80081fa:	db0b      	blt.n	8008214 <__lshift+0x38>
 80081fc:	4638      	mov	r0, r7
 80081fe:	f7ff fddb 	bl	8007db8 <_Balloc>
 8008202:	4605      	mov	r5, r0
 8008204:	b948      	cbnz	r0, 800821a <__lshift+0x3e>
 8008206:	4602      	mov	r2, r0
 8008208:	4b2a      	ldr	r3, [pc, #168]	; (80082b4 <__lshift+0xd8>)
 800820a:	482b      	ldr	r0, [pc, #172]	; (80082b8 <__lshift+0xdc>)
 800820c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008210:	f000 fa5c 	bl	80086cc <__assert_func>
 8008214:	3101      	adds	r1, #1
 8008216:	005b      	lsls	r3, r3, #1
 8008218:	e7ee      	b.n	80081f8 <__lshift+0x1c>
 800821a:	2300      	movs	r3, #0
 800821c:	f100 0114 	add.w	r1, r0, #20
 8008220:	f100 0210 	add.w	r2, r0, #16
 8008224:	4618      	mov	r0, r3
 8008226:	4553      	cmp	r3, sl
 8008228:	db37      	blt.n	800829a <__lshift+0xbe>
 800822a:	6920      	ldr	r0, [r4, #16]
 800822c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008230:	f104 0314 	add.w	r3, r4, #20
 8008234:	f019 091f 	ands.w	r9, r9, #31
 8008238:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800823c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008240:	d02f      	beq.n	80082a2 <__lshift+0xc6>
 8008242:	f1c9 0e20 	rsb	lr, r9, #32
 8008246:	468a      	mov	sl, r1
 8008248:	f04f 0c00 	mov.w	ip, #0
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	fa02 f209 	lsl.w	r2, r2, r9
 8008252:	ea42 020c 	orr.w	r2, r2, ip
 8008256:	f84a 2b04 	str.w	r2, [sl], #4
 800825a:	f853 2b04 	ldr.w	r2, [r3], #4
 800825e:	4298      	cmp	r0, r3
 8008260:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008264:	d8f2      	bhi.n	800824c <__lshift+0x70>
 8008266:	1b03      	subs	r3, r0, r4
 8008268:	3b15      	subs	r3, #21
 800826a:	f023 0303 	bic.w	r3, r3, #3
 800826e:	3304      	adds	r3, #4
 8008270:	f104 0215 	add.w	r2, r4, #21
 8008274:	4290      	cmp	r0, r2
 8008276:	bf38      	it	cc
 8008278:	2304      	movcc	r3, #4
 800827a:	f841 c003 	str.w	ip, [r1, r3]
 800827e:	f1bc 0f00 	cmp.w	ip, #0
 8008282:	d001      	beq.n	8008288 <__lshift+0xac>
 8008284:	f108 0602 	add.w	r6, r8, #2
 8008288:	3e01      	subs	r6, #1
 800828a:	4638      	mov	r0, r7
 800828c:	612e      	str	r6, [r5, #16]
 800828e:	4621      	mov	r1, r4
 8008290:	f7ff fdd2 	bl	8007e38 <_Bfree>
 8008294:	4628      	mov	r0, r5
 8008296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829a:	f842 0f04 	str.w	r0, [r2, #4]!
 800829e:	3301      	adds	r3, #1
 80082a0:	e7c1      	b.n	8008226 <__lshift+0x4a>
 80082a2:	3904      	subs	r1, #4
 80082a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80082ac:	4298      	cmp	r0, r3
 80082ae:	d8f9      	bhi.n	80082a4 <__lshift+0xc8>
 80082b0:	e7ea      	b.n	8008288 <__lshift+0xac>
 80082b2:	bf00      	nop
 80082b4:	080092d7 	.word	0x080092d7
 80082b8:	080092e8 	.word	0x080092e8

080082bc <__mcmp>:
 80082bc:	b530      	push	{r4, r5, lr}
 80082be:	6902      	ldr	r2, [r0, #16]
 80082c0:	690c      	ldr	r4, [r1, #16]
 80082c2:	1b12      	subs	r2, r2, r4
 80082c4:	d10e      	bne.n	80082e4 <__mcmp+0x28>
 80082c6:	f100 0314 	add.w	r3, r0, #20
 80082ca:	3114      	adds	r1, #20
 80082cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80082d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80082d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80082d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80082dc:	42a5      	cmp	r5, r4
 80082de:	d003      	beq.n	80082e8 <__mcmp+0x2c>
 80082e0:	d305      	bcc.n	80082ee <__mcmp+0x32>
 80082e2:	2201      	movs	r2, #1
 80082e4:	4610      	mov	r0, r2
 80082e6:	bd30      	pop	{r4, r5, pc}
 80082e8:	4283      	cmp	r3, r0
 80082ea:	d3f3      	bcc.n	80082d4 <__mcmp+0x18>
 80082ec:	e7fa      	b.n	80082e4 <__mcmp+0x28>
 80082ee:	f04f 32ff 	mov.w	r2, #4294967295
 80082f2:	e7f7      	b.n	80082e4 <__mcmp+0x28>

080082f4 <__mdiff>:
 80082f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f8:	460c      	mov	r4, r1
 80082fa:	4606      	mov	r6, r0
 80082fc:	4611      	mov	r1, r2
 80082fe:	4620      	mov	r0, r4
 8008300:	4690      	mov	r8, r2
 8008302:	f7ff ffdb 	bl	80082bc <__mcmp>
 8008306:	1e05      	subs	r5, r0, #0
 8008308:	d110      	bne.n	800832c <__mdiff+0x38>
 800830a:	4629      	mov	r1, r5
 800830c:	4630      	mov	r0, r6
 800830e:	f7ff fd53 	bl	8007db8 <_Balloc>
 8008312:	b930      	cbnz	r0, 8008322 <__mdiff+0x2e>
 8008314:	4b3a      	ldr	r3, [pc, #232]	; (8008400 <__mdiff+0x10c>)
 8008316:	4602      	mov	r2, r0
 8008318:	f240 2132 	movw	r1, #562	; 0x232
 800831c:	4839      	ldr	r0, [pc, #228]	; (8008404 <__mdiff+0x110>)
 800831e:	f000 f9d5 	bl	80086cc <__assert_func>
 8008322:	2301      	movs	r3, #1
 8008324:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832c:	bfa4      	itt	ge
 800832e:	4643      	movge	r3, r8
 8008330:	46a0      	movge	r8, r4
 8008332:	4630      	mov	r0, r6
 8008334:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008338:	bfa6      	itte	ge
 800833a:	461c      	movge	r4, r3
 800833c:	2500      	movge	r5, #0
 800833e:	2501      	movlt	r5, #1
 8008340:	f7ff fd3a 	bl	8007db8 <_Balloc>
 8008344:	b920      	cbnz	r0, 8008350 <__mdiff+0x5c>
 8008346:	4b2e      	ldr	r3, [pc, #184]	; (8008400 <__mdiff+0x10c>)
 8008348:	4602      	mov	r2, r0
 800834a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800834e:	e7e5      	b.n	800831c <__mdiff+0x28>
 8008350:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008354:	6926      	ldr	r6, [r4, #16]
 8008356:	60c5      	str	r5, [r0, #12]
 8008358:	f104 0914 	add.w	r9, r4, #20
 800835c:	f108 0514 	add.w	r5, r8, #20
 8008360:	f100 0e14 	add.w	lr, r0, #20
 8008364:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008368:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800836c:	f108 0210 	add.w	r2, r8, #16
 8008370:	46f2      	mov	sl, lr
 8008372:	2100      	movs	r1, #0
 8008374:	f859 3b04 	ldr.w	r3, [r9], #4
 8008378:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800837c:	fa1f f883 	uxth.w	r8, r3
 8008380:	fa11 f18b 	uxtah	r1, r1, fp
 8008384:	0c1b      	lsrs	r3, r3, #16
 8008386:	eba1 0808 	sub.w	r8, r1, r8
 800838a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800838e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008392:	fa1f f888 	uxth.w	r8, r8
 8008396:	1419      	asrs	r1, r3, #16
 8008398:	454e      	cmp	r6, r9
 800839a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800839e:	f84a 3b04 	str.w	r3, [sl], #4
 80083a2:	d8e7      	bhi.n	8008374 <__mdiff+0x80>
 80083a4:	1b33      	subs	r3, r6, r4
 80083a6:	3b15      	subs	r3, #21
 80083a8:	f023 0303 	bic.w	r3, r3, #3
 80083ac:	3304      	adds	r3, #4
 80083ae:	3415      	adds	r4, #21
 80083b0:	42a6      	cmp	r6, r4
 80083b2:	bf38      	it	cc
 80083b4:	2304      	movcc	r3, #4
 80083b6:	441d      	add	r5, r3
 80083b8:	4473      	add	r3, lr
 80083ba:	469e      	mov	lr, r3
 80083bc:	462e      	mov	r6, r5
 80083be:	4566      	cmp	r6, ip
 80083c0:	d30e      	bcc.n	80083e0 <__mdiff+0xec>
 80083c2:	f10c 0203 	add.w	r2, ip, #3
 80083c6:	1b52      	subs	r2, r2, r5
 80083c8:	f022 0203 	bic.w	r2, r2, #3
 80083cc:	3d03      	subs	r5, #3
 80083ce:	45ac      	cmp	ip, r5
 80083d0:	bf38      	it	cc
 80083d2:	2200      	movcc	r2, #0
 80083d4:	441a      	add	r2, r3
 80083d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80083da:	b17b      	cbz	r3, 80083fc <__mdiff+0x108>
 80083dc:	6107      	str	r7, [r0, #16]
 80083de:	e7a3      	b.n	8008328 <__mdiff+0x34>
 80083e0:	f856 8b04 	ldr.w	r8, [r6], #4
 80083e4:	fa11 f288 	uxtah	r2, r1, r8
 80083e8:	1414      	asrs	r4, r2, #16
 80083ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80083ee:	b292      	uxth	r2, r2
 80083f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80083f4:	f84e 2b04 	str.w	r2, [lr], #4
 80083f8:	1421      	asrs	r1, r4, #16
 80083fa:	e7e0      	b.n	80083be <__mdiff+0xca>
 80083fc:	3f01      	subs	r7, #1
 80083fe:	e7ea      	b.n	80083d6 <__mdiff+0xe2>
 8008400:	080092d7 	.word	0x080092d7
 8008404:	080092e8 	.word	0x080092e8

08008408 <__d2b>:
 8008408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800840c:	4689      	mov	r9, r1
 800840e:	2101      	movs	r1, #1
 8008410:	ec57 6b10 	vmov	r6, r7, d0
 8008414:	4690      	mov	r8, r2
 8008416:	f7ff fccf 	bl	8007db8 <_Balloc>
 800841a:	4604      	mov	r4, r0
 800841c:	b930      	cbnz	r0, 800842c <__d2b+0x24>
 800841e:	4602      	mov	r2, r0
 8008420:	4b25      	ldr	r3, [pc, #148]	; (80084b8 <__d2b+0xb0>)
 8008422:	4826      	ldr	r0, [pc, #152]	; (80084bc <__d2b+0xb4>)
 8008424:	f240 310a 	movw	r1, #778	; 0x30a
 8008428:	f000 f950 	bl	80086cc <__assert_func>
 800842c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008430:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008434:	bb35      	cbnz	r5, 8008484 <__d2b+0x7c>
 8008436:	2e00      	cmp	r6, #0
 8008438:	9301      	str	r3, [sp, #4]
 800843a:	d028      	beq.n	800848e <__d2b+0x86>
 800843c:	4668      	mov	r0, sp
 800843e:	9600      	str	r6, [sp, #0]
 8008440:	f7ff fd82 	bl	8007f48 <__lo0bits>
 8008444:	9900      	ldr	r1, [sp, #0]
 8008446:	b300      	cbz	r0, 800848a <__d2b+0x82>
 8008448:	9a01      	ldr	r2, [sp, #4]
 800844a:	f1c0 0320 	rsb	r3, r0, #32
 800844e:	fa02 f303 	lsl.w	r3, r2, r3
 8008452:	430b      	orrs	r3, r1
 8008454:	40c2      	lsrs	r2, r0
 8008456:	6163      	str	r3, [r4, #20]
 8008458:	9201      	str	r2, [sp, #4]
 800845a:	9b01      	ldr	r3, [sp, #4]
 800845c:	61a3      	str	r3, [r4, #24]
 800845e:	2b00      	cmp	r3, #0
 8008460:	bf14      	ite	ne
 8008462:	2202      	movne	r2, #2
 8008464:	2201      	moveq	r2, #1
 8008466:	6122      	str	r2, [r4, #16]
 8008468:	b1d5      	cbz	r5, 80084a0 <__d2b+0x98>
 800846a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800846e:	4405      	add	r5, r0
 8008470:	f8c9 5000 	str.w	r5, [r9]
 8008474:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008478:	f8c8 0000 	str.w	r0, [r8]
 800847c:	4620      	mov	r0, r4
 800847e:	b003      	add	sp, #12
 8008480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008484:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008488:	e7d5      	b.n	8008436 <__d2b+0x2e>
 800848a:	6161      	str	r1, [r4, #20]
 800848c:	e7e5      	b.n	800845a <__d2b+0x52>
 800848e:	a801      	add	r0, sp, #4
 8008490:	f7ff fd5a 	bl	8007f48 <__lo0bits>
 8008494:	9b01      	ldr	r3, [sp, #4]
 8008496:	6163      	str	r3, [r4, #20]
 8008498:	2201      	movs	r2, #1
 800849a:	6122      	str	r2, [r4, #16]
 800849c:	3020      	adds	r0, #32
 800849e:	e7e3      	b.n	8008468 <__d2b+0x60>
 80084a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084a8:	f8c9 0000 	str.w	r0, [r9]
 80084ac:	6918      	ldr	r0, [r3, #16]
 80084ae:	f7ff fd2b 	bl	8007f08 <__hi0bits>
 80084b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084b6:	e7df      	b.n	8008478 <__d2b+0x70>
 80084b8:	080092d7 	.word	0x080092d7
 80084bc:	080092e8 	.word	0x080092e8

080084c0 <_calloc_r>:
 80084c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084c2:	fba1 2402 	umull	r2, r4, r1, r2
 80084c6:	b94c      	cbnz	r4, 80084dc <_calloc_r+0x1c>
 80084c8:	4611      	mov	r1, r2
 80084ca:	9201      	str	r2, [sp, #4]
 80084cc:	f000 f87a 	bl	80085c4 <_malloc_r>
 80084d0:	9a01      	ldr	r2, [sp, #4]
 80084d2:	4605      	mov	r5, r0
 80084d4:	b930      	cbnz	r0, 80084e4 <_calloc_r+0x24>
 80084d6:	4628      	mov	r0, r5
 80084d8:	b003      	add	sp, #12
 80084da:	bd30      	pop	{r4, r5, pc}
 80084dc:	220c      	movs	r2, #12
 80084de:	6002      	str	r2, [r0, #0]
 80084e0:	2500      	movs	r5, #0
 80084e2:	e7f8      	b.n	80084d6 <_calloc_r+0x16>
 80084e4:	4621      	mov	r1, r4
 80084e6:	f7fe f961 	bl	80067ac <memset>
 80084ea:	e7f4      	b.n	80084d6 <_calloc_r+0x16>

080084ec <_free_r>:
 80084ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ee:	2900      	cmp	r1, #0
 80084f0:	d044      	beq.n	800857c <_free_r+0x90>
 80084f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f6:	9001      	str	r0, [sp, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f1a1 0404 	sub.w	r4, r1, #4
 80084fe:	bfb8      	it	lt
 8008500:	18e4      	addlt	r4, r4, r3
 8008502:	f000 f925 	bl	8008750 <__malloc_lock>
 8008506:	4a1e      	ldr	r2, [pc, #120]	; (8008580 <_free_r+0x94>)
 8008508:	9801      	ldr	r0, [sp, #4]
 800850a:	6813      	ldr	r3, [r2, #0]
 800850c:	b933      	cbnz	r3, 800851c <_free_r+0x30>
 800850e:	6063      	str	r3, [r4, #4]
 8008510:	6014      	str	r4, [r2, #0]
 8008512:	b003      	add	sp, #12
 8008514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008518:	f000 b920 	b.w	800875c <__malloc_unlock>
 800851c:	42a3      	cmp	r3, r4
 800851e:	d908      	bls.n	8008532 <_free_r+0x46>
 8008520:	6825      	ldr	r5, [r4, #0]
 8008522:	1961      	adds	r1, r4, r5
 8008524:	428b      	cmp	r3, r1
 8008526:	bf01      	itttt	eq
 8008528:	6819      	ldreq	r1, [r3, #0]
 800852a:	685b      	ldreq	r3, [r3, #4]
 800852c:	1949      	addeq	r1, r1, r5
 800852e:	6021      	streq	r1, [r4, #0]
 8008530:	e7ed      	b.n	800850e <_free_r+0x22>
 8008532:	461a      	mov	r2, r3
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	b10b      	cbz	r3, 800853c <_free_r+0x50>
 8008538:	42a3      	cmp	r3, r4
 800853a:	d9fa      	bls.n	8008532 <_free_r+0x46>
 800853c:	6811      	ldr	r1, [r2, #0]
 800853e:	1855      	adds	r5, r2, r1
 8008540:	42a5      	cmp	r5, r4
 8008542:	d10b      	bne.n	800855c <_free_r+0x70>
 8008544:	6824      	ldr	r4, [r4, #0]
 8008546:	4421      	add	r1, r4
 8008548:	1854      	adds	r4, r2, r1
 800854a:	42a3      	cmp	r3, r4
 800854c:	6011      	str	r1, [r2, #0]
 800854e:	d1e0      	bne.n	8008512 <_free_r+0x26>
 8008550:	681c      	ldr	r4, [r3, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	6053      	str	r3, [r2, #4]
 8008556:	4421      	add	r1, r4
 8008558:	6011      	str	r1, [r2, #0]
 800855a:	e7da      	b.n	8008512 <_free_r+0x26>
 800855c:	d902      	bls.n	8008564 <_free_r+0x78>
 800855e:	230c      	movs	r3, #12
 8008560:	6003      	str	r3, [r0, #0]
 8008562:	e7d6      	b.n	8008512 <_free_r+0x26>
 8008564:	6825      	ldr	r5, [r4, #0]
 8008566:	1961      	adds	r1, r4, r5
 8008568:	428b      	cmp	r3, r1
 800856a:	bf04      	itt	eq
 800856c:	6819      	ldreq	r1, [r3, #0]
 800856e:	685b      	ldreq	r3, [r3, #4]
 8008570:	6063      	str	r3, [r4, #4]
 8008572:	bf04      	itt	eq
 8008574:	1949      	addeq	r1, r1, r5
 8008576:	6021      	streq	r1, [r4, #0]
 8008578:	6054      	str	r4, [r2, #4]
 800857a:	e7ca      	b.n	8008512 <_free_r+0x26>
 800857c:	b003      	add	sp, #12
 800857e:	bd30      	pop	{r4, r5, pc}
 8008580:	20000610 	.word	0x20000610

08008584 <sbrk_aligned>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	4e0e      	ldr	r6, [pc, #56]	; (80085c0 <sbrk_aligned+0x3c>)
 8008588:	460c      	mov	r4, r1
 800858a:	6831      	ldr	r1, [r6, #0]
 800858c:	4605      	mov	r5, r0
 800858e:	b911      	cbnz	r1, 8008596 <sbrk_aligned+0x12>
 8008590:	f000 f88c 	bl	80086ac <_sbrk_r>
 8008594:	6030      	str	r0, [r6, #0]
 8008596:	4621      	mov	r1, r4
 8008598:	4628      	mov	r0, r5
 800859a:	f000 f887 	bl	80086ac <_sbrk_r>
 800859e:	1c43      	adds	r3, r0, #1
 80085a0:	d00a      	beq.n	80085b8 <sbrk_aligned+0x34>
 80085a2:	1cc4      	adds	r4, r0, #3
 80085a4:	f024 0403 	bic.w	r4, r4, #3
 80085a8:	42a0      	cmp	r0, r4
 80085aa:	d007      	beq.n	80085bc <sbrk_aligned+0x38>
 80085ac:	1a21      	subs	r1, r4, r0
 80085ae:	4628      	mov	r0, r5
 80085b0:	f000 f87c 	bl	80086ac <_sbrk_r>
 80085b4:	3001      	adds	r0, #1
 80085b6:	d101      	bne.n	80085bc <sbrk_aligned+0x38>
 80085b8:	f04f 34ff 	mov.w	r4, #4294967295
 80085bc:	4620      	mov	r0, r4
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	20000614 	.word	0x20000614

080085c4 <_malloc_r>:
 80085c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c8:	1ccd      	adds	r5, r1, #3
 80085ca:	f025 0503 	bic.w	r5, r5, #3
 80085ce:	3508      	adds	r5, #8
 80085d0:	2d0c      	cmp	r5, #12
 80085d2:	bf38      	it	cc
 80085d4:	250c      	movcc	r5, #12
 80085d6:	2d00      	cmp	r5, #0
 80085d8:	4607      	mov	r7, r0
 80085da:	db01      	blt.n	80085e0 <_malloc_r+0x1c>
 80085dc:	42a9      	cmp	r1, r5
 80085de:	d905      	bls.n	80085ec <_malloc_r+0x28>
 80085e0:	230c      	movs	r3, #12
 80085e2:	603b      	str	r3, [r7, #0]
 80085e4:	2600      	movs	r6, #0
 80085e6:	4630      	mov	r0, r6
 80085e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ec:	4e2e      	ldr	r6, [pc, #184]	; (80086a8 <_malloc_r+0xe4>)
 80085ee:	f000 f8af 	bl	8008750 <__malloc_lock>
 80085f2:	6833      	ldr	r3, [r6, #0]
 80085f4:	461c      	mov	r4, r3
 80085f6:	bb34      	cbnz	r4, 8008646 <_malloc_r+0x82>
 80085f8:	4629      	mov	r1, r5
 80085fa:	4638      	mov	r0, r7
 80085fc:	f7ff ffc2 	bl	8008584 <sbrk_aligned>
 8008600:	1c43      	adds	r3, r0, #1
 8008602:	4604      	mov	r4, r0
 8008604:	d14d      	bne.n	80086a2 <_malloc_r+0xde>
 8008606:	6834      	ldr	r4, [r6, #0]
 8008608:	4626      	mov	r6, r4
 800860a:	2e00      	cmp	r6, #0
 800860c:	d140      	bne.n	8008690 <_malloc_r+0xcc>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	4631      	mov	r1, r6
 8008612:	4638      	mov	r0, r7
 8008614:	eb04 0803 	add.w	r8, r4, r3
 8008618:	f000 f848 	bl	80086ac <_sbrk_r>
 800861c:	4580      	cmp	r8, r0
 800861e:	d13a      	bne.n	8008696 <_malloc_r+0xd2>
 8008620:	6821      	ldr	r1, [r4, #0]
 8008622:	3503      	adds	r5, #3
 8008624:	1a6d      	subs	r5, r5, r1
 8008626:	f025 0503 	bic.w	r5, r5, #3
 800862a:	3508      	adds	r5, #8
 800862c:	2d0c      	cmp	r5, #12
 800862e:	bf38      	it	cc
 8008630:	250c      	movcc	r5, #12
 8008632:	4629      	mov	r1, r5
 8008634:	4638      	mov	r0, r7
 8008636:	f7ff ffa5 	bl	8008584 <sbrk_aligned>
 800863a:	3001      	adds	r0, #1
 800863c:	d02b      	beq.n	8008696 <_malloc_r+0xd2>
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	442b      	add	r3, r5
 8008642:	6023      	str	r3, [r4, #0]
 8008644:	e00e      	b.n	8008664 <_malloc_r+0xa0>
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	1b52      	subs	r2, r2, r5
 800864a:	d41e      	bmi.n	800868a <_malloc_r+0xc6>
 800864c:	2a0b      	cmp	r2, #11
 800864e:	d916      	bls.n	800867e <_malloc_r+0xba>
 8008650:	1961      	adds	r1, r4, r5
 8008652:	42a3      	cmp	r3, r4
 8008654:	6025      	str	r5, [r4, #0]
 8008656:	bf18      	it	ne
 8008658:	6059      	strne	r1, [r3, #4]
 800865a:	6863      	ldr	r3, [r4, #4]
 800865c:	bf08      	it	eq
 800865e:	6031      	streq	r1, [r6, #0]
 8008660:	5162      	str	r2, [r4, r5]
 8008662:	604b      	str	r3, [r1, #4]
 8008664:	4638      	mov	r0, r7
 8008666:	f104 060b 	add.w	r6, r4, #11
 800866a:	f000 f877 	bl	800875c <__malloc_unlock>
 800866e:	f026 0607 	bic.w	r6, r6, #7
 8008672:	1d23      	adds	r3, r4, #4
 8008674:	1af2      	subs	r2, r6, r3
 8008676:	d0b6      	beq.n	80085e6 <_malloc_r+0x22>
 8008678:	1b9b      	subs	r3, r3, r6
 800867a:	50a3      	str	r3, [r4, r2]
 800867c:	e7b3      	b.n	80085e6 <_malloc_r+0x22>
 800867e:	6862      	ldr	r2, [r4, #4]
 8008680:	42a3      	cmp	r3, r4
 8008682:	bf0c      	ite	eq
 8008684:	6032      	streq	r2, [r6, #0]
 8008686:	605a      	strne	r2, [r3, #4]
 8008688:	e7ec      	b.n	8008664 <_malloc_r+0xa0>
 800868a:	4623      	mov	r3, r4
 800868c:	6864      	ldr	r4, [r4, #4]
 800868e:	e7b2      	b.n	80085f6 <_malloc_r+0x32>
 8008690:	4634      	mov	r4, r6
 8008692:	6876      	ldr	r6, [r6, #4]
 8008694:	e7b9      	b.n	800860a <_malloc_r+0x46>
 8008696:	230c      	movs	r3, #12
 8008698:	603b      	str	r3, [r7, #0]
 800869a:	4638      	mov	r0, r7
 800869c:	f000 f85e 	bl	800875c <__malloc_unlock>
 80086a0:	e7a1      	b.n	80085e6 <_malloc_r+0x22>
 80086a2:	6025      	str	r5, [r4, #0]
 80086a4:	e7de      	b.n	8008664 <_malloc_r+0xa0>
 80086a6:	bf00      	nop
 80086a8:	20000610 	.word	0x20000610

080086ac <_sbrk_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4d06      	ldr	r5, [pc, #24]	; (80086c8 <_sbrk_r+0x1c>)
 80086b0:	2300      	movs	r3, #0
 80086b2:	4604      	mov	r4, r0
 80086b4:	4608      	mov	r0, r1
 80086b6:	602b      	str	r3, [r5, #0]
 80086b8:	f7fa fb16 	bl	8002ce8 <_sbrk>
 80086bc:	1c43      	adds	r3, r0, #1
 80086be:	d102      	bne.n	80086c6 <_sbrk_r+0x1a>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	b103      	cbz	r3, 80086c6 <_sbrk_r+0x1a>
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	20000618 	.word	0x20000618

080086cc <__assert_func>:
 80086cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086ce:	4614      	mov	r4, r2
 80086d0:	461a      	mov	r2, r3
 80086d2:	4b09      	ldr	r3, [pc, #36]	; (80086f8 <__assert_func+0x2c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4605      	mov	r5, r0
 80086d8:	68d8      	ldr	r0, [r3, #12]
 80086da:	b14c      	cbz	r4, 80086f0 <__assert_func+0x24>
 80086dc:	4b07      	ldr	r3, [pc, #28]	; (80086fc <__assert_func+0x30>)
 80086de:	9100      	str	r1, [sp, #0]
 80086e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086e4:	4906      	ldr	r1, [pc, #24]	; (8008700 <__assert_func+0x34>)
 80086e6:	462b      	mov	r3, r5
 80086e8:	f000 f80e 	bl	8008708 <fiprintf>
 80086ec:	f000 fa64 	bl	8008bb8 <abort>
 80086f0:	4b04      	ldr	r3, [pc, #16]	; (8008704 <__assert_func+0x38>)
 80086f2:	461c      	mov	r4, r3
 80086f4:	e7f3      	b.n	80086de <__assert_func+0x12>
 80086f6:	bf00      	nop
 80086f8:	20000040 	.word	0x20000040
 80086fc:	08009444 	.word	0x08009444
 8008700:	08009451 	.word	0x08009451
 8008704:	0800947f 	.word	0x0800947f

08008708 <fiprintf>:
 8008708:	b40e      	push	{r1, r2, r3}
 800870a:	b503      	push	{r0, r1, lr}
 800870c:	4601      	mov	r1, r0
 800870e:	ab03      	add	r3, sp, #12
 8008710:	4805      	ldr	r0, [pc, #20]	; (8008728 <fiprintf+0x20>)
 8008712:	f853 2b04 	ldr.w	r2, [r3], #4
 8008716:	6800      	ldr	r0, [r0, #0]
 8008718:	9301      	str	r3, [sp, #4]
 800871a:	f000 f84f 	bl	80087bc <_vfiprintf_r>
 800871e:	b002      	add	sp, #8
 8008720:	f85d eb04 	ldr.w	lr, [sp], #4
 8008724:	b003      	add	sp, #12
 8008726:	4770      	bx	lr
 8008728:	20000040 	.word	0x20000040

0800872c <__ascii_mbtowc>:
 800872c:	b082      	sub	sp, #8
 800872e:	b901      	cbnz	r1, 8008732 <__ascii_mbtowc+0x6>
 8008730:	a901      	add	r1, sp, #4
 8008732:	b142      	cbz	r2, 8008746 <__ascii_mbtowc+0x1a>
 8008734:	b14b      	cbz	r3, 800874a <__ascii_mbtowc+0x1e>
 8008736:	7813      	ldrb	r3, [r2, #0]
 8008738:	600b      	str	r3, [r1, #0]
 800873a:	7812      	ldrb	r2, [r2, #0]
 800873c:	1e10      	subs	r0, r2, #0
 800873e:	bf18      	it	ne
 8008740:	2001      	movne	r0, #1
 8008742:	b002      	add	sp, #8
 8008744:	4770      	bx	lr
 8008746:	4610      	mov	r0, r2
 8008748:	e7fb      	b.n	8008742 <__ascii_mbtowc+0x16>
 800874a:	f06f 0001 	mvn.w	r0, #1
 800874e:	e7f8      	b.n	8008742 <__ascii_mbtowc+0x16>

08008750 <__malloc_lock>:
 8008750:	4801      	ldr	r0, [pc, #4]	; (8008758 <__malloc_lock+0x8>)
 8008752:	f000 bbf1 	b.w	8008f38 <__retarget_lock_acquire_recursive>
 8008756:	bf00      	nop
 8008758:	2000061c 	.word	0x2000061c

0800875c <__malloc_unlock>:
 800875c:	4801      	ldr	r0, [pc, #4]	; (8008764 <__malloc_unlock+0x8>)
 800875e:	f000 bbec 	b.w	8008f3a <__retarget_lock_release_recursive>
 8008762:	bf00      	nop
 8008764:	2000061c 	.word	0x2000061c

08008768 <__sfputc_r>:
 8008768:	6893      	ldr	r3, [r2, #8]
 800876a:	3b01      	subs	r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	b410      	push	{r4}
 8008770:	6093      	str	r3, [r2, #8]
 8008772:	da08      	bge.n	8008786 <__sfputc_r+0x1e>
 8008774:	6994      	ldr	r4, [r2, #24]
 8008776:	42a3      	cmp	r3, r4
 8008778:	db01      	blt.n	800877e <__sfputc_r+0x16>
 800877a:	290a      	cmp	r1, #10
 800877c:	d103      	bne.n	8008786 <__sfputc_r+0x1e>
 800877e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008782:	f000 b94b 	b.w	8008a1c <__swbuf_r>
 8008786:	6813      	ldr	r3, [r2, #0]
 8008788:	1c58      	adds	r0, r3, #1
 800878a:	6010      	str	r0, [r2, #0]
 800878c:	7019      	strb	r1, [r3, #0]
 800878e:	4608      	mov	r0, r1
 8008790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008794:	4770      	bx	lr

08008796 <__sfputs_r>:
 8008796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008798:	4606      	mov	r6, r0
 800879a:	460f      	mov	r7, r1
 800879c:	4614      	mov	r4, r2
 800879e:	18d5      	adds	r5, r2, r3
 80087a0:	42ac      	cmp	r4, r5
 80087a2:	d101      	bne.n	80087a8 <__sfputs_r+0x12>
 80087a4:	2000      	movs	r0, #0
 80087a6:	e007      	b.n	80087b8 <__sfputs_r+0x22>
 80087a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ac:	463a      	mov	r2, r7
 80087ae:	4630      	mov	r0, r6
 80087b0:	f7ff ffda 	bl	8008768 <__sfputc_r>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d1f3      	bne.n	80087a0 <__sfputs_r+0xa>
 80087b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087bc <_vfiprintf_r>:
 80087bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c0:	460d      	mov	r5, r1
 80087c2:	b09d      	sub	sp, #116	; 0x74
 80087c4:	4614      	mov	r4, r2
 80087c6:	4698      	mov	r8, r3
 80087c8:	4606      	mov	r6, r0
 80087ca:	b118      	cbz	r0, 80087d4 <_vfiprintf_r+0x18>
 80087cc:	6983      	ldr	r3, [r0, #24]
 80087ce:	b90b      	cbnz	r3, 80087d4 <_vfiprintf_r+0x18>
 80087d0:	f000 fb14 	bl	8008dfc <__sinit>
 80087d4:	4b89      	ldr	r3, [pc, #548]	; (80089fc <_vfiprintf_r+0x240>)
 80087d6:	429d      	cmp	r5, r3
 80087d8:	d11b      	bne.n	8008812 <_vfiprintf_r+0x56>
 80087da:	6875      	ldr	r5, [r6, #4]
 80087dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087de:	07d9      	lsls	r1, r3, #31
 80087e0:	d405      	bmi.n	80087ee <_vfiprintf_r+0x32>
 80087e2:	89ab      	ldrh	r3, [r5, #12]
 80087e4:	059a      	lsls	r2, r3, #22
 80087e6:	d402      	bmi.n	80087ee <_vfiprintf_r+0x32>
 80087e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ea:	f000 fba5 	bl	8008f38 <__retarget_lock_acquire_recursive>
 80087ee:	89ab      	ldrh	r3, [r5, #12]
 80087f0:	071b      	lsls	r3, r3, #28
 80087f2:	d501      	bpl.n	80087f8 <_vfiprintf_r+0x3c>
 80087f4:	692b      	ldr	r3, [r5, #16]
 80087f6:	b9eb      	cbnz	r3, 8008834 <_vfiprintf_r+0x78>
 80087f8:	4629      	mov	r1, r5
 80087fa:	4630      	mov	r0, r6
 80087fc:	f000 f96e 	bl	8008adc <__swsetup_r>
 8008800:	b1c0      	cbz	r0, 8008834 <_vfiprintf_r+0x78>
 8008802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008804:	07dc      	lsls	r4, r3, #31
 8008806:	d50e      	bpl.n	8008826 <_vfiprintf_r+0x6a>
 8008808:	f04f 30ff 	mov.w	r0, #4294967295
 800880c:	b01d      	add	sp, #116	; 0x74
 800880e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008812:	4b7b      	ldr	r3, [pc, #492]	; (8008a00 <_vfiprintf_r+0x244>)
 8008814:	429d      	cmp	r5, r3
 8008816:	d101      	bne.n	800881c <_vfiprintf_r+0x60>
 8008818:	68b5      	ldr	r5, [r6, #8]
 800881a:	e7df      	b.n	80087dc <_vfiprintf_r+0x20>
 800881c:	4b79      	ldr	r3, [pc, #484]	; (8008a04 <_vfiprintf_r+0x248>)
 800881e:	429d      	cmp	r5, r3
 8008820:	bf08      	it	eq
 8008822:	68f5      	ldreq	r5, [r6, #12]
 8008824:	e7da      	b.n	80087dc <_vfiprintf_r+0x20>
 8008826:	89ab      	ldrh	r3, [r5, #12]
 8008828:	0598      	lsls	r0, r3, #22
 800882a:	d4ed      	bmi.n	8008808 <_vfiprintf_r+0x4c>
 800882c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800882e:	f000 fb84 	bl	8008f3a <__retarget_lock_release_recursive>
 8008832:	e7e9      	b.n	8008808 <_vfiprintf_r+0x4c>
 8008834:	2300      	movs	r3, #0
 8008836:	9309      	str	r3, [sp, #36]	; 0x24
 8008838:	2320      	movs	r3, #32
 800883a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800883e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008842:	2330      	movs	r3, #48	; 0x30
 8008844:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a08 <_vfiprintf_r+0x24c>
 8008848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800884c:	f04f 0901 	mov.w	r9, #1
 8008850:	4623      	mov	r3, r4
 8008852:	469a      	mov	sl, r3
 8008854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008858:	b10a      	cbz	r2, 800885e <_vfiprintf_r+0xa2>
 800885a:	2a25      	cmp	r2, #37	; 0x25
 800885c:	d1f9      	bne.n	8008852 <_vfiprintf_r+0x96>
 800885e:	ebba 0b04 	subs.w	fp, sl, r4
 8008862:	d00b      	beq.n	800887c <_vfiprintf_r+0xc0>
 8008864:	465b      	mov	r3, fp
 8008866:	4622      	mov	r2, r4
 8008868:	4629      	mov	r1, r5
 800886a:	4630      	mov	r0, r6
 800886c:	f7ff ff93 	bl	8008796 <__sfputs_r>
 8008870:	3001      	adds	r0, #1
 8008872:	f000 80aa 	beq.w	80089ca <_vfiprintf_r+0x20e>
 8008876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008878:	445a      	add	r2, fp
 800887a:	9209      	str	r2, [sp, #36]	; 0x24
 800887c:	f89a 3000 	ldrb.w	r3, [sl]
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 80a2 	beq.w	80089ca <_vfiprintf_r+0x20e>
 8008886:	2300      	movs	r3, #0
 8008888:	f04f 32ff 	mov.w	r2, #4294967295
 800888c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008890:	f10a 0a01 	add.w	sl, sl, #1
 8008894:	9304      	str	r3, [sp, #16]
 8008896:	9307      	str	r3, [sp, #28]
 8008898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800889c:	931a      	str	r3, [sp, #104]	; 0x68
 800889e:	4654      	mov	r4, sl
 80088a0:	2205      	movs	r2, #5
 80088a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a6:	4858      	ldr	r0, [pc, #352]	; (8008a08 <_vfiprintf_r+0x24c>)
 80088a8:	f7f7 fc9a 	bl	80001e0 <memchr>
 80088ac:	9a04      	ldr	r2, [sp, #16]
 80088ae:	b9d8      	cbnz	r0, 80088e8 <_vfiprintf_r+0x12c>
 80088b0:	06d1      	lsls	r1, r2, #27
 80088b2:	bf44      	itt	mi
 80088b4:	2320      	movmi	r3, #32
 80088b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ba:	0713      	lsls	r3, r2, #28
 80088bc:	bf44      	itt	mi
 80088be:	232b      	movmi	r3, #43	; 0x2b
 80088c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088c4:	f89a 3000 	ldrb.w	r3, [sl]
 80088c8:	2b2a      	cmp	r3, #42	; 0x2a
 80088ca:	d015      	beq.n	80088f8 <_vfiprintf_r+0x13c>
 80088cc:	9a07      	ldr	r2, [sp, #28]
 80088ce:	4654      	mov	r4, sl
 80088d0:	2000      	movs	r0, #0
 80088d2:	f04f 0c0a 	mov.w	ip, #10
 80088d6:	4621      	mov	r1, r4
 80088d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088dc:	3b30      	subs	r3, #48	; 0x30
 80088de:	2b09      	cmp	r3, #9
 80088e0:	d94e      	bls.n	8008980 <_vfiprintf_r+0x1c4>
 80088e2:	b1b0      	cbz	r0, 8008912 <_vfiprintf_r+0x156>
 80088e4:	9207      	str	r2, [sp, #28]
 80088e6:	e014      	b.n	8008912 <_vfiprintf_r+0x156>
 80088e8:	eba0 0308 	sub.w	r3, r0, r8
 80088ec:	fa09 f303 	lsl.w	r3, r9, r3
 80088f0:	4313      	orrs	r3, r2
 80088f2:	9304      	str	r3, [sp, #16]
 80088f4:	46a2      	mov	sl, r4
 80088f6:	e7d2      	b.n	800889e <_vfiprintf_r+0xe2>
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	1d19      	adds	r1, r3, #4
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	9103      	str	r1, [sp, #12]
 8008900:	2b00      	cmp	r3, #0
 8008902:	bfbb      	ittet	lt
 8008904:	425b      	neglt	r3, r3
 8008906:	f042 0202 	orrlt.w	r2, r2, #2
 800890a:	9307      	strge	r3, [sp, #28]
 800890c:	9307      	strlt	r3, [sp, #28]
 800890e:	bfb8      	it	lt
 8008910:	9204      	strlt	r2, [sp, #16]
 8008912:	7823      	ldrb	r3, [r4, #0]
 8008914:	2b2e      	cmp	r3, #46	; 0x2e
 8008916:	d10c      	bne.n	8008932 <_vfiprintf_r+0x176>
 8008918:	7863      	ldrb	r3, [r4, #1]
 800891a:	2b2a      	cmp	r3, #42	; 0x2a
 800891c:	d135      	bne.n	800898a <_vfiprintf_r+0x1ce>
 800891e:	9b03      	ldr	r3, [sp, #12]
 8008920:	1d1a      	adds	r2, r3, #4
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	9203      	str	r2, [sp, #12]
 8008926:	2b00      	cmp	r3, #0
 8008928:	bfb8      	it	lt
 800892a:	f04f 33ff 	movlt.w	r3, #4294967295
 800892e:	3402      	adds	r4, #2
 8008930:	9305      	str	r3, [sp, #20]
 8008932:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a18 <_vfiprintf_r+0x25c>
 8008936:	7821      	ldrb	r1, [r4, #0]
 8008938:	2203      	movs	r2, #3
 800893a:	4650      	mov	r0, sl
 800893c:	f7f7 fc50 	bl	80001e0 <memchr>
 8008940:	b140      	cbz	r0, 8008954 <_vfiprintf_r+0x198>
 8008942:	2340      	movs	r3, #64	; 0x40
 8008944:	eba0 000a 	sub.w	r0, r0, sl
 8008948:	fa03 f000 	lsl.w	r0, r3, r0
 800894c:	9b04      	ldr	r3, [sp, #16]
 800894e:	4303      	orrs	r3, r0
 8008950:	3401      	adds	r4, #1
 8008952:	9304      	str	r3, [sp, #16]
 8008954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008958:	482c      	ldr	r0, [pc, #176]	; (8008a0c <_vfiprintf_r+0x250>)
 800895a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800895e:	2206      	movs	r2, #6
 8008960:	f7f7 fc3e 	bl	80001e0 <memchr>
 8008964:	2800      	cmp	r0, #0
 8008966:	d03f      	beq.n	80089e8 <_vfiprintf_r+0x22c>
 8008968:	4b29      	ldr	r3, [pc, #164]	; (8008a10 <_vfiprintf_r+0x254>)
 800896a:	bb1b      	cbnz	r3, 80089b4 <_vfiprintf_r+0x1f8>
 800896c:	9b03      	ldr	r3, [sp, #12]
 800896e:	3307      	adds	r3, #7
 8008970:	f023 0307 	bic.w	r3, r3, #7
 8008974:	3308      	adds	r3, #8
 8008976:	9303      	str	r3, [sp, #12]
 8008978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897a:	443b      	add	r3, r7
 800897c:	9309      	str	r3, [sp, #36]	; 0x24
 800897e:	e767      	b.n	8008850 <_vfiprintf_r+0x94>
 8008980:	fb0c 3202 	mla	r2, ip, r2, r3
 8008984:	460c      	mov	r4, r1
 8008986:	2001      	movs	r0, #1
 8008988:	e7a5      	b.n	80088d6 <_vfiprintf_r+0x11a>
 800898a:	2300      	movs	r3, #0
 800898c:	3401      	adds	r4, #1
 800898e:	9305      	str	r3, [sp, #20]
 8008990:	4619      	mov	r1, r3
 8008992:	f04f 0c0a 	mov.w	ip, #10
 8008996:	4620      	mov	r0, r4
 8008998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800899c:	3a30      	subs	r2, #48	; 0x30
 800899e:	2a09      	cmp	r2, #9
 80089a0:	d903      	bls.n	80089aa <_vfiprintf_r+0x1ee>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0c5      	beq.n	8008932 <_vfiprintf_r+0x176>
 80089a6:	9105      	str	r1, [sp, #20]
 80089a8:	e7c3      	b.n	8008932 <_vfiprintf_r+0x176>
 80089aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80089ae:	4604      	mov	r4, r0
 80089b0:	2301      	movs	r3, #1
 80089b2:	e7f0      	b.n	8008996 <_vfiprintf_r+0x1da>
 80089b4:	ab03      	add	r3, sp, #12
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	462a      	mov	r2, r5
 80089ba:	4b16      	ldr	r3, [pc, #88]	; (8008a14 <_vfiprintf_r+0x258>)
 80089bc:	a904      	add	r1, sp, #16
 80089be:	4630      	mov	r0, r6
 80089c0:	f7fd ff9c 	bl	80068fc <_printf_float>
 80089c4:	4607      	mov	r7, r0
 80089c6:	1c78      	adds	r0, r7, #1
 80089c8:	d1d6      	bne.n	8008978 <_vfiprintf_r+0x1bc>
 80089ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089cc:	07d9      	lsls	r1, r3, #31
 80089ce:	d405      	bmi.n	80089dc <_vfiprintf_r+0x220>
 80089d0:	89ab      	ldrh	r3, [r5, #12]
 80089d2:	059a      	lsls	r2, r3, #22
 80089d4:	d402      	bmi.n	80089dc <_vfiprintf_r+0x220>
 80089d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089d8:	f000 faaf 	bl	8008f3a <__retarget_lock_release_recursive>
 80089dc:	89ab      	ldrh	r3, [r5, #12]
 80089de:	065b      	lsls	r3, r3, #25
 80089e0:	f53f af12 	bmi.w	8008808 <_vfiprintf_r+0x4c>
 80089e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089e6:	e711      	b.n	800880c <_vfiprintf_r+0x50>
 80089e8:	ab03      	add	r3, sp, #12
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	462a      	mov	r2, r5
 80089ee:	4b09      	ldr	r3, [pc, #36]	; (8008a14 <_vfiprintf_r+0x258>)
 80089f0:	a904      	add	r1, sp, #16
 80089f2:	4630      	mov	r0, r6
 80089f4:	f7fe fa26 	bl	8006e44 <_printf_i>
 80089f8:	e7e4      	b.n	80089c4 <_vfiprintf_r+0x208>
 80089fa:	bf00      	nop
 80089fc:	080095bc 	.word	0x080095bc
 8008a00:	080095dc 	.word	0x080095dc
 8008a04:	0800959c 	.word	0x0800959c
 8008a08:	0800948a 	.word	0x0800948a
 8008a0c:	08009494 	.word	0x08009494
 8008a10:	080068fd 	.word	0x080068fd
 8008a14:	08008797 	.word	0x08008797
 8008a18:	08009490 	.word	0x08009490

08008a1c <__swbuf_r>:
 8008a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1e:	460e      	mov	r6, r1
 8008a20:	4614      	mov	r4, r2
 8008a22:	4605      	mov	r5, r0
 8008a24:	b118      	cbz	r0, 8008a2e <__swbuf_r+0x12>
 8008a26:	6983      	ldr	r3, [r0, #24]
 8008a28:	b90b      	cbnz	r3, 8008a2e <__swbuf_r+0x12>
 8008a2a:	f000 f9e7 	bl	8008dfc <__sinit>
 8008a2e:	4b21      	ldr	r3, [pc, #132]	; (8008ab4 <__swbuf_r+0x98>)
 8008a30:	429c      	cmp	r4, r3
 8008a32:	d12b      	bne.n	8008a8c <__swbuf_r+0x70>
 8008a34:	686c      	ldr	r4, [r5, #4]
 8008a36:	69a3      	ldr	r3, [r4, #24]
 8008a38:	60a3      	str	r3, [r4, #8]
 8008a3a:	89a3      	ldrh	r3, [r4, #12]
 8008a3c:	071a      	lsls	r2, r3, #28
 8008a3e:	d52f      	bpl.n	8008aa0 <__swbuf_r+0x84>
 8008a40:	6923      	ldr	r3, [r4, #16]
 8008a42:	b36b      	cbz	r3, 8008aa0 <__swbuf_r+0x84>
 8008a44:	6923      	ldr	r3, [r4, #16]
 8008a46:	6820      	ldr	r0, [r4, #0]
 8008a48:	1ac0      	subs	r0, r0, r3
 8008a4a:	6963      	ldr	r3, [r4, #20]
 8008a4c:	b2f6      	uxtb	r6, r6
 8008a4e:	4283      	cmp	r3, r0
 8008a50:	4637      	mov	r7, r6
 8008a52:	dc04      	bgt.n	8008a5e <__swbuf_r+0x42>
 8008a54:	4621      	mov	r1, r4
 8008a56:	4628      	mov	r0, r5
 8008a58:	f000 f93c 	bl	8008cd4 <_fflush_r>
 8008a5c:	bb30      	cbnz	r0, 8008aac <__swbuf_r+0x90>
 8008a5e:	68a3      	ldr	r3, [r4, #8]
 8008a60:	3b01      	subs	r3, #1
 8008a62:	60a3      	str	r3, [r4, #8]
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	6022      	str	r2, [r4, #0]
 8008a6a:	701e      	strb	r6, [r3, #0]
 8008a6c:	6963      	ldr	r3, [r4, #20]
 8008a6e:	3001      	adds	r0, #1
 8008a70:	4283      	cmp	r3, r0
 8008a72:	d004      	beq.n	8008a7e <__swbuf_r+0x62>
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	07db      	lsls	r3, r3, #31
 8008a78:	d506      	bpl.n	8008a88 <__swbuf_r+0x6c>
 8008a7a:	2e0a      	cmp	r6, #10
 8008a7c:	d104      	bne.n	8008a88 <__swbuf_r+0x6c>
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4628      	mov	r0, r5
 8008a82:	f000 f927 	bl	8008cd4 <_fflush_r>
 8008a86:	b988      	cbnz	r0, 8008aac <__swbuf_r+0x90>
 8008a88:	4638      	mov	r0, r7
 8008a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a8c:	4b0a      	ldr	r3, [pc, #40]	; (8008ab8 <__swbuf_r+0x9c>)
 8008a8e:	429c      	cmp	r4, r3
 8008a90:	d101      	bne.n	8008a96 <__swbuf_r+0x7a>
 8008a92:	68ac      	ldr	r4, [r5, #8]
 8008a94:	e7cf      	b.n	8008a36 <__swbuf_r+0x1a>
 8008a96:	4b09      	ldr	r3, [pc, #36]	; (8008abc <__swbuf_r+0xa0>)
 8008a98:	429c      	cmp	r4, r3
 8008a9a:	bf08      	it	eq
 8008a9c:	68ec      	ldreq	r4, [r5, #12]
 8008a9e:	e7ca      	b.n	8008a36 <__swbuf_r+0x1a>
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	f000 f81a 	bl	8008adc <__swsetup_r>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d0cb      	beq.n	8008a44 <__swbuf_r+0x28>
 8008aac:	f04f 37ff 	mov.w	r7, #4294967295
 8008ab0:	e7ea      	b.n	8008a88 <__swbuf_r+0x6c>
 8008ab2:	bf00      	nop
 8008ab4:	080095bc 	.word	0x080095bc
 8008ab8:	080095dc 	.word	0x080095dc
 8008abc:	0800959c 	.word	0x0800959c

08008ac0 <__ascii_wctomb>:
 8008ac0:	b149      	cbz	r1, 8008ad6 <__ascii_wctomb+0x16>
 8008ac2:	2aff      	cmp	r2, #255	; 0xff
 8008ac4:	bf85      	ittet	hi
 8008ac6:	238a      	movhi	r3, #138	; 0x8a
 8008ac8:	6003      	strhi	r3, [r0, #0]
 8008aca:	700a      	strbls	r2, [r1, #0]
 8008acc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ad0:	bf98      	it	ls
 8008ad2:	2001      	movls	r0, #1
 8008ad4:	4770      	bx	lr
 8008ad6:	4608      	mov	r0, r1
 8008ad8:	4770      	bx	lr
	...

08008adc <__swsetup_r>:
 8008adc:	4b32      	ldr	r3, [pc, #200]	; (8008ba8 <__swsetup_r+0xcc>)
 8008ade:	b570      	push	{r4, r5, r6, lr}
 8008ae0:	681d      	ldr	r5, [r3, #0]
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	b125      	cbz	r5, 8008af2 <__swsetup_r+0x16>
 8008ae8:	69ab      	ldr	r3, [r5, #24]
 8008aea:	b913      	cbnz	r3, 8008af2 <__swsetup_r+0x16>
 8008aec:	4628      	mov	r0, r5
 8008aee:	f000 f985 	bl	8008dfc <__sinit>
 8008af2:	4b2e      	ldr	r3, [pc, #184]	; (8008bac <__swsetup_r+0xd0>)
 8008af4:	429c      	cmp	r4, r3
 8008af6:	d10f      	bne.n	8008b18 <__swsetup_r+0x3c>
 8008af8:	686c      	ldr	r4, [r5, #4]
 8008afa:	89a3      	ldrh	r3, [r4, #12]
 8008afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b00:	0719      	lsls	r1, r3, #28
 8008b02:	d42c      	bmi.n	8008b5e <__swsetup_r+0x82>
 8008b04:	06dd      	lsls	r5, r3, #27
 8008b06:	d411      	bmi.n	8008b2c <__swsetup_r+0x50>
 8008b08:	2309      	movs	r3, #9
 8008b0a:	6033      	str	r3, [r6, #0]
 8008b0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b10:	81a3      	strh	r3, [r4, #12]
 8008b12:	f04f 30ff 	mov.w	r0, #4294967295
 8008b16:	e03e      	b.n	8008b96 <__swsetup_r+0xba>
 8008b18:	4b25      	ldr	r3, [pc, #148]	; (8008bb0 <__swsetup_r+0xd4>)
 8008b1a:	429c      	cmp	r4, r3
 8008b1c:	d101      	bne.n	8008b22 <__swsetup_r+0x46>
 8008b1e:	68ac      	ldr	r4, [r5, #8]
 8008b20:	e7eb      	b.n	8008afa <__swsetup_r+0x1e>
 8008b22:	4b24      	ldr	r3, [pc, #144]	; (8008bb4 <__swsetup_r+0xd8>)
 8008b24:	429c      	cmp	r4, r3
 8008b26:	bf08      	it	eq
 8008b28:	68ec      	ldreq	r4, [r5, #12]
 8008b2a:	e7e6      	b.n	8008afa <__swsetup_r+0x1e>
 8008b2c:	0758      	lsls	r0, r3, #29
 8008b2e:	d512      	bpl.n	8008b56 <__swsetup_r+0x7a>
 8008b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b32:	b141      	cbz	r1, 8008b46 <__swsetup_r+0x6a>
 8008b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b38:	4299      	cmp	r1, r3
 8008b3a:	d002      	beq.n	8008b42 <__swsetup_r+0x66>
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	f7ff fcd5 	bl	80084ec <_free_r>
 8008b42:	2300      	movs	r3, #0
 8008b44:	6363      	str	r3, [r4, #52]	; 0x34
 8008b46:	89a3      	ldrh	r3, [r4, #12]
 8008b48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b4c:	81a3      	strh	r3, [r4, #12]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	6063      	str	r3, [r4, #4]
 8008b52:	6923      	ldr	r3, [r4, #16]
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	f043 0308 	orr.w	r3, r3, #8
 8008b5c:	81a3      	strh	r3, [r4, #12]
 8008b5e:	6923      	ldr	r3, [r4, #16]
 8008b60:	b94b      	cbnz	r3, 8008b76 <__swsetup_r+0x9a>
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b6c:	d003      	beq.n	8008b76 <__swsetup_r+0x9a>
 8008b6e:	4621      	mov	r1, r4
 8008b70:	4630      	mov	r0, r6
 8008b72:	f000 fa09 	bl	8008f88 <__smakebuf_r>
 8008b76:	89a0      	ldrh	r0, [r4, #12]
 8008b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b7c:	f010 0301 	ands.w	r3, r0, #1
 8008b80:	d00a      	beq.n	8008b98 <__swsetup_r+0xbc>
 8008b82:	2300      	movs	r3, #0
 8008b84:	60a3      	str	r3, [r4, #8]
 8008b86:	6963      	ldr	r3, [r4, #20]
 8008b88:	425b      	negs	r3, r3
 8008b8a:	61a3      	str	r3, [r4, #24]
 8008b8c:	6923      	ldr	r3, [r4, #16]
 8008b8e:	b943      	cbnz	r3, 8008ba2 <__swsetup_r+0xc6>
 8008b90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b94:	d1ba      	bne.n	8008b0c <__swsetup_r+0x30>
 8008b96:	bd70      	pop	{r4, r5, r6, pc}
 8008b98:	0781      	lsls	r1, r0, #30
 8008b9a:	bf58      	it	pl
 8008b9c:	6963      	ldrpl	r3, [r4, #20]
 8008b9e:	60a3      	str	r3, [r4, #8]
 8008ba0:	e7f4      	b.n	8008b8c <__swsetup_r+0xb0>
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	e7f7      	b.n	8008b96 <__swsetup_r+0xba>
 8008ba6:	bf00      	nop
 8008ba8:	20000040 	.word	0x20000040
 8008bac:	080095bc 	.word	0x080095bc
 8008bb0:	080095dc 	.word	0x080095dc
 8008bb4:	0800959c 	.word	0x0800959c

08008bb8 <abort>:
 8008bb8:	b508      	push	{r3, lr}
 8008bba:	2006      	movs	r0, #6
 8008bbc:	f000 fa4c 	bl	8009058 <raise>
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	f7fa f819 	bl	8002bf8 <_exit>
	...

08008bc8 <__sflush_r>:
 8008bc8:	898a      	ldrh	r2, [r1, #12]
 8008bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bce:	4605      	mov	r5, r0
 8008bd0:	0710      	lsls	r0, r2, #28
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	d458      	bmi.n	8008c88 <__sflush_r+0xc0>
 8008bd6:	684b      	ldr	r3, [r1, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	dc05      	bgt.n	8008be8 <__sflush_r+0x20>
 8008bdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dc02      	bgt.n	8008be8 <__sflush_r+0x20>
 8008be2:	2000      	movs	r0, #0
 8008be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bea:	2e00      	cmp	r6, #0
 8008bec:	d0f9      	beq.n	8008be2 <__sflush_r+0x1a>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bf4:	682f      	ldr	r7, [r5, #0]
 8008bf6:	602b      	str	r3, [r5, #0]
 8008bf8:	d032      	beq.n	8008c60 <__sflush_r+0x98>
 8008bfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	075a      	lsls	r2, r3, #29
 8008c00:	d505      	bpl.n	8008c0e <__sflush_r+0x46>
 8008c02:	6863      	ldr	r3, [r4, #4]
 8008c04:	1ac0      	subs	r0, r0, r3
 8008c06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c08:	b10b      	cbz	r3, 8008c0e <__sflush_r+0x46>
 8008c0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c0c:	1ac0      	subs	r0, r0, r3
 8008c0e:	2300      	movs	r3, #0
 8008c10:	4602      	mov	r2, r0
 8008c12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c14:	6a21      	ldr	r1, [r4, #32]
 8008c16:	4628      	mov	r0, r5
 8008c18:	47b0      	blx	r6
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	d106      	bne.n	8008c2e <__sflush_r+0x66>
 8008c20:	6829      	ldr	r1, [r5, #0]
 8008c22:	291d      	cmp	r1, #29
 8008c24:	d82c      	bhi.n	8008c80 <__sflush_r+0xb8>
 8008c26:	4a2a      	ldr	r2, [pc, #168]	; (8008cd0 <__sflush_r+0x108>)
 8008c28:	40ca      	lsrs	r2, r1
 8008c2a:	07d6      	lsls	r6, r2, #31
 8008c2c:	d528      	bpl.n	8008c80 <__sflush_r+0xb8>
 8008c2e:	2200      	movs	r2, #0
 8008c30:	6062      	str	r2, [r4, #4]
 8008c32:	04d9      	lsls	r1, r3, #19
 8008c34:	6922      	ldr	r2, [r4, #16]
 8008c36:	6022      	str	r2, [r4, #0]
 8008c38:	d504      	bpl.n	8008c44 <__sflush_r+0x7c>
 8008c3a:	1c42      	adds	r2, r0, #1
 8008c3c:	d101      	bne.n	8008c42 <__sflush_r+0x7a>
 8008c3e:	682b      	ldr	r3, [r5, #0]
 8008c40:	b903      	cbnz	r3, 8008c44 <__sflush_r+0x7c>
 8008c42:	6560      	str	r0, [r4, #84]	; 0x54
 8008c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c46:	602f      	str	r7, [r5, #0]
 8008c48:	2900      	cmp	r1, #0
 8008c4a:	d0ca      	beq.n	8008be2 <__sflush_r+0x1a>
 8008c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c50:	4299      	cmp	r1, r3
 8008c52:	d002      	beq.n	8008c5a <__sflush_r+0x92>
 8008c54:	4628      	mov	r0, r5
 8008c56:	f7ff fc49 	bl	80084ec <_free_r>
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	6360      	str	r0, [r4, #52]	; 0x34
 8008c5e:	e7c1      	b.n	8008be4 <__sflush_r+0x1c>
 8008c60:	6a21      	ldr	r1, [r4, #32]
 8008c62:	2301      	movs	r3, #1
 8008c64:	4628      	mov	r0, r5
 8008c66:	47b0      	blx	r6
 8008c68:	1c41      	adds	r1, r0, #1
 8008c6a:	d1c7      	bne.n	8008bfc <__sflush_r+0x34>
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d0c4      	beq.n	8008bfc <__sflush_r+0x34>
 8008c72:	2b1d      	cmp	r3, #29
 8008c74:	d001      	beq.n	8008c7a <__sflush_r+0xb2>
 8008c76:	2b16      	cmp	r3, #22
 8008c78:	d101      	bne.n	8008c7e <__sflush_r+0xb6>
 8008c7a:	602f      	str	r7, [r5, #0]
 8008c7c:	e7b1      	b.n	8008be2 <__sflush_r+0x1a>
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c84:	81a3      	strh	r3, [r4, #12]
 8008c86:	e7ad      	b.n	8008be4 <__sflush_r+0x1c>
 8008c88:	690f      	ldr	r7, [r1, #16]
 8008c8a:	2f00      	cmp	r7, #0
 8008c8c:	d0a9      	beq.n	8008be2 <__sflush_r+0x1a>
 8008c8e:	0793      	lsls	r3, r2, #30
 8008c90:	680e      	ldr	r6, [r1, #0]
 8008c92:	bf08      	it	eq
 8008c94:	694b      	ldreq	r3, [r1, #20]
 8008c96:	600f      	str	r7, [r1, #0]
 8008c98:	bf18      	it	ne
 8008c9a:	2300      	movne	r3, #0
 8008c9c:	eba6 0807 	sub.w	r8, r6, r7
 8008ca0:	608b      	str	r3, [r1, #8]
 8008ca2:	f1b8 0f00 	cmp.w	r8, #0
 8008ca6:	dd9c      	ble.n	8008be2 <__sflush_r+0x1a>
 8008ca8:	6a21      	ldr	r1, [r4, #32]
 8008caa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008cac:	4643      	mov	r3, r8
 8008cae:	463a      	mov	r2, r7
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	47b0      	blx	r6
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	dc06      	bgt.n	8008cc6 <__sflush_r+0xfe>
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc4:	e78e      	b.n	8008be4 <__sflush_r+0x1c>
 8008cc6:	4407      	add	r7, r0
 8008cc8:	eba8 0800 	sub.w	r8, r8, r0
 8008ccc:	e7e9      	b.n	8008ca2 <__sflush_r+0xda>
 8008cce:	bf00      	nop
 8008cd0:	20400001 	.word	0x20400001

08008cd4 <_fflush_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	690b      	ldr	r3, [r1, #16]
 8008cd8:	4605      	mov	r5, r0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	b913      	cbnz	r3, 8008ce4 <_fflush_r+0x10>
 8008cde:	2500      	movs	r5, #0
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	bd38      	pop	{r3, r4, r5, pc}
 8008ce4:	b118      	cbz	r0, 8008cee <_fflush_r+0x1a>
 8008ce6:	6983      	ldr	r3, [r0, #24]
 8008ce8:	b90b      	cbnz	r3, 8008cee <_fflush_r+0x1a>
 8008cea:	f000 f887 	bl	8008dfc <__sinit>
 8008cee:	4b14      	ldr	r3, [pc, #80]	; (8008d40 <_fflush_r+0x6c>)
 8008cf0:	429c      	cmp	r4, r3
 8008cf2:	d11b      	bne.n	8008d2c <_fflush_r+0x58>
 8008cf4:	686c      	ldr	r4, [r5, #4]
 8008cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0ef      	beq.n	8008cde <_fflush_r+0xa>
 8008cfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d00:	07d0      	lsls	r0, r2, #31
 8008d02:	d404      	bmi.n	8008d0e <_fflush_r+0x3a>
 8008d04:	0599      	lsls	r1, r3, #22
 8008d06:	d402      	bmi.n	8008d0e <_fflush_r+0x3a>
 8008d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d0a:	f000 f915 	bl	8008f38 <__retarget_lock_acquire_recursive>
 8008d0e:	4628      	mov	r0, r5
 8008d10:	4621      	mov	r1, r4
 8008d12:	f7ff ff59 	bl	8008bc8 <__sflush_r>
 8008d16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d18:	07da      	lsls	r2, r3, #31
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	d4e0      	bmi.n	8008ce0 <_fflush_r+0xc>
 8008d1e:	89a3      	ldrh	r3, [r4, #12]
 8008d20:	059b      	lsls	r3, r3, #22
 8008d22:	d4dd      	bmi.n	8008ce0 <_fflush_r+0xc>
 8008d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d26:	f000 f908 	bl	8008f3a <__retarget_lock_release_recursive>
 8008d2a:	e7d9      	b.n	8008ce0 <_fflush_r+0xc>
 8008d2c:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <_fflush_r+0x70>)
 8008d2e:	429c      	cmp	r4, r3
 8008d30:	d101      	bne.n	8008d36 <_fflush_r+0x62>
 8008d32:	68ac      	ldr	r4, [r5, #8]
 8008d34:	e7df      	b.n	8008cf6 <_fflush_r+0x22>
 8008d36:	4b04      	ldr	r3, [pc, #16]	; (8008d48 <_fflush_r+0x74>)
 8008d38:	429c      	cmp	r4, r3
 8008d3a:	bf08      	it	eq
 8008d3c:	68ec      	ldreq	r4, [r5, #12]
 8008d3e:	e7da      	b.n	8008cf6 <_fflush_r+0x22>
 8008d40:	080095bc 	.word	0x080095bc
 8008d44:	080095dc 	.word	0x080095dc
 8008d48:	0800959c 	.word	0x0800959c

08008d4c <std>:
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	b510      	push	{r4, lr}
 8008d50:	4604      	mov	r4, r0
 8008d52:	e9c0 3300 	strd	r3, r3, [r0]
 8008d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d5a:	6083      	str	r3, [r0, #8]
 8008d5c:	8181      	strh	r1, [r0, #12]
 8008d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8008d60:	81c2      	strh	r2, [r0, #14]
 8008d62:	6183      	str	r3, [r0, #24]
 8008d64:	4619      	mov	r1, r3
 8008d66:	2208      	movs	r2, #8
 8008d68:	305c      	adds	r0, #92	; 0x5c
 8008d6a:	f7fd fd1f 	bl	80067ac <memset>
 8008d6e:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <std+0x38>)
 8008d70:	6263      	str	r3, [r4, #36]	; 0x24
 8008d72:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <std+0x3c>)
 8008d74:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d76:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <std+0x40>)
 8008d78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d7a:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <std+0x44>)
 8008d7c:	6224      	str	r4, [r4, #32]
 8008d7e:	6323      	str	r3, [r4, #48]	; 0x30
 8008d80:	bd10      	pop	{r4, pc}
 8008d82:	bf00      	nop
 8008d84:	08009091 	.word	0x08009091
 8008d88:	080090b3 	.word	0x080090b3
 8008d8c:	080090eb 	.word	0x080090eb
 8008d90:	0800910f 	.word	0x0800910f

08008d94 <_cleanup_r>:
 8008d94:	4901      	ldr	r1, [pc, #4]	; (8008d9c <_cleanup_r+0x8>)
 8008d96:	f000 b8af 	b.w	8008ef8 <_fwalk_reent>
 8008d9a:	bf00      	nop
 8008d9c:	08008cd5 	.word	0x08008cd5

08008da0 <__sfmoreglue>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	2268      	movs	r2, #104	; 0x68
 8008da4:	1e4d      	subs	r5, r1, #1
 8008da6:	4355      	muls	r5, r2
 8008da8:	460e      	mov	r6, r1
 8008daa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008dae:	f7ff fc09 	bl	80085c4 <_malloc_r>
 8008db2:	4604      	mov	r4, r0
 8008db4:	b140      	cbz	r0, 8008dc8 <__sfmoreglue+0x28>
 8008db6:	2100      	movs	r1, #0
 8008db8:	e9c0 1600 	strd	r1, r6, [r0]
 8008dbc:	300c      	adds	r0, #12
 8008dbe:	60a0      	str	r0, [r4, #8]
 8008dc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008dc4:	f7fd fcf2 	bl	80067ac <memset>
 8008dc8:	4620      	mov	r0, r4
 8008dca:	bd70      	pop	{r4, r5, r6, pc}

08008dcc <__sfp_lock_acquire>:
 8008dcc:	4801      	ldr	r0, [pc, #4]	; (8008dd4 <__sfp_lock_acquire+0x8>)
 8008dce:	f000 b8b3 	b.w	8008f38 <__retarget_lock_acquire_recursive>
 8008dd2:	bf00      	nop
 8008dd4:	2000061d 	.word	0x2000061d

08008dd8 <__sfp_lock_release>:
 8008dd8:	4801      	ldr	r0, [pc, #4]	; (8008de0 <__sfp_lock_release+0x8>)
 8008dda:	f000 b8ae 	b.w	8008f3a <__retarget_lock_release_recursive>
 8008dde:	bf00      	nop
 8008de0:	2000061d 	.word	0x2000061d

08008de4 <__sinit_lock_acquire>:
 8008de4:	4801      	ldr	r0, [pc, #4]	; (8008dec <__sinit_lock_acquire+0x8>)
 8008de6:	f000 b8a7 	b.w	8008f38 <__retarget_lock_acquire_recursive>
 8008dea:	bf00      	nop
 8008dec:	2000061e 	.word	0x2000061e

08008df0 <__sinit_lock_release>:
 8008df0:	4801      	ldr	r0, [pc, #4]	; (8008df8 <__sinit_lock_release+0x8>)
 8008df2:	f000 b8a2 	b.w	8008f3a <__retarget_lock_release_recursive>
 8008df6:	bf00      	nop
 8008df8:	2000061e 	.word	0x2000061e

08008dfc <__sinit>:
 8008dfc:	b510      	push	{r4, lr}
 8008dfe:	4604      	mov	r4, r0
 8008e00:	f7ff fff0 	bl	8008de4 <__sinit_lock_acquire>
 8008e04:	69a3      	ldr	r3, [r4, #24]
 8008e06:	b11b      	cbz	r3, 8008e10 <__sinit+0x14>
 8008e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e0c:	f7ff bff0 	b.w	8008df0 <__sinit_lock_release>
 8008e10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e14:	6523      	str	r3, [r4, #80]	; 0x50
 8008e16:	4b13      	ldr	r3, [pc, #76]	; (8008e64 <__sinit+0x68>)
 8008e18:	4a13      	ldr	r2, [pc, #76]	; (8008e68 <__sinit+0x6c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e1e:	42a3      	cmp	r3, r4
 8008e20:	bf04      	itt	eq
 8008e22:	2301      	moveq	r3, #1
 8008e24:	61a3      	streq	r3, [r4, #24]
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 f820 	bl	8008e6c <__sfp>
 8008e2c:	6060      	str	r0, [r4, #4]
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f000 f81c 	bl	8008e6c <__sfp>
 8008e34:	60a0      	str	r0, [r4, #8]
 8008e36:	4620      	mov	r0, r4
 8008e38:	f000 f818 	bl	8008e6c <__sfp>
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	60e0      	str	r0, [r4, #12]
 8008e40:	2104      	movs	r1, #4
 8008e42:	6860      	ldr	r0, [r4, #4]
 8008e44:	f7ff ff82 	bl	8008d4c <std>
 8008e48:	68a0      	ldr	r0, [r4, #8]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	2109      	movs	r1, #9
 8008e4e:	f7ff ff7d 	bl	8008d4c <std>
 8008e52:	68e0      	ldr	r0, [r4, #12]
 8008e54:	2202      	movs	r2, #2
 8008e56:	2112      	movs	r1, #18
 8008e58:	f7ff ff78 	bl	8008d4c <std>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	61a3      	str	r3, [r4, #24]
 8008e60:	e7d2      	b.n	8008e08 <__sinit+0xc>
 8008e62:	bf00      	nop
 8008e64:	08009220 	.word	0x08009220
 8008e68:	08008d95 	.word	0x08008d95

08008e6c <__sfp>:
 8008e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6e:	4607      	mov	r7, r0
 8008e70:	f7ff ffac 	bl	8008dcc <__sfp_lock_acquire>
 8008e74:	4b1e      	ldr	r3, [pc, #120]	; (8008ef0 <__sfp+0x84>)
 8008e76:	681e      	ldr	r6, [r3, #0]
 8008e78:	69b3      	ldr	r3, [r6, #24]
 8008e7a:	b913      	cbnz	r3, 8008e82 <__sfp+0x16>
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f7ff ffbd 	bl	8008dfc <__sinit>
 8008e82:	3648      	adds	r6, #72	; 0x48
 8008e84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	d503      	bpl.n	8008e94 <__sfp+0x28>
 8008e8c:	6833      	ldr	r3, [r6, #0]
 8008e8e:	b30b      	cbz	r3, 8008ed4 <__sfp+0x68>
 8008e90:	6836      	ldr	r6, [r6, #0]
 8008e92:	e7f7      	b.n	8008e84 <__sfp+0x18>
 8008e94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e98:	b9d5      	cbnz	r5, 8008ed0 <__sfp+0x64>
 8008e9a:	4b16      	ldr	r3, [pc, #88]	; (8008ef4 <__sfp+0x88>)
 8008e9c:	60e3      	str	r3, [r4, #12]
 8008e9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ea2:	6665      	str	r5, [r4, #100]	; 0x64
 8008ea4:	f000 f847 	bl	8008f36 <__retarget_lock_init_recursive>
 8008ea8:	f7ff ff96 	bl	8008dd8 <__sfp_lock_release>
 8008eac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008eb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008eb4:	6025      	str	r5, [r4, #0]
 8008eb6:	61a5      	str	r5, [r4, #24]
 8008eb8:	2208      	movs	r2, #8
 8008eba:	4629      	mov	r1, r5
 8008ebc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ec0:	f7fd fc74 	bl	80067ac <memset>
 8008ec4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ec8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ecc:	4620      	mov	r0, r4
 8008ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ed0:	3468      	adds	r4, #104	; 0x68
 8008ed2:	e7d9      	b.n	8008e88 <__sfp+0x1c>
 8008ed4:	2104      	movs	r1, #4
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	f7ff ff62 	bl	8008da0 <__sfmoreglue>
 8008edc:	4604      	mov	r4, r0
 8008ede:	6030      	str	r0, [r6, #0]
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d1d5      	bne.n	8008e90 <__sfp+0x24>
 8008ee4:	f7ff ff78 	bl	8008dd8 <__sfp_lock_release>
 8008ee8:	230c      	movs	r3, #12
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	e7ee      	b.n	8008ecc <__sfp+0x60>
 8008eee:	bf00      	nop
 8008ef0:	08009220 	.word	0x08009220
 8008ef4:	ffff0001 	.word	0xffff0001

08008ef8 <_fwalk_reent>:
 8008ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008efc:	4606      	mov	r6, r0
 8008efe:	4688      	mov	r8, r1
 8008f00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f04:	2700      	movs	r7, #0
 8008f06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f0a:	f1b9 0901 	subs.w	r9, r9, #1
 8008f0e:	d505      	bpl.n	8008f1c <_fwalk_reent+0x24>
 8008f10:	6824      	ldr	r4, [r4, #0]
 8008f12:	2c00      	cmp	r4, #0
 8008f14:	d1f7      	bne.n	8008f06 <_fwalk_reent+0xe>
 8008f16:	4638      	mov	r0, r7
 8008f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f1c:	89ab      	ldrh	r3, [r5, #12]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d907      	bls.n	8008f32 <_fwalk_reent+0x3a>
 8008f22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f26:	3301      	adds	r3, #1
 8008f28:	d003      	beq.n	8008f32 <_fwalk_reent+0x3a>
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	47c0      	blx	r8
 8008f30:	4307      	orrs	r7, r0
 8008f32:	3568      	adds	r5, #104	; 0x68
 8008f34:	e7e9      	b.n	8008f0a <_fwalk_reent+0x12>

08008f36 <__retarget_lock_init_recursive>:
 8008f36:	4770      	bx	lr

08008f38 <__retarget_lock_acquire_recursive>:
 8008f38:	4770      	bx	lr

08008f3a <__retarget_lock_release_recursive>:
 8008f3a:	4770      	bx	lr

08008f3c <__swhatbuf_r>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	460e      	mov	r6, r1
 8008f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f44:	2900      	cmp	r1, #0
 8008f46:	b096      	sub	sp, #88	; 0x58
 8008f48:	4614      	mov	r4, r2
 8008f4a:	461d      	mov	r5, r3
 8008f4c:	da08      	bge.n	8008f60 <__swhatbuf_r+0x24>
 8008f4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	602a      	str	r2, [r5, #0]
 8008f56:	061a      	lsls	r2, r3, #24
 8008f58:	d410      	bmi.n	8008f7c <__swhatbuf_r+0x40>
 8008f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f5e:	e00e      	b.n	8008f7e <__swhatbuf_r+0x42>
 8008f60:	466a      	mov	r2, sp
 8008f62:	f000 f8fb 	bl	800915c <_fstat_r>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	dbf1      	blt.n	8008f4e <__swhatbuf_r+0x12>
 8008f6a:	9a01      	ldr	r2, [sp, #4]
 8008f6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f74:	425a      	negs	r2, r3
 8008f76:	415a      	adcs	r2, r3
 8008f78:	602a      	str	r2, [r5, #0]
 8008f7a:	e7ee      	b.n	8008f5a <__swhatbuf_r+0x1e>
 8008f7c:	2340      	movs	r3, #64	; 0x40
 8008f7e:	2000      	movs	r0, #0
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	b016      	add	sp, #88	; 0x58
 8008f84:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f88 <__smakebuf_r>:
 8008f88:	898b      	ldrh	r3, [r1, #12]
 8008f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f8c:	079d      	lsls	r5, r3, #30
 8008f8e:	4606      	mov	r6, r0
 8008f90:	460c      	mov	r4, r1
 8008f92:	d507      	bpl.n	8008fa4 <__smakebuf_r+0x1c>
 8008f94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	6123      	str	r3, [r4, #16]
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	6163      	str	r3, [r4, #20]
 8008fa0:	b002      	add	sp, #8
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	ab01      	add	r3, sp, #4
 8008fa6:	466a      	mov	r2, sp
 8008fa8:	f7ff ffc8 	bl	8008f3c <__swhatbuf_r>
 8008fac:	9900      	ldr	r1, [sp, #0]
 8008fae:	4605      	mov	r5, r0
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f7ff fb07 	bl	80085c4 <_malloc_r>
 8008fb6:	b948      	cbnz	r0, 8008fcc <__smakebuf_r+0x44>
 8008fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fbc:	059a      	lsls	r2, r3, #22
 8008fbe:	d4ef      	bmi.n	8008fa0 <__smakebuf_r+0x18>
 8008fc0:	f023 0303 	bic.w	r3, r3, #3
 8008fc4:	f043 0302 	orr.w	r3, r3, #2
 8008fc8:	81a3      	strh	r3, [r4, #12]
 8008fca:	e7e3      	b.n	8008f94 <__smakebuf_r+0xc>
 8008fcc:	4b0d      	ldr	r3, [pc, #52]	; (8009004 <__smakebuf_r+0x7c>)
 8008fce:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	6020      	str	r0, [r4, #0]
 8008fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd8:	81a3      	strh	r3, [r4, #12]
 8008fda:	9b00      	ldr	r3, [sp, #0]
 8008fdc:	6163      	str	r3, [r4, #20]
 8008fde:	9b01      	ldr	r3, [sp, #4]
 8008fe0:	6120      	str	r0, [r4, #16]
 8008fe2:	b15b      	cbz	r3, 8008ffc <__smakebuf_r+0x74>
 8008fe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f000 f8c9 	bl	8009180 <_isatty_r>
 8008fee:	b128      	cbz	r0, 8008ffc <__smakebuf_r+0x74>
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	f023 0303 	bic.w	r3, r3, #3
 8008ff6:	f043 0301 	orr.w	r3, r3, #1
 8008ffa:	81a3      	strh	r3, [r4, #12]
 8008ffc:	89a0      	ldrh	r0, [r4, #12]
 8008ffe:	4305      	orrs	r5, r0
 8009000:	81a5      	strh	r5, [r4, #12]
 8009002:	e7cd      	b.n	8008fa0 <__smakebuf_r+0x18>
 8009004:	08008d95 	.word	0x08008d95

08009008 <_raise_r>:
 8009008:	291f      	cmp	r1, #31
 800900a:	b538      	push	{r3, r4, r5, lr}
 800900c:	4604      	mov	r4, r0
 800900e:	460d      	mov	r5, r1
 8009010:	d904      	bls.n	800901c <_raise_r+0x14>
 8009012:	2316      	movs	r3, #22
 8009014:	6003      	str	r3, [r0, #0]
 8009016:	f04f 30ff 	mov.w	r0, #4294967295
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800901e:	b112      	cbz	r2, 8009026 <_raise_r+0x1e>
 8009020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009024:	b94b      	cbnz	r3, 800903a <_raise_r+0x32>
 8009026:	4620      	mov	r0, r4
 8009028:	f000 f830 	bl	800908c <_getpid_r>
 800902c:	462a      	mov	r2, r5
 800902e:	4601      	mov	r1, r0
 8009030:	4620      	mov	r0, r4
 8009032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009036:	f000 b817 	b.w	8009068 <_kill_r>
 800903a:	2b01      	cmp	r3, #1
 800903c:	d00a      	beq.n	8009054 <_raise_r+0x4c>
 800903e:	1c59      	adds	r1, r3, #1
 8009040:	d103      	bne.n	800904a <_raise_r+0x42>
 8009042:	2316      	movs	r3, #22
 8009044:	6003      	str	r3, [r0, #0]
 8009046:	2001      	movs	r0, #1
 8009048:	e7e7      	b.n	800901a <_raise_r+0x12>
 800904a:	2400      	movs	r4, #0
 800904c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009050:	4628      	mov	r0, r5
 8009052:	4798      	blx	r3
 8009054:	2000      	movs	r0, #0
 8009056:	e7e0      	b.n	800901a <_raise_r+0x12>

08009058 <raise>:
 8009058:	4b02      	ldr	r3, [pc, #8]	; (8009064 <raise+0xc>)
 800905a:	4601      	mov	r1, r0
 800905c:	6818      	ldr	r0, [r3, #0]
 800905e:	f7ff bfd3 	b.w	8009008 <_raise_r>
 8009062:	bf00      	nop
 8009064:	20000040 	.word	0x20000040

08009068 <_kill_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4d07      	ldr	r5, [pc, #28]	; (8009088 <_kill_r+0x20>)
 800906c:	2300      	movs	r3, #0
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	4611      	mov	r1, r2
 8009074:	602b      	str	r3, [r5, #0]
 8009076:	f7f9 fdaf 	bl	8002bd8 <_kill>
 800907a:	1c43      	adds	r3, r0, #1
 800907c:	d102      	bne.n	8009084 <_kill_r+0x1c>
 800907e:	682b      	ldr	r3, [r5, #0]
 8009080:	b103      	cbz	r3, 8009084 <_kill_r+0x1c>
 8009082:	6023      	str	r3, [r4, #0]
 8009084:	bd38      	pop	{r3, r4, r5, pc}
 8009086:	bf00      	nop
 8009088:	20000618 	.word	0x20000618

0800908c <_getpid_r>:
 800908c:	f7f9 bd9c 	b.w	8002bc8 <_getpid>

08009090 <__sread>:
 8009090:	b510      	push	{r4, lr}
 8009092:	460c      	mov	r4, r1
 8009094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009098:	f000 f894 	bl	80091c4 <_read_r>
 800909c:	2800      	cmp	r0, #0
 800909e:	bfab      	itete	ge
 80090a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090a2:	89a3      	ldrhlt	r3, [r4, #12]
 80090a4:	181b      	addge	r3, r3, r0
 80090a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090aa:	bfac      	ite	ge
 80090ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80090ae:	81a3      	strhlt	r3, [r4, #12]
 80090b0:	bd10      	pop	{r4, pc}

080090b2 <__swrite>:
 80090b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b6:	461f      	mov	r7, r3
 80090b8:	898b      	ldrh	r3, [r1, #12]
 80090ba:	05db      	lsls	r3, r3, #23
 80090bc:	4605      	mov	r5, r0
 80090be:	460c      	mov	r4, r1
 80090c0:	4616      	mov	r6, r2
 80090c2:	d505      	bpl.n	80090d0 <__swrite+0x1e>
 80090c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c8:	2302      	movs	r3, #2
 80090ca:	2200      	movs	r2, #0
 80090cc:	f000 f868 	bl	80091a0 <_lseek_r>
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090da:	81a3      	strh	r3, [r4, #12]
 80090dc:	4632      	mov	r2, r6
 80090de:	463b      	mov	r3, r7
 80090e0:	4628      	mov	r0, r5
 80090e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090e6:	f000 b817 	b.w	8009118 <_write_r>

080090ea <__sseek>:
 80090ea:	b510      	push	{r4, lr}
 80090ec:	460c      	mov	r4, r1
 80090ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f2:	f000 f855 	bl	80091a0 <_lseek_r>
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	bf15      	itete	ne
 80090fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80090fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009106:	81a3      	strheq	r3, [r4, #12]
 8009108:	bf18      	it	ne
 800910a:	81a3      	strhne	r3, [r4, #12]
 800910c:	bd10      	pop	{r4, pc}

0800910e <__sclose>:
 800910e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009112:	f000 b813 	b.w	800913c <_close_r>
	...

08009118 <_write_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4d07      	ldr	r5, [pc, #28]	; (8009138 <_write_r+0x20>)
 800911c:	4604      	mov	r4, r0
 800911e:	4608      	mov	r0, r1
 8009120:	4611      	mov	r1, r2
 8009122:	2200      	movs	r2, #0
 8009124:	602a      	str	r2, [r5, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	f7f9 fd8d 	bl	8002c46 <_write>
 800912c:	1c43      	adds	r3, r0, #1
 800912e:	d102      	bne.n	8009136 <_write_r+0x1e>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	b103      	cbz	r3, 8009136 <_write_r+0x1e>
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	bd38      	pop	{r3, r4, r5, pc}
 8009138:	20000618 	.word	0x20000618

0800913c <_close_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	4d06      	ldr	r5, [pc, #24]	; (8009158 <_close_r+0x1c>)
 8009140:	2300      	movs	r3, #0
 8009142:	4604      	mov	r4, r0
 8009144:	4608      	mov	r0, r1
 8009146:	602b      	str	r3, [r5, #0]
 8009148:	f7f9 fd99 	bl	8002c7e <_close>
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	d102      	bne.n	8009156 <_close_r+0x1a>
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	b103      	cbz	r3, 8009156 <_close_r+0x1a>
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	bd38      	pop	{r3, r4, r5, pc}
 8009158:	20000618 	.word	0x20000618

0800915c <_fstat_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	4d07      	ldr	r5, [pc, #28]	; (800917c <_fstat_r+0x20>)
 8009160:	2300      	movs	r3, #0
 8009162:	4604      	mov	r4, r0
 8009164:	4608      	mov	r0, r1
 8009166:	4611      	mov	r1, r2
 8009168:	602b      	str	r3, [r5, #0]
 800916a:	f7f9 fd94 	bl	8002c96 <_fstat>
 800916e:	1c43      	adds	r3, r0, #1
 8009170:	d102      	bne.n	8009178 <_fstat_r+0x1c>
 8009172:	682b      	ldr	r3, [r5, #0]
 8009174:	b103      	cbz	r3, 8009178 <_fstat_r+0x1c>
 8009176:	6023      	str	r3, [r4, #0]
 8009178:	bd38      	pop	{r3, r4, r5, pc}
 800917a:	bf00      	nop
 800917c:	20000618 	.word	0x20000618

08009180 <_isatty_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	4d06      	ldr	r5, [pc, #24]	; (800919c <_isatty_r+0x1c>)
 8009184:	2300      	movs	r3, #0
 8009186:	4604      	mov	r4, r0
 8009188:	4608      	mov	r0, r1
 800918a:	602b      	str	r3, [r5, #0]
 800918c:	f7f9 fd93 	bl	8002cb6 <_isatty>
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	d102      	bne.n	800919a <_isatty_r+0x1a>
 8009194:	682b      	ldr	r3, [r5, #0]
 8009196:	b103      	cbz	r3, 800919a <_isatty_r+0x1a>
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	20000618 	.word	0x20000618

080091a0 <_lseek_r>:
 80091a0:	b538      	push	{r3, r4, r5, lr}
 80091a2:	4d07      	ldr	r5, [pc, #28]	; (80091c0 <_lseek_r+0x20>)
 80091a4:	4604      	mov	r4, r0
 80091a6:	4608      	mov	r0, r1
 80091a8:	4611      	mov	r1, r2
 80091aa:	2200      	movs	r2, #0
 80091ac:	602a      	str	r2, [r5, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	f7f9 fd8c 	bl	8002ccc <_lseek>
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	d102      	bne.n	80091be <_lseek_r+0x1e>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	b103      	cbz	r3, 80091be <_lseek_r+0x1e>
 80091bc:	6023      	str	r3, [r4, #0]
 80091be:	bd38      	pop	{r3, r4, r5, pc}
 80091c0:	20000618 	.word	0x20000618

080091c4 <_read_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4d07      	ldr	r5, [pc, #28]	; (80091e4 <_read_r+0x20>)
 80091c8:	4604      	mov	r4, r0
 80091ca:	4608      	mov	r0, r1
 80091cc:	4611      	mov	r1, r2
 80091ce:	2200      	movs	r2, #0
 80091d0:	602a      	str	r2, [r5, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	f7f9 fd1a 	bl	8002c0c <_read>
 80091d8:	1c43      	adds	r3, r0, #1
 80091da:	d102      	bne.n	80091e2 <_read_r+0x1e>
 80091dc:	682b      	ldr	r3, [r5, #0]
 80091de:	b103      	cbz	r3, 80091e2 <_read_r+0x1e>
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
 80091e4:	20000618 	.word	0x20000618

080091e8 <_init>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	bf00      	nop
 80091ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ee:	bc08      	pop	{r3}
 80091f0:	469e      	mov	lr, r3
 80091f2:	4770      	bx	lr

080091f4 <_fini>:
 80091f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f6:	bf00      	nop
 80091f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fa:	bc08      	pop	{r3}
 80091fc:	469e      	mov	lr, r3
 80091fe:	4770      	bx	lr
