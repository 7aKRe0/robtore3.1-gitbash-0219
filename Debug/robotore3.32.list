
robotore3.32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08009ce0  08009ce0  00019ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a104  0800a104  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a104  0800a104  0001a104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a10c  0800a10c  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a10c  0800a10c  0001a10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a110  0800a110  0001a110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800a114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002021c  2**0
                  CONTENTS
 10 .bss          00016430  2000021c  2000021c  0002021c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001664c  2001664c  0002021c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001664d  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e4c  00000000  00000000  00036899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  000396e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012c8  00000000  00000000  0003aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002354f  00000000  00000000  0003bd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000192e7  00000000  00000000  0005f2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d39ff  00000000  00000000  000785ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014bfcd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006590  00000000  00000000  0014c020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cc4 	.word	0x08009cc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	08009cc4 	.word	0x08009cc4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <LED_RGB>:
//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3


void LED_RGB(int i){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

	switch (i)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	2b06      	cmp	r3, #6
 8000f9a:	f200 8088 	bhi.w	80010ae <LED_RGB+0x122>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <LED_RGB+0x18>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08000fc1 	.word	0x08000fc1
 8000fa8:	08000fe3 	.word	0x08000fe3
 8000fac:	08001005 	.word	0x08001005
 8000fb0:	08001027 	.word	0x08001027
 8000fb4:	08001049 	.word	0x08001049
 8000fb8:	0800106b 	.word	0x0800106b
 8000fbc:	0800108d 	.word	0x0800108d
	            {
	            case 1://R
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	4844      	ldr	r0, [pc, #272]	; (80010d8 <LED_RGB+0x14c>)
 8000fc6:	f003 fdb7 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2110      	movs	r1, #16
 8000fce:	4842      	ldr	r0, [pc, #264]	; (80010d8 <LED_RGB+0x14c>)
 8000fd0:	f003 fdb2 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fda:	4840      	ldr	r0, [pc, #256]	; (80010dc <LED_RGB+0x150>)
 8000fdc:	f003 fdac 	bl	8004b38 <HAL_GPIO_WritePin>

	                break;
 8000fe0:	e076      	b.n	80010d0 <LED_RGB+0x144>

	            case 2://G
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2120      	movs	r1, #32
 8000fe6:	483c      	ldr	r0, [pc, #240]	; (80010d8 <LED_RGB+0x14c>)
 8000fe8:	f003 fda6 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8000fec:	2200      	movs	r2, #0
 8000fee:	2110      	movs	r1, #16
 8000ff0:	4839      	ldr	r0, [pc, #228]	; (80010d8 <LED_RGB+0x14c>)
 8000ff2:	f003 fda1 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffc:	4837      	ldr	r0, [pc, #220]	; (80010dc <LED_RGB+0x150>)
 8000ffe:	f003 fd9b 	bl	8004b38 <HAL_GPIO_WritePin>

	                break;
 8001002:	e065      	b.n	80010d0 <LED_RGB+0x144>

	            case 3://B
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 8001004:	2201      	movs	r2, #1
 8001006:	2120      	movs	r1, #32
 8001008:	4833      	ldr	r0, [pc, #204]	; (80010d8 <LED_RGB+0x14c>)
 800100a:	f003 fd95 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 800100e:	2201      	movs	r2, #1
 8001010:	2110      	movs	r1, #16
 8001012:	4831      	ldr	r0, [pc, #196]	; (80010d8 <LED_RGB+0x14c>)
 8001014:	f003 fd90 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101e:	482f      	ldr	r0, [pc, #188]	; (80010dc <LED_RGB+0x150>)
 8001020:	f003 fd8a 	bl	8004b38 <HAL_GPIO_WritePin>

	                break;
 8001024:	e054      	b.n	80010d0 <LED_RGB+0x144>

	            case 4://y
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 8001026:	2200      	movs	r2, #0
 8001028:	2120      	movs	r1, #32
 800102a:	482b      	ldr	r0, [pc, #172]	; (80010d8 <LED_RGB+0x14c>)
 800102c:	f003 fd84 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8001030:	2200      	movs	r2, #0
 8001032:	2110      	movs	r1, #16
 8001034:	4828      	ldr	r0, [pc, #160]	; (80010d8 <LED_RGB+0x14c>)
 8001036:	f003 fd7f 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001040:	4826      	ldr	r0, [pc, #152]	; (80010dc <LED_RGB+0x150>)
 8001042:	f003 fd79 	bl	8004b38 <HAL_GPIO_WritePin>

	                break;
 8001046:	e043      	b.n	80010d0 <LED_RGB+0x144>

	            case 5://pink
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 8001048:	2200      	movs	r2, #0
 800104a:	2120      	movs	r1, #32
 800104c:	4822      	ldr	r0, [pc, #136]	; (80010d8 <LED_RGB+0x14c>)
 800104e:	f003 fd73 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 8001052:	2201      	movs	r2, #1
 8001054:	2110      	movs	r1, #16
 8001056:	4820      	ldr	r0, [pc, #128]	; (80010d8 <LED_RGB+0x14c>)
 8001058:	f003 fd6e 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001062:	481e      	ldr	r0, [pc, #120]	; (80010dc <LED_RGB+0x150>)
 8001064:	f003 fd68 	bl	8004b38 <HAL_GPIO_WritePin>

	                break;
 8001068:	e032      	b.n	80010d0 <LED_RGB+0x144>

	            case 6://white
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 800106a:	2200      	movs	r2, #0
 800106c:	2120      	movs	r1, #32
 800106e:	481a      	ldr	r0, [pc, #104]	; (80010d8 <LED_RGB+0x14c>)
 8001070:	f003 fd62 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	4817      	ldr	r0, [pc, #92]	; (80010d8 <LED_RGB+0x14c>)
 800107a:	f003 fd5d 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001084:	4815      	ldr	r0, [pc, #84]	; (80010dc <LED_RGB+0x150>)
 8001086:	f003 fd57 	bl	8004b38 <HAL_GPIO_WritePin>

	                break;
 800108a:	e021      	b.n	80010d0 <LED_RGB+0x144>

	            case 7://Cyan
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 800108c:	2201      	movs	r2, #1
 800108e:	2120      	movs	r1, #32
 8001090:	4811      	ldr	r0, [pc, #68]	; (80010d8 <LED_RGB+0x14c>)
 8001092:	f003 fd51 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8001096:	2200      	movs	r2, #0
 8001098:	2110      	movs	r1, #16
 800109a:	480f      	ldr	r0, [pc, #60]	; (80010d8 <LED_RGB+0x14c>)
 800109c:	f003 fd4c 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <LED_RGB+0x150>)
 80010a8:	f003 fd46 	bl	8004b38 <HAL_GPIO_WritePin>

	                break;
 80010ac:	e010      	b.n	80010d0 <LED_RGB+0x144>

	            default:
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 80010ae:	2201      	movs	r2, #1
 80010b0:	2120      	movs	r1, #32
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <LED_RGB+0x14c>)
 80010b4:	f003 fd40 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 80010b8:	2201      	movs	r2, #1
 80010ba:	2110      	movs	r1, #16
 80010bc:	4806      	ldr	r0, [pc, #24]	; (80010d8 <LED_RGB+0x14c>)
 80010be:	f003 fd3b 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <LED_RGB+0x150>)
 80010ca:	f003 fd35 	bl	8004b38 <HAL_GPIO_WritePin>
	                break;
 80010ce:	bf00      	nop
	            }


}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40020000 	.word	0x40020000

080010e0 <LED_RGB_2>:

void LED_RGB_2(int n){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

	switch (n)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	2b06      	cmp	r3, #6
 80010ee:	f200 8095 	bhi.w	800121c <LED_RGB_2+0x13c>
 80010f2:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <LED_RGB_2+0x18>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	08001115 	.word	0x08001115
 80010fc:	08001139 	.word	0x08001139
 8001100:	0800115f 	.word	0x0800115f
 8001104:	08001185 	.word	0x08001185
 8001108:	080011ab 	.word	0x080011ab
 800110c:	080011d1 	.word	0x080011d1
 8001110:	080011f7 	.word	0x080011f7
	            {
	            case 1://R
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111a:	484c      	ldr	r0, [pc, #304]	; (800124c <LED_RGB_2+0x16c>)
 800111c:	f003 fd0c 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_2-4
 8001120:	2201      	movs	r2, #1
 8001122:	2110      	movs	r1, #16
 8001124:	4849      	ldr	r0, [pc, #292]	; (800124c <LED_RGB_2+0x16c>)
 8001126:	f003 fd07 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001130:	4846      	ldr	r0, [pc, #280]	; (800124c <LED_RGB_2+0x16c>)
 8001132:	f003 fd01 	bl	8004b38 <HAL_GPIO_WritePin>

	                break;
 8001136:	e084      	b.n	8001242 <LED_RGB_2+0x162>

	            case 2://G
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113e:	4843      	ldr	r0, [pc, #268]	; (800124c <LED_RGB_2+0x16c>)
 8001140:	f003 fcfa 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114a:	4840      	ldr	r0, [pc, #256]	; (800124c <LED_RGB_2+0x16c>)
 800114c:	f003 fcf4 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001156:	483d      	ldr	r0, [pc, #244]	; (800124c <LED_RGB_2+0x16c>)
 8001158:	f003 fcee 	bl	8004b38 <HAL_GPIO_WritePin>
	                break;
 800115c:	e071      	b.n	8001242 <LED_RGB_2+0x162>

	            case 3://B
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001164:	4839      	ldr	r0, [pc, #228]	; (800124c <LED_RGB_2+0x16c>)
 8001166:	f003 fce7 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001170:	4836      	ldr	r0, [pc, #216]	; (800124c <LED_RGB_2+0x16c>)
 8001172:	f003 fce1 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117c:	4833      	ldr	r0, [pc, #204]	; (800124c <LED_RGB_2+0x16c>)
 800117e:	f003 fcdb 	bl	8004b38 <HAL_GPIO_WritePin>
	                break;
 8001182:	e05e      	b.n	8001242 <LED_RGB_2+0x162>

	            case 4://y
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118a:	4830      	ldr	r0, [pc, #192]	; (800124c <LED_RGB_2+0x16c>)
 800118c:	f003 fcd4 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	482d      	ldr	r0, [pc, #180]	; (800124c <LED_RGB_2+0x16c>)
 8001198:	f003 fcce 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a2:	482a      	ldr	r0, [pc, #168]	; (800124c <LED_RGB_2+0x16c>)
 80011a4:	f003 fcc8 	bl	8004b38 <HAL_GPIO_WritePin>

	                break;
 80011a8:	e04b      	b.n	8001242 <LED_RGB_2+0x162>

	            case 5://pink
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b0:	4826      	ldr	r0, [pc, #152]	; (800124c <LED_RGB_2+0x16c>)
 80011b2:	f003 fcc1 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011bc:	4823      	ldr	r0, [pc, #140]	; (800124c <LED_RGB_2+0x16c>)
 80011be:	f003 fcbb 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c8:	4820      	ldr	r0, [pc, #128]	; (800124c <LED_RGB_2+0x16c>)
 80011ca:	f003 fcb5 	bl	8004b38 <HAL_GPIO_WritePin>

	                break;
 80011ce:	e038      	b.n	8001242 <LED_RGB_2+0x162>

	            case 6://white
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d6:	481d      	ldr	r0, [pc, #116]	; (800124c <LED_RGB_2+0x16c>)
 80011d8:	f003 fcae 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e2:	481a      	ldr	r0, [pc, #104]	; (800124c <LED_RGB_2+0x16c>)
 80011e4:	f003 fca8 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ee:	4817      	ldr	r0, [pc, #92]	; (800124c <LED_RGB_2+0x16c>)
 80011f0:	f003 fca2 	bl	8004b38 <HAL_GPIO_WritePin>
	                break;
 80011f4:	e025      	b.n	8001242 <LED_RGB_2+0x162>

	            case 7://Cyan
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011fc:	4813      	ldr	r0, [pc, #76]	; (800124c <LED_RGB_2+0x16c>)
 80011fe:	f003 fc9b 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001208:	4810      	ldr	r0, [pc, #64]	; (800124c <LED_RGB_2+0x16c>)
 800120a:	f003 fc95 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <LED_RGB_2+0x16c>)
 8001216:	f003 fc8f 	bl	8004b38 <HAL_GPIO_WritePin>

	                break;
 800121a:	e012      	b.n	8001242 <LED_RGB_2+0x162>

	            default:
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001222:	480a      	ldr	r0, [pc, #40]	; (800124c <LED_RGB_2+0x16c>)
 8001224:	f003 fc88 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <LED_RGB_2+0x16c>)
 8001230:	f003 fc82 	bl	8004b38 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <LED_RGB_2+0x16c>)
 800123c:	f003 fc7c 	bl	8004b38 <HAL_GPIO_WritePin>
	                break;
 8001240:	bf00      	nop
	            }


}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40020400 	.word	0x40020400

08001250 <ButtonPress>:

int mode =0;
int calibrate_count =0;
//int mode_processed;

void ButtonPress(void){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	mode=0;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <ButtonPress+0x70>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
	LED_RGB_2(6);
 800125a:	2006      	movs	r0, #6
 800125c:	f7ff ff40 	bl	80010e0 <LED_RGB_2>
	HAL_Delay(1000);
 8001260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001264:	f002 fa06 	bl	8003674 <HAL_Delay>

	while(1){
    if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_RESET)//SW1
 8001268:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126c:	4815      	ldr	r0, [pc, #84]	; (80012c4 <ButtonPress+0x74>)
 800126e:	f003 fc4b 	bl	8004b08 <HAL_GPIO_ReadPin>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d104      	bne.n	8001282 <ButtonPress+0x32>
    {
    	HAL_Delay(1000);
 8001278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127c:	f002 f9fa 	bl	8003674 <HAL_Delay>
    	break;
 8001280:	e01c      	b.n	80012bc <ButtonPress+0x6c>

    }

    if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15) == GPIO_PIN_RESET)//SW2
 8001282:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001286:	4810      	ldr	r0, [pc, #64]	; (80012c8 <ButtonPress+0x78>)
 8001288:	f003 fc3e 	bl	8004b08 <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1ea      	bne.n	8001268 <ButtonPress+0x18>
    {
    	mode++;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <ButtonPress+0x70>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <ButtonPress+0x70>)
 800129a:	6013      	str	r3, [r2, #0]
    	LED_RGB(mode);
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <ButtonPress+0x70>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fe73 	bl	8000f8c <LED_RGB>
		HAL_Delay(200);
 80012a6:	20c8      	movs	r0, #200	; 0xc8
 80012a8:	f002 f9e4 	bl	8003674 <HAL_Delay>

        if(mode >7){
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <ButtonPress+0x70>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b07      	cmp	r3, #7
 80012b2:	ddd9      	ble.n	8001268 <ButtonPress+0x18>
        	mode = 0;
 80012b4:	4b02      	ldr	r3, [pc, #8]	; (80012c0 <ButtonPress+0x70>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_RESET)//SW1
 80012ba:	e7d5      	b.n	8001268 <ButtonPress+0x18>
//        mode_processed = 0;
     //   LED_RGB(0);
    }
	}

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000238 	.word	0x20000238
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020400 	.word	0x40020400
 80012cc:	00000000 	.word	0x00000000

080012d0 <mode_test>:



void mode_test(void){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0


  switch(mode)
 80012d4:	4b6a      	ldr	r3, [pc, #424]	; (8001480 <mode_test+0x1b0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	2b06      	cmp	r3, #6
 80012dc:	f200 80c2 	bhi.w	8001464 <mode_test+0x194>
 80012e0:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <mode_test+0x18>)
 80012e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e6:	bf00      	nop
 80012e8:	08001305 	.word	0x08001305
 80012ec:	08001325 	.word	0x08001325
 80012f0:	08001361 	.word	0x08001361
 80012f4:	08001399 	.word	0x08001399
 80012f8:	080013d3 	.word	0x080013d3
 80012fc:	0800140b 	.word	0x0800140b
 8001300:	08001443 	.word	0x08001443
	  {
	  case 1:
		  LED_RGB(mode);
 8001304:	4b5e      	ldr	r3, [pc, #376]	; (8001480 <mode_test+0x1b0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fe3f 	bl	8000f8c <LED_RGB>
		  if(calibrate_count == 0){
 800130e:	4b5d      	ldr	r3, [pc, #372]	; (8001484 <mode_test+0x1b4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 80aa 	bne.w	800146c <mode_test+0x19c>
			  calibrate_sensors();
 8001318:	f001 f82e 	bl	8002378 <calibrate_sensors>
			  calibrate_count = 1;
 800131c:	4b59      	ldr	r3, [pc, #356]	; (8001484 <mode_test+0x1b4>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]
//		  base_speed1=0;




		  break;
 8001322:	e0a3      	b.n	800146c <mode_test+0x19c>

	  case 2:
		  LED_RGB(mode);
 8001324:	4b56      	ldr	r3, [pc, #344]	; (8001480 <mode_test+0x1b0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fe2f 	bl	8000f8c <LED_RGB>

		  LED_RGB_2(3);
 800132e:	2003      	movs	r0, #3
 8001330:	f7ff fed6 	bl	80010e0 <LED_RGB_2>
		  LED_RGB(3);
 8001334:	2003      	movs	r0, #3
 8001336:	f7ff fe29 	bl	8000f8c <LED_RGB>
		  target_speed =0.0;
 800133a:	4b53      	ldr	r3, [pc, #332]	; (8001488 <mode_test+0x1b8>)
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	601a      	str	r2, [r3, #0]

	//	while(1);
		  HAL_TIM_Base_Start_IT(&htim6);
 8001342:	4852      	ldr	r0, [pc, #328]	; (800148c <mode_test+0x1bc>)
 8001344:	f004 fa86 	bl	8005854 <HAL_TIM_Base_Start_IT>
		  test_DD();
 8001348:	f000 f8b2 	bl	80014b0 <test_DD>
//		HAL_TIM_Base_Stop_IT(&htim6);
		ControlMotor(0, 0);
 800134c:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 8001478 <mode_test+0x1a8>
 8001350:	ed9f 0b49 	vldr	d0, [pc, #292]	; 8001478 <mode_test+0x1a8>
 8001354:	f000 f95a 	bl	800160c <ControlMotor>
		  LED_RGB(0);
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff fe17 	bl	8000f8c <LED_RGB>
//		  base_speed1=0;
		  break;
 800135e:	e086      	b.n	800146e <mode_test+0x19e>


	  case 3:
		  LED_RGB(mode);
 8001360:	4b47      	ldr	r3, [pc, #284]	; (8001480 <mode_test+0x1b0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fe11 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff fe0e 	bl	8000f8c <LED_RGB>


		  target_speed =0.0;
 8001370:	4b45      	ldr	r3, [pc, #276]	; (8001488 <mode_test+0x1b8>)
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
//		  1.8 kansou
		  HAL_TIM_Base_Start_IT(&htim6);
 8001378:	4844      	ldr	r0, [pc, #272]	; (800148c <mode_test+0x1bc>)
 800137a:	f004 fa6b 	bl	8005854 <HAL_TIM_Base_Start_IT>
		  HAL_Delay(300);
 800137e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001382:	f002 f977 	bl	8003674 <HAL_Delay>

		  target_speed =0.8;
 8001386:	4b40      	ldr	r3, [pc, #256]	; (8001488 <mode_test+0x1b8>)
 8001388:	4a41      	ldr	r2, [pc, #260]	; (8001490 <mode_test+0x1c0>)
 800138a:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim7);//test
 800138c:	4841      	ldr	r0, [pc, #260]	; (8001494 <mode_test+0x1c4>)
 800138e:	f004 fa61 	bl	8005854 <HAL_TIM_Base_Start_IT>


		  test_DD();
 8001392:	f000 f88d 	bl	80014b0 <test_DD>
//		  base_speed1=-125;


		  break;
 8001396:	e06a      	b.n	800146e <mode_test+0x19e>

	  case 4:
		  LED_RGB(mode);
 8001398:	4b39      	ldr	r3, [pc, #228]	; (8001480 <mode_test+0x1b0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fdf5 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff fdf2 	bl	8000f8c <LED_RGB>

		  target_speed =0.0;
 80013a8:	4b37      	ldr	r3, [pc, #220]	; (8001488 <mode_test+0x1b8>)
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 80013b0:	4836      	ldr	r0, [pc, #216]	; (800148c <mode_test+0x1bc>)
 80013b2:	f004 fa4f 	bl	8005854 <HAL_TIM_Base_Start_IT>

		  HAL_Delay(300);
 80013b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013ba:	f002 f95b 	bl	8003674 <HAL_Delay>
		  target_speed =1.0;
 80013be:	4b32      	ldr	r3, [pc, #200]	; (8001488 <mode_test+0x1b8>)
 80013c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013c4:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim7);//test
 80013c6:	4833      	ldr	r0, [pc, #204]	; (8001494 <mode_test+0x1c4>)
 80013c8:	f004 fa44 	bl	8005854 <HAL_TIM_Base_Start_IT>


		  test_DD();
 80013cc:	f000 f870 	bl	80014b0 <test_DD>

//		  base_speed1=-127;
		  break;
 80013d0:	e04d      	b.n	800146e <mode_test+0x19e>


	  case 5:
		  LED_RGB(mode);
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <mode_test+0x1b0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fdd8 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff fdd5 	bl	8000f8c <LED_RGB>

		  target_speed =0.0;
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <mode_test+0x1b8>)
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 80013ea:	4828      	ldr	r0, [pc, #160]	; (800148c <mode_test+0x1bc>)
 80013ec:	f004 fa32 	bl	8005854 <HAL_TIM_Base_Start_IT>

		  HAL_Delay(300);
 80013f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013f4:	f002 f93e 	bl	8003674 <HAL_Delay>
		  target_speed =1.1;
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <mode_test+0x1b8>)
 80013fa:	4a27      	ldr	r2, [pc, #156]	; (8001498 <mode_test+0x1c8>)
 80013fc:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim7);//test
 80013fe:	4825      	ldr	r0, [pc, #148]	; (8001494 <mode_test+0x1c4>)
 8001400:	f004 fa28 	bl	8005854 <HAL_TIM_Base_Start_IT>


		  test_DD();
 8001404:	f000 f854 	bl	80014b0 <test_DD>

//		  base_speed1=-129;

		  break;
 8001408:	e031      	b.n	800146e <mode_test+0x19e>

	  case 6:
		  LED_RGB(mode);
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <mode_test+0x1b0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fdbc 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fdb9 	bl	8000f8c <LED_RGB>

		  target_speed =0.0;
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <mode_test+0x1b8>)
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 8001422:	481a      	ldr	r0, [pc, #104]	; (800148c <mode_test+0x1bc>)
 8001424:	f004 fa16 	bl	8005854 <HAL_TIM_Base_Start_IT>

		  HAL_Delay(300);
 8001428:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800142c:	f002 f922 	bl	8003674 <HAL_Delay>
		  target_speed =1.2;
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <mode_test+0x1b8>)
 8001432:	4a1a      	ldr	r2, [pc, #104]	; (800149c <mode_test+0x1cc>)
 8001434:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim7);//test
 8001436:	4817      	ldr	r0, [pc, #92]	; (8001494 <mode_test+0x1c4>)
 8001438:	f004 fa0c 	bl	8005854 <HAL_TIM_Base_Start_IT>


		  test_DD();
 800143c:	f000 f838 	bl	80014b0 <test_DD>

//		  base_speed1=-129;

		  break;
 8001440:	e015      	b.n	800146e <mode_test+0x19e>

	  case 7:
		  LED_RGB(mode);
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <mode_test+0x1b0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fda0 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff fd9d 	bl	8000f8c <LED_RGB>

		  target_speed =0.0;
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <mode_test+0x1b8>)
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

		  PrintVelocityData();
 800145a:	f001 fbdd 	bl	8002c18 <PrintVelocityData>

//		  HAL_TIM_Base_Start_IT(&htim6);
		  test_DD();
 800145e:	f000 f827 	bl	80014b0 <test_DD>

//		  base_speed1=-129;

		  break;
 8001462:	e004      	b.n	800146e <mode_test+0x19e>

	  default:
		  LED_RGB(7);
 8001464:	2007      	movs	r0, #7
 8001466:	f7ff fd91 	bl	8000f8c <LED_RGB>
//		  base_speed1=0;
//		  target_speed =0.0;



		  break;
 800146a:	e000      	b.n	800146e <mode_test+0x19e>
		  break;
 800146c:	bf00      	nop

	  }
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	f3af 8000 	nop.w
	...
 8001480:	20000238 	.word	0x20000238
 8001484:	2000023c 	.word	0x2000023c
 8001488:	20000684 	.word	0x20000684
 800148c:	200004bc 	.word	0x200004bc
 8001490:	3f4ccccd 	.word	0x3f4ccccd
 8001494:	20000504 	.word	0x20000504
 8001498:	3f8ccccd 	.word	0x3f8ccccd
 800149c:	3f99999a 	.word	0x3f99999a

080014a0 <change_mode>:

void change_mode(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	ButtonPress();
 80014a4:	f7ff fed4 	bl	8001250 <ButtonPress>
	mode_test();
 80014a8:	f7ff ff12 	bl	80012d0 <mode_test>
//		calculateEncoderSpeed();

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <test_DD>:

void test_DD(){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	test_flag =0;
 80014b4:	4b4a      	ldr	r3, [pc, #296]	; (80015e0 <test_DD+0x130>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	801a      	strh	r2, [r3, #0]
	TIM4 -> CNT=32767;
 80014ba:	4b4a      	ldr	r3, [pc, #296]	; (80015e4 <test_DD+0x134>)
 80014bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3 -> CNT=32767;
 80014c2:	4b49      	ldr	r3, [pc, #292]	; (80015e8 <test_DD+0x138>)
 80014c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
	LED_RGB_2(3);
 80014ca:	2003      	movs	r0, #3
 80014cc:	f7ff fe08 	bl	80010e0 <LED_RGB_2>
	while (1) {
//		readSens2();
//		test_flag = 1;


		if (Line3_sens[0] == 0) {
 80014d0:	4b46      	ldr	r3, [pc, #280]	; (80015ec <test_DD+0x13c>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014de:	d110      	bne.n	8001502 <test_DD+0x52>
			while (1) {

				if (Line3_sens[0] == 1) {
 80014e0:	4b42      	ldr	r3, [pc, #264]	; (80015ec <test_DD+0x13c>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014ea:	eef4 7a47 	vcmp.f32	s15, s14
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	d1f5      	bne.n	80014e0 <test_DD+0x30>
					marker_flag++;
 80014f4:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <test_DD+0x140>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	3301      	adds	r3, #1
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <test_DD+0x140>)
 8001500:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		//change_mode();

		if (Line3_sens[1] == 0 && cross_flag ==0) {
 8001502:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <test_DD+0x13c>)
 8001504:	edd3 7a01 	vldr	s15, [r3, #4]
 8001508:	eef5 7a40 	vcmp.f32	s15, #0.0
 800150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001510:	d113      	bne.n	800153a <test_DD+0x8a>
 8001512:	4b38      	ldr	r3, [pc, #224]	; (80015f4 <test_DD+0x144>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10f      	bne.n	800153a <test_DD+0x8a>
			while (1) {

				if (Line3_sens[1] == 1) {
 800151a:	4b34      	ldr	r3, [pc, #208]	; (80015ec <test_DD+0x13c>)
 800151c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001524:	eef4 7a47 	vcmp.f32	s15, s14
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	d1f5      	bne.n	800151a <test_DD+0x6a>
					test_flag++;
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <test_DD+0x130>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b2a      	ldr	r3, [pc, #168]	; (80015e0 <test_DD+0x130>)
 8001538:	801a      	strh	r2, [r3, #0]
					break;
				}
			}
		}

		if (test_flag >= 2*1) {//2
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <test_DD+0x130>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d9c6      	bls.n	80014d0 <test_DD+0x20>
				LED_RGB_2(7);
 8001542:	2007      	movs	r0, #7
 8001544:	f7ff fdcc 	bl	80010e0 <LED_RGB_2>
				HAL_TIM_Base_Stop_IT(&htim6);
 8001548:	482b      	ldr	r0, [pc, #172]	; (80015f8 <test_DD+0x148>)
 800154a:	f004 f9f3 	bl	8005934 <HAL_TIM_Base_Stop_IT>
//				HAL_TIM_Base_Stop_IT(&htim7);//test

				ControlMotor(0, 0);
 800154e:	ed9f 1b22 	vldr	d1, [pc, #136]	; 80015d8 <test_DD+0x128>
 8001552:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80015d8 <test_DD+0x128>
 8001556:	f000 f859 	bl	800160c <ControlMotor>
			break;
 800155a:	bf00      	nop

		}

	}

	calculateEncoderSpeed();
 800155c:	f001 f878 	bl	8002650 <calculateEncoderSpeed>
	HAL_TIM_Base_Start_IT(&htim6);
 8001560:	4825      	ldr	r0, [pc, #148]	; (80015f8 <test_DD+0x148>)
 8001562:	f004 f977 	bl	8005854 <HAL_TIM_Base_Start_IT>


	 accumulation = 0;
 8001566:	4b25      	ldr	r3, [pc, #148]	; (80015fc <test_DD+0x14c>)
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
	 target_speed = 0.5;
 800156e:	4b24      	ldr	r3, [pc, #144]	; (8001600 <test_DD+0x150>)
 8001570:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001574:	601a      	str	r2, [r3, #0]
     calculateEncoderSpeed();
 8001576:	f001 f86b 	bl	8002650 <calculateEncoderSpeed>
 	LED_RGB_2(5);
 800157a:	2005      	movs	r0, #5
 800157c:	f7ff fdb0 	bl	80010e0 <LED_RGB_2>



	    while (accumulation < 25) {
 8001580:	e00d      	b.n	800159e <test_DD+0xee>
	        accumulation += distance_1ms;
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <test_DD+0x14c>)
 8001584:	ed93 7a00 	vldr	s14, [r3]
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <test_DD+0x154>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <test_DD+0x14c>)
 8001594:	edc3 7a00 	vstr	s15, [r3]
//	        ControlMotor(110, 110);
	        HAL_Delay(10);
 8001598:	200a      	movs	r0, #10
 800159a:	f002 f86b 	bl	8003674 <HAL_Delay>
	    while (accumulation < 25) {
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <test_DD+0x14c>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80015a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b0:	d4e7      	bmi.n	8001582 <test_DD+0xd2>
	    }


	LED_RGB_2(2);
 80015b2:	2002      	movs	r0, #2
 80015b4:	f7ff fd94 	bl	80010e0 <LED_RGB_2>
	HAL_TIM_Base_Stop_IT(&htim6);
 80015b8:	480f      	ldr	r0, [pc, #60]	; (80015f8 <test_DD+0x148>)
 80015ba:	f004 f9bb 	bl	8005934 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim7);//test
 80015be:	4812      	ldr	r0, [pc, #72]	; (8001608 <test_DD+0x158>)
 80015c0:	f004 f9b8 	bl	8005934 <HAL_TIM_Base_Stop_IT>

	ControlMotor(0, 0);
 80015c4:	ed9f 1b04 	vldr	d1, [pc, #16]	; 80015d8 <test_DD+0x128>
 80015c8:	ed9f 0b03 	vldr	d0, [pc, #12]	; 80015d8 <test_DD+0x128>
 80015cc:	f000 f81e 	bl	800160c <ControlMotor>
	return 0;
 80015d0:	bf00      	nop
}
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	f3af 8000 	nop.w
	...
 80015e0:	20000240 	.word	0x20000240
 80015e4:	40000800 	.word	0x40000800
 80015e8:	40000400 	.word	0x40000400
 80015ec:	200005f0 	.word	0x200005f0
 80015f0:	2001662e 	.word	0x2001662e
 80015f4:	20000688 	.word	0x20000688
 80015f8:	200004bc 	.word	0x200004bc
 80015fc:	200005d8 	.word	0x200005d8
 8001600:	20000684 	.word	0x20000684
 8001604:	200005dc 	.word	0x200005dc
 8001608:	20000504 	.word	0x20000504

0800160c <ControlMotor>:
//#define REDUCTION_RATIO 0.4 // 減速比
//#define DISTANCE_PER_CNT (M_PI * TIRE * REDUCTION_RATIO / ENCODER_CPR) //[mm per cnt]
//float distance_1ms,distance_1ms_L,distance_1ms_R;


void ControlMotor(double duty_L, double duty_R){
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	ed87 0b04 	vstr	d0, [r7, #16]
 8001616:	ed87 1b02 	vstr	d1, [r7, #8]

    if (duty_L >= 0) {
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001626:	f7ff fa6d 	bl	8000b04 <__aeabi_dcmpge>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00e      	beq.n	800164e <ControlMotor+0x42>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // PH-HIGH(+)
 8001630:	2201      	movs	r2, #1
 8001632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001636:	4828      	ldr	r0, [pc, #160]	; (80016d8 <ControlMotor+0xcc>)
 8001638:	f003 fa7e 	bl	8004b38 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim8,TIM_CHANNEL_4, duty_L);
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <ControlMotor+0xd0>)
 800163e:	681e      	ldr	r6, [r3, #0]
 8001640:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001644:	f7ff fab0 	bl	8000ba8 <__aeabi_d2uiz>
 8001648:	4603      	mov	r3, r0
 800164a:	6433      	str	r3, [r6, #64]	; 0x40
 800164c:	e013      	b.n	8001676 <ControlMotor+0x6a>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // PH-LOW(-)
 800164e:	2200      	movs	r2, #0
 8001650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001654:	4820      	ldr	r0, [pc, #128]	; (80016d8 <ControlMotor+0xcc>)
 8001656:	f003 fa6f 	bl	8004b38 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim8,TIM_CHANNEL_4, -duty_L);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <ControlMotor+0xd0>)
 8001668:	681e      	ldr	r6, [r3, #0]
 800166a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800166e:	f7ff fa9b 	bl	8000ba8 <__aeabi_d2uiz>
 8001672:	4603      	mov	r3, r0
 8001674:	6433      	str	r3, [r6, #64]	; 0x40
    }
    if (duty_R >= 0) {
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001682:	f7ff fa3f 	bl	8000b04 <__aeabi_dcmpge>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00e      	beq.n	80016aa <ControlMotor+0x9e>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // PH-HIGH(+)
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001692:	4813      	ldr	r0, [pc, #76]	; (80016e0 <ControlMotor+0xd4>)
 8001694:	f003 fa50 	bl	8004b38 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim1,TIM_CHANNEL_2, duty_R);
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <ControlMotor+0xd8>)
 800169a:	681c      	ldr	r4, [r3, #0]
 800169c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016a0:	f7ff fa82 	bl	8000ba8 <__aeabi_d2uiz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	63a3      	str	r3, [r4, #56]	; 0x38
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // PH-LOW(-)
        __HAL_TIM_SET_COMPARE( &htim1,TIM_CHANNEL_2, -duty_R);
        }
}
 80016a8:	e011      	b.n	80016ce <ControlMotor+0xc2>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // PH-LOW(-)
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b0:	480b      	ldr	r0, [pc, #44]	; (80016e0 <ControlMotor+0xd4>)
 80016b2:	f003 fa41 	bl	8004b38 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim1,TIM_CHANNEL_2, -duty_R);
 80016b6:	68bc      	ldr	r4, [r7, #8]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <ControlMotor+0xd8>)
 80016c0:	681e      	ldr	r6, [r3, #0]
 80016c2:	4620      	mov	r0, r4
 80016c4:	4629      	mov	r1, r5
 80016c6:	f7ff fa6f 	bl	8000ba8 <__aeabi_d2uiz>
 80016ca:	4603      	mov	r3, r0
 80016cc:	63b3      	str	r3, [r6, #56]	; 0x38
}
 80016ce:	bf00      	nop
 80016d0:	371c      	adds	r7, #28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40020800 	.word	0x40020800
 80016dc:	2000054c 	.word	0x2000054c
 80016e0:	40020000 	.word	0x40020000
 80016e4:	2000039c 	.word	0x2000039c

080016e8 <HAL_TIM_PeriodElapsedCallback>:
////	EncoderSpeed();
//
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a08      	ldr	r2, [pc, #32]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d103      	bne.n	8001702 <HAL_TIM_PeriodElapsedCallback+0x1a>
		SpeedControl_NoENC();
 80016fa:	f001 f941 	bl	8002980 <SpeedControl_NoENC>
		readSens2();
 80016fe:	f000 fe17 	bl	8002330 <readSens2>
//        if (Line3_sens[0] == 0) {
//            marker_flag = 1;
//        }
//		VelocityPlan();
	}
	if(htim->Instance == TIM7){
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_TIM_PeriodElapsedCallback+0x28>
//		calculateEncoderSpeed();
		VelocityPlan();
 800170c:	f001 fa48 	bl	8002ba0 <VelocityPlan>
//		 printf("aaa");


	}

}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40001000 	.word	0x40001000
 800171c:	40001400 	.word	0x40001400

08001720 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {//AD
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	0000      	movs	r0, r0
	...

08001738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173c:	f001 ff28 	bl	8003590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001740:	f000 f89e 	bl	8001880 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001744:	f000 fd20 	bl	8002188 <MX_GPIO_Init>
  MX_DMA_Init();
 8001748:	f000 fcfe 	bl	8002148 <MX_DMA_Init>
  MX_ADC1_Init();
 800174c:	f000 f902 	bl	8001954 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001750:	f000 fa5e 	bl	8001c10 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001754:	f000 fae0 	bl	8001d18 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001758:	f000 fb8a 	bl	8001e70 <MX_TIM4_Init>
  MX_TIM8_Init();
 800175c:	f000 fc48 	bl	8001ff0 <MX_TIM8_Init>
  MX_TIM3_Init();
 8001760:	f000 fb32 	bl	8001dc8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001764:	f000 f9f0 	bl	8001b48 <MX_I2C1_Init>
  MX_SPI3_Init();
 8001768:	f000 fa1c 	bl	8001ba4 <MX_SPI3_Init>
  MX_USART6_UART_Init();
 800176c:	f000 fcc2 	bl	80020f4 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8001770:	f000 fbd2 	bl	8001f18 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001774:	f000 fc06 	bl	8001f84 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) Line_sens, 13) != HAL_OK) {
 8001778:	220d      	movs	r2, #13
 800177a:	4937      	ldr	r1, [pc, #220]	; (8001858 <main+0x120>)
 800177c:	4837      	ldr	r0, [pc, #220]	; (800185c <main+0x124>)
 800177e:	f001 ffe1 	bl	8003744 <HAL_ADC_Start_DMA>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <main+0x54>
		Error_Handler();
 8001788:	f000 fdca 	bl	8002320 <Error_Handler>
	}
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);	//ENC1
 800178c:	213c      	movs	r1, #60	; 0x3c
 800178e:	4834      	ldr	r0, [pc, #208]	; (8001860 <main+0x128>)
 8001790:	f004 fb0a 	bl	8005da8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);	//ENC2
 8001794:	213c      	movs	r1, #60	; 0x3c
 8001796:	4833      	ldr	r0, [pc, #204]	; (8001864 <main+0x12c>)
 8001798:	f004 fb06 	bl	8005da8 <HAL_TIM_Encoder_Start_IT>

	//TIM4->CNT = OFFSET;
	//TIM3->CNT = OFFSET;

	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);	//DRVR
 800179c:	2104      	movs	r1, #4
 800179e:	4832      	ldr	r0, [pc, #200]	; (8001868 <main+0x130>)
 80017a0:	f004 f946 	bl	8005a30 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4);	//DRVL
 80017a4:	210c      	movs	r1, #12
 80017a6:	4831      	ldr	r0, [pc, #196]	; (800186c <main+0x134>)
 80017a8:	f004 f942 	bl	8005a30 <HAL_TIM_PWM_Start_IT>

	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);	//fan
 80017ac:	2108      	movs	r1, #8
 80017ae:	4830      	ldr	r0, [pc, #192]	; (8001870 <main+0x138>)
 80017b0:	f004 f93e 	bl	8005a30 <HAL_TIM_PWM_Start_IT>

	//PW-re
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80017b4:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <main+0x130>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2200      	movs	r2, #0
 80017ba:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <main+0x134>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2200      	movs	r2, #0
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80017c4:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <main+0x138>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2200      	movs	r2, #0
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);	//LED1
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017d2:	4828      	ldr	r0, [pc, #160]	; (8001874 <main+0x13c>)
 80017d4:	f003 f9b0 	bl	8004b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);	//LED2
 80017d8:	2201      	movs	r2, #1
 80017da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017de:	4825      	ldr	r0, [pc, #148]	; (8001874 <main+0x13c>)
 80017e0:	f003 f9aa 	bl	8004b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);	//LED3
 80017e4:	2201      	movs	r2, #1
 80017e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ea:	4822      	ldr	r0, [pc, #136]	; (8001874 <main+0x13c>)
 80017ec:	f003 f9a4 	bl	8004b38 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);	//R_1-2
 80017f0:	2200      	movs	r2, #0
 80017f2:	2120      	movs	r1, #32
 80017f4:	4820      	ldr	r0, [pc, #128]	; (8001878 <main+0x140>)
 80017f6:	f003 f99f 	bl	8004b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);	//G_1-3
 80017fa:	2201      	movs	r2, #1
 80017fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001800:	481c      	ldr	r0, [pc, #112]	; (8001874 <main+0x13c>)
 8001802:	f003 f999 	bl	8004b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);	//B_1-4
 8001806:	2201      	movs	r2, #1
 8001808:	2110      	movs	r1, #16
 800180a:	481b      	ldr	r0, [pc, #108]	; (8001878 <main+0x140>)
 800180c:	f003 f994 	bl	8004b38 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);	//R_2-2
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001816:	4818      	ldr	r0, [pc, #96]	; (8001878 <main+0x140>)
 8001818:	f003 f98e 	bl	8004b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	//G_2-3
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001822:	4815      	ldr	r0, [pc, #84]	; (8001878 <main+0x140>)
 8001824:	f003 f988 	bl	8004b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);	//B_2-4
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182e:	4812      	ldr	r0, [pc, #72]	; (8001878 <main+0x140>)
 8001830:	f003 f982 	bl	8004b38 <HAL_GPIO_WritePin>

	ControlMotor(0, 0);
 8001834:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8001850 <main+0x118>
 8001838:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8001850 <main+0x118>
 800183c:	f7ff fee6 	bl	800160c <ControlMotor>
	test_flag = 0;
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <main+0x144>)
 8001842:	2200      	movs	r2, #0
 8001844:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		change_mode();
 8001846:	f7ff fe2b 	bl	80014a0 <change_mode>
 800184a:	e7fc      	b.n	8001846 <main+0x10e>
 800184c:	f3af 8000 	nop.w
	...
 8001858:	200005f8 	.word	0x200005f8
 800185c:	20000248 	.word	0x20000248
 8001860:	2000042c 	.word	0x2000042c
 8001864:	20000474 	.word	0x20000474
 8001868:	2000039c 	.word	0x2000039c
 800186c:	2000054c 	.word	0x2000054c
 8001870:	200003e4 	.word	0x200003e4
 8001874:	40020000 	.word	0x40020000
 8001878:	40020400 	.word	0x40020400
 800187c:	20000240 	.word	0x20000240

08001880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b094      	sub	sp, #80	; 0x50
 8001884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001886:	f107 0320 	add.w	r3, r7, #32
 800188a:	2230      	movs	r2, #48	; 0x30
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f005 fc6e 	bl	8007170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	4b28      	ldr	r3, [pc, #160]	; (800194c <SystemClock_Config+0xcc>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	4a27      	ldr	r2, [pc, #156]	; (800194c <SystemClock_Config+0xcc>)
 80018ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b2:	6413      	str	r3, [r2, #64]	; 0x40
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <SystemClock_Config+0xcc>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c0:	2300      	movs	r3, #0
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <SystemClock_Config+0xd0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a21      	ldr	r2, [pc, #132]	; (8001950 <SystemClock_Config+0xd0>)
 80018ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <SystemClock_Config+0xd0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018dc:	2302      	movs	r3, #2
 80018de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e0:	2301      	movs	r3, #1
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e4:	2310      	movs	r3, #16
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e8:	2302      	movs	r3, #2
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ec:	2300      	movs	r3, #0
 80018ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018f0:	2308      	movs	r3, #8
 80018f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018f4:	23a8      	movs	r3, #168	; 0xa8
 80018f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018f8:	2302      	movs	r3, #2
 80018fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018fc:	2304      	movs	r3, #4
 80018fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001900:	f107 0320 	add.w	r3, r7, #32
 8001904:	4618      	mov	r0, r3
 8001906:	f003 fa75 	bl	8004df4 <HAL_RCC_OscConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001910:	f000 fd06 	bl	8002320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001914:	230f      	movs	r3, #15
 8001916:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001918:	2302      	movs	r3, #2
 800191a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001920:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001924:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	2105      	movs	r1, #5
 8001932:	4618      	mov	r0, r3
 8001934:	f003 fcd6 	bl	80052e4 <HAL_RCC_ClockConfig>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800193e:	f000 fcef 	bl	8002320 <Error_Handler>
  }
}
 8001942:	bf00      	nop
 8001944:	3750      	adds	r7, #80	; 0x50
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40007000 	.word	0x40007000

08001954 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800195a:	463b      	mov	r3, r7
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001966:	4b75      	ldr	r3, [pc, #468]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001968:	4a75      	ldr	r2, [pc, #468]	; (8001b40 <MX_ADC1_Init+0x1ec>)
 800196a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800196c:	4b73      	ldr	r3, [pc, #460]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 800196e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001972:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001974:	4b71      	ldr	r3, [pc, #452]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800197a:	4b70      	ldr	r3, [pc, #448]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 800197c:	2201      	movs	r2, #1
 800197e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001980:	4b6e      	ldr	r3, [pc, #440]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001982:	2201      	movs	r2, #1
 8001984:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001986:	4b6d      	ldr	r3, [pc, #436]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800198e:	4b6b      	ldr	r3, [pc, #428]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001990:	2200      	movs	r2, #0
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001994:	4b69      	ldr	r3, [pc, #420]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001996:	4a6b      	ldr	r2, [pc, #428]	; (8001b44 <MX_ADC1_Init+0x1f0>)
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800199a:	4b68      	ldr	r3, [pc, #416]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 800199c:	2200      	movs	r2, #0
 800199e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 80019a0:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 80019a2:	220d      	movs	r2, #13
 80019a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019a6:	4b65      	ldr	r3, [pc, #404]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019ae:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019b4:	4861      	ldr	r0, [pc, #388]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 80019b6:	f001 fe81 	bl	80036bc <HAL_ADC_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019c0:	f000 fcae 	bl	8002320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80019c4:	2309      	movs	r3, #9
 80019c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80019cc:	2307      	movs	r3, #7
 80019ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d0:	463b      	mov	r3, r7
 80019d2:	4619      	mov	r1, r3
 80019d4:	4859      	ldr	r0, [pc, #356]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 80019d6:	f001 ffd9 	bl	800398c <HAL_ADC_ConfigChannel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019e0:	f000 fc9e 	bl	8002320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80019e4:	2308      	movs	r3, #8
 80019e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ec:	463b      	mov	r3, r7
 80019ee:	4619      	mov	r1, r3
 80019f0:	4852      	ldr	r0, [pc, #328]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 80019f2:	f001 ffcb 	bl	800398c <HAL_ADC_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80019fc:	f000 fc90 	bl	8002320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001a00:	230f      	movs	r3, #15
 8001a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001a04:	2303      	movs	r3, #3
 8001a06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a08:	463b      	mov	r3, r7
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	484b      	ldr	r0, [pc, #300]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001a0e:	f001 ffbd 	bl	800398c <HAL_ADC_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001a18:	f000 fc82 	bl	8002320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001a1c:	230e      	movs	r3, #14
 8001a1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001a20:	2304      	movs	r3, #4
 8001a22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a24:	463b      	mov	r3, r7
 8001a26:	4619      	mov	r1, r3
 8001a28:	4844      	ldr	r0, [pc, #272]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001a2a:	f001 ffaf 	bl	800398c <HAL_ADC_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001a34:	f000 fc74 	bl	8002320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a38:	2305      	movs	r3, #5
 8001a3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001a3c:	2305      	movs	r3, #5
 8001a3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a40:	463b      	mov	r3, r7
 8001a42:	4619      	mov	r1, r3
 8001a44:	483d      	ldr	r0, [pc, #244]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001a46:	f001 ffa1 	bl	800398c <HAL_ADC_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001a50:	f000 fc66 	bl	8002320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a54:	2304      	movs	r3, #4
 8001a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001a58:	2306      	movs	r3, #6
 8001a5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4836      	ldr	r0, [pc, #216]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001a62:	f001 ff93 	bl	800398c <HAL_ADC_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001a6c:	f000 fc58 	bl	8002320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001a70:	2303      	movs	r3, #3
 8001a72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001a74:	2307      	movs	r3, #7
 8001a76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a78:	463b      	mov	r3, r7
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	482f      	ldr	r0, [pc, #188]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001a7e:	f001 ff85 	bl	800398c <HAL_ADC_ConfigChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001a88:	f000 fc4a 	bl	8002320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001a90:	2308      	movs	r3, #8
 8001a92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a94:	463b      	mov	r3, r7
 8001a96:	4619      	mov	r1, r3
 8001a98:	4828      	ldr	r0, [pc, #160]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001a9a:	f001 ff77 	bl	800398c <HAL_ADC_ConfigChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001aa4:	f000 fc3c 	bl	8002320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001aac:	2309      	movs	r3, #9
 8001aae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4821      	ldr	r0, [pc, #132]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001ab6:	f001 ff69 	bl	800398c <HAL_ADC_ConfigChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001ac0:	f000 fc2e 	bl	8002320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001ac8:	230a      	movs	r3, #10
 8001aca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001acc:	463b      	mov	r3, r7
 8001ace:	4619      	mov	r1, r3
 8001ad0:	481a      	ldr	r0, [pc, #104]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001ad2:	f001 ff5b 	bl	800398c <HAL_ADC_ConfigChannel>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001adc:	f000 fc20 	bl	8002320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001ae0:	230d      	movs	r3, #13
 8001ae2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001ae4:	230b      	movs	r3, #11
 8001ae6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae8:	463b      	mov	r3, r7
 8001aea:	4619      	mov	r1, r3
 8001aec:	4813      	ldr	r0, [pc, #76]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001aee:	f001 ff4d 	bl	800398c <HAL_ADC_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001af8:	f000 fc12 	bl	8002320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001afc:	230c      	movs	r3, #12
 8001afe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001b00:	230c      	movs	r3, #12
 8001b02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b04:	463b      	mov	r3, r7
 8001b06:	4619      	mov	r1, r3
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001b0a:	f001 ff3f 	bl	800398c <HAL_ADC_ConfigChannel>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001b14:	f000 fc04 	bl	8002320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001b18:	230b      	movs	r3, #11
 8001b1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001b1c:	230d      	movs	r3, #13
 8001b1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b20:	463b      	mov	r3, r7
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_ADC1_Init+0x1e8>)
 8001b26:	f001 ff31 	bl	800398c <HAL_ADC_ConfigChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8001b30:	f000 fbf6 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000248 	.word	0x20000248
 8001b40:	40012000 	.word	0x40012000
 8001b44:	0f000001 	.word	0x0f000001

08001b48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b4e:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <MX_I2C1_Init+0x54>)
 8001b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b54:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <MX_I2C1_Init+0x58>)
 8001b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b84:	4804      	ldr	r0, [pc, #16]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b86:	f002 fff1 	bl	8004b6c <HAL_I2C_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b90:	f000 fbc6 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200002f0 	.word	0x200002f0
 8001b9c:	40005400 	.word	0x40005400
 8001ba0:	000186a0 	.word	0x000186a0

08001ba4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */
  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001baa:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <MX_SPI3_Init+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bb4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bf0:	220a      	movs	r2, #10
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bf4:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bf6:	f003 fd55 	bl	80056a4 <HAL_SPI_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001c00:	f000 fb8e 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */
  /* USER CODE END SPI3_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000344 	.word	0x20000344
 8001c0c:	40003c00 	.word	0x40003c00

08001c10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b092      	sub	sp, #72	; 0x48
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	615a      	str	r2, [r3, #20]
 8001c32:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	2220      	movs	r2, #32
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f005 fa98 	bl	8007170 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c40:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <MX_TIM1_Init+0x100>)
 8001c42:	4a34      	ldr	r2, [pc, #208]	; (8001d14 <MX_TIM1_Init+0x104>)
 8001c44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <MX_TIM1_Init+0x100>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4c:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <MX_TIM1_Init+0x100>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8001c52:	4b2f      	ldr	r3, [pc, #188]	; (8001d10 <MX_TIM1_Init+0x100>)
 8001c54:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001c58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <MX_TIM1_Init+0x100>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c60:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <MX_TIM1_Init+0x100>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c66:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <MX_TIM1_Init+0x100>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c6c:	4828      	ldr	r0, [pc, #160]	; (8001d10 <MX_TIM1_Init+0x100>)
 8001c6e:	f003 fe90 	bl	8005992 <HAL_TIM_PWM_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001c78:	f000 fb52 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4821      	ldr	r0, [pc, #132]	; (8001d10 <MX_TIM1_Init+0x100>)
 8001c8c:	f004 fda2 	bl	80067d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001c96:	f000 fb43 	bl	8002320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c9a:	2360      	movs	r3, #96	; 0x60
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cba:	2204      	movs	r2, #4
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4814      	ldr	r0, [pc, #80]	; (8001d10 <MX_TIM1_Init+0x100>)
 8001cc0:	f004 fa28 	bl	8006114 <HAL_TIM_PWM_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001cca:	f000 fb29 	bl	8002320 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4807      	ldr	r0, [pc, #28]	; (8001d10 <MX_TIM1_Init+0x100>)
 8001cf2:	f004 fdeb 	bl	80068cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001cfc:	f000 fb10 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d00:	4803      	ldr	r0, [pc, #12]	; (8001d10 <MX_TIM1_Init+0x100>)
 8001d02:	f001 fa2f 	bl	8003164 <HAL_TIM_MspPostInit>

}
 8001d06:	bf00      	nop
 8001d08:	3748      	adds	r7, #72	; 0x48
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000039c 	.word	0x2000039c
 8001d14:	40010000 	.word	0x40010000

08001d18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	615a      	str	r2, [r3, #20]
 8001d38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d3a:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <MX_TIM2_Init+0xac>)
 8001d3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <MX_TIM2_Init+0xac>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <MX_TIM2_Init+0xac>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <MX_TIM2_Init+0xac>)
 8001d50:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001d54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <MX_TIM2_Init+0xac>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <MX_TIM2_Init+0xac>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d62:	4818      	ldr	r0, [pc, #96]	; (8001dc4 <MX_TIM2_Init+0xac>)
 8001d64:	f003 fe15 	bl	8005992 <HAL_TIM_PWM_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d6e:	f000 fad7 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d7a:	f107 0320 	add.w	r3, r7, #32
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4810      	ldr	r0, [pc, #64]	; (8001dc4 <MX_TIM2_Init+0xac>)
 8001d82:	f004 fd27 	bl	80067d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001d8c:	f000 fac8 	bl	8002320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d90:	2360      	movs	r3, #96	; 0x60
 8001d92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	2208      	movs	r2, #8
 8001da4:	4619      	mov	r1, r3
 8001da6:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <MX_TIM2_Init+0xac>)
 8001da8:	f004 f9b4 	bl	8006114 <HAL_TIM_PWM_ConfigChannel>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001db2:	f000 fab5 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001db6:	4803      	ldr	r0, [pc, #12]	; (8001dc4 <MX_TIM2_Init+0xac>)
 8001db8:	f001 f9d4 	bl	8003164 <HAL_TIM_MspPostInit>

}
 8001dbc:	bf00      	nop
 8001dbe:	3728      	adds	r7, #40	; 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200003e4 	.word	0x200003e4

08001dc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	; 0x30
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	2224      	movs	r2, #36	; 0x24
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f005 f9ca 	bl	8007170 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001de4:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <MX_TIM3_Init+0xa0>)
 8001de6:	4a21      	ldr	r2, [pc, #132]	; (8001e6c <MX_TIM3_Init+0xa4>)
 8001de8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <MX_TIM3_Init+0xa0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <MX_TIM3_Init+0xa0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <MX_TIM3_Init+0xa0>)
 8001df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_TIM3_Init+0xa0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e04:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <MX_TIM3_Init+0xa0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e12:	2301      	movs	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e22:	2301      	movs	r3, #1
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	4619      	mov	r1, r3
 8001e34:	480c      	ldr	r0, [pc, #48]	; (8001e68 <MX_TIM3_Init+0xa0>)
 8001e36:	f003 ff11 	bl	8005c5c <HAL_TIM_Encoder_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e40:	f000 fa6e 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e44:	2300      	movs	r3, #0
 8001e46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_TIM3_Init+0xa0>)
 8001e52:	f004 fcbf 	bl	80067d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e5c:	f000 fa60 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	3730      	adds	r7, #48	; 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	2000042c 	.word	0x2000042c
 8001e6c:	40000400 	.word	0x40000400

08001e70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	; 0x30
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	2224      	movs	r2, #36	; 0x24
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f005 f976 	bl	8007170 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e8c:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <MX_TIM4_Init+0xa0>)
 8001e8e:	4a21      	ldr	r2, [pc, #132]	; (8001f14 <MX_TIM4_Init+0xa4>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e92:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <MX_TIM4_Init+0xa0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <MX_TIM4_Init+0xa0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <MX_TIM4_Init+0xa0>)
 8001ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <MX_TIM4_Init+0xa0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <MX_TIM4_Init+0xa0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	4619      	mov	r1, r3
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <MX_TIM4_Init+0xa0>)
 8001ede:	f003 febd 	bl	8005c5c <HAL_TIM_Encoder_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ee8:	f000 fa1a 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <MX_TIM4_Init+0xa0>)
 8001efa:	f004 fc6b 	bl	80067d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001f04:	f000 fa0c 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	3730      	adds	r7, #48	; 0x30
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000474 	.word	0x20000474
 8001f14:	40000800 	.word	0x40000800

08001f18 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */
  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1e:	463b      	mov	r3, r7
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */
  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f28:	4a15      	ldr	r2, [pc, #84]	; (8001f80 <MX_TIM6_Init+0x68>)
 8001f2a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f2e:	2253      	movs	r2, #83	; 0x53
 8001f30:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001f38:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f46:	480d      	ldr	r0, [pc, #52]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f48:	f003 fc35 	bl	80057b6 <HAL_TIM_Base_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001f52:	f000 f9e5 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f5e:	463b      	mov	r3, r7
 8001f60:	4619      	mov	r1, r3
 8001f62:	4806      	ldr	r0, [pc, #24]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f64:	f004 fc36 	bl	80067d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001f6e:	f000 f9d7 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  /* USER CODE END TIM6_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200004bc 	.word	0x200004bc
 8001f80:	40001000 	.word	0x40001000

08001f84 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <MX_TIM7_Init+0x64>)
 8001f94:	4a15      	ldr	r2, [pc, #84]	; (8001fec <MX_TIM7_Init+0x68>)
 8001f96:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <MX_TIM7_Init+0x64>)
 8001f9a:	2253      	movs	r2, #83	; 0x53
 8001f9c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <MX_TIM7_Init+0x64>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 24999;
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <MX_TIM7_Init+0x64>)
 8001fa6:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001faa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <MX_TIM7_Init+0x64>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001fb2:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <MX_TIM7_Init+0x64>)
 8001fb4:	f003 fbff 	bl	80057b6 <HAL_TIM_Base_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001fbe:	f000 f9af 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001fca:	463b      	mov	r3, r7
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4806      	ldr	r0, [pc, #24]	; (8001fe8 <MX_TIM7_Init+0x64>)
 8001fd0:	f004 fc00 	bl	80067d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001fda:	f000 f9a1 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000504 	.word	0x20000504
 8001fec:	40001400 	.word	0x40001400

08001ff0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b092      	sub	sp, #72	; 0x48
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */
  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
 8002010:	615a      	str	r2, [r3, #20]
 8002012:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2220      	movs	r2, #32
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f005 f8a8 	bl	8007170 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */
  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002020:	4b32      	ldr	r3, [pc, #200]	; (80020ec <MX_TIM8_Init+0xfc>)
 8002022:	4a33      	ldr	r2, [pc, #204]	; (80020f0 <MX_TIM8_Init+0x100>)
 8002024:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002026:	4b31      	ldr	r3, [pc, #196]	; (80020ec <MX_TIM8_Init+0xfc>)
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202c:	4b2f      	ldr	r3, [pc, #188]	; (80020ec <MX_TIM8_Init+0xfc>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 499;
 8002032:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <MX_TIM8_Init+0xfc>)
 8002034:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002038:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203a:	4b2c      	ldr	r3, [pc, #176]	; (80020ec <MX_TIM8_Init+0xfc>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002040:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <MX_TIM8_Init+0xfc>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002046:	4b29      	ldr	r3, [pc, #164]	; (80020ec <MX_TIM8_Init+0xfc>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800204c:	4827      	ldr	r0, [pc, #156]	; (80020ec <MX_TIM8_Init+0xfc>)
 800204e:	f003 fca0 	bl	8005992 <HAL_TIM_PWM_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002058:	f000 f962 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205c:	2300      	movs	r3, #0
 800205e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002064:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002068:	4619      	mov	r1, r3
 800206a:	4820      	ldr	r0, [pc, #128]	; (80020ec <MX_TIM8_Init+0xfc>)
 800206c:	f004 fbb2 	bl	80067d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002076:	f000 f953 	bl	8002320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800207a:	2360      	movs	r3, #96	; 0x60
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002082:	2300      	movs	r3, #0
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002096:	220c      	movs	r2, #12
 8002098:	4619      	mov	r1, r3
 800209a:	4814      	ldr	r0, [pc, #80]	; (80020ec <MX_TIM8_Init+0xfc>)
 800209c:	f004 f83a 	bl	8006114 <HAL_TIM_PWM_ConfigChannel>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 80020a6:	f000 f93b 	bl	8002320 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	4619      	mov	r1, r3
 80020cc:	4807      	ldr	r0, [pc, #28]	; (80020ec <MX_TIM8_Init+0xfc>)
 80020ce:	f004 fbfd 	bl	80068cc <HAL_TIMEx_ConfigBreakDeadTime>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 80020d8:	f000 f922 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80020dc:	4803      	ldr	r0, [pc, #12]	; (80020ec <MX_TIM8_Init+0xfc>)
 80020de:	f001 f841 	bl	8003164 <HAL_TIM_MspPostInit>

}
 80020e2:	bf00      	nop
 80020e4:	3748      	adds	r7, #72	; 0x48
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	2000054c 	.word	0x2000054c
 80020f0:	40010400 	.word	0x40010400

080020f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_Init 0 */
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */
  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <MX_USART6_UART_Init+0x50>)
 80020fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 8002100:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002104:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 800211a:	220c      	movs	r2, #12
 800211c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 800212c:	f004 fc34 	bl	8006998 <HAL_UART_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002136:	f000 f8f3 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  /* USER CODE END USART6_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000594 	.word	0x20000594
 8002144:	40011400 	.word	0x40011400

08002148 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <MX_DMA_Init+0x3c>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <MX_DMA_Init+0x3c>)
 8002158:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MX_DMA_Init+0x3c>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	2038      	movs	r0, #56	; 0x38
 8002170:	f001 ff87 	bl	8004082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002174:	2038      	movs	r0, #56	; 0x38
 8002176:	f001 ffa0 	bl	80040ba <HAL_NVIC_EnableIRQ>

}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800

08002188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	4b5a      	ldr	r3, [pc, #360]	; (800230c <MX_GPIO_Init+0x184>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a59      	ldr	r2, [pc, #356]	; (800230c <MX_GPIO_Init+0x184>)
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b57      	ldr	r3, [pc, #348]	; (800230c <MX_GPIO_Init+0x184>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b53      	ldr	r3, [pc, #332]	; (800230c <MX_GPIO_Init+0x184>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a52      	ldr	r2, [pc, #328]	; (800230c <MX_GPIO_Init+0x184>)
 80021c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b50      	ldr	r3, [pc, #320]	; (800230c <MX_GPIO_Init+0x184>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	4b4c      	ldr	r3, [pc, #304]	; (800230c <MX_GPIO_Init+0x184>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a4b      	ldr	r2, [pc, #300]	; (800230c <MX_GPIO_Init+0x184>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <MX_GPIO_Init+0x184>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	4b45      	ldr	r3, [pc, #276]	; (800230c <MX_GPIO_Init+0x184>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a44      	ldr	r2, [pc, #272]	; (800230c <MX_GPIO_Init+0x184>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b42      	ldr	r3, [pc, #264]	; (800230c <MX_GPIO_Init+0x184>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	4b3e      	ldr	r3, [pc, #248]	; (800230c <MX_GPIO_Init+0x184>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a3d      	ldr	r2, [pc, #244]	; (800230c <MX_GPIO_Init+0x184>)
 8002218:	f043 0308 	orr.w	r3, r3, #8
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b3b      	ldr	r3, [pc, #236]	; (800230c <MX_GPIO_Init+0x184>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_ARGB3_GPIO_OUT_Pin|LED2_ARGB4_GPIO_OUT_Pin|LED2_ARGB2_GPIO_OUT_Pin|LED_ARGB4_GPIO_OUT_Pin
 800222a:	2200      	movs	r2, #0
 800222c:	f247 0130 	movw	r1, #28720	; 0x7030
 8002230:	4837      	ldr	r0, [pc, #220]	; (8002310 <MX_GPIO_Init+0x188>)
 8002232:	f002 fc81 	bl	8004b38 <HAL_GPIO_WritePin>
                          |LED_ARGB2_GPIO_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRVL_IN2_GPIO_GPIO_Port, DRVL_IN2_GPIO_Pin, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800223c:	4835      	ldr	r0, [pc, #212]	; (8002314 <MX_GPIO_Init+0x18c>)
 800223e:	f002 fc7b 	bl	8004b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRVR_IN2_GPIO_OUT_Pin|LED3_GPIO_OUT_Pin|LED2_GPIO_OUT_Pin|LED1_GPIO_OUT_Pin
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 411d 	mov.w	r1, #40192	; 0x9d00
 8002248:	4833      	ldr	r0, [pc, #204]	; (8002318 <MX_GPIO_Init+0x190>)
 800224a:	f002 fc75 	bl	8004b38 <HAL_GPIO_WritePin>
                          |LED_ARGB3_GPIO_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NCS_GPIO_OUT_GPIO_Port, NCS_GPIO_OUT_Pin, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	2104      	movs	r1, #4
 8002252:	4832      	ldr	r0, [pc, #200]	; (800231c <MX_GPIO_Init+0x194>)
 8002254:	f002 fc70 	bl	8004b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW1_GPIO_IN_Pin SIDE_SENSOR_R_GPIO_IN_Pin */
  GPIO_InitStruct.Pin = SW1_GPIO_IN_Pin|SIDE_SENSOR_R_GPIO_IN_Pin;
 8002258:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800225c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800225e:	2300      	movs	r3, #0
 8002260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	4829      	ldr	r0, [pc, #164]	; (8002314 <MX_GPIO_Init+0x18c>)
 800226e:	f002 faaf 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIDE_SENSOR_L_GPIO_IN_Pin SW2_GPIO_IN_Pin */
  GPIO_InitStruct.Pin = SIDE_SENSOR_L_GPIO_IN_Pin|SW2_GPIO_IN_Pin;
 8002272:	f248 0304 	movw	r3, #32772	; 0x8004
 8002276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002278:	2300      	movs	r3, #0
 800227a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	4822      	ldr	r0, [pc, #136]	; (8002310 <MX_GPIO_Init+0x188>)
 8002288:	f002 faa2 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_ARGB3_GPIO_OUT_Pin LED2_ARGB4_GPIO_OUT_Pin LED2_ARGB2_GPIO_OUT_Pin LED_ARGB4_GPIO_OUT_Pin
                           LED_ARGB2_GPIO_OUT_Pin */
  GPIO_InitStruct.Pin = LED2_ARGB3_GPIO_OUT_Pin|LED2_ARGB4_GPIO_OUT_Pin|LED2_ARGB2_GPIO_OUT_Pin|LED_ARGB4_GPIO_OUT_Pin
 800228c:	f247 0330 	movw	r3, #28720	; 0x7030
 8002290:	617b      	str	r3, [r7, #20]
                          |LED_ARGB2_GPIO_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002292:	2301      	movs	r3, #1
 8002294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4619      	mov	r1, r3
 80022a4:	481a      	ldr	r0, [pc, #104]	; (8002310 <MX_GPIO_Init+0x188>)
 80022a6:	f002 fa93 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRVL_IN2_GPIO_Pin */
  GPIO_InitStruct.Pin = DRVL_IN2_GPIO_Pin;
 80022aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRVL_IN2_GPIO_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	4814      	ldr	r0, [pc, #80]	; (8002314 <MX_GPIO_Init+0x18c>)
 80022c4:	f002 fa84 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRVR_IN2_GPIO_OUT_Pin LED3_GPIO_OUT_Pin LED2_GPIO_OUT_Pin LED1_GPIO_OUT_Pin
                           LED_ARGB3_GPIO_OUT_Pin */
  GPIO_InitStruct.Pin = DRVR_IN2_GPIO_OUT_Pin|LED3_GPIO_OUT_Pin|LED2_GPIO_OUT_Pin|LED1_GPIO_OUT_Pin
 80022c8:	f44f 431d 	mov.w	r3, #40192	; 0x9d00
 80022cc:	617b      	str	r3, [r7, #20]
                          |LED_ARGB3_GPIO_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	480d      	ldr	r0, [pc, #52]	; (8002318 <MX_GPIO_Init+0x190>)
 80022e2:	f002 fa75 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NCS_GPIO_OUT_Pin */
  GPIO_InitStruct.Pin = NCS_GPIO_OUT_Pin;
 80022e6:	2304      	movs	r3, #4
 80022e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ea:	2301      	movs	r3, #1
 80022ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NCS_GPIO_OUT_GPIO_Port, &GPIO_InitStruct);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4619      	mov	r1, r3
 80022fc:	4807      	ldr	r0, [pc, #28]	; (800231c <MX_GPIO_Init+0x194>)
 80022fe:	f002 fa67 	bl	80047d0 <HAL_GPIO_Init>

}
 8002302:	bf00      	nop
 8002304:	3728      	adds	r7, #40	; 0x28
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	40020400 	.word	0x40020400
 8002314:	40020800 	.word	0x40020800
 8002318:	40020000 	.word	0x40020000
 800231c:	40020c00 	.word	0x40020c00

08002320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <readSens2>:

    }
}


void readSens2(){
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	Line3_sens[0] = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2);//L
 8002334:	2104      	movs	r1, #4
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <readSens2+0x3c>)
 8002338:	f002 fbe6 	bl	8004b08 <HAL_GPIO_ReadPin>
 800233c:	4603      	mov	r3, r0
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <readSens2+0x40>)
 8002348:	edc3 7a00 	vstr	s15, [r3]
    Line3_sens[1] = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);//R
 800234c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002350:	4808      	ldr	r0, [pc, #32]	; (8002374 <readSens2+0x44>)
 8002352:	f002 fbd9 	bl	8004b08 <HAL_GPIO_ReadPin>
 8002356:	4603      	mov	r3, r0
 8002358:	ee07 3a90 	vmov	s15, r3
 800235c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <readSens2+0x40>)
 8002362:	edc3 7a01 	vstr	s15, [r3, #4]

}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40020400 	.word	0x40020400
 8002370:	200005f0 	.word	0x200005f0
 8002374:	40020800 	.word	0x40020800

08002378 <calibrate_sensors>:


void calibrate_sensors(void){    
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0

    for (int k = 0; k < SENSOR_COUNT; k++) {
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	e00f      	b.n	80023a4 <calibrate_sensors+0x2c>
        Line_min[k] = 3000.0;  // 初期値
 8002384:	4a3c      	ldr	r2, [pc, #240]	; (8002478 <calibrate_sensors+0x100>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	4a3b      	ldr	r2, [pc, #236]	; (800247c <calibrate_sensors+0x104>)
 800238e:	601a      	str	r2, [r3, #0]
        Line_max[k] = 0.0;     // 初期値
 8002390:	4a3b      	ldr	r2, [pc, #236]	; (8002480 <calibrate_sensors+0x108>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
    for (int k = 0; k < SENSOR_COUNT; k++) {
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3301      	adds	r3, #1
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	ddec      	ble.n	8002384 <calibrate_sensors+0xc>
    }
HAL_Delay(500);
 80023aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023ae:	f001 f961 	bl	8003674 <HAL_Delay>
       while(1){//SW2

    	   if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15) == GPIO_PIN_RESET){
 80023b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023b6:	4833      	ldr	r0, [pc, #204]	; (8002484 <calibrate_sensors+0x10c>)
 80023b8:	f002 fba6 	bl	8004b08 <HAL_GPIO_ReadPin>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d051      	beq.n	8002466 <calibrate_sensors+0xee>
    		   break;
    	   }
           //readSens();
           LED_RGB_2(2);
 80023c2:	2002      	movs	r0, #2
 80023c4:	f7fe fe8c 	bl	80010e0 <LED_RGB_2>
           LED_RGB(2);
 80023c8:	2002      	movs	r0, #2
 80023ca:	f7fe fddf 	bl	8000f8c <LED_RGB>
           for(int k = 0; k < SENSOR_COUNT; k++){
 80023ce:	2300      	movs	r3, #0
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	e044      	b.n	800245e <calibrate_sensors+0xe6>
        	   if(Line_sens[k] < Line_min[k]){
 80023d4:	4a2c      	ldr	r2, [pc, #176]	; (8002488 <calibrate_sensors+0x110>)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e4:	4a24      	ldr	r2, [pc, #144]	; (8002478 <calibrate_sensors+0x100>)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f8:	d50d      	bpl.n	8002416 <calibrate_sensors+0x9e>
        		   Line_min[k] = Line_sens[k];
 80023fa:	4a23      	ldr	r2, [pc, #140]	; (8002488 <calibrate_sensors+0x110>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002402:	ee07 3a90 	vmov	s15, r3
 8002406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800240a:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <calibrate_sensors+0x100>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	edc3 7a00 	vstr	s15, [r3]
        	   }
        	   if(Line_sens[k] > Line_max[k] ){
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <calibrate_sensors+0x110>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002426:	4a16      	ldr	r2, [pc, #88]	; (8002480 <calibrate_sensors+0x108>)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	edd3 7a00 	vldr	s15, [r3]
 8002432:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243a:	dd0d      	ble.n	8002458 <calibrate_sensors+0xe0>
        		   Line_max[k] = Line_sens[k];
 800243c:	4a12      	ldr	r2, [pc, #72]	; (8002488 <calibrate_sensors+0x110>)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244c:	4a0c      	ldr	r2, [pc, #48]	; (8002480 <calibrate_sensors+0x108>)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	edc3 7a00 	vstr	s15, [r3]
           for(int k = 0; k < SENSOR_COUNT; k++){
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b0c      	cmp	r3, #12
 8002462:	ddb7      	ble.n	80023d4 <calibrate_sensors+0x5c>
    	   if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15) == GPIO_PIN_RESET){
 8002464:	e7a5      	b.n	80023b2 <calibrate_sensors+0x3a>
    		   break;
 8002466:	bf00      	nop
			   }
		   }
	   }

       LED_RGB_2(0);
 8002468:	2000      	movs	r0, #0
 800246a:	f7fe fe39 	bl	80010e0 <LED_RGB_2>

	}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000008 	.word	0x20000008
 800247c:	453b8000 	.word	0x453b8000
 8002480:	20000614 	.word	0x20000614
 8002484:	40020400 	.word	0x40020400
 8002488:	200005f8 	.word	0x200005f8

0800248c <sens_get>:


float sens_get(void){
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
	float Line1_sum = 0.0;
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	607b      	str	r3, [r7, #4]
	float Line2_sum = 0.0;
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	603b      	str	r3, [r7, #0]
//	static const int g1[SENSOR_COUNT] = {1,1,1,1,1,1,1,1,1,1,1,1,1};//L
//	static const int g2[] = {1,1,1,1,1,1};


	for (int i = 0; i < SENSOR_COUNT; i++){
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	e076      	b.n	8002592 <sens_get+0x106>
		float range = Line_max[i] - Line_min[i];
 80024a4:	4a63      	ldr	r2, [pc, #396]	; (8002634 <sens_get+0x1a8>)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	ed93 7a00 	vldr	s14, [r3]
 80024b0:	4a61      	ldr	r2, [pc, #388]	; (8002638 <sens_get+0x1ac>)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	edd3 7a00 	vldr	s15, [r3]
 80024bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c0:	edc7 7a02 	vstr	s15, [r7, #8]
			if(range == 0){
 80024c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80024c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	d102      	bne.n	80024d8 <sens_get+0x4c>
				range = 1;
 80024d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80024d6:	60bb      	str	r3, [r7, #8]
			}
			if(Line_min[i] >=Line_sens[i]){
 80024d8:	4a57      	ldr	r2, [pc, #348]	; (8002638 <sens_get+0x1ac>)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	ed93 7a00 	vldr	s14, [r3]
 80024e4:	4a55      	ldr	r2, [pc, #340]	; (800263c <sens_get+0x1b0>)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ec:	ee07 3a90 	vmov	s15, r3
 80024f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fc:	db0e      	blt.n	800251c <sens_get+0x90>
				Line_sens[i] = Line_min[i];
 80024fe:	4a4e      	ldr	r2, [pc, #312]	; (8002638 <sens_get+0x1ac>)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800250e:	ee17 3a90 	vmov	r3, s15
 8002512:	b299      	uxth	r1, r3
 8002514:	4a49      	ldr	r2, [pc, #292]	; (800263c <sens_get+0x1b0>)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		Line_sum[i] =0.0;
 800251c:	4a48      	ldr	r2, [pc, #288]	; (8002640 <sens_get+0x1b4>)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
		//Line_sum[i] = (Line_sens[i]/ Line_max[i])*1000;
		Line_sum[i]=((Line_sens[i]-Line_min[i] )/range)*1000;
 800252a:	4a44      	ldr	r2, [pc, #272]	; (800263c <sens_get+0x1b0>)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800253a:	4a3f      	ldr	r2, [pc, #252]	; (8002638 <sens_get+0x1ac>)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	edd3 7a00 	vldr	s15, [r3]
 8002546:	ee77 6a67 	vsub.f32	s13, s14, s15
 800254a:	ed97 7a02 	vldr	s14, [r7, #8]
 800254e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002552:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002644 <sens_get+0x1b8>
 8002556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255a:	4a39      	ldr	r2, [pc, #228]	; (8002640 <sens_get+0x1b4>)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	edc3 7a00 	vstr	s15, [r3]
		if(Line_sum[i]>1000)Line_sum[i]=1000;
 8002566:	4a36      	ldr	r2, [pc, #216]	; (8002640 <sens_get+0x1b4>)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002644 <sens_get+0x1b8>
 8002576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257e:	dd05      	ble.n	800258c <sens_get+0x100>
 8002580:	4a2f      	ldr	r2, [pc, #188]	; (8002640 <sens_get+0x1b4>)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	4a2f      	ldr	r2, [pc, #188]	; (8002648 <sens_get+0x1bc>)
 800258a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < SENSOR_COUNT; i++){
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	3301      	adds	r3, #1
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b0c      	cmp	r3, #12
 8002596:	dd85      	ble.n	80024a4 <sens_get+0x18>

	}

		Line1_sum =Line_sum[1]+Line_sum[2]+Line_sum[3]+Line_sum[4]+Line_sum[5];
 8002598:	4b29      	ldr	r3, [pc, #164]	; (8002640 <sens_get+0x1b4>)
 800259a:	ed93 7a01 	vldr	s14, [r3, #4]
 800259e:	4b28      	ldr	r3, [pc, #160]	; (8002640 <sens_get+0x1b4>)
 80025a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80025a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a8:	4b25      	ldr	r3, [pc, #148]	; (8002640 <sens_get+0x1b4>)
 80025aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80025ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025b2:	4b23      	ldr	r3, [pc, #140]	; (8002640 <sens_get+0x1b4>)
 80025b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80025b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025bc:	4b20      	ldr	r3, [pc, #128]	; (8002640 <sens_get+0x1b4>)
 80025be:	edd3 7a05 	vldr	s15, [r3, #20]
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	edc7 7a01 	vstr	s15, [r7, #4]
		Line2_sum =Line_sum[7]+Line_sum[8]+Line_sum[9]+Line_sum[10]+Line_sum[11];
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <sens_get+0x1b4>)
 80025cc:	ed93 7a07 	vldr	s14, [r3, #28]
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <sens_get+0x1b4>)
 80025d2:	edd3 7a08 	vldr	s15, [r3, #32]
 80025d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <sens_get+0x1b4>)
 80025dc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80025e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025e4:	4b16      	ldr	r3, [pc, #88]	; (8002640 <sens_get+0x1b4>)
 80025e6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80025ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ee:	4b14      	ldr	r3, [pc, #80]	; (8002640 <sens_get+0x1b4>)
 80025f0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80025f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f8:	edc7 7a00 	vstr	s15, [r7]


		average_cross = (Line_sum[2] + Line_sum[10])/2;
 80025fc:	4b10      	ldr	r3, [pc, #64]	; (8002640 <sens_get+0x1b4>)
 80025fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <sens_get+0x1b4>)
 8002604:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002608:	ee37 7a27 	vadd.f32	s14, s14, s15
 800260c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002610:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002614:	4b0d      	ldr	r3, [pc, #52]	; (800264c <sens_get+0x1c0>)
 8002616:	edc3 7a00 	vstr	s15, [r3]

//		}
//

	return  Line1_sum - Line2_sum;
 800261a:	ed97 7a01 	vldr	s14, [r7, #4]
 800261e:	edd7 7a00 	vldr	s15, [r7]
 8002622:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002626:	eeb0 0a67 	vmov.f32	s0, s15
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	20000614 	.word	0x20000614
 8002638:	20000008 	.word	0x20000008
 800263c:	200005f8 	.word	0x200005f8
 8002640:	20000648 	.word	0x20000648
 8002644:	447a0000 	.word	0x447a0000
 8002648:	447a0000 	.word	0x447a0000
 800264c:	20000244 	.word	0x20000244

08002650 <calculateEncoderSpeed>:


// int32_t cnt_test; //Max value is 2048

float calculateEncoderSpeed(){
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
	 static bool first_call = true;

	cnt_new_L =  TIM4 -> CNT ; //dL
 8002654:	4b64      	ldr	r3, [pc, #400]	; (80027e8 <calculateEncoderSpeed+0x198>)
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	461a      	mov	r2, r3
 800265a:	4b64      	ldr	r3, [pc, #400]	; (80027ec <calculateEncoderSpeed+0x19c>)
 800265c:	601a      	str	r2, [r3, #0]
	cnt_new_R = TIM3 -> CNT; //dR
 800265e:	4b64      	ldr	r3, [pc, #400]	; (80027f0 <calculateEncoderSpeed+0x1a0>)
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	461a      	mov	r2, r3
 8002664:	4b63      	ldr	r3, [pc, #396]	; (80027f4 <calculateEncoderSpeed+0x1a4>)
 8002666:	601a      	str	r2, [r3, #0]


	 if (first_call) {
 8002668:	4b63      	ldr	r3, [pc, #396]	; (80027f8 <calculateEncoderSpeed+0x1a8>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d015      	beq.n	800269c <calculateEncoderSpeed+0x4c>

	        TIM4->CNT = 32767;
 8002670:	4b5d      	ldr	r3, [pc, #372]	; (80027e8 <calculateEncoderSpeed+0x198>)
 8002672:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002676:	625a      	str	r2, [r3, #36]	; 0x24
	        TIM3->CNT = 32767;
 8002678:	4b5d      	ldr	r3, [pc, #372]	; (80027f0 <calculateEncoderSpeed+0x1a0>)
 800267a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800267e:	625a      	str	r2, [r3, #36]	; 0x24

	        // 次回のために old も 32767 に同期
	        cnt_old_L = 32767;
 8002680:	4b5e      	ldr	r3, [pc, #376]	; (80027fc <calculateEncoderSpeed+0x1ac>)
 8002682:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002686:	601a      	str	r2, [r3, #0]
	        cnt_old_R = 32767;
 8002688:	4b5d      	ldr	r3, [pc, #372]	; (8002800 <calculateEncoderSpeed+0x1b0>)
 800268a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800268e:	601a      	str	r2, [r3, #0]
//	    	cnt_old_L = cnt_new_L;
//	        cnt_old_R = cnt_new_R;

	        first_call = false;
 8002690:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <calculateEncoderSpeed+0x1a8>)
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
	        // 初回は計算せず return 0
	        return 0.0f;
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	e09c      	b.n	80027d6 <calculateEncoderSpeed+0x186>
	    }


	 TIM4 -> CNT=32767;
 800269c:	4b52      	ldr	r3, [pc, #328]	; (80027e8 <calculateEncoderSpeed+0x198>)
 800269e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM3 -> CNT=32767;
 80026a4:	4b52      	ldr	r3, [pc, #328]	; (80027f0 <calculateEncoderSpeed+0x1a0>)
 80026a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80026aa:	625a      	str	r2, [r3, #36]	; 0x24


//	 test_cnt_L =TIM4 -> CNT ;
//	 test_cnt_R =TIM3 -> CNT;

	cnt_L = -(cnt_new_L - 32767);
 80026ac:	4b4f      	ldr	r3, [pc, #316]	; (80027ec <calculateEncoderSpeed+0x19c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 80026b4:	337f      	adds	r3, #127	; 0x7f
 80026b6:	4a53      	ldr	r2, [pc, #332]	; (8002804 <calculateEncoderSpeed+0x1b4>)
 80026b8:	6013      	str	r3, [r2, #0]
	cnt_R = -(cnt_new_R - 32767);
 80026ba:	4b4e      	ldr	r3, [pc, #312]	; (80027f4 <calculateEncoderSpeed+0x1a4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 80026c2:	337f      	adds	r3, #127	; 0x7f
 80026c4:	4a50      	ldr	r2, [pc, #320]	; (8002808 <calculateEncoderSpeed+0x1b8>)
 80026c6:	6013      	str	r3, [r2, #0]





	distance_1ms = DISTANCE_PER_CNT * (cnt_L + cnt_R) / 2;
 80026c8:	4b4e      	ldr	r3, [pc, #312]	; (8002804 <calculateEncoderSpeed+0x1b4>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b4e      	ldr	r3, [pc, #312]	; (8002808 <calculateEncoderSpeed+0x1b8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ff26 	bl	8000524 <__aeabi_i2d>
 80026d8:	a341      	add	r3, pc, #260	; (adr r3, 80027e0 <calculateEncoderSpeed+0x190>)
 80026da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026de:	f7fd ff8b 	bl	80005f8 <__aeabi_dmul>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026f2:	f7fe f8ab 	bl	800084c <__aeabi_ddiv>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7fe fa73 	bl	8000be8 <__aeabi_d2f>
 8002702:	4603      	mov	r3, r0
 8002704:	4a41      	ldr	r2, [pc, #260]	; (800280c <calculateEncoderSpeed+0x1bc>)
 8002706:	6013      	str	r3, [r2, #0]
//	accumulation += distance_1ms;
	distance_1ms_L = DISTANCE_PER_CNT * cnt_L;
 8002708:	4b3e      	ldr	r3, [pc, #248]	; (8002804 <calculateEncoderSpeed+0x1b4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ff09 	bl	8000524 <__aeabi_i2d>
 8002712:	a333      	add	r3, pc, #204	; (adr r3, 80027e0 <calculateEncoderSpeed+0x190>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fd ff6e 	bl	80005f8 <__aeabi_dmul>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	f7fe fa60 	bl	8000be8 <__aeabi_d2f>
 8002728:	4603      	mov	r3, r0
 800272a:	4a39      	ldr	r2, [pc, #228]	; (8002810 <calculateEncoderSpeed+0x1c0>)
 800272c:	6013      	str	r3, [r2, #0]
	distance_1ms_R = DISTANCE_PER_CNT * cnt_R;
 800272e:	4b36      	ldr	r3, [pc, #216]	; (8002808 <calculateEncoderSpeed+0x1b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd fef6 	bl	8000524 <__aeabi_i2d>
 8002738:	a329      	add	r3, pc, #164	; (adr r3, 80027e0 <calculateEncoderSpeed+0x190>)
 800273a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273e:	f7fd ff5b 	bl	80005f8 <__aeabi_dmul>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	f7fe fa4d 	bl	8000be8 <__aeabi_d2f>
 800274e:	4603      	mov	r3, r0
 8002750:	4a30      	ldr	r2, [pc, #192]	; (8002814 <calculateEncoderSpeed+0x1c4>)
 8002752:	6013      	str	r3, [r2, #0]



	if(average_cross <250){
 8002754:	4b30      	ldr	r3, [pc, #192]	; (8002818 <calculateEncoderSpeed+0x1c8>)
 8002756:	edd3 7a00 	vldr	s15, [r3]
 800275a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800281c <calculateEncoderSpeed+0x1cc>
 800275e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002766:	d509      	bpl.n	800277c <calculateEncoderSpeed+0x12c>
		 cross_flag = 1;
 8002768:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <calculateEncoderSpeed+0x1d0>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]
		 accumulation = 0;
 800276e:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <calculateEncoderSpeed+0x1d4>)
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
		 LED_RGB(1);
 8002776:	2001      	movs	r0, #1
 8002778:	f7fe fc08 	bl	8000f8c <LED_RGB>
	}

	if(cross_flag == 1){
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <calculateEncoderSpeed+0x1d0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d11e      	bne.n	80027c2 <calculateEncoderSpeed+0x172>
//		 LED_RGB(1);
		accumulation +=distance_1ms;
 8002784:	4b27      	ldr	r3, [pc, #156]	; (8002824 <calculateEncoderSpeed+0x1d4>)
 8002786:	ed93 7a00 	vldr	s14, [r3]
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <calculateEncoderSpeed+0x1bc>)
 800278c:	edd3 7a00 	vldr	s15, [r3]
 8002790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002794:	4b23      	ldr	r3, [pc, #140]	; (8002824 <calculateEncoderSpeed+0x1d4>)
 8002796:	edc3 7a00 	vstr	s15, [r3]
		if(accumulation >800){
 800279a:	4b22      	ldr	r3, [pc, #136]	; (8002824 <calculateEncoderSpeed+0x1d4>)
 800279c:	edd3 7a00 	vldr	s15, [r3]
 80027a0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002828 <calculateEncoderSpeed+0x1d8>
 80027a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ac:	dd09      	ble.n	80027c2 <calculateEncoderSpeed+0x172>
			cross_flag = 0;
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <calculateEncoderSpeed+0x1d0>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
			accumulation = 0;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <calculateEncoderSpeed+0x1d4>)
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
			LED_RGB(0);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7fe fbe5 	bl	8000f8c <LED_RGB>
	}else{
	}



	cnt_old_L = cnt_new_L;
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <calculateEncoderSpeed+0x19c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a0d      	ldr	r2, [pc, #52]	; (80027fc <calculateEncoderSpeed+0x1ac>)
 80027c8:	6013      	str	r3, [r2, #0]
    cnt_old_R = cnt_new_R;
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <calculateEncoderSpeed+0x1a4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <calculateEncoderSpeed+0x1b0>)
 80027d0:	6013      	str	r3, [r2, #0]


    return distance_1ms;
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <calculateEncoderSpeed+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
}
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eeb0 0a67 	vmov.f32	s0, s15
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	4317cb34 	.word	0x4317cb34
 80027e4:	3f7ba561 	.word	0x3f7ba561
 80027e8:	40000800 	.word	0x40000800
 80027ec:	2000068c 	.word	0x2000068c
 80027f0:	40000400 	.word	0x40000400
 80027f4:	20000690 	.word	0x20000690
 80027f8:	2000003c 	.word	0x2000003c
 80027fc:	200005e8 	.word	0x200005e8
 8002800:	200005ec 	.word	0x200005ec
 8002804:	20000694 	.word	0x20000694
 8002808:	20000698 	.word	0x20000698
 800280c:	200005dc 	.word	0x200005dc
 8002810:	200005e0 	.word	0x200005e0
 8002814:	200005e4 	.word	0x200005e4
 8002818:	20000244 	.word	0x20000244
 800281c:	437a0000 	.word	0x437a0000
 8002820:	20000688 	.word	0x20000688
 8002824:	200005d8 	.word	0x200005d8
 8002828:	44480000 	.word	0x44480000
 800282c:	00000000 	.word	0x00000000

08002830 <EncoderSpeed>:




float EncoderSpeed() {
 8002830:	b5b0      	push	{r4, r5, r7, lr}
 8002832:	ed2d 8b02 	vpush	{d8}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0


	float Sp = 800;
 800283a:	4b43      	ldr	r3, [pc, #268]	; (8002948 <EncoderSpeed+0x118>)
 800283c:	613b      	str	r3, [r7, #16]
	float Si = 8000;
 800283e:	4b43      	ldr	r3, [pc, #268]	; (800294c <EncoderSpeed+0x11c>)
 8002840:	60fb      	str	r3, [r7, #12]

	float adjusted_speed = target_speed - calculateEncoderSpeed();
 8002842:	4b43      	ldr	r3, [pc, #268]	; (8002950 <EncoderSpeed+0x120>)
 8002844:	ed93 8a00 	vldr	s16, [r3]
 8002848:	f7ff ff02 	bl	8002650 <calculateEncoderSpeed>
 800284c:	eef0 7a40 	vmov.f32	s15, s0
 8002850:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002854:	edc7 7a02 	vstr	s15, [r7, #8]

	static float integral= 0;
	integral += adjusted_speed * dt;
 8002858:	4b3e      	ldr	r3, [pc, #248]	; (8002954 <EncoderSpeed+0x124>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fe73 	bl	8000548 <__aeabi_f2d>
 8002862:	4604      	mov	r4, r0
 8002864:	460d      	mov	r5, r1
 8002866:	68b8      	ldr	r0, [r7, #8]
 8002868:	f7fd fe6e 	bl	8000548 <__aeabi_f2d>
 800286c:	a334      	add	r3, pc, #208	; (adr r3, 8002940 <EncoderSpeed+0x110>)
 800286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002872:	f7fd fec1 	bl	80005f8 <__aeabi_dmul>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4620      	mov	r0, r4
 800287c:	4629      	mov	r1, r5
 800287e:	f7fd fd05 	bl	800028c <__adddf3>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f7fe f9ad 	bl	8000be8 <__aeabi_d2f>
 800288e:	4603      	mov	r3, r0
 8002890:	4a30      	ldr	r2, [pc, #192]	; (8002954 <EncoderSpeed+0x124>)
 8002892:	6013      	str	r3, [r2, #0]



	//P
	float speed_P_gain = Sp * adjusted_speed;
 8002894:	ed97 7a04 	vldr	s14, [r7, #16]
 8002898:	edd7 7a02 	vldr	s15, [r7, #8]
 800289c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a0:	edc7 7a01 	vstr	s15, [r7, #4]
	//I
    float speed_I_gain = Si * integral;
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <EncoderSpeed+0x124>)
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80028ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b2:	edc7 7a00 	vstr	s15, [r7]



	#define I_LIMIT 1000
	if (integral > I_LIMIT) integral= I_LIMIT;
 80028b6:	4b27      	ldr	r3, [pc, #156]	; (8002954 <EncoderSpeed+0x124>)
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002958 <EncoderSpeed+0x128>
 80028c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c8:	dd02      	ble.n	80028d0 <EncoderSpeed+0xa0>
 80028ca:	4b22      	ldr	r3, [pc, #136]	; (8002954 <EncoderSpeed+0x124>)
 80028cc:	4a23      	ldr	r2, [pc, #140]	; (800295c <EncoderSpeed+0x12c>)
 80028ce:	601a      	str	r2, [r3, #0]
	if (integral < -I_LIMIT) integral = -I_LIMIT;
 80028d0:	4b20      	ldr	r3, [pc, #128]	; (8002954 <EncoderSpeed+0x124>)
 80028d2:	edd3 7a00 	vldr	s15, [r3]
 80028d6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002960 <EncoderSpeed+0x130>
 80028da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e2:	d502      	bpl.n	80028ea <EncoderSpeed+0xba>
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <EncoderSpeed+0x124>)
 80028e6:	4a1f      	ldr	r2, [pc, #124]	; (8002964 <EncoderSpeed+0x134>)
 80028e8:	601a      	str	r2, [r3, #0]


	float duty = speed_P_gain + speed_I_gain;
 80028ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80028ee:	edd7 7a00 	vldr	s15, [r7]
 80028f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f6:	edc7 7a05 	vstr	s15, [r7, #20]

    if (duty > 250) duty = 250;
 80028fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80028fe:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002968 <EncoderSpeed+0x138>
 8002902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	dd01      	ble.n	8002910 <EncoderSpeed+0xe0>
 800290c:	4b17      	ldr	r3, [pc, #92]	; (800296c <EncoderSpeed+0x13c>)
 800290e:	617b      	str	r3, [r7, #20]
    if (duty < -250) duty = -250;
 8002910:	edd7 7a05 	vldr	s15, [r7, #20]
 8002914:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002970 <EncoderSpeed+0x140>
 8002918:	eef4 7ac7 	vcmpe.f32	s15, s14
 800291c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002920:	d501      	bpl.n	8002926 <EncoderSpeed+0xf6>
 8002922:	4b14      	ldr	r3, [pc, #80]	; (8002974 <EncoderSpeed+0x144>)
 8002924:	617b      	str	r3, [r7, #20]


    previous_speed_error = adjusted_speed;
 8002926:	4a14      	ldr	r2, [pc, #80]	; (8002978 <EncoderSpeed+0x148>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6013      	str	r3, [r2, #0]




    // モータ
    return duty;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	ee07 3a90 	vmov	s15, r3
}
 8002932:	eeb0 0a67 	vmov.f32	s0, s15
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	ecbd 8b02 	vpop	{d8}
 800293e:	bdb0      	pop	{r4, r5, r7, pc}
 8002940:	d2f1a9fc 	.word	0xd2f1a9fc
 8002944:	3f50624d 	.word	0x3f50624d
 8002948:	44480000 	.word	0x44480000
 800294c:	45fa0000 	.word	0x45fa0000
 8002950:	20000684 	.word	0x20000684
 8002954:	20016630 	.word	0x20016630
 8002958:	447a0000 	.word	0x447a0000
 800295c:	447a0000 	.word	0x447a0000
 8002960:	c47a0000 	.word	0xc47a0000
 8002964:	c47a0000 	.word	0xc47a0000
 8002968:	437a0000 	.word	0x437a0000
 800296c:	437a0000 	.word	0x437a0000
 8002970:	c37a0000 	.word	0xc37a0000
 8002974:	c37a0000 	.word	0xc37a0000
 8002978:	20000680 	.word	0x20000680
 800297c:	00000000 	.word	0x00000000

08002980 <SpeedControl_NoENC>:



void SpeedControl_NoENC() {
 8002980:	b5b0      	push	{r4, r5, r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af00      	add	r7, sp, #0

//		readSens2();

	     float error = sens_get();
 8002986:	f7ff fd81 	bl	800248c <sens_get>
 800298a:	ed87 0a07 	vstr	s0, [r7, #28]
	     // PD
	     float derivative = (error - previous_error) / dt;
 800298e:	4b80      	ldr	r3, [pc, #512]	; (8002b90 <SpeedControl_NoENC+0x210>)
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	ed97 7a07 	vldr	s14, [r7, #28]
 8002998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299c:	ee17 0a90 	vmov	r0, s15
 80029a0:	f7fd fdd2 	bl	8000548 <__aeabi_f2d>
 80029a4:	a378      	add	r3, pc, #480	; (adr r3, 8002b88 <SpeedControl_NoENC+0x208>)
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f7fd ff4f 	bl	800084c <__aeabi_ddiv>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4610      	mov	r0, r2
 80029b4:	4619      	mov	r1, r3
 80029b6:	f7fe f917 	bl	8000be8 <__aeabi_d2f>
 80029ba:	4603      	mov	r3, r0
 80029bc:	61bb      	str	r3, [r7, #24]

	     float P =Kp * error;
 80029be:	4b75      	ldr	r3, [pc, #468]	; (8002b94 <SpeedControl_NoENC+0x214>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80029c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029cc:	edc7 7a05 	vstr	s15, [r7, #20]
	     float D =Kd * derivative;
 80029d0:	4b71      	ldr	r3, [pc, #452]	; (8002b98 <SpeedControl_NoENC+0x218>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	ed97 7a06 	vldr	s14, [r7, #24]
 80029da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029de:	edc7 7a04 	vstr	s15, [r7, #16]

	     float output = P + D;
 80029e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80029e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80029ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ee:	edc7 7a03 	vstr	s15, [r7, #12]
	     previous_error = error;
 80029f2:	4a67      	ldr	r2, [pc, #412]	; (8002b90 <SpeedControl_NoENC+0x210>)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	6013      	str	r3, [r2, #0]

	     float sp =EncoderSpeed();
 80029f8:	f7ff ff1a 	bl	8002830 <EncoderSpeed>
 80029fc:	ed87 0a02 	vstr	s0, [r7, #8]

	     float motor_L = output + sp;
 8002a00:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a04:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	     float motor_R = -output + sp;
 8002a10:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a14:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28


	     float max_output = 499;
 8002a20:	4b5e      	ldr	r3, [pc, #376]	; (8002b9c <SpeedControl_NoENC+0x21c>)
 8002a22:	607b      	str	r3, [r7, #4]


	     float overflow_L = 0;
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
	     float overflow_R = 0;
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	623b      	str	r3, [r7, #32]

	     if (motor_L > max_output) {
 8002a30:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002a34:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a40:	dd0a      	ble.n	8002a58 <SpeedControl_NoENC+0xd8>
	         overflow_L = motor_L - max_output;
 8002a42:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002a46:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a4e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	         motor_L = max_output;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a56:	e018      	b.n	8002a8a <SpeedControl_NoENC+0x10a>
	     } else if (motor_L < -max_output) {
 8002a58:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a5c:	eef1 7a67 	vneg.f32	s15, s15
 8002a60:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002a64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6c:	d50d      	bpl.n	8002a8a <SpeedControl_NoENC+0x10a>
	         overflow_L = motor_L - max_output;
 8002a6e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002a72:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	         motor_L = -max_output;
 8002a7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a82:	eef1 7a67 	vneg.f32	s15, s15
 8002a86:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	     }

	     if (motor_R > max_output) {
 8002a8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002a8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	dd0a      	ble.n	8002ab2 <SpeedControl_NoENC+0x132>
	         overflow_R = motor_R - max_output;
 8002a9c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002aa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa8:	edc7 7a08 	vstr	s15, [r7, #32]
	         motor_R = max_output;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab0:	e018      	b.n	8002ae4 <SpeedControl_NoENC+0x164>
	     } else if (motor_R < -max_output) {
 8002ab2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ab6:	eef1 7a67 	vneg.f32	s15, s15
 8002aba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac6:	d50d      	bpl.n	8002ae4 <SpeedControl_NoENC+0x164>
	         overflow_R = motor_R - max_output;
 8002ac8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002acc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad4:	edc7 7a08 	vstr	s15, [r7, #32]
	         motor_R = -max_output;
 8002ad8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002adc:	eef1 7a67 	vneg.f32	s15, s15
 8002ae0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	     }



	     if (overflow_L > 0) {
 8002ae4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ae8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af0:	dd07      	ble.n	8002b02 <SpeedControl_NoENC+0x182>
	         motor_R -= overflow_L;
 8002af2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002af6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002afe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	     }
	     if (overflow_L < 0) {
 8002b02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0e:	d507      	bpl.n	8002b20 <SpeedControl_NoENC+0x1a0>
	         motor_R += overflow_L;
 8002b10:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002b14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b1c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	     }
	     if (overflow_R > 0) {
 8002b20:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2c:	dd07      	ble.n	8002b3e <SpeedControl_NoENC+0x1be>
	         motor_L -= overflow_R;
 8002b2e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002b32:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b3a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	     }
	     if (overflow_R < 0) {
 8002b3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4a:	d507      	bpl.n	8002b5c <SpeedControl_NoENC+0x1dc>
	         motor_L += overflow_R;
 8002b4c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002b50:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b58:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	     }


	     // モータ
	     ControlMotor(motor_L, motor_R);
 8002b5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b5e:	f7fd fcf3 	bl	8000548 <__aeabi_f2d>
 8002b62:	4604      	mov	r4, r0
 8002b64:	460d      	mov	r5, r1
 8002b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b68:	f7fd fcee 	bl	8000548 <__aeabi_f2d>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	ec43 2b11 	vmov	d1, r2, r3
 8002b74:	ec45 4b10 	vmov	d0, r4, r5
 8002b78:	f7fe fd48 	bl	800160c <ControlMotor>
}
 8002b7c:	bf00      	nop
 8002b7e:	3730      	adds	r7, #48	; 0x30
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bdb0      	pop	{r4, r5, r7, pc}
 8002b84:	f3af 8000 	nop.w
 8002b88:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b8c:	3f50624d 	.word	0x3f50624d
 8002b90:	2000067c 	.word	0x2000067c
 8002b94:	20000000 	.word	0x20000000
 8002b98:	20000004 	.word	0x20000004
 8002b9c:	43f98000 	.word	0x43f98000

08002ba0 <VelocityPlan>:


uint16_t record_index = 0;
volatile uint8_t marker_flag = 0;

void VelocityPlan(){
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0

	if (record_index < MAX_RECORDS) {
 8002ba4:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <VelocityPlan+0x5c>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	f242 720f 	movw	r2, #9999	; 0x270f
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d820      	bhi.n	8002bf2 <VelocityPlan+0x52>
	        VP_L[record_index] = cnt_L;
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <VelocityPlan+0x5c>)
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <VelocityPlan+0x60>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <VelocityPlan+0x64>)
 8002bbc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	        VP_R[record_index] = cnt_R;
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <VelocityPlan+0x5c>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <VelocityPlan+0x68>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <VelocityPlan+0x6c>)
 8002bcc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	        VP_S[record_index] = marker_flag;
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <VelocityPlan+0x5c>)
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <VelocityPlan+0x70>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	b2d9      	uxtb	r1, r3
 8002bdc:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <VelocityPlan+0x74>)
 8002bde:	5499      	strb	r1, [r3, r2]
	        record_index++;
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <VelocityPlan+0x5c>)
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <VelocityPlan+0x5c>)
 8002bea:	801a      	strh	r2, [r3, #0]
	        marker_flag = 0;
 8002bec:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <VelocityPlan+0x70>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
	    }
	}
 8002bf2:	bf00      	nop
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	2001662c 	.word	0x2001662c
 8002c00:	20000694 	.word	0x20000694
 8002c04:	2000069c 	.word	0x2000069c
 8002c08:	20000698 	.word	0x20000698
 8002c0c:	2000a2dc 	.word	0x2000a2dc
 8002c10:	2001662e 	.word	0x2001662e
 8002c14:	20013f1c 	.word	0x20013f1c

08002c18 <PrintVelocityData>:

void PrintVelocityData() {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
    printf("=== Velocity Data ===\r\n");
 8002c1e:	4810      	ldr	r0, [pc, #64]	; (8002c60 <PrintVelocityData+0x48>)
 8002c20:	f004 ff9e 	bl	8007b60 <puts>
    for (uint16_t i = 0; i < MAX_RECORDS; i++) {
 8002c24:	2300      	movs	r3, #0
 8002c26:	80fb      	strh	r3, [r7, #6]
 8002c28:	e010      	b.n	8002c4c <PrintVelocityData+0x34>

//        printf("%ld, %ld\r\n", VP_L[i], VP_R[i]);
    	printf("%ld, %ld, %d\r\n", VP_L[i], VP_R[i], VP_S[i]);
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <PrintVelocityData+0x4c>)
 8002c2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	4a0c      	ldr	r2, [pc, #48]	; (8002c68 <PrintVelocityData+0x50>)
 8002c36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	480b      	ldr	r0, [pc, #44]	; (8002c6c <PrintVelocityData+0x54>)
 8002c3e:	5cc3      	ldrb	r3, [r0, r3]
 8002c40:	480b      	ldr	r0, [pc, #44]	; (8002c70 <PrintVelocityData+0x58>)
 8002c42:	f004 ff07 	bl	8007a54 <iprintf>
    for (uint16_t i = 0; i < MAX_RECORDS; i++) {
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	80fb      	strh	r3, [r7, #6]
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d9e9      	bls.n	8002c2a <PrintVelocityData+0x12>


    }
}
 8002c56:	bf00      	nop
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	08009ce0 	.word	0x08009ce0
 8002c64:	2000069c 	.word	0x2000069c
 8002c68:	2000a2dc 	.word	0x2000a2dc
 8002c6c:	20013f1c 	.word	0x20013f1c
 8002c70:	08009cf8 	.word	0x08009cf8

08002c74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c88:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c92:	607b      	str	r3, [r7, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800

08002cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08c      	sub	sp, #48	; 0x30
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 031c 	add.w	r3, r7, #28
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a49      	ldr	r2, [pc, #292]	; (8002e08 <HAL_ADC_MspInit+0x144>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	f040 808c 	bne.w	8002e00 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <HAL_ADC_MspInit+0x148>)
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	4a46      	ldr	r2, [pc, #280]	; (8002e0c <HAL_ADC_MspInit+0x148>)
 8002cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf6:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf8:	4b44      	ldr	r3, [pc, #272]	; (8002e0c <HAL_ADC_MspInit+0x148>)
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	4b40      	ldr	r3, [pc, #256]	; (8002e0c <HAL_ADC_MspInit+0x148>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4a3f      	ldr	r2, [pc, #252]	; (8002e0c <HAL_ADC_MspInit+0x148>)
 8002d0e:	f043 0304 	orr.w	r3, r3, #4
 8002d12:	6313      	str	r3, [r2, #48]	; 0x30
 8002d14:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <HAL_ADC_MspInit+0x148>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	4b39      	ldr	r3, [pc, #228]	; (8002e0c <HAL_ADC_MspInit+0x148>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	4a38      	ldr	r2, [pc, #224]	; (8002e0c <HAL_ADC_MspInit+0x148>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d30:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_ADC_MspInit+0x148>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <HAL_ADC_MspInit+0x148>)
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <HAL_ADC_MspInit+0x148>)
 8002d46:	f043 0302 	orr.w	r3, r3, #2
 8002d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4c:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <HAL_ADC_MspInit+0x148>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LINE_Sens13_ADC1_in11_Pin|LINE_Sens12_ADC1_in12_Pin|LINE_Sens11_ADC1_in13_Pin|LINE_Sens4_ADC1_in14_Pin
 8002d58:	233e      	movs	r3, #62	; 0x3e
 8002d5a:	61fb      	str	r3, [r7, #28]
                          |LINE_Sens3_ADC1_in15_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d64:	f107 031c 	add.w	r3, r7, #28
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4829      	ldr	r0, [pc, #164]	; (8002e10 <HAL_ADC_MspInit+0x14c>)
 8002d6c:	f001 fd30 	bl	80047d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LINE_Sens10_ADC1_in0_Pin|LINE_Sens9_ADC1_in1_Pin|LINE_Sens8_ADC1_in2_Pin|LINE_Sens7_ADC1_in3_Pin
 8002d70:	233f      	movs	r3, #63	; 0x3f
 8002d72:	61fb      	str	r3, [r7, #28]
                          |LINE_Sens6_ADC1_in4_Pin|LINE_Sens5_ADC1_in5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d74:	2303      	movs	r3, #3
 8002d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7c:	f107 031c 	add.w	r3, r7, #28
 8002d80:	4619      	mov	r1, r3
 8002d82:	4824      	ldr	r0, [pc, #144]	; (8002e14 <HAL_ADC_MspInit+0x150>)
 8002d84:	f001 fd24 	bl	80047d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LINE_Sens2_ADC1_in8_Pin|LINE_Sens1_ADC1_in9_Pin;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d94:	f107 031c 	add.w	r3, r7, #28
 8002d98:	4619      	mov	r1, r3
 8002d9a:	481f      	ldr	r0, [pc, #124]	; (8002e18 <HAL_ADC_MspInit+0x154>)
 8002d9c:	f001 fd18 	bl	80047d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002da0:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <HAL_ADC_MspInit+0x158>)
 8002da2:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <HAL_ADC_MspInit+0x15c>)
 8002da4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002da6:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <HAL_ADC_MspInit+0x158>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <HAL_ADC_MspInit+0x158>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002db2:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <HAL_ADC_MspInit+0x158>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002db8:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <HAL_ADC_MspInit+0x158>)
 8002dba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dbe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dc0:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <HAL_ADC_MspInit+0x158>)
 8002dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dc6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <HAL_ADC_MspInit+0x158>)
 8002dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002dd0:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <HAL_ADC_MspInit+0x158>)
 8002dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dd6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002dd8:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <HAL_ADC_MspInit+0x158>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dde:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <HAL_ADC_MspInit+0x158>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002de4:	480d      	ldr	r0, [pc, #52]	; (8002e1c <HAL_ADC_MspInit+0x158>)
 8002de6:	f001 f983 	bl	80040f0 <HAL_DMA_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002df0:	f7ff fa96 	bl	8002320 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a09      	ldr	r2, [pc, #36]	; (8002e1c <HAL_ADC_MspInit+0x158>)
 8002df8:	639a      	str	r2, [r3, #56]	; 0x38
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <HAL_ADC_MspInit+0x158>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e00:	bf00      	nop
 8002e02:	3730      	adds	r7, #48	; 0x30
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40012000 	.word	0x40012000
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40020800 	.word	0x40020800
 8002e14:	40020000 	.word	0x40020000
 8002e18:	40020400 	.word	0x40020400
 8002e1c:	20000290 	.word	0x20000290
 8002e20:	40026410 	.word	0x40026410

08002e24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	; 0x28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a19      	ldr	r2, [pc, #100]	; (8002ea8 <HAL_I2C_MspInit+0x84>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d12c      	bne.n	8002ea0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_I2C_MspInit+0x88>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a17      	ldr	r2, [pc, #92]	; (8002eac <HAL_I2C_MspInit+0x88>)
 8002e50:	f043 0302 	orr.w	r3, r3, #2
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <HAL_I2C_MspInit+0x88>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_3_I2C1_SCL_Pin|LCD2_I2C1_SDA_Pin;
 8002e62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e68:	2312      	movs	r3, #18
 8002e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e70:	2303      	movs	r3, #3
 8002e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e74:	2304      	movs	r3, #4
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	480c      	ldr	r0, [pc, #48]	; (8002eb0 <HAL_I2C_MspInit+0x8c>)
 8002e80:	f001 fca6 	bl	80047d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <HAL_I2C_MspInit+0x88>)
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	4a07      	ldr	r2, [pc, #28]	; (8002eac <HAL_I2C_MspInit+0x88>)
 8002e8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e92:	6413      	str	r3, [r2, #64]	; 0x40
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_I2C_MspInit+0x88>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ea0:	bf00      	nop
 8002ea2:	3728      	adds	r7, #40	; 0x28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40005400 	.word	0x40005400
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40020400 	.word	0x40020400

08002eb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_SPI_MspInit+0x84>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d12c      	bne.n	8002f30 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <HAL_SPI_MspInit+0x88>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <HAL_SPI_MspInit+0x88>)
 8002ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee6:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <HAL_SPI_MspInit+0x88>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <HAL_SPI_MspInit+0x88>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a10      	ldr	r2, [pc, #64]	; (8002f3c <HAL_SPI_MspInit+0x88>)
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	6313      	str	r3, [r2, #48]	; 0x30
 8002f02:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <HAL_SPI_MspInit+0x88>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002f0e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f14:	2302      	movs	r3, #2
 8002f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f20:	2306      	movs	r3, #6
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4805      	ldr	r0, [pc, #20]	; (8002f40 <HAL_SPI_MspInit+0x8c>)
 8002f2c:	f001 fc50 	bl	80047d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002f30:	bf00      	nop
 8002f32:	3728      	adds	r7, #40	; 0x28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40003c00 	.word	0x40003c00
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40020800 	.word	0x40020800

08002f44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <HAL_TIM_PWM_MspInit+0x8c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10e      	bne.n	8002f74 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <HAL_TIM_PWM_MspInit+0x90>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <HAL_TIM_PWM_MspInit+0x90>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6453      	str	r3, [r2, #68]	; 0x44
 8002f66:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_TIM_PWM_MspInit+0x90>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f72:	e026      	b.n	8002fc2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7c:	d10e      	bne.n	8002f9c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_TIM_PWM_MspInit+0x90>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <HAL_TIM_PWM_MspInit+0x90>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_TIM_PWM_MspInit+0x90>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	693b      	ldr	r3, [r7, #16]
}
 8002f9a:	e012      	b.n	8002fc2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <HAL_TIM_PWM_MspInit+0x94>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10d      	bne.n	8002fc2 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_TIM_PWM_MspInit+0x90>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	4a09      	ldr	r2, [pc, #36]	; (8002fd4 <HAL_TIM_PWM_MspInit+0x90>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb6:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <HAL_TIM_PWM_MspInit+0x90>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40010400 	.word	0x40010400

08002fdc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08c      	sub	sp, #48	; 0x30
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	f107 031c 	add.w	r3, r7, #28
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a32      	ldr	r2, [pc, #200]	; (80030c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d12c      	bne.n	8003058 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a30      	ldr	r2, [pc, #192]	; (80030c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b2e      	ldr	r3, [pc, #184]	; (80030c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	4a29      	ldr	r2, [pc, #164]	; (80030c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6313      	str	r3, [r2, #48]	; 0x30
 800302a:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <HAL_TIM_Encoder_MspInit+0xec>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1_6_TIM3_CH1_Pin|ENC1_8_TIM3_CH2_Pin;
 8003036:	23c0      	movs	r3, #192	; 0xc0
 8003038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	2302      	movs	r3, #2
 800303c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	2300      	movs	r3, #0
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003046:	2302      	movs	r3, #2
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304a:	f107 031c 	add.w	r3, r7, #28
 800304e:	4619      	mov	r1, r3
 8003050:	481e      	ldr	r0, [pc, #120]	; (80030cc <HAL_TIM_Encoder_MspInit+0xf0>)
 8003052:	f001 fbbd 	bl	80047d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003056:	e030      	b.n	80030ba <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d12b      	bne.n	80030ba <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <HAL_TIM_Encoder_MspInit+0xec>)
 800306c:	f043 0304 	orr.w	r3, r3, #4
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
 8003072:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a10      	ldr	r2, [pc, #64]	; (80030c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2_8_TIM4_CH1_Pin|ENC2_6_TIM4_CH2_Pin;
 800309a:	23c0      	movs	r3, #192	; 0xc0
 800309c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	2300      	movs	r3, #0
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030aa:	2302      	movs	r3, #2
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ae:	f107 031c 	add.w	r3, r7, #28
 80030b2:	4619      	mov	r1, r3
 80030b4:	4807      	ldr	r0, [pc, #28]	; (80030d4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80030b6:	f001 fb8b 	bl	80047d0 <HAL_GPIO_Init>
}
 80030ba:	bf00      	nop
 80030bc:	3730      	adds	r7, #48	; 0x30
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40020000 	.word	0x40020000
 80030d0:	40000800 	.word	0x40000800
 80030d4:	40020400 	.word	0x40020400

080030d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1c      	ldr	r2, [pc, #112]	; (8003158 <HAL_TIM_Base_MspInit+0x80>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d116      	bne.n	8003118 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	4b1b      	ldr	r3, [pc, #108]	; (800315c <HAL_TIM_Base_MspInit+0x84>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a1a      	ldr	r2, [pc, #104]	; (800315c <HAL_TIM_Base_MspInit+0x84>)
 80030f4:	f043 0310 	orr.w	r3, r3, #16
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b18      	ldr	r3, [pc, #96]	; (800315c <HAL_TIM_Base_MspInit+0x84>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003106:	2200      	movs	r2, #0
 8003108:	2100      	movs	r1, #0
 800310a:	2036      	movs	r0, #54	; 0x36
 800310c:	f000 ffb9 	bl	8004082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003110:	2036      	movs	r0, #54	; 0x36
 8003112:	f000 ffd2 	bl	80040ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003116:	e01a      	b.n	800314e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a10      	ldr	r2, [pc, #64]	; (8003160 <HAL_TIM_Base_MspInit+0x88>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d115      	bne.n	800314e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_TIM_Base_MspInit+0x84>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4a0c      	ldr	r2, [pc, #48]	; (800315c <HAL_TIM_Base_MspInit+0x84>)
 800312c:	f043 0320 	orr.w	r3, r3, #32
 8003130:	6413      	str	r3, [r2, #64]	; 0x40
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_TIM_Base_MspInit+0x84>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800313e:	2200      	movs	r2, #0
 8003140:	2100      	movs	r1, #0
 8003142:	2037      	movs	r0, #55	; 0x37
 8003144:	f000 ff9d 	bl	8004082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003148:	2037      	movs	r0, #55	; 0x37
 800314a:	f000 ffb6 	bl	80040ba <HAL_NVIC_EnableIRQ>
}
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40001000 	.word	0x40001000
 800315c:	40023800 	.word	0x40023800
 8003160:	40001400 	.word	0x40001400

08003164 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	; 0x28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a37      	ldr	r2, [pc, #220]	; (8003260 <HAL_TIM_MspPostInit+0xfc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d11f      	bne.n	80031c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	4b36      	ldr	r3, [pc, #216]	; (8003264 <HAL_TIM_MspPostInit+0x100>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	4a35      	ldr	r2, [pc, #212]	; (8003264 <HAL_TIM_MspPostInit+0x100>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6313      	str	r3, [r2, #48]	; 0x30
 8003196:	4b33      	ldr	r3, [pc, #204]	; (8003264 <HAL_TIM_MspPostInit+0x100>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = DRVR_IN1_TIM1_CH2_Pin;
 80031a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b0:	2300      	movs	r3, #0
 80031b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031b4:	2301      	movs	r3, #1
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DRVR_IN1_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4619      	mov	r1, r3
 80031be:	482a      	ldr	r0, [pc, #168]	; (8003268 <HAL_TIM_MspPostInit+0x104>)
 80031c0:	f001 fb06 	bl	80047d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80031c4:	e048      	b.n	8003258 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM2)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ce:	d11f      	bne.n	8003210 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	4b23      	ldr	r3, [pc, #140]	; (8003264 <HAL_TIM_MspPostInit+0x100>)
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	4a22      	ldr	r2, [pc, #136]	; (8003264 <HAL_TIM_MspPostInit+0x100>)
 80031da:	f043 0302 	orr.w	r3, r3, #2
 80031de:	6313      	str	r3, [r2, #48]	; 0x30
 80031e0:	4b20      	ldr	r3, [pc, #128]	; (8003264 <HAL_TIM_MspPostInit+0x100>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = fan_PWM_1_TIM2_CH3_Pin;
 80031ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f2:	2302      	movs	r3, #2
 80031f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fa:	2300      	movs	r3, #0
 80031fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031fe:	2301      	movs	r3, #1
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(fan_PWM_1_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 8003202:	f107 0314 	add.w	r3, r7, #20
 8003206:	4619      	mov	r1, r3
 8003208:	4818      	ldr	r0, [pc, #96]	; (800326c <HAL_TIM_MspPostInit+0x108>)
 800320a:	f001 fae1 	bl	80047d0 <HAL_GPIO_Init>
}
 800320e:	e023      	b.n	8003258 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM8)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a16      	ldr	r2, [pc, #88]	; (8003270 <HAL_TIM_MspPostInit+0x10c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d11e      	bne.n	8003258 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	4b11      	ldr	r3, [pc, #68]	; (8003264 <HAL_TIM_MspPostInit+0x100>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a10      	ldr	r2, [pc, #64]	; (8003264 <HAL_TIM_MspPostInit+0x100>)
 8003224:	f043 0304 	orr.w	r3, r3, #4
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <HAL_TIM_MspPostInit+0x100>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DRVL_IN1_TIM8_CH4_Pin;
 8003236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800323a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
 800323e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003244:	2300      	movs	r3, #0
 8003246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003248:	2303      	movs	r3, #3
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DRVL_IN1_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 800324c:	f107 0314 	add.w	r3, r7, #20
 8003250:	4619      	mov	r1, r3
 8003252:	4808      	ldr	r0, [pc, #32]	; (8003274 <HAL_TIM_MspPostInit+0x110>)
 8003254:	f001 fabc 	bl	80047d0 <HAL_GPIO_Init>
}
 8003258:	bf00      	nop
 800325a:	3728      	adds	r7, #40	; 0x28
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40010000 	.word	0x40010000
 8003264:	40023800 	.word	0x40023800
 8003268:	40020000 	.word	0x40020000
 800326c:	40020400 	.word	0x40020400
 8003270:	40010400 	.word	0x40010400
 8003274:	40020800 	.word	0x40020800

08003278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003280:	f107 0314 	add.w	r3, r7, #20
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	60da      	str	r2, [r3, #12]
 800328e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a19      	ldr	r2, [pc, #100]	; (80032fc <HAL_UART_MspInit+0x84>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d12b      	bne.n	80032f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	4b18      	ldr	r3, [pc, #96]	; (8003300 <HAL_UART_MspInit+0x88>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	4a17      	ldr	r2, [pc, #92]	; (8003300 <HAL_UART_MspInit+0x88>)
 80032a4:	f043 0320 	orr.w	r3, r3, #32
 80032a8:	6453      	str	r3, [r2, #68]	; 0x44
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_UART_MspInit+0x88>)
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	4b11      	ldr	r3, [pc, #68]	; (8003300 <HAL_UART_MspInit+0x88>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	4a10      	ldr	r2, [pc, #64]	; (8003300 <HAL_UART_MspInit+0x88>)
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	6313      	str	r3, [r2, #48]	; 0x30
 80032c6:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <HAL_UART_MspInit+0x88>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032d2:	23c0      	movs	r3, #192	; 0xc0
 80032d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d6:	2302      	movs	r3, #2
 80032d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032de:	2303      	movs	r3, #3
 80032e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80032e2:	2308      	movs	r3, #8
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e6:	f107 0314 	add.w	r3, r7, #20
 80032ea:	4619      	mov	r1, r3
 80032ec:	4805      	ldr	r0, [pc, #20]	; (8003304 <HAL_UART_MspInit+0x8c>)
 80032ee:	f001 fa6f 	bl	80047d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80032f2:	bf00      	nop
 80032f4:	3728      	adds	r7, #40	; 0x28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40011400 	.word	0x40011400
 8003300:	40023800 	.word	0x40023800
 8003304:	40020800 	.word	0x40020800

08003308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800330c:	e7fe      	b.n	800330c <NMI_Handler+0x4>

0800330e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800330e:	b480      	push	{r7}
 8003310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003312:	e7fe      	b.n	8003312 <HardFault_Handler+0x4>

08003314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003318:	e7fe      	b.n	8003318 <MemManage_Handler+0x4>

0800331a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800331a:	b480      	push	{r7}
 800331c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800331e:	e7fe      	b.n	800331e <BusFault_Handler+0x4>

08003320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003324:	e7fe      	b.n	8003324 <UsageFault_Handler+0x4>

08003326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003326:	b480      	push	{r7}
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003338:	bf00      	nop
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003354:	f000 f96e 	bl	8003634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003358:	bf00      	nop
 800335a:	bd80      	pop	{r7, pc}

0800335c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003360:	4802      	ldr	r0, [pc, #8]	; (800336c <TIM6_DAC_IRQHandler+0x10>)
 8003362:	f002 fdcf 	bl	8005f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	200004bc 	.word	0x200004bc

08003370 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003374:	4802      	ldr	r0, [pc, #8]	; (8003380 <TIM7_IRQHandler+0x10>)
 8003376:	f002 fdc5 	bl	8005f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000504 	.word	0x20000504

08003384 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003388:	4802      	ldr	r0, [pc, #8]	; (8003394 <DMA2_Stream0_IRQHandler+0x10>)
 800338a:	f000 ffb7 	bl	80042fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000290 	.word	0x20000290

08003398 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return 1;
 800339c:	2301      	movs	r3, #1
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <_kill>:

int _kill(int pid, int sig)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033b2:	f003 feb3 	bl	800711c <__errno>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2216      	movs	r2, #22
 80033ba:	601a      	str	r2, [r3, #0]
  return -1;
 80033bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <_exit>:

void _exit (int status)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033d0:	f04f 31ff 	mov.w	r1, #4294967295
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ffe7 	bl	80033a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033da:	e7fe      	b.n	80033da <_exit+0x12>

080033dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	e00a      	b.n	8003404 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033ee:	f3af 8000 	nop.w
 80033f2:	4601      	mov	r1, r0
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	60ba      	str	r2, [r7, #8]
 80033fa:	b2ca      	uxtb	r2, r1
 80033fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	3301      	adds	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	dbf0      	blt.n	80033ee <_read+0x12>
  }

  return len;
 800340c:	687b      	ldr	r3, [r7, #4]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800341e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003422:	4618      	mov	r0, r3
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800343e:	605a      	str	r2, [r3, #4]
  return 0;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <_isatty>:

int _isatty(int file)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003456:	2301      	movs	r3, #1
}
 8003458:	4618      	mov	r0, r3
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003488:	4a14      	ldr	r2, [pc, #80]	; (80034dc <_sbrk+0x5c>)
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <_sbrk+0x60>)
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003494:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <_sbrk+0x64>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800349c:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <_sbrk+0x64>)
 800349e:	4a12      	ldr	r2, [pc, #72]	; (80034e8 <_sbrk+0x68>)
 80034a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034a2:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <_sbrk+0x64>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d207      	bcs.n	80034c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034b0:	f003 fe34 	bl	800711c <__errno>
 80034b4:	4603      	mov	r3, r0
 80034b6:	220c      	movs	r2, #12
 80034b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295
 80034be:	e009      	b.n	80034d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <_sbrk+0x64>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034c6:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <_sbrk+0x64>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	4a05      	ldr	r2, [pc, #20]	; (80034e4 <_sbrk+0x64>)
 80034d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034d2:	68fb      	ldr	r3, [r7, #12]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20020000 	.word	0x20020000
 80034e0:	00000400 	.word	0x00000400
 80034e4:	20016634 	.word	0x20016634
 80034e8:	20016650 	.word	0x20016650

080034ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <SystemInit+0x20>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	4a05      	ldr	r2, [pc, #20]	; (800350c <SystemInit+0x20>)
 80034f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <_write>:
 */


#include "usart.h"

int _write(int file, char *ptr, int len) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	b29a      	uxth	r2, r3
 8003520:	f04f 33ff 	mov.w	r3, #4294967295
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	4804      	ldr	r0, [pc, #16]	; (8003538 <_write+0x28>)
 8003528:	f003 fa83 	bl	8006a32 <HAL_UART_Transmit>
    return len;
 800352c:	687b      	ldr	r3, [r7, #4]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000594 	.word	0x20000594

0800353c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800353c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003574 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003540:	480d      	ldr	r0, [pc, #52]	; (8003578 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003542:	490e      	ldr	r1, [pc, #56]	; (800357c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003544:	4a0e      	ldr	r2, [pc, #56]	; (8003580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003548:	e002      	b.n	8003550 <LoopCopyDataInit>

0800354a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800354a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800354c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800354e:	3304      	adds	r3, #4

08003550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003554:	d3f9      	bcc.n	800354a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003556:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003558:	4c0b      	ldr	r4, [pc, #44]	; (8003588 <LoopFillZerobss+0x26>)
  movs r3, #0
 800355a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800355c:	e001      	b.n	8003562 <LoopFillZerobss>

0800355e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800355e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003560:	3204      	adds	r2, #4

08003562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003564:	d3fb      	bcc.n	800355e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003566:	f7ff ffc1 	bl	80034ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800356a:	f003 fddd 	bl	8007128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800356e:	f7fe f8e3 	bl	8001738 <main>
  bx  lr    
 8003572:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003574:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800357c:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8003580:	0800a114 	.word	0x0800a114
  ldr r2, =_sbss
 8003584:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8003588:	2001664c 	.word	0x2001664c

0800358c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800358c:	e7fe      	b.n	800358c <ADC_IRQHandler>
	...

08003590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003594:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <HAL_Init+0x40>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a0d      	ldr	r2, [pc, #52]	; (80035d0 <HAL_Init+0x40>)
 800359a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800359e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_Init+0x40>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <HAL_Init+0x40>)
 80035a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035ac:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <HAL_Init+0x40>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <HAL_Init+0x40>)
 80035b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035b8:	2003      	movs	r0, #3
 80035ba:	f000 fd57 	bl	800406c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035be:	200f      	movs	r0, #15
 80035c0:	f000 f808 	bl	80035d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035c4:	f7ff fb56 	bl	8002c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40023c00 	.word	0x40023c00

080035d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035dc:	4b12      	ldr	r3, [pc, #72]	; (8003628 <HAL_InitTick+0x54>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <HAL_InitTick+0x58>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	4619      	mov	r1, r3
 80035e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fd6f 	bl	80040d6 <HAL_SYSTICK_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e00e      	b.n	8003620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b0f      	cmp	r3, #15
 8003606:	d80a      	bhi.n	800361e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003608:	2200      	movs	r2, #0
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	f04f 30ff 	mov.w	r0, #4294967295
 8003610:	f000 fd37 	bl	8004082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003614:	4a06      	ldr	r2, [pc, #24]	; (8003630 <HAL_InitTick+0x5c>)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	e000      	b.n	8003620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20000040 	.word	0x20000040
 800362c:	20000048 	.word	0x20000048
 8003630:	20000044 	.word	0x20000044

08003634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_IncTick+0x20>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_IncTick+0x24>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4413      	add	r3, r2
 8003644:	4a04      	ldr	r2, [pc, #16]	; (8003658 <HAL_IncTick+0x24>)
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000048 	.word	0x20000048
 8003658:	20016638 	.word	0x20016638

0800365c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return uwTick;
 8003660:	4b03      	ldr	r3, [pc, #12]	; (8003670 <HAL_GetTick+0x14>)
 8003662:	681b      	ldr	r3, [r3, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20016638 	.word	0x20016638

08003674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800367c:	f7ff ffee 	bl	800365c <HAL_GetTick>
 8003680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d005      	beq.n	800369a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800368e:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <HAL_Delay+0x44>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800369a:	bf00      	nop
 800369c:	f7ff ffde 	bl	800365c <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d8f7      	bhi.n	800369c <HAL_Delay+0x28>
  {
  }
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000048 	.word	0x20000048

080036bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e033      	b.n	800373a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff faf2 	bl	8002cc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d118      	bne.n	800372c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003702:	f023 0302 	bic.w	r3, r3, #2
 8003706:	f043 0202 	orr.w	r2, r3, #2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fa5e 	bl	8003bd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	f043 0201 	orr.w	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
 800372a:	e001      	b.n	8003730 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003738:	7bfb      	ldrb	r3, [r7, #15]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_ADC_Start_DMA+0x1e>
 800375e:	2302      	movs	r3, #2
 8003760:	e0e9      	b.n	8003936 <HAL_ADC_Start_DMA+0x1f2>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d018      	beq.n	80037aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003788:	4b6d      	ldr	r3, [pc, #436]	; (8003940 <HAL_ADC_Start_DMA+0x1fc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a6d      	ldr	r2, [pc, #436]	; (8003944 <HAL_ADC_Start_DMA+0x200>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	0c9a      	lsrs	r2, r3, #18
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800379c:	e002      	b.n	80037a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f9      	bne.n	800379e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b8:	d107      	bne.n	80037ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	f040 80a1 	bne.w	800391c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80037e2:	f023 0301 	bic.w	r3, r3, #1
 80037e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003804:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003818:	d106      	bne.n	8003828 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	f023 0206 	bic.w	r2, r3, #6
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
 8003826:	e002      	b.n	800382e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003836:	4b44      	ldr	r3, [pc, #272]	; (8003948 <HAL_ADC_Start_DMA+0x204>)
 8003838:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	4a43      	ldr	r2, [pc, #268]	; (800394c <HAL_ADC_Start_DMA+0x208>)
 8003840:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	4a42      	ldr	r2, [pc, #264]	; (8003950 <HAL_ADC_Start_DMA+0x20c>)
 8003848:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	4a41      	ldr	r2, [pc, #260]	; (8003954 <HAL_ADC_Start_DMA+0x210>)
 8003850:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800385a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800386a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800387a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	334c      	adds	r3, #76	; 0x4c
 8003886:	4619      	mov	r1, r3
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f000 fcde 	bl	800424c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	2b00      	cmp	r3, #0
 800389a:	d12a      	bne.n	80038f2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2d      	ldr	r2, [pc, #180]	; (8003958 <HAL_ADC_Start_DMA+0x214>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d015      	beq.n	80038d2 <HAL_ADC_Start_DMA+0x18e>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a2c      	ldr	r2, [pc, #176]	; (800395c <HAL_ADC_Start_DMA+0x218>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d105      	bne.n	80038bc <HAL_ADC_Start_DMA+0x178>
 80038b0:	4b25      	ldr	r3, [pc, #148]	; (8003948 <HAL_ADC_Start_DMA+0x204>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a27      	ldr	r2, [pc, #156]	; (8003960 <HAL_ADC_Start_DMA+0x21c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d136      	bne.n	8003934 <HAL_ADC_Start_DMA+0x1f0>
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_ADC_Start_DMA+0x204>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d130      	bne.n	8003934 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d129      	bne.n	8003934 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	e020      	b.n	8003934 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a18      	ldr	r2, [pc, #96]	; (8003958 <HAL_ADC_Start_DMA+0x214>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d11b      	bne.n	8003934 <HAL_ADC_Start_DMA+0x1f0>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d114      	bne.n	8003934 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	e00b      	b.n	8003934 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	f043 0210 	orr.w	r2, r3, #16
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000040 	.word	0x20000040
 8003944:	431bde83 	.word	0x431bde83
 8003948:	40012300 	.word	0x40012300
 800394c:	08003dc9 	.word	0x08003dc9
 8003950:	08003e83 	.word	0x08003e83
 8003954:	08003e9f 	.word	0x08003e9f
 8003958:	40012000 	.word	0x40012000
 800395c:	40012100 	.word	0x40012100
 8003960:	40012200 	.word	0x40012200

08003964 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x1c>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e105      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x228>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b09      	cmp	r3, #9
 80039b6:	d925      	bls.n	8003a04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68d9      	ldr	r1, [r3, #12]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	4613      	mov	r3, r2
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	4413      	add	r3, r2
 80039cc:	3b1e      	subs	r3, #30
 80039ce:	2207      	movs	r2, #7
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43da      	mvns	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	400a      	ands	r2, r1
 80039dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68d9      	ldr	r1, [r3, #12]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	4618      	mov	r0, r3
 80039f0:	4603      	mov	r3, r0
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	4403      	add	r3, r0
 80039f6:	3b1e      	subs	r3, #30
 80039f8:	409a      	lsls	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	e022      	b.n	8003a4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6919      	ldr	r1, [r3, #16]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	4613      	mov	r3, r2
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	4413      	add	r3, r2
 8003a18:	2207      	movs	r2, #7
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	400a      	ands	r2, r1
 8003a26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6919      	ldr	r1, [r3, #16]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	4618      	mov	r0, r3
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	4403      	add	r3, r0
 8003a40:	409a      	lsls	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d824      	bhi.n	8003a9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	3b05      	subs	r3, #5
 8003a64:	221f      	movs	r2, #31
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	400a      	ands	r2, r1
 8003a72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	4618      	mov	r0, r3
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3b05      	subs	r3, #5
 8003a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	635a      	str	r2, [r3, #52]	; 0x34
 8003a9a:	e04c      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b0c      	cmp	r3, #12
 8003aa2:	d824      	bhi.n	8003aee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3b23      	subs	r3, #35	; 0x23
 8003ab6:	221f      	movs	r2, #31
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43da      	mvns	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	3b23      	subs	r3, #35	; 0x23
 8003ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	631a      	str	r2, [r3, #48]	; 0x30
 8003aec:	e023      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	3b41      	subs	r3, #65	; 0x41
 8003b00:	221f      	movs	r2, #31
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43da      	mvns	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	3b41      	subs	r3, #65	; 0x41
 8003b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <HAL_ADC_ConfigChannel+0x234>)
 8003b38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a21      	ldr	r2, [pc, #132]	; (8003bc4 <HAL_ADC_ConfigChannel+0x238>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d109      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x1cc>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b12      	cmp	r3, #18
 8003b4a:	d105      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a19      	ldr	r2, [pc, #100]	; (8003bc4 <HAL_ADC_ConfigChannel+0x238>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d123      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x21e>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d003      	beq.n	8003b72 <HAL_ADC_ConfigChannel+0x1e6>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b11      	cmp	r3, #17
 8003b70:	d11b      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d111      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <HAL_ADC_ConfigChannel+0x23c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a10      	ldr	r2, [pc, #64]	; (8003bcc <HAL_ADC_ConfigChannel+0x240>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	0c9a      	lsrs	r2, r3, #18
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b9c:	e002      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f9      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	40012300 	.word	0x40012300
 8003bc4:	40012000 	.word	0x40012000
 8003bc8:	20000040 	.word	0x20000040
 8003bcc:	431bde83 	.word	0x431bde83

08003bd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bd8:	4b79      	ldr	r3, [pc, #484]	; (8003dc0 <ADC_Init+0x1f0>)
 8003bda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	021a      	lsls	r2, r3, #8
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6899      	ldr	r1, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	4a58      	ldr	r2, [pc, #352]	; (8003dc4 <ADC_Init+0x1f4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d022      	beq.n	8003cae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6899      	ldr	r1, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6899      	ldr	r1, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	e00f      	b.n	8003cce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ccc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0202 	bic.w	r2, r2, #2
 8003cdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6899      	ldr	r1, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	7e1b      	ldrb	r3, [r3, #24]
 8003ce8:	005a      	lsls	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01b      	beq.n	8003d34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6859      	ldr	r1, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	3b01      	subs	r3, #1
 8003d28:	035a      	lsls	r2, r3, #13
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	e007      	b.n	8003d44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	051a      	lsls	r2, r3, #20
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6899      	ldr	r1, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d86:	025a      	lsls	r2, r3, #9
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6899      	ldr	r1, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	029a      	lsls	r2, r3, #10
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	609a      	str	r2, [r3, #8]
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	40012300 	.word	0x40012300
 8003dc4:	0f000001 	.word	0x0f000001

08003dc8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d13c      	bne.n	8003e5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d12b      	bne.n	8003e54 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d127      	bne.n	8003e54 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d006      	beq.n	8003e20 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d119      	bne.n	8003e54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0220 	bic.w	r2, r2, #32
 8003e2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d105      	bne.n	8003e54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	f043 0201 	orr.w	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f7fd fc63 	bl	8001720 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e5a:	e00e      	b.n	8003e7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff fd85 	bl	8003978 <HAL_ADC_ErrorCallback>
}
 8003e6e:	e004      	b.n	8003e7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff fd67 	bl	8003964 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2240      	movs	r2, #64	; 0x40
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f043 0204 	orr.w	r2, r3, #4
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f7ff fd5a 	bl	8003978 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <__NVIC_SetPriorityGrouping+0x44>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003efe:	4a04      	ldr	r2, [pc, #16]	; (8003f10 <__NVIC_SetPriorityGrouping+0x44>)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	60d3      	str	r3, [r2, #12]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	e000ed00 	.word	0xe000ed00

08003f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f18:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <__NVIC_GetPriorityGrouping+0x18>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	0a1b      	lsrs	r3, r3, #8
 8003f1e:	f003 0307 	and.w	r3, r3, #7
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	e000ed00 	.word	0xe000ed00

08003f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	db0b      	blt.n	8003f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	f003 021f 	and.w	r2, r3, #31
 8003f48:	4907      	ldr	r1, [pc, #28]	; (8003f68 <__NVIC_EnableIRQ+0x38>)
 8003f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	2001      	movs	r0, #1
 8003f52:	fa00 f202 	lsl.w	r2, r0, r2
 8003f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	e000e100 	.word	0xe000e100

08003f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	6039      	str	r1, [r7, #0]
 8003f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	db0a      	blt.n	8003f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	490c      	ldr	r1, [pc, #48]	; (8003fb8 <__NVIC_SetPriority+0x4c>)
 8003f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8a:	0112      	lsls	r2, r2, #4
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	440b      	add	r3, r1
 8003f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f94:	e00a      	b.n	8003fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	4908      	ldr	r1, [pc, #32]	; (8003fbc <__NVIC_SetPriority+0x50>)
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	3b04      	subs	r3, #4
 8003fa4:	0112      	lsls	r2, r2, #4
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	440b      	add	r3, r1
 8003faa:	761a      	strb	r2, [r3, #24]
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	e000e100 	.word	0xe000e100
 8003fbc:	e000ed00 	.word	0xe000ed00

08003fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b089      	sub	sp, #36	; 0x24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f1c3 0307 	rsb	r3, r3, #7
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	bf28      	it	cs
 8003fde:	2304      	movcs	r3, #4
 8003fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	2b06      	cmp	r3, #6
 8003fe8:	d902      	bls.n	8003ff0 <NVIC_EncodePriority+0x30>
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	3b03      	subs	r3, #3
 8003fee:	e000      	b.n	8003ff2 <NVIC_EncodePriority+0x32>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43da      	mvns	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	401a      	ands	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004008:	f04f 31ff 	mov.w	r1, #4294967295
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	43d9      	mvns	r1, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004018:	4313      	orrs	r3, r2
         );
}
 800401a:	4618      	mov	r0, r3
 800401c:	3724      	adds	r7, #36	; 0x24
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3b01      	subs	r3, #1
 8004034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004038:	d301      	bcc.n	800403e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800403a:	2301      	movs	r3, #1
 800403c:	e00f      	b.n	800405e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800403e:	4a0a      	ldr	r2, [pc, #40]	; (8004068 <SysTick_Config+0x40>)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3b01      	subs	r3, #1
 8004044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004046:	210f      	movs	r1, #15
 8004048:	f04f 30ff 	mov.w	r0, #4294967295
 800404c:	f7ff ff8e 	bl	8003f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <SysTick_Config+0x40>)
 8004052:	2200      	movs	r2, #0
 8004054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004056:	4b04      	ldr	r3, [pc, #16]	; (8004068 <SysTick_Config+0x40>)
 8004058:	2207      	movs	r2, #7
 800405a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	e000e010 	.word	0xe000e010

0800406c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff ff29 	bl	8003ecc <__NVIC_SetPriorityGrouping>
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004082:	b580      	push	{r7, lr}
 8004084:	b086      	sub	sp, #24
 8004086:	af00      	add	r7, sp, #0
 8004088:	4603      	mov	r3, r0
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004094:	f7ff ff3e 	bl	8003f14 <__NVIC_GetPriorityGrouping>
 8004098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	6978      	ldr	r0, [r7, #20]
 80040a0:	f7ff ff8e 	bl	8003fc0 <NVIC_EncodePriority>
 80040a4:	4602      	mov	r2, r0
 80040a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff ff5d 	bl	8003f6c <__NVIC_SetPriority>
}
 80040b2:	bf00      	nop
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	4603      	mov	r3, r0
 80040c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ff31 	bl	8003f30 <__NVIC_EnableIRQ>
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff ffa2 	bl	8004028 <SysTick_Config>
 80040e4:	4603      	mov	r3, r0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040fc:	f7ff faae 	bl	800365c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e099      	b.n	8004240 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800412c:	e00f      	b.n	800414e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800412e:	f7ff fa95 	bl	800365c <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b05      	cmp	r3, #5
 800413a:	d908      	bls.n	800414e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2203      	movs	r2, #3
 8004146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e078      	b.n	8004240 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e8      	bne.n	800412e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4b38      	ldr	r3, [pc, #224]	; (8004248 <HAL_DMA_Init+0x158>)
 8004168:	4013      	ands	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800417a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004186:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004192:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d107      	bne.n	80041b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	4313      	orrs	r3, r2
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 0307 	bic.w	r3, r3, #7
 80041ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d117      	bne.n	8004212 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00e      	beq.n	8004212 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fa6f 	bl	80046d8 <DMA_CheckFifoParam>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2240      	movs	r2, #64	; 0x40
 8004204:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800420e:	2301      	movs	r3, #1
 8004210:	e016      	b.n	8004240 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fa26 	bl	800466c <DMA_CalcBaseAndBitshift>
 8004220:	4603      	mov	r3, r0
 8004222:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004228:	223f      	movs	r2, #63	; 0x3f
 800422a:	409a      	lsls	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	f010803f 	.word	0xf010803f

0800424c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004262:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_DMA_Start_IT+0x26>
 800426e:	2302      	movs	r3, #2
 8004270:	e040      	b.n	80042f4 <HAL_DMA_Start_IT+0xa8>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b01      	cmp	r3, #1
 8004284:	d12f      	bne.n	80042e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2202      	movs	r2, #2
 800428a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f9b8 	bl	8004610 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a4:	223f      	movs	r2, #63	; 0x3f
 80042a6:	409a      	lsls	r2, r3
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0216 	orr.w	r2, r2, #22
 80042ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d007      	beq.n	80042d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0208 	orr.w	r2, r2, #8
 80042d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	e005      	b.n	80042f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042ee:	2302      	movs	r3, #2
 80042f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004308:	4b8e      	ldr	r3, [pc, #568]	; (8004544 <HAL_DMA_IRQHandler+0x248>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a8e      	ldr	r2, [pc, #568]	; (8004548 <HAL_DMA_IRQHandler+0x24c>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0a9b      	lsrs	r3, r3, #10
 8004314:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004326:	2208      	movs	r2, #8
 8004328:	409a      	lsls	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d01a      	beq.n	8004368 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0204 	bic.w	r2, r2, #4
 800434e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004354:	2208      	movs	r2, #8
 8004356:	409a      	lsls	r2, r3
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004360:	f043 0201 	orr.w	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436c:	2201      	movs	r2, #1
 800436e:	409a      	lsls	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d012      	beq.n	800439e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438a:	2201      	movs	r2, #1
 800438c:	409a      	lsls	r2, r3
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	f043 0202 	orr.w	r2, r3, #2
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a2:	2204      	movs	r2, #4
 80043a4:	409a      	lsls	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d012      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c0:	2204      	movs	r2, #4
 80043c2:	409a      	lsls	r2, r3
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	f043 0204 	orr.w	r2, r3, #4
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d8:	2210      	movs	r2, #16
 80043da:	409a      	lsls	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d043      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d03c      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f6:	2210      	movs	r2, #16
 80043f8:	409a      	lsls	r2, r3
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d018      	beq.n	800443e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d108      	bne.n	800442c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d024      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
 800442a:	e01f      	b.n	800446c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01b      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	4798      	blx	r3
 800443c:	e016      	b.n	800446c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d107      	bne.n	800445c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0208 	bic.w	r2, r2, #8
 800445a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004470:	2220      	movs	r2, #32
 8004472:	409a      	lsls	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 808f 	beq.w	800459c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8087 	beq.w	800459c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004492:	2220      	movs	r2, #32
 8004494:	409a      	lsls	r2, r3
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b05      	cmp	r3, #5
 80044a4:	d136      	bne.n	8004514 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0216 	bic.w	r2, r2, #22
 80044b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695a      	ldr	r2, [r3, #20]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d103      	bne.n	80044d6 <HAL_DMA_IRQHandler+0x1da>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d007      	beq.n	80044e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0208 	bic.w	r2, r2, #8
 80044e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ea:	223f      	movs	r2, #63	; 0x3f
 80044ec:	409a      	lsls	r2, r3
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004506:	2b00      	cmp	r3, #0
 8004508:	d07e      	beq.n	8004608 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4798      	blx	r3
        }
        return;
 8004512:	e079      	b.n	8004608 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d01d      	beq.n	800455e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10d      	bne.n	800454c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004534:	2b00      	cmp	r3, #0
 8004536:	d031      	beq.n	800459c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	4798      	blx	r3
 8004540:	e02c      	b.n	800459c <HAL_DMA_IRQHandler+0x2a0>
 8004542:	bf00      	nop
 8004544:	20000040 	.word	0x20000040
 8004548:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d023      	beq.n	800459c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	4798      	blx	r3
 800455c:	e01e      	b.n	800459c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10f      	bne.n	800458c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0210 	bic.w	r2, r2, #16
 800457a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d032      	beq.n	800460a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d022      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2205      	movs	r2, #5
 80045b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	3301      	adds	r3, #1
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d307      	bcc.n	80045e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f2      	bne.n	80045c8 <HAL_DMA_IRQHandler+0x2cc>
 80045e2:	e000      	b.n	80045e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	4798      	blx	r3
 8004606:	e000      	b.n	800460a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004608:	bf00      	nop
    }
  }
}
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800462c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b40      	cmp	r3, #64	; 0x40
 800463c:	d108      	bne.n	8004650 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800464e:	e007      	b.n	8004660 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	60da      	str	r2, [r3, #12]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	3b10      	subs	r3, #16
 800467c:	4a14      	ldr	r2, [pc, #80]	; (80046d0 <DMA_CalcBaseAndBitshift+0x64>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	091b      	lsrs	r3, r3, #4
 8004684:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004686:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <DMA_CalcBaseAndBitshift+0x68>)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b03      	cmp	r3, #3
 8004698:	d909      	bls.n	80046ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	1d1a      	adds	r2, r3, #4
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	659a      	str	r2, [r3, #88]	; 0x58
 80046ac:	e007      	b.n	80046be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046b6:	f023 0303 	bic.w	r3, r3, #3
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	aaaaaaab 	.word	0xaaaaaaab
 80046d4:	08009d20 	.word	0x08009d20

080046d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d11f      	bne.n	8004732 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d856      	bhi.n	80047a6 <DMA_CheckFifoParam+0xce>
 80046f8:	a201      	add	r2, pc, #4	; (adr r2, 8004700 <DMA_CheckFifoParam+0x28>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004711 	.word	0x08004711
 8004704:	08004723 	.word	0x08004723
 8004708:	08004711 	.word	0x08004711
 800470c:	080047a7 	.word	0x080047a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d046      	beq.n	80047aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004720:	e043      	b.n	80047aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800472a:	d140      	bne.n	80047ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004730:	e03d      	b.n	80047ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473a:	d121      	bne.n	8004780 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b03      	cmp	r3, #3
 8004740:	d837      	bhi.n	80047b2 <DMA_CheckFifoParam+0xda>
 8004742:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <DMA_CheckFifoParam+0x70>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	08004759 	.word	0x08004759
 800474c:	0800475f 	.word	0x0800475f
 8004750:	08004759 	.word	0x08004759
 8004754:	08004771 	.word	0x08004771
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
      break;
 800475c:	e030      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d025      	beq.n	80047b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800476e:	e022      	b.n	80047b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004778:	d11f      	bne.n	80047ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800477e:	e01c      	b.n	80047ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d903      	bls.n	800478e <DMA_CheckFifoParam+0xb6>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b03      	cmp	r3, #3
 800478a:	d003      	beq.n	8004794 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800478c:	e018      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
      break;
 8004792:	e015      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00e      	beq.n	80047be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
      break;
 80047a4:	e00b      	b.n	80047be <DMA_CheckFifoParam+0xe6>
      break;
 80047a6:	bf00      	nop
 80047a8:	e00a      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
      break;
 80047aa:	bf00      	nop
 80047ac:	e008      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
      break;
 80047ae:	bf00      	nop
 80047b0:	e006      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
      break;
 80047b2:	bf00      	nop
 80047b4:	e004      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
      break;
 80047b6:	bf00      	nop
 80047b8:	e002      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80047ba:	bf00      	nop
 80047bc:	e000      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
      break;
 80047be:	bf00      	nop
    }
  } 
  
  return status; 
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop

080047d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	; 0x24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	e16b      	b.n	8004ac4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047ec:	2201      	movs	r2, #1
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4013      	ands	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	429a      	cmp	r2, r3
 8004806:	f040 815a 	bne.w	8004abe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b01      	cmp	r3, #1
 8004814:	d005      	beq.n	8004822 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800481e:	2b02      	cmp	r3, #2
 8004820:	d130      	bne.n	8004884 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	2203      	movs	r2, #3
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43db      	mvns	r3, r3
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4013      	ands	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4313      	orrs	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004858:	2201      	movs	r2, #1
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	f003 0201 	and.w	r2, r3, #1
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	2b03      	cmp	r3, #3
 800488e:	d017      	beq.n	80048c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	2203      	movs	r2, #3
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d123      	bne.n	8004914 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	08da      	lsrs	r2, r3, #3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3208      	adds	r2, #8
 80048d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	220f      	movs	r2, #15
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	43db      	mvns	r3, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4013      	ands	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4313      	orrs	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	08da      	lsrs	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3208      	adds	r2, #8
 800490e:	69b9      	ldr	r1, [r7, #24]
 8004910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	2203      	movs	r2, #3
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 0203 	and.w	r2, r3, #3
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80b4 	beq.w	8004abe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	4b60      	ldr	r3, [pc, #384]	; (8004adc <HAL_GPIO_Init+0x30c>)
 800495c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495e:	4a5f      	ldr	r2, [pc, #380]	; (8004adc <HAL_GPIO_Init+0x30c>)
 8004960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004964:	6453      	str	r3, [r2, #68]	; 0x44
 8004966:	4b5d      	ldr	r3, [pc, #372]	; (8004adc <HAL_GPIO_Init+0x30c>)
 8004968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004972:	4a5b      	ldr	r2, [pc, #364]	; (8004ae0 <HAL_GPIO_Init+0x310>)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	089b      	lsrs	r3, r3, #2
 8004978:	3302      	adds	r3, #2
 800497a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800497e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	220f      	movs	r2, #15
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4013      	ands	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a52      	ldr	r2, [pc, #328]	; (8004ae4 <HAL_GPIO_Init+0x314>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d02b      	beq.n	80049f6 <HAL_GPIO_Init+0x226>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a51      	ldr	r2, [pc, #324]	; (8004ae8 <HAL_GPIO_Init+0x318>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d025      	beq.n	80049f2 <HAL_GPIO_Init+0x222>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a50      	ldr	r2, [pc, #320]	; (8004aec <HAL_GPIO_Init+0x31c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01f      	beq.n	80049ee <HAL_GPIO_Init+0x21e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a4f      	ldr	r2, [pc, #316]	; (8004af0 <HAL_GPIO_Init+0x320>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d019      	beq.n	80049ea <HAL_GPIO_Init+0x21a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a4e      	ldr	r2, [pc, #312]	; (8004af4 <HAL_GPIO_Init+0x324>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <HAL_GPIO_Init+0x216>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a4d      	ldr	r2, [pc, #308]	; (8004af8 <HAL_GPIO_Init+0x328>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00d      	beq.n	80049e2 <HAL_GPIO_Init+0x212>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a4c      	ldr	r2, [pc, #304]	; (8004afc <HAL_GPIO_Init+0x32c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <HAL_GPIO_Init+0x20e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a4b      	ldr	r2, [pc, #300]	; (8004b00 <HAL_GPIO_Init+0x330>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d101      	bne.n	80049da <HAL_GPIO_Init+0x20a>
 80049d6:	2307      	movs	r3, #7
 80049d8:	e00e      	b.n	80049f8 <HAL_GPIO_Init+0x228>
 80049da:	2308      	movs	r3, #8
 80049dc:	e00c      	b.n	80049f8 <HAL_GPIO_Init+0x228>
 80049de:	2306      	movs	r3, #6
 80049e0:	e00a      	b.n	80049f8 <HAL_GPIO_Init+0x228>
 80049e2:	2305      	movs	r3, #5
 80049e4:	e008      	b.n	80049f8 <HAL_GPIO_Init+0x228>
 80049e6:	2304      	movs	r3, #4
 80049e8:	e006      	b.n	80049f8 <HAL_GPIO_Init+0x228>
 80049ea:	2303      	movs	r3, #3
 80049ec:	e004      	b.n	80049f8 <HAL_GPIO_Init+0x228>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e002      	b.n	80049f8 <HAL_GPIO_Init+0x228>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <HAL_GPIO_Init+0x228>
 80049f6:	2300      	movs	r3, #0
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	f002 0203 	and.w	r2, r2, #3
 80049fe:	0092      	lsls	r2, r2, #2
 8004a00:	4093      	lsls	r3, r2
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a08:	4935      	ldr	r1, [pc, #212]	; (8004ae0 <HAL_GPIO_Init+0x310>)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	089b      	lsrs	r3, r3, #2
 8004a0e:	3302      	adds	r3, #2
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a16:	4b3b      	ldr	r3, [pc, #236]	; (8004b04 <HAL_GPIO_Init+0x334>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4013      	ands	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a3a:	4a32      	ldr	r2, [pc, #200]	; (8004b04 <HAL_GPIO_Init+0x334>)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a40:	4b30      	ldr	r3, [pc, #192]	; (8004b04 <HAL_GPIO_Init+0x334>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a64:	4a27      	ldr	r2, [pc, #156]	; (8004b04 <HAL_GPIO_Init+0x334>)
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a6a:	4b26      	ldr	r3, [pc, #152]	; (8004b04 <HAL_GPIO_Init+0x334>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	43db      	mvns	r3, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4013      	ands	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a8e:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <HAL_GPIO_Init+0x334>)
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a94:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <HAL_GPIO_Init+0x334>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ab8:	4a12      	ldr	r2, [pc, #72]	; (8004b04 <HAL_GPIO_Init+0x334>)
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	61fb      	str	r3, [r7, #28]
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	2b0f      	cmp	r3, #15
 8004ac8:	f67f ae90 	bls.w	80047ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004acc:	bf00      	nop
 8004ace:	bf00      	nop
 8004ad0:	3724      	adds	r7, #36	; 0x24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	40013800 	.word	0x40013800
 8004ae4:	40020000 	.word	0x40020000
 8004ae8:	40020400 	.word	0x40020400
 8004aec:	40020800 	.word	0x40020800
 8004af0:	40020c00 	.word	0x40020c00
 8004af4:	40021000 	.word	0x40021000
 8004af8:	40021400 	.word	0x40021400
 8004afc:	40021800 	.word	0x40021800
 8004b00:	40021c00 	.word	0x40021c00
 8004b04:	40013c00 	.word	0x40013c00

08004b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	887b      	ldrh	r3, [r7, #2]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
 8004b24:	e001      	b.n	8004b2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b26:	2300      	movs	r3, #0
 8004b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	807b      	strh	r3, [r7, #2]
 8004b44:	4613      	mov	r3, r2
 8004b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b48:	787b      	ldrb	r3, [r7, #1]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b4e:	887a      	ldrh	r2, [r7, #2]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b54:	e003      	b.n	8004b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b56:	887b      	ldrh	r3, [r7, #2]
 8004b58:	041a      	lsls	r2, r3, #16
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	619a      	str	r2, [r3, #24]
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e12b      	b.n	8004dd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fe f946 	bl	8002e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2224      	movs	r2, #36	; 0x24
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bd0:	f000 fd40 	bl	8005654 <HAL_RCC_GetPCLK1Freq>
 8004bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4a81      	ldr	r2, [pc, #516]	; (8004de0 <HAL_I2C_Init+0x274>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d807      	bhi.n	8004bf0 <HAL_I2C_Init+0x84>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a80      	ldr	r2, [pc, #512]	; (8004de4 <HAL_I2C_Init+0x278>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	bf94      	ite	ls
 8004be8:	2301      	movls	r3, #1
 8004bea:	2300      	movhi	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	e006      	b.n	8004bfe <HAL_I2C_Init+0x92>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a7d      	ldr	r2, [pc, #500]	; (8004de8 <HAL_I2C_Init+0x27c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	bf94      	ite	ls
 8004bf8:	2301      	movls	r3, #1
 8004bfa:	2300      	movhi	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e0e7      	b.n	8004dd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4a78      	ldr	r2, [pc, #480]	; (8004dec <HAL_I2C_Init+0x280>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	0c9b      	lsrs	r3, r3, #18
 8004c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a6a      	ldr	r2, [pc, #424]	; (8004de0 <HAL_I2C_Init+0x274>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d802      	bhi.n	8004c40 <HAL_I2C_Init+0xd4>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	e009      	b.n	8004c54 <HAL_I2C_Init+0xe8>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c46:	fb02 f303 	mul.w	r3, r2, r3
 8004c4a:	4a69      	ldr	r2, [pc, #420]	; (8004df0 <HAL_I2C_Init+0x284>)
 8004c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c50:	099b      	lsrs	r3, r3, #6
 8004c52:	3301      	adds	r3, #1
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	495c      	ldr	r1, [pc, #368]	; (8004de0 <HAL_I2C_Init+0x274>)
 8004c70:	428b      	cmp	r3, r1
 8004c72:	d819      	bhi.n	8004ca8 <HAL_I2C_Init+0x13c>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	1e59      	subs	r1, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c82:	1c59      	adds	r1, r3, #1
 8004c84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c88:	400b      	ands	r3, r1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_I2C_Init+0x138>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1e59      	subs	r1, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca2:	e051      	b.n	8004d48 <HAL_I2C_Init+0x1dc>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	e04f      	b.n	8004d48 <HAL_I2C_Init+0x1dc>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d111      	bne.n	8004cd4 <HAL_I2C_Init+0x168>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	1e58      	subs	r0, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	440b      	add	r3, r1
 8004cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bf0c      	ite	eq
 8004ccc:	2301      	moveq	r3, #1
 8004cce:	2300      	movne	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e012      	b.n	8004cfa <HAL_I2C_Init+0x18e>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1e58      	subs	r0, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6859      	ldr	r1, [r3, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	0099      	lsls	r1, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cea:	3301      	adds	r3, #1
 8004cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	bf0c      	ite	eq
 8004cf4:	2301      	moveq	r3, #1
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_I2C_Init+0x196>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e022      	b.n	8004d48 <HAL_I2C_Init+0x1dc>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10e      	bne.n	8004d28 <HAL_I2C_Init+0x1bc>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1e58      	subs	r0, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6859      	ldr	r1, [r3, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	440b      	add	r3, r1
 8004d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d26:	e00f      	b.n	8004d48 <HAL_I2C_Init+0x1dc>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	1e58      	subs	r0, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6859      	ldr	r1, [r3, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	0099      	lsls	r1, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d3e:	3301      	adds	r3, #1
 8004d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	6809      	ldr	r1, [r1, #0]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69da      	ldr	r2, [r3, #28]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6911      	ldr	r1, [r2, #16]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	68d2      	ldr	r2, [r2, #12]
 8004d82:	4311      	orrs	r1, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	000186a0 	.word	0x000186a0
 8004de4:	001e847f 	.word	0x001e847f
 8004de8:	003d08ff 	.word	0x003d08ff
 8004dec:	431bde83 	.word	0x431bde83
 8004df0:	10624dd3 	.word	0x10624dd3

08004df4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e267      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d075      	beq.n	8004efe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e12:	4b88      	ldr	r3, [pc, #544]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 030c 	and.w	r3, r3, #12
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d00c      	beq.n	8004e38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e1e:	4b85      	ldr	r3, [pc, #532]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	d112      	bne.n	8004e50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e2a:	4b82      	ldr	r3, [pc, #520]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e36:	d10b      	bne.n	8004e50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e38:	4b7e      	ldr	r3, [pc, #504]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d05b      	beq.n	8004efc <HAL_RCC_OscConfig+0x108>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d157      	bne.n	8004efc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e242      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e58:	d106      	bne.n	8004e68 <HAL_RCC_OscConfig+0x74>
 8004e5a:	4b76      	ldr	r3, [pc, #472]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a75      	ldr	r2, [pc, #468]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	e01d      	b.n	8004ea4 <HAL_RCC_OscConfig+0xb0>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e70:	d10c      	bne.n	8004e8c <HAL_RCC_OscConfig+0x98>
 8004e72:	4b70      	ldr	r3, [pc, #448]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a6f      	ldr	r2, [pc, #444]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	4b6d      	ldr	r3, [pc, #436]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a6c      	ldr	r2, [pc, #432]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	e00b      	b.n	8004ea4 <HAL_RCC_OscConfig+0xb0>
 8004e8c:	4b69      	ldr	r3, [pc, #420]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a68      	ldr	r2, [pc, #416]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	4b66      	ldr	r3, [pc, #408]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a65      	ldr	r2, [pc, #404]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d013      	beq.n	8004ed4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eac:	f7fe fbd6 	bl	800365c <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eb4:	f7fe fbd2 	bl	800365c <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b64      	cmp	r3, #100	; 0x64
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e207      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec6:	4b5b      	ldr	r3, [pc, #364]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCC_OscConfig+0xc0>
 8004ed2:	e014      	b.n	8004efe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed4:	f7fe fbc2 	bl	800365c <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004edc:	f7fe fbbe 	bl	800365c <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	; 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e1f3      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eee:	4b51      	ldr	r3, [pc, #324]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0xe8>
 8004efa:	e000      	b.n	8004efe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d063      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f0a:	4b4a      	ldr	r3, [pc, #296]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00b      	beq.n	8004f2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f16:	4b47      	ldr	r3, [pc, #284]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d11c      	bne.n	8004f5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f22:	4b44      	ldr	r3, [pc, #272]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d116      	bne.n	8004f5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2e:	4b41      	ldr	r3, [pc, #260]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <HAL_RCC_OscConfig+0x152>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d001      	beq.n	8004f46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e1c7      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f46:	4b3b      	ldr	r3, [pc, #236]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	4937      	ldr	r1, [pc, #220]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f5a:	e03a      	b.n	8004fd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d020      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f64:	4b34      	ldr	r3, [pc, #208]	; (8005038 <HAL_RCC_OscConfig+0x244>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6a:	f7fe fb77 	bl	800365c <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f72:	f7fe fb73 	bl	800365c <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e1a8      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f84:	4b2b      	ldr	r3, [pc, #172]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f90:	4b28      	ldr	r3, [pc, #160]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4925      	ldr	r1, [pc, #148]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	600b      	str	r3, [r1, #0]
 8004fa4:	e015      	b.n	8004fd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fa6:	4b24      	ldr	r3, [pc, #144]	; (8005038 <HAL_RCC_OscConfig+0x244>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fe fb56 	bl	800365c <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fb4:	f7fe fb52 	bl	800365c <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e187      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc6:	4b1b      	ldr	r3, [pc, #108]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f0      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d036      	beq.n	800504c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d016      	beq.n	8005014 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fe6:	4b15      	ldr	r3, [pc, #84]	; (800503c <HAL_RCC_OscConfig+0x248>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fec:	f7fe fb36 	bl	800365c <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ff4:	f7fe fb32 	bl	800365c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e167      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005006:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <HAL_RCC_OscConfig+0x240>)
 8005008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x200>
 8005012:	e01b      	b.n	800504c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005014:	4b09      	ldr	r3, [pc, #36]	; (800503c <HAL_RCC_OscConfig+0x248>)
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800501a:	f7fe fb1f 	bl	800365c <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005020:	e00e      	b.n	8005040 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005022:	f7fe fb1b 	bl	800365c <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d907      	bls.n	8005040 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e150      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
 8005034:	40023800 	.word	0x40023800
 8005038:	42470000 	.word	0x42470000
 800503c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005040:	4b88      	ldr	r3, [pc, #544]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 8005042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1ea      	bne.n	8005022 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8097 	beq.w	8005188 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800505a:	2300      	movs	r3, #0
 800505c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800505e:	4b81      	ldr	r3, [pc, #516]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10f      	bne.n	800508a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	60bb      	str	r3, [r7, #8]
 800506e:	4b7d      	ldr	r3, [pc, #500]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	4a7c      	ldr	r2, [pc, #496]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 8005074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005078:	6413      	str	r3, [r2, #64]	; 0x40
 800507a:	4b7a      	ldr	r3, [pc, #488]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005082:	60bb      	str	r3, [r7, #8]
 8005084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005086:	2301      	movs	r3, #1
 8005088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508a:	4b77      	ldr	r3, [pc, #476]	; (8005268 <HAL_RCC_OscConfig+0x474>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005092:	2b00      	cmp	r3, #0
 8005094:	d118      	bne.n	80050c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005096:	4b74      	ldr	r3, [pc, #464]	; (8005268 <HAL_RCC_OscConfig+0x474>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a73      	ldr	r2, [pc, #460]	; (8005268 <HAL_RCC_OscConfig+0x474>)
 800509c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050a2:	f7fe fadb 	bl	800365c <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050aa:	f7fe fad7 	bl	800365c <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e10c      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050bc:	4b6a      	ldr	r3, [pc, #424]	; (8005268 <HAL_RCC_OscConfig+0x474>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d106      	bne.n	80050de <HAL_RCC_OscConfig+0x2ea>
 80050d0:	4b64      	ldr	r3, [pc, #400]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 80050d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d4:	4a63      	ldr	r2, [pc, #396]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	6713      	str	r3, [r2, #112]	; 0x70
 80050dc:	e01c      	b.n	8005118 <HAL_RCC_OscConfig+0x324>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	2b05      	cmp	r3, #5
 80050e4:	d10c      	bne.n	8005100 <HAL_RCC_OscConfig+0x30c>
 80050e6:	4b5f      	ldr	r3, [pc, #380]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ea:	4a5e      	ldr	r2, [pc, #376]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 80050ec:	f043 0304 	orr.w	r3, r3, #4
 80050f0:	6713      	str	r3, [r2, #112]	; 0x70
 80050f2:	4b5c      	ldr	r3, [pc, #368]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f6:	4a5b      	ldr	r2, [pc, #364]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	6713      	str	r3, [r2, #112]	; 0x70
 80050fe:	e00b      	b.n	8005118 <HAL_RCC_OscConfig+0x324>
 8005100:	4b58      	ldr	r3, [pc, #352]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	4a57      	ldr	r2, [pc, #348]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 8005106:	f023 0301 	bic.w	r3, r3, #1
 800510a:	6713      	str	r3, [r2, #112]	; 0x70
 800510c:	4b55      	ldr	r3, [pc, #340]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 800510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005110:	4a54      	ldr	r2, [pc, #336]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 8005112:	f023 0304 	bic.w	r3, r3, #4
 8005116:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d015      	beq.n	800514c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005120:	f7fe fa9c 	bl	800365c <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005126:	e00a      	b.n	800513e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005128:	f7fe fa98 	bl	800365c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	f241 3288 	movw	r2, #5000	; 0x1388
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e0cb      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513e:	4b49      	ldr	r3, [pc, #292]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0ee      	beq.n	8005128 <HAL_RCC_OscConfig+0x334>
 800514a:	e014      	b.n	8005176 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800514c:	f7fe fa86 	bl	800365c <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005152:	e00a      	b.n	800516a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005154:	f7fe fa82 	bl	800365c <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e0b5      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800516a:	4b3e      	ldr	r3, [pc, #248]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1ee      	bne.n	8005154 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d105      	bne.n	8005188 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800517c:	4b39      	ldr	r3, [pc, #228]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	4a38      	ldr	r2, [pc, #224]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 8005182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005186:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 80a1 	beq.w	80052d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005192:	4b34      	ldr	r3, [pc, #208]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 030c 	and.w	r3, r3, #12
 800519a:	2b08      	cmp	r3, #8
 800519c:	d05c      	beq.n	8005258 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d141      	bne.n	800522a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a6:	4b31      	ldr	r3, [pc, #196]	; (800526c <HAL_RCC_OscConfig+0x478>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ac:	f7fe fa56 	bl	800365c <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b4:	f7fe fa52 	bl	800365c <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e087      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c6:	4b27      	ldr	r3, [pc, #156]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69da      	ldr	r2, [r3, #28]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	019b      	lsls	r3, r3, #6
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	085b      	lsrs	r3, r3, #1
 80051ea:	3b01      	subs	r3, #1
 80051ec:	041b      	lsls	r3, r3, #16
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	061b      	lsls	r3, r3, #24
 80051f6:	491b      	ldr	r1, [pc, #108]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051fc:	4b1b      	ldr	r3, [pc, #108]	; (800526c <HAL_RCC_OscConfig+0x478>)
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005202:	f7fe fa2b 	bl	800365c <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800520a:	f7fe fa27 	bl	800365c <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e05c      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521c:	4b11      	ldr	r3, [pc, #68]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_RCC_OscConfig+0x416>
 8005228:	e054      	b.n	80052d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800522a:	4b10      	ldr	r3, [pc, #64]	; (800526c <HAL_RCC_OscConfig+0x478>)
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005230:	f7fe fa14 	bl	800365c <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005238:	f7fe fa10 	bl	800365c <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e045      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524a:	4b06      	ldr	r3, [pc, #24]	; (8005264 <HAL_RCC_OscConfig+0x470>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0x444>
 8005256:	e03d      	b.n	80052d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d107      	bne.n	8005270 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e038      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
 8005264:	40023800 	.word	0x40023800
 8005268:	40007000 	.word	0x40007000
 800526c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005270:	4b1b      	ldr	r3, [pc, #108]	; (80052e0 <HAL_RCC_OscConfig+0x4ec>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d028      	beq.n	80052d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005288:	429a      	cmp	r2, r3
 800528a:	d121      	bne.n	80052d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005296:	429a      	cmp	r2, r3
 8005298:	d11a      	bne.n	80052d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052a0:	4013      	ands	r3, r2
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d111      	bne.n	80052d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	085b      	lsrs	r3, r3, #1
 80052b8:	3b01      	subs	r3, #1
 80052ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052bc:	429a      	cmp	r2, r3
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d001      	beq.n	80052d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e000      	b.n	80052d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40023800 	.word	0x40023800

080052e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0cc      	b.n	8005492 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052f8:	4b68      	ldr	r3, [pc, #416]	; (800549c <HAL_RCC_ClockConfig+0x1b8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d90c      	bls.n	8005320 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005306:	4b65      	ldr	r3, [pc, #404]	; (800549c <HAL_RCC_ClockConfig+0x1b8>)
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800530e:	4b63      	ldr	r3, [pc, #396]	; (800549c <HAL_RCC_ClockConfig+0x1b8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d001      	beq.n	8005320 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e0b8      	b.n	8005492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d020      	beq.n	800536e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005338:	4b59      	ldr	r3, [pc, #356]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	4a58      	ldr	r2, [pc, #352]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005342:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b00      	cmp	r3, #0
 800534e:	d005      	beq.n	800535c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005350:	4b53      	ldr	r3, [pc, #332]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	4a52      	ldr	r2, [pc, #328]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800535a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800535c:	4b50      	ldr	r3, [pc, #320]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	494d      	ldr	r1, [pc, #308]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	4313      	orrs	r3, r2
 800536c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d044      	beq.n	8005404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d107      	bne.n	8005392 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005382:	4b47      	ldr	r3, [pc, #284]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d119      	bne.n	80053c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e07f      	b.n	8005492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d003      	beq.n	80053a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d107      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a2:	4b3f      	ldr	r3, [pc, #252]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e06f      	b.n	8005492 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b2:	4b3b      	ldr	r3, [pc, #236]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e067      	b.n	8005492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053c2:	4b37      	ldr	r3, [pc, #220]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f023 0203 	bic.w	r2, r3, #3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	4934      	ldr	r1, [pc, #208]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053d4:	f7fe f942 	bl	800365c <HAL_GetTick>
 80053d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053da:	e00a      	b.n	80053f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053dc:	f7fe f93e 	bl	800365c <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e04f      	b.n	8005492 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f2:	4b2b      	ldr	r3, [pc, #172]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 020c 	and.w	r2, r3, #12
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	429a      	cmp	r2, r3
 8005402:	d1eb      	bne.n	80053dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005404:	4b25      	ldr	r3, [pc, #148]	; (800549c <HAL_RCC_ClockConfig+0x1b8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d20c      	bcs.n	800542c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005412:	4b22      	ldr	r3, [pc, #136]	; (800549c <HAL_RCC_ClockConfig+0x1b8>)
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800541a:	4b20      	ldr	r3, [pc, #128]	; (800549c <HAL_RCC_ClockConfig+0x1b8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d001      	beq.n	800542c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e032      	b.n	8005492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d008      	beq.n	800544a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005438:	4b19      	ldr	r3, [pc, #100]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	4916      	ldr	r1, [pc, #88]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	4313      	orrs	r3, r2
 8005448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d009      	beq.n	800546a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005456:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	490e      	ldr	r1, [pc, #56]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	4313      	orrs	r3, r2
 8005468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800546a:	f000 f821 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 800546e:	4602      	mov	r2, r0
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	091b      	lsrs	r3, r3, #4
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	490a      	ldr	r1, [pc, #40]	; (80054a4 <HAL_RCC_ClockConfig+0x1c0>)
 800547c:	5ccb      	ldrb	r3, [r1, r3]
 800547e:	fa22 f303 	lsr.w	r3, r2, r3
 8005482:	4a09      	ldr	r2, [pc, #36]	; (80054a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005486:	4b09      	ldr	r3, [pc, #36]	; (80054ac <HAL_RCC_ClockConfig+0x1c8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f7fe f8a2 	bl	80035d4 <HAL_InitTick>

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	40023c00 	.word	0x40023c00
 80054a0:	40023800 	.word	0x40023800
 80054a4:	08009d08 	.word	0x08009d08
 80054a8:	20000040 	.word	0x20000040
 80054ac:	20000044 	.word	0x20000044

080054b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054b4:	b090      	sub	sp, #64	; 0x40
 80054b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
 80054bc:	2300      	movs	r3, #0
 80054be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054c0:	2300      	movs	r3, #0
 80054c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054c8:	4b59      	ldr	r3, [pc, #356]	; (8005630 <HAL_RCC_GetSysClockFreq+0x180>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 030c 	and.w	r3, r3, #12
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d00d      	beq.n	80054f0 <HAL_RCC_GetSysClockFreq+0x40>
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	f200 80a1 	bhi.w	800561c <HAL_RCC_GetSysClockFreq+0x16c>
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_RCC_GetSysClockFreq+0x34>
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d003      	beq.n	80054ea <HAL_RCC_GetSysClockFreq+0x3a>
 80054e2:	e09b      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054e4:	4b53      	ldr	r3, [pc, #332]	; (8005634 <HAL_RCC_GetSysClockFreq+0x184>)
 80054e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80054e8:	e09b      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054ea:	4b53      	ldr	r3, [pc, #332]	; (8005638 <HAL_RCC_GetSysClockFreq+0x188>)
 80054ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054ee:	e098      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054f0:	4b4f      	ldr	r3, [pc, #316]	; (8005630 <HAL_RCC_GetSysClockFreq+0x180>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054fa:	4b4d      	ldr	r3, [pc, #308]	; (8005630 <HAL_RCC_GetSysClockFreq+0x180>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d028      	beq.n	8005558 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005506:	4b4a      	ldr	r3, [pc, #296]	; (8005630 <HAL_RCC_GetSysClockFreq+0x180>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	099b      	lsrs	r3, r3, #6
 800550c:	2200      	movs	r2, #0
 800550e:	623b      	str	r3, [r7, #32]
 8005510:	627a      	str	r2, [r7, #36]	; 0x24
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005518:	2100      	movs	r1, #0
 800551a:	4b47      	ldr	r3, [pc, #284]	; (8005638 <HAL_RCC_GetSysClockFreq+0x188>)
 800551c:	fb03 f201 	mul.w	r2, r3, r1
 8005520:	2300      	movs	r3, #0
 8005522:	fb00 f303 	mul.w	r3, r0, r3
 8005526:	4413      	add	r3, r2
 8005528:	4a43      	ldr	r2, [pc, #268]	; (8005638 <HAL_RCC_GetSysClockFreq+0x188>)
 800552a:	fba0 1202 	umull	r1, r2, r0, r2
 800552e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005530:	460a      	mov	r2, r1
 8005532:	62ba      	str	r2, [r7, #40]	; 0x28
 8005534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005536:	4413      	add	r3, r2
 8005538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800553a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553c:	2200      	movs	r2, #0
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	61fa      	str	r2, [r7, #28]
 8005542:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005546:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800554a:	f7fb fb9d 	bl	8000c88 <__aeabi_uldivmod>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4613      	mov	r3, r2
 8005554:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005556:	e053      	b.n	8005600 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005558:	4b35      	ldr	r3, [pc, #212]	; (8005630 <HAL_RCC_GetSysClockFreq+0x180>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	099b      	lsrs	r3, r3, #6
 800555e:	2200      	movs	r2, #0
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	617a      	str	r2, [r7, #20]
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800556a:	f04f 0b00 	mov.w	fp, #0
 800556e:	4652      	mov	r2, sl
 8005570:	465b      	mov	r3, fp
 8005572:	f04f 0000 	mov.w	r0, #0
 8005576:	f04f 0100 	mov.w	r1, #0
 800557a:	0159      	lsls	r1, r3, #5
 800557c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005580:	0150      	lsls	r0, r2, #5
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	ebb2 080a 	subs.w	r8, r2, sl
 800558a:	eb63 090b 	sbc.w	r9, r3, fp
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800559a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800559e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80055a2:	ebb2 0408 	subs.w	r4, r2, r8
 80055a6:	eb63 0509 	sbc.w	r5, r3, r9
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	00eb      	lsls	r3, r5, #3
 80055b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055b8:	00e2      	lsls	r2, r4, #3
 80055ba:	4614      	mov	r4, r2
 80055bc:	461d      	mov	r5, r3
 80055be:	eb14 030a 	adds.w	r3, r4, sl
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	eb45 030b 	adc.w	r3, r5, fp
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055d6:	4629      	mov	r1, r5
 80055d8:	028b      	lsls	r3, r1, #10
 80055da:	4621      	mov	r1, r4
 80055dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055e0:	4621      	mov	r1, r4
 80055e2:	028a      	lsls	r2, r1, #10
 80055e4:	4610      	mov	r0, r2
 80055e6:	4619      	mov	r1, r3
 80055e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ea:	2200      	movs	r2, #0
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	60fa      	str	r2, [r7, #12]
 80055f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055f4:	f7fb fb48 	bl	8000c88 <__aeabi_uldivmod>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4613      	mov	r3, r2
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005600:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <HAL_RCC_GetSysClockFreq+0x180>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	0c1b      	lsrs	r3, r3, #16
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	3301      	adds	r3, #1
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005610:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800561a:	e002      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <HAL_RCC_GetSysClockFreq+0x184>)
 800561e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005624:	4618      	mov	r0, r3
 8005626:	3740      	adds	r7, #64	; 0x40
 8005628:	46bd      	mov	sp, r7
 800562a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800562e:	bf00      	nop
 8005630:	40023800 	.word	0x40023800
 8005634:	00f42400 	.word	0x00f42400
 8005638:	00b71b00 	.word	0x00b71b00

0800563c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005640:	4b03      	ldr	r3, [pc, #12]	; (8005650 <HAL_RCC_GetHCLKFreq+0x14>)
 8005642:	681b      	ldr	r3, [r3, #0]
}
 8005644:	4618      	mov	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20000040 	.word	0x20000040

08005654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005658:	f7ff fff0 	bl	800563c <HAL_RCC_GetHCLKFreq>
 800565c:	4602      	mov	r2, r0
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	0a9b      	lsrs	r3, r3, #10
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4903      	ldr	r1, [pc, #12]	; (8005678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40023800 	.word	0x40023800
 8005678:	08009d18 	.word	0x08009d18

0800567c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005680:	f7ff ffdc 	bl	800563c <HAL_RCC_GetHCLKFreq>
 8005684:	4602      	mov	r2, r0
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	0b5b      	lsrs	r3, r3, #13
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	4903      	ldr	r1, [pc, #12]	; (80056a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005692:	5ccb      	ldrb	r3, [r1, r3]
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005698:	4618      	mov	r0, r3
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40023800 	.word	0x40023800
 80056a0:	08009d18 	.word	0x08009d18

080056a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e07b      	b.n	80057ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d108      	bne.n	80056d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056c6:	d009      	beq.n	80056dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	61da      	str	r2, [r3, #28]
 80056ce:	e005      	b.n	80056dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fd fbdc 	bl	8002eb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005712:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	431a      	orrs	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800574c:	431a      	orrs	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005760:	ea42 0103 	orr.w	r1, r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005768:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	0c1b      	lsrs	r3, r3, #16
 800577a:	f003 0104 	and.w	r1, r3, #4
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	f003 0210 	and.w	r2, r3, #16
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800579c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b082      	sub	sp, #8
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e041      	b.n	800584c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d106      	bne.n	80057e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7fd fc7b 	bl	80030d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2202      	movs	r2, #2
 80057e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3304      	adds	r3, #4
 80057f2:	4619      	mov	r1, r3
 80057f4:	4610      	mov	r0, r2
 80057f6:	f000 fd77 	bl	80062e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	d001      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e04e      	b.n	800590a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a23      	ldr	r2, [pc, #140]	; (8005918 <HAL_TIM_Base_Start_IT+0xc4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d022      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005896:	d01d      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1f      	ldr	r2, [pc, #124]	; (800591c <HAL_TIM_Base_Start_IT+0xc8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d018      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a1e      	ldr	r2, [pc, #120]	; (8005920 <HAL_TIM_Base_Start_IT+0xcc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d013      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1c      	ldr	r2, [pc, #112]	; (8005924 <HAL_TIM_Base_Start_IT+0xd0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00e      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1b      	ldr	r2, [pc, #108]	; (8005928 <HAL_TIM_Base_Start_IT+0xd4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d009      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a19      	ldr	r2, [pc, #100]	; (800592c <HAL_TIM_Base_Start_IT+0xd8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d004      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a18      	ldr	r2, [pc, #96]	; (8005930 <HAL_TIM_Base_Start_IT+0xdc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d111      	bne.n	80058f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b06      	cmp	r3, #6
 80058e4:	d010      	beq.n	8005908 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0201 	orr.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f6:	e007      	b.n	8005908 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0201 	orr.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40010000 	.word	0x40010000
 800591c:	40000400 	.word	0x40000400
 8005920:	40000800 	.word	0x40000800
 8005924:	40000c00 	.word	0x40000c00
 8005928:	40010400 	.word	0x40010400
 800592c:	40014000 	.word	0x40014000
 8005930:	40001800 	.word	0x40001800

08005934 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6a1a      	ldr	r2, [r3, #32]
 8005952:	f241 1311 	movw	r3, #4369	; 0x1111
 8005956:	4013      	ands	r3, r2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10f      	bne.n	800597c <HAL_TIM_Base_Stop_IT+0x48>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6a1a      	ldr	r2, [r3, #32]
 8005962:	f240 4344 	movw	r3, #1092	; 0x444
 8005966:	4013      	ands	r3, r2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d107      	bne.n	800597c <HAL_TIM_Base_Stop_IT+0x48>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0201 	bic.w	r2, r2, #1
 800597a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b082      	sub	sp, #8
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e041      	b.n	8005a28 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d106      	bne.n	80059be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7fd fac3 	bl	8002f44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2202      	movs	r2, #2
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4619      	mov	r1, r3
 80059d0:	4610      	mov	r0, r2
 80059d2:	f000 fc89 	bl	80062e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d109      	bne.n	8005a58 <HAL_TIM_PWM_Start_IT+0x28>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	bf14      	ite	ne
 8005a50:	2301      	movne	r3, #1
 8005a52:	2300      	moveq	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	e022      	b.n	8005a9e <HAL_TIM_PWM_Start_IT+0x6e>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d109      	bne.n	8005a72 <HAL_TIM_PWM_Start_IT+0x42>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	bf14      	ite	ne
 8005a6a:	2301      	movne	r3, #1
 8005a6c:	2300      	moveq	r3, #0
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	e015      	b.n	8005a9e <HAL_TIM_PWM_Start_IT+0x6e>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d109      	bne.n	8005a8c <HAL_TIM_PWM_Start_IT+0x5c>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	bf14      	ite	ne
 8005a84:	2301      	movne	r3, #1
 8005a86:	2300      	moveq	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	e008      	b.n	8005a9e <HAL_TIM_PWM_Start_IT+0x6e>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e0c7      	b.n	8005c36 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_PWM_Start_IT+0x86>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ab4:	e013      	b.n	8005ade <HAL_TIM_PWM_Start_IT+0xae>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d104      	bne.n	8005ac6 <HAL_TIM_PWM_Start_IT+0x96>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ac4:	e00b      	b.n	8005ade <HAL_TIM_PWM_Start_IT+0xae>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d104      	bne.n	8005ad6 <HAL_TIM_PWM_Start_IT+0xa6>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad4:	e003      	b.n	8005ade <HAL_TIM_PWM_Start_IT+0xae>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2202      	movs	r2, #2
 8005ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b0c      	cmp	r3, #12
 8005ae2:	d841      	bhi.n	8005b68 <HAL_TIM_PWM_Start_IT+0x138>
 8005ae4:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <HAL_TIM_PWM_Start_IT+0xbc>)
 8005ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005b21 	.word	0x08005b21
 8005af0:	08005b69 	.word	0x08005b69
 8005af4:	08005b69 	.word	0x08005b69
 8005af8:	08005b69 	.word	0x08005b69
 8005afc:	08005b33 	.word	0x08005b33
 8005b00:	08005b69 	.word	0x08005b69
 8005b04:	08005b69 	.word	0x08005b69
 8005b08:	08005b69 	.word	0x08005b69
 8005b0c:	08005b45 	.word	0x08005b45
 8005b10:	08005b69 	.word	0x08005b69
 8005b14:	08005b69 	.word	0x08005b69
 8005b18:	08005b69 	.word	0x08005b69
 8005b1c:	08005b57 	.word	0x08005b57
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0202 	orr.w	r2, r2, #2
 8005b2e:	60da      	str	r2, [r3, #12]
      break;
 8005b30:	e01d      	b.n	8005b6e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0204 	orr.w	r2, r2, #4
 8005b40:	60da      	str	r2, [r3, #12]
      break;
 8005b42:	e014      	b.n	8005b6e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0208 	orr.w	r2, r2, #8
 8005b52:	60da      	str	r2, [r3, #12]
      break;
 8005b54:	e00b      	b.n	8005b6e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f042 0210 	orr.w	r2, r2, #16
 8005b64:	60da      	str	r2, [r3, #12]
      break;
 8005b66:	e002      	b.n	8005b6e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d15f      	bne.n	8005c34 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fe03 	bl	8006788 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a2e      	ldr	r2, [pc, #184]	; (8005c40 <HAL_TIM_PWM_Start_IT+0x210>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d004      	beq.n	8005b96 <HAL_TIM_PWM_Start_IT+0x166>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a2c      	ldr	r2, [pc, #176]	; (8005c44 <HAL_TIM_PWM_Start_IT+0x214>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d101      	bne.n	8005b9a <HAL_TIM_PWM_Start_IT+0x16a>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <HAL_TIM_PWM_Start_IT+0x16c>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d007      	beq.n	8005bb0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a22      	ldr	r2, [pc, #136]	; (8005c40 <HAL_TIM_PWM_Start_IT+0x210>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d022      	beq.n	8005c00 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc2:	d01d      	beq.n	8005c00 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1f      	ldr	r2, [pc, #124]	; (8005c48 <HAL_TIM_PWM_Start_IT+0x218>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d018      	beq.n	8005c00 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <HAL_TIM_PWM_Start_IT+0x21c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d013      	beq.n	8005c00 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1c      	ldr	r2, [pc, #112]	; (8005c50 <HAL_TIM_PWM_Start_IT+0x220>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00e      	beq.n	8005c00 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a17      	ldr	r2, [pc, #92]	; (8005c44 <HAL_TIM_PWM_Start_IT+0x214>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d009      	beq.n	8005c00 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a18      	ldr	r2, [pc, #96]	; (8005c54 <HAL_TIM_PWM_Start_IT+0x224>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d004      	beq.n	8005c00 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <HAL_TIM_PWM_Start_IT+0x228>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d111      	bne.n	8005c24 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b06      	cmp	r3, #6
 8005c10:	d010      	beq.n	8005c34 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 0201 	orr.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c22:	e007      	b.n	8005c34 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	40010000 	.word	0x40010000
 8005c44:	40010400 	.word	0x40010400
 8005c48:	40000400 	.word	0x40000400
 8005c4c:	40000800 	.word	0x40000800
 8005c50:	40000c00 	.word	0x40000c00
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40001800 	.word	0x40001800

08005c5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e097      	b.n	8005da0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d106      	bne.n	8005c8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7fd f9a9 	bl	8002fdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ca0:	f023 0307 	bic.w	r3, r3, #7
 8005ca4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3304      	adds	r3, #4
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f000 fb19 	bl	80062e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cde:	f023 0303 	bic.w	r3, r3, #3
 8005ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005cfc:	f023 030c 	bic.w	r3, r3, #12
 8005d00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	011a      	lsls	r2, r3, #4
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	031b      	lsls	r3, r3, #12
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dc0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dc8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005dd0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d110      	bne.n	8005dfa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d102      	bne.n	8005de4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dde:	7b7b      	ldrb	r3, [r7, #13]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d001      	beq.n	8005de8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e089      	b.n	8005efc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005df8:	e031      	b.n	8005e5e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d110      	bne.n	8005e22 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d102      	bne.n	8005e0c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e06:	7b3b      	ldrb	r3, [r7, #12]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d001      	beq.n	8005e10 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e075      	b.n	8005efc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e20:	e01d      	b.n	8005e5e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d108      	bne.n	8005e3a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e28:	7bbb      	ldrb	r3, [r7, #14]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d105      	bne.n	8005e3a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e2e:	7b7b      	ldrb	r3, [r7, #13]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d102      	bne.n	8005e3a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e34:	7b3b      	ldrb	r3, [r7, #12]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d001      	beq.n	8005e3e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e05e      	b.n	8005efc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_TIM_Encoder_Start_IT+0xc4>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d010      	beq.n	8005e8c <HAL_TIM_Encoder_Start_IT+0xe4>
 8005e6a:	e01f      	b.n	8005eac <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2201      	movs	r2, #1
 8005e72:	2100      	movs	r1, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fc87 	bl	8006788 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0202 	orr.w	r2, r2, #2
 8005e88:	60da      	str	r2, [r3, #12]
      break;
 8005e8a:	e02e      	b.n	8005eea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2201      	movs	r2, #1
 8005e92:	2104      	movs	r1, #4
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fc77 	bl	8006788 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 0204 	orr.w	r2, r2, #4
 8005ea8:	60da      	str	r2, [r3, #12]
      break;
 8005eaa:	e01e      	b.n	8005eea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fc67 	bl	8006788 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	2104      	movs	r1, #4
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fc60 	bl	8006788 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0202 	orr.w	r2, r2, #2
 8005ed6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0204 	orr.w	r2, r2, #4
 8005ee6:	60da      	str	r2, [r3, #12]
      break;
 8005ee8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0201 	orr.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d122      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d11b      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0202 	mvn.w	r2, #2
 8005f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9b0 	bl	80062ac <HAL_TIM_IC_CaptureCallback>
 8005f4c:	e005      	b.n	8005f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f9a2 	bl	8006298 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f9b3 	bl	80062c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0304 	and.w	r3, r3, #4
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d122      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d11b      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0204 	mvn.w	r2, #4
 8005f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f986 	bl	80062ac <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f978 	bl	8006298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f989 	bl	80062c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d122      	bne.n	8006008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d11b      	bne.n	8006008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0208 	mvn.w	r2, #8
 8005fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2204      	movs	r2, #4
 8005fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f95c 	bl	80062ac <HAL_TIM_IC_CaptureCallback>
 8005ff4:	e005      	b.n	8006002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f94e 	bl	8006298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f95f 	bl	80062c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f003 0310 	and.w	r3, r3, #16
 8006012:	2b10      	cmp	r3, #16
 8006014:	d122      	bne.n	800605c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	2b10      	cmp	r3, #16
 8006022:	d11b      	bne.n	800605c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f06f 0210 	mvn.w	r2, #16
 800602c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2208      	movs	r2, #8
 8006032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f932 	bl	80062ac <HAL_TIM_IC_CaptureCallback>
 8006048:	e005      	b.n	8006056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f924 	bl	8006298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f935 	bl	80062c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b01      	cmp	r3, #1
 8006068:	d10e      	bne.n	8006088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b01      	cmp	r3, #1
 8006076:	d107      	bne.n	8006088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0201 	mvn.w	r2, #1
 8006080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fb fb30 	bl	80016e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006092:	2b80      	cmp	r3, #128	; 0x80
 8006094:	d10e      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a0:	2b80      	cmp	r3, #128	; 0x80
 80060a2:	d107      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fc68 	bl	8006984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060be:	2b40      	cmp	r3, #64	; 0x40
 80060c0:	d10e      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060cc:	2b40      	cmp	r3, #64	; 0x40
 80060ce:	d107      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8fa 	bl	80062d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d10e      	bne.n	800610c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f003 0320 	and.w	r3, r3, #32
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	d107      	bne.n	800610c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f06f 0220 	mvn.w	r2, #32
 8006104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fc32 	bl	8006970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800610c:	bf00      	nop
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800612e:	2302      	movs	r3, #2
 8006130:	e0ae      	b.n	8006290 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b0c      	cmp	r3, #12
 800613e:	f200 809f 	bhi.w	8006280 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006142:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006148:	0800617d 	.word	0x0800617d
 800614c:	08006281 	.word	0x08006281
 8006150:	08006281 	.word	0x08006281
 8006154:	08006281 	.word	0x08006281
 8006158:	080061bd 	.word	0x080061bd
 800615c:	08006281 	.word	0x08006281
 8006160:	08006281 	.word	0x08006281
 8006164:	08006281 	.word	0x08006281
 8006168:	080061ff 	.word	0x080061ff
 800616c:	08006281 	.word	0x08006281
 8006170:	08006281 	.word	0x08006281
 8006174:	08006281 	.word	0x08006281
 8006178:	0800623f 	.word	0x0800623f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68b9      	ldr	r1, [r7, #8]
 8006182:	4618      	mov	r0, r3
 8006184:	f000 f950 	bl	8006428 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0208 	orr.w	r2, r2, #8
 8006196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0204 	bic.w	r2, r2, #4
 80061a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6999      	ldr	r1, [r3, #24]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	691a      	ldr	r2, [r3, #16]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	619a      	str	r2, [r3, #24]
      break;
 80061ba:	e064      	b.n	8006286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 f9a0 	bl	8006508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6999      	ldr	r1, [r3, #24]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	021a      	lsls	r2, r3, #8
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	619a      	str	r2, [r3, #24]
      break;
 80061fc:	e043      	b.n	8006286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	4618      	mov	r0, r3
 8006206:	f000 f9f5 	bl	80065f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69da      	ldr	r2, [r3, #28]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0208 	orr.w	r2, r2, #8
 8006218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69da      	ldr	r2, [r3, #28]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0204 	bic.w	r2, r2, #4
 8006228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69d9      	ldr	r1, [r3, #28]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	691a      	ldr	r2, [r3, #16]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	61da      	str	r2, [r3, #28]
      break;
 800623c:	e023      	b.n	8006286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68b9      	ldr	r1, [r7, #8]
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fa49 	bl	80066dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69da      	ldr	r2, [r3, #28]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69d9      	ldr	r1, [r3, #28]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	021a      	lsls	r2, r3, #8
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	61da      	str	r2, [r3, #28]
      break;
 800627e:	e002      	b.n	8006286 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	75fb      	strb	r3, [r7, #23]
      break;
 8006284:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800628e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a40      	ldr	r2, [pc, #256]	; (80063fc <TIM_Base_SetConfig+0x114>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d013      	beq.n	8006328 <TIM_Base_SetConfig+0x40>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006306:	d00f      	beq.n	8006328 <TIM_Base_SetConfig+0x40>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a3d      	ldr	r2, [pc, #244]	; (8006400 <TIM_Base_SetConfig+0x118>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00b      	beq.n	8006328 <TIM_Base_SetConfig+0x40>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a3c      	ldr	r2, [pc, #240]	; (8006404 <TIM_Base_SetConfig+0x11c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d007      	beq.n	8006328 <TIM_Base_SetConfig+0x40>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a3b      	ldr	r2, [pc, #236]	; (8006408 <TIM_Base_SetConfig+0x120>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_Base_SetConfig+0x40>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a3a      	ldr	r2, [pc, #232]	; (800640c <TIM_Base_SetConfig+0x124>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d108      	bne.n	800633a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a2f      	ldr	r2, [pc, #188]	; (80063fc <TIM_Base_SetConfig+0x114>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d02b      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006348:	d027      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a2c      	ldr	r2, [pc, #176]	; (8006400 <TIM_Base_SetConfig+0x118>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d023      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a2b      	ldr	r2, [pc, #172]	; (8006404 <TIM_Base_SetConfig+0x11c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d01f      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a2a      	ldr	r2, [pc, #168]	; (8006408 <TIM_Base_SetConfig+0x120>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01b      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a29      	ldr	r2, [pc, #164]	; (800640c <TIM_Base_SetConfig+0x124>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d017      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a28      	ldr	r2, [pc, #160]	; (8006410 <TIM_Base_SetConfig+0x128>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a27      	ldr	r2, [pc, #156]	; (8006414 <TIM_Base_SetConfig+0x12c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00f      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a26      	ldr	r2, [pc, #152]	; (8006418 <TIM_Base_SetConfig+0x130>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00b      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a25      	ldr	r2, [pc, #148]	; (800641c <TIM_Base_SetConfig+0x134>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d007      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a24      	ldr	r2, [pc, #144]	; (8006420 <TIM_Base_SetConfig+0x138>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d003      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a23      	ldr	r2, [pc, #140]	; (8006424 <TIM_Base_SetConfig+0x13c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d108      	bne.n	80063ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a0a      	ldr	r2, [pc, #40]	; (80063fc <TIM_Base_SetConfig+0x114>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d003      	beq.n	80063e0 <TIM_Base_SetConfig+0xf8>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a0c      	ldr	r2, [pc, #48]	; (800640c <TIM_Base_SetConfig+0x124>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d103      	bne.n	80063e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	615a      	str	r2, [r3, #20]
}
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40010000 	.word	0x40010000
 8006400:	40000400 	.word	0x40000400
 8006404:	40000800 	.word	0x40000800
 8006408:	40000c00 	.word	0x40000c00
 800640c:	40010400 	.word	0x40010400
 8006410:	40014000 	.word	0x40014000
 8006414:	40014400 	.word	0x40014400
 8006418:	40014800 	.word	0x40014800
 800641c:	40001800 	.word	0x40001800
 8006420:	40001c00 	.word	0x40001c00
 8006424:	40002000 	.word	0x40002000

08006428 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f023 0201 	bic.w	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f023 0302 	bic.w	r3, r3, #2
 8006470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a20      	ldr	r2, [pc, #128]	; (8006500 <TIM_OC1_SetConfig+0xd8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_OC1_SetConfig+0x64>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a1f      	ldr	r2, [pc, #124]	; (8006504 <TIM_OC1_SetConfig+0xdc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d10c      	bne.n	80064a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f023 0308 	bic.w	r3, r3, #8
 8006492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f023 0304 	bic.w	r3, r3, #4
 80064a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a15      	ldr	r2, [pc, #84]	; (8006500 <TIM_OC1_SetConfig+0xd8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d003      	beq.n	80064b6 <TIM_OC1_SetConfig+0x8e>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a14      	ldr	r2, [pc, #80]	; (8006504 <TIM_OC1_SetConfig+0xdc>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d111      	bne.n	80064da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	621a      	str	r2, [r3, #32]
}
 80064f4:	bf00      	nop
 80064f6:	371c      	adds	r7, #28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	40010000 	.word	0x40010000
 8006504:	40010400 	.word	0x40010400

08006508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f023 0210 	bic.w	r2, r3, #16
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800653e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f023 0320 	bic.w	r3, r3, #32
 8006552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a22      	ldr	r2, [pc, #136]	; (80065ec <TIM_OC2_SetConfig+0xe4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d003      	beq.n	8006570 <TIM_OC2_SetConfig+0x68>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a21      	ldr	r2, [pc, #132]	; (80065f0 <TIM_OC2_SetConfig+0xe8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d10d      	bne.n	800658c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4313      	orrs	r3, r2
 8006582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800658a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a17      	ldr	r2, [pc, #92]	; (80065ec <TIM_OC2_SetConfig+0xe4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d003      	beq.n	800659c <TIM_OC2_SetConfig+0x94>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a16      	ldr	r2, [pc, #88]	; (80065f0 <TIM_OC2_SetConfig+0xe8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d113      	bne.n	80065c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	621a      	str	r2, [r3, #32]
}
 80065de:	bf00      	nop
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40010400 	.word	0x40010400

080065f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0303 	bic.w	r3, r3, #3
 800662a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800663c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	021b      	lsls	r3, r3, #8
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a21      	ldr	r2, [pc, #132]	; (80066d4 <TIM_OC3_SetConfig+0xe0>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d003      	beq.n	800665a <TIM_OC3_SetConfig+0x66>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a20      	ldr	r2, [pc, #128]	; (80066d8 <TIM_OC3_SetConfig+0xe4>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d10d      	bne.n	8006676 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a16      	ldr	r2, [pc, #88]	; (80066d4 <TIM_OC3_SetConfig+0xe0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d003      	beq.n	8006686 <TIM_OC3_SetConfig+0x92>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <TIM_OC3_SetConfig+0xe4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d113      	bne.n	80066ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800668c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	621a      	str	r2, [r3, #32]
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	40010000 	.word	0x40010000
 80066d8:	40010400 	.word	0x40010400

080066dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	021b      	lsls	r3, r3, #8
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	031b      	lsls	r3, r3, #12
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a12      	ldr	r2, [pc, #72]	; (8006780 <TIM_OC4_SetConfig+0xa4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d003      	beq.n	8006744 <TIM_OC4_SetConfig+0x68>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a11      	ldr	r2, [pc, #68]	; (8006784 <TIM_OC4_SetConfig+0xa8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d109      	bne.n	8006758 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800674a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	019b      	lsls	r3, r3, #6
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	40010000 	.word	0x40010000
 8006784:	40010400 	.word	0x40010400

08006788 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f003 031f 	and.w	r3, r3, #31
 800679a:	2201      	movs	r2, #1
 800679c:	fa02 f303 	lsl.w	r3, r2, r3
 80067a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a1a      	ldr	r2, [r3, #32]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	43db      	mvns	r3, r3
 80067aa:	401a      	ands	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a1a      	ldr	r2, [r3, #32]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f003 031f 	and.w	r3, r3, #31
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	fa01 f303 	lsl.w	r3, r1, r3
 80067c0:	431a      	orrs	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
	...

080067d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e05a      	b.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a21      	ldr	r2, [pc, #132]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d022      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006838:	d01d      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d018      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1b      	ldr	r2, [pc, #108]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d013      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1a      	ldr	r2, [pc, #104]	; (80068bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00e      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a18      	ldr	r2, [pc, #96]	; (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d009      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d004      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a15      	ldr	r2, [pc, #84]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d10c      	bne.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800687c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	4313      	orrs	r3, r2
 8006886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40010000 	.word	0x40010000
 80068b4:	40000400 	.word	0x40000400
 80068b8:	40000800 	.word	0x40000800
 80068bc:	40000c00 	.word	0x40000c00
 80068c0:	40010400 	.word	0x40010400
 80068c4:	40014000 	.word	0x40014000
 80068c8:	40001800 	.word	0x40001800

080068cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e03d      	b.n	8006964 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e03f      	b.n	8006a2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d106      	bne.n	80069c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fc fc5a 	bl	8003278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2224      	movs	r2, #36	; 0x24
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f929 	bl	8006c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	695a      	ldr	r2, [r3, #20]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68da      	ldr	r2, [r3, #12]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b08a      	sub	sp, #40	; 0x28
 8006a36:	af02      	add	r7, sp, #8
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	603b      	str	r3, [r7, #0]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d17c      	bne.n	8006b4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <HAL_UART_Transmit+0x2c>
 8006a58:	88fb      	ldrh	r3, [r7, #6]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e075      	b.n	8006b4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_UART_Transmit+0x3e>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e06e      	b.n	8006b4e <HAL_UART_Transmit+0x11c>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2221      	movs	r2, #33	; 0x21
 8006a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a86:	f7fc fde9 	bl	800365c <HAL_GetTick>
 8006a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	88fa      	ldrh	r2, [r7, #6]
 8006a96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa0:	d108      	bne.n	8006ab4 <HAL_UART_Transmit+0x82>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d104      	bne.n	8006ab4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	61bb      	str	r3, [r7, #24]
 8006ab2:	e003      	b.n	8006abc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006ac4:	e02a      	b.n	8006b1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2200      	movs	r2, #0
 8006ace:	2180      	movs	r1, #128	; 0x80
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 f840 	bl	8006b56 <UART_WaitOnFlagUntilTimeout>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e036      	b.n	8006b4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10b      	bne.n	8006afe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006af4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	3302      	adds	r3, #2
 8006afa:	61bb      	str	r3, [r7, #24]
 8006afc:	e007      	b.n	8006b0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	781a      	ldrb	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1cf      	bne.n	8006ac6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2140      	movs	r1, #64	; 0x40
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 f810 	bl	8006b56 <UART_WaitOnFlagUntilTimeout>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e006      	b.n	8006b4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e000      	b.n	8006b4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b4c:	2302      	movs	r3, #2
  }
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3720      	adds	r7, #32
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b090      	sub	sp, #64	; 0x40
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	603b      	str	r3, [r7, #0]
 8006b62:	4613      	mov	r3, r2
 8006b64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b66:	e050      	b.n	8006c0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6e:	d04c      	beq.n	8006c0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d007      	beq.n	8006b86 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b76:	f7fc fd71 	bl	800365c <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d241      	bcs.n	8006c0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	330c      	adds	r3, #12
 8006b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	330c      	adds	r3, #12
 8006ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ba6:	637a      	str	r2, [r7, #52]	; 0x34
 8006ba8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e5      	bne.n	8006b86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3314      	adds	r3, #20
 8006bc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f023 0301 	bic.w	r3, r3, #1
 8006bd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3314      	adds	r3, #20
 8006bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bda:	623a      	str	r2, [r7, #32]
 8006bdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	69f9      	ldr	r1, [r7, #28]
 8006be0:	6a3a      	ldr	r2, [r7, #32]
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e5      	bne.n	8006bba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e00f      	b.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4013      	ands	r3, r2
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	bf0c      	ite	eq
 8006c1a:	2301      	moveq	r3, #1
 8006c1c:	2300      	movne	r3, #0
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	461a      	mov	r2, r3
 8006c22:	79fb      	ldrb	r3, [r7, #7]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d09f      	beq.n	8006b68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3740      	adds	r7, #64	; 0x40
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c38:	b0c0      	sub	sp, #256	; 0x100
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c50:	68d9      	ldr	r1, [r3, #12]
 8006c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	ea40 0301 	orr.w	r3, r0, r1
 8006c5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c8c:	f021 010c 	bic.w	r1, r1, #12
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cae:	6999      	ldr	r1, [r3, #24]
 8006cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	ea40 0301 	orr.w	r3, r0, r1
 8006cba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b8f      	ldr	r3, [pc, #572]	; (8006f00 <UART_SetConfig+0x2cc>)
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d005      	beq.n	8006cd4 <UART_SetConfig+0xa0>
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	4b8d      	ldr	r3, [pc, #564]	; (8006f04 <UART_SetConfig+0x2d0>)
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d104      	bne.n	8006cde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cd4:	f7fe fcd2 	bl	800567c <HAL_RCC_GetPCLK2Freq>
 8006cd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006cdc:	e003      	b.n	8006ce6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cde:	f7fe fcb9 	bl	8005654 <HAL_RCC_GetPCLK1Freq>
 8006ce2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cf0:	f040 810c 	bne.w	8006f0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d06:	4622      	mov	r2, r4
 8006d08:	462b      	mov	r3, r5
 8006d0a:	1891      	adds	r1, r2, r2
 8006d0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d0e:	415b      	adcs	r3, r3
 8006d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d16:	4621      	mov	r1, r4
 8006d18:	eb12 0801 	adds.w	r8, r2, r1
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	eb43 0901 	adc.w	r9, r3, r1
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	f04f 0300 	mov.w	r3, #0
 8006d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d36:	4690      	mov	r8, r2
 8006d38:	4699      	mov	r9, r3
 8006d3a:	4623      	mov	r3, r4
 8006d3c:	eb18 0303 	adds.w	r3, r8, r3
 8006d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d44:	462b      	mov	r3, r5
 8006d46:	eb49 0303 	adc.w	r3, r9, r3
 8006d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d62:	460b      	mov	r3, r1
 8006d64:	18db      	adds	r3, r3, r3
 8006d66:	653b      	str	r3, [r7, #80]	; 0x50
 8006d68:	4613      	mov	r3, r2
 8006d6a:	eb42 0303 	adc.w	r3, r2, r3
 8006d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8006d70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d78:	f7f9 ff86 	bl	8000c88 <__aeabi_uldivmod>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4b61      	ldr	r3, [pc, #388]	; (8006f08 <UART_SetConfig+0x2d4>)
 8006d82:	fba3 2302 	umull	r2, r3, r3, r2
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	011c      	lsls	r4, r3, #4
 8006d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	464b      	mov	r3, r9
 8006da0:	1891      	adds	r1, r2, r2
 8006da2:	64b9      	str	r1, [r7, #72]	; 0x48
 8006da4:	415b      	adcs	r3, r3
 8006da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006da8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006dac:	4641      	mov	r1, r8
 8006dae:	eb12 0a01 	adds.w	sl, r2, r1
 8006db2:	4649      	mov	r1, r9
 8006db4:	eb43 0b01 	adc.w	fp, r3, r1
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006dc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006dc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dcc:	4692      	mov	sl, r2
 8006dce:	469b      	mov	fp, r3
 8006dd0:	4643      	mov	r3, r8
 8006dd2:	eb1a 0303 	adds.w	r3, sl, r3
 8006dd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dda:	464b      	mov	r3, r9
 8006ddc:	eb4b 0303 	adc.w	r3, fp, r3
 8006de0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006df0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006df4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	18db      	adds	r3, r3, r3
 8006dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8006dfe:	4613      	mov	r3, r2
 8006e00:	eb42 0303 	adc.w	r3, r2, r3
 8006e04:	647b      	str	r3, [r7, #68]	; 0x44
 8006e06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e0e:	f7f9 ff3b 	bl	8000c88 <__aeabi_uldivmod>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4611      	mov	r1, r2
 8006e18:	4b3b      	ldr	r3, [pc, #236]	; (8006f08 <UART_SetConfig+0x2d4>)
 8006e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8006e1e:	095b      	lsrs	r3, r3, #5
 8006e20:	2264      	movs	r2, #100	; 0x64
 8006e22:	fb02 f303 	mul.w	r3, r2, r3
 8006e26:	1acb      	subs	r3, r1, r3
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e2e:	4b36      	ldr	r3, [pc, #216]	; (8006f08 <UART_SetConfig+0x2d4>)
 8006e30:	fba3 2302 	umull	r2, r3, r3, r2
 8006e34:	095b      	lsrs	r3, r3, #5
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e3c:	441c      	add	r4, r3
 8006e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e50:	4642      	mov	r2, r8
 8006e52:	464b      	mov	r3, r9
 8006e54:	1891      	adds	r1, r2, r2
 8006e56:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e58:	415b      	adcs	r3, r3
 8006e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e60:	4641      	mov	r1, r8
 8006e62:	1851      	adds	r1, r2, r1
 8006e64:	6339      	str	r1, [r7, #48]	; 0x30
 8006e66:	4649      	mov	r1, r9
 8006e68:	414b      	adcs	r3, r1
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e78:	4659      	mov	r1, fp
 8006e7a:	00cb      	lsls	r3, r1, #3
 8006e7c:	4651      	mov	r1, sl
 8006e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e82:	4651      	mov	r1, sl
 8006e84:	00ca      	lsls	r2, r1, #3
 8006e86:	4610      	mov	r0, r2
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	189b      	adds	r3, r3, r2
 8006e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e94:	464b      	mov	r3, r9
 8006e96:	460a      	mov	r2, r1
 8006e98:	eb42 0303 	adc.w	r3, r2, r3
 8006e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006eac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006eb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	18db      	adds	r3, r3, r3
 8006eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eba:	4613      	mov	r3, r2
 8006ebc:	eb42 0303 	adc.w	r3, r2, r3
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ec2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ec6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006eca:	f7f9 fedd 	bl	8000c88 <__aeabi_uldivmod>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <UART_SetConfig+0x2d4>)
 8006ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed8:	095b      	lsrs	r3, r3, #5
 8006eda:	2164      	movs	r1, #100	; 0x64
 8006edc:	fb01 f303 	mul.w	r3, r1, r3
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	3332      	adds	r3, #50	; 0x32
 8006ee6:	4a08      	ldr	r2, [pc, #32]	; (8006f08 <UART_SetConfig+0x2d4>)
 8006ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eec:	095b      	lsrs	r3, r3, #5
 8006eee:	f003 0207 	and.w	r2, r3, #7
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4422      	add	r2, r4
 8006efa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006efc:	e105      	b.n	800710a <UART_SetConfig+0x4d6>
 8006efe:	bf00      	nop
 8006f00:	40011000 	.word	0x40011000
 8006f04:	40011400 	.word	0x40011400
 8006f08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f10:	2200      	movs	r2, #0
 8006f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f1e:	4642      	mov	r2, r8
 8006f20:	464b      	mov	r3, r9
 8006f22:	1891      	adds	r1, r2, r2
 8006f24:	6239      	str	r1, [r7, #32]
 8006f26:	415b      	adcs	r3, r3
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
 8006f2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f2e:	4641      	mov	r1, r8
 8006f30:	1854      	adds	r4, r2, r1
 8006f32:	4649      	mov	r1, r9
 8006f34:	eb43 0501 	adc.w	r5, r3, r1
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	f04f 0300 	mov.w	r3, #0
 8006f40:	00eb      	lsls	r3, r5, #3
 8006f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f46:	00e2      	lsls	r2, r4, #3
 8006f48:	4614      	mov	r4, r2
 8006f4a:	461d      	mov	r5, r3
 8006f4c:	4643      	mov	r3, r8
 8006f4e:	18e3      	adds	r3, r4, r3
 8006f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f54:	464b      	mov	r3, r9
 8006f56:	eb45 0303 	adc.w	r3, r5, r3
 8006f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f6e:	f04f 0200 	mov.w	r2, #0
 8006f72:	f04f 0300 	mov.w	r3, #0
 8006f76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	008b      	lsls	r3, r1, #2
 8006f7e:	4621      	mov	r1, r4
 8006f80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f84:	4621      	mov	r1, r4
 8006f86:	008a      	lsls	r2, r1, #2
 8006f88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f8c:	f7f9 fe7c 	bl	8000c88 <__aeabi_uldivmod>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4b60      	ldr	r3, [pc, #384]	; (8007118 <UART_SetConfig+0x4e4>)
 8006f96:	fba3 2302 	umull	r2, r3, r3, r2
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	011c      	lsls	r4, r3, #4
 8006f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006fa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006fac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006fb0:	4642      	mov	r2, r8
 8006fb2:	464b      	mov	r3, r9
 8006fb4:	1891      	adds	r1, r2, r2
 8006fb6:	61b9      	str	r1, [r7, #24]
 8006fb8:	415b      	adcs	r3, r3
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fc0:	4641      	mov	r1, r8
 8006fc2:	1851      	adds	r1, r2, r1
 8006fc4:	6139      	str	r1, [r7, #16]
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	414b      	adcs	r3, r1
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fd8:	4659      	mov	r1, fp
 8006fda:	00cb      	lsls	r3, r1, #3
 8006fdc:	4651      	mov	r1, sl
 8006fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fe2:	4651      	mov	r1, sl
 8006fe4:	00ca      	lsls	r2, r1, #3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4603      	mov	r3, r0
 8006fec:	4642      	mov	r2, r8
 8006fee:	189b      	adds	r3, r3, r2
 8006ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ff4:	464b      	mov	r3, r9
 8006ff6:	460a      	mov	r2, r1
 8006ff8:	eb42 0303 	adc.w	r3, r2, r3
 8006ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	67bb      	str	r3, [r7, #120]	; 0x78
 800700a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800700c:	f04f 0200 	mov.w	r2, #0
 8007010:	f04f 0300 	mov.w	r3, #0
 8007014:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007018:	4649      	mov	r1, r9
 800701a:	008b      	lsls	r3, r1, #2
 800701c:	4641      	mov	r1, r8
 800701e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007022:	4641      	mov	r1, r8
 8007024:	008a      	lsls	r2, r1, #2
 8007026:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800702a:	f7f9 fe2d 	bl	8000c88 <__aeabi_uldivmod>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4b39      	ldr	r3, [pc, #228]	; (8007118 <UART_SetConfig+0x4e4>)
 8007034:	fba3 1302 	umull	r1, r3, r3, r2
 8007038:	095b      	lsrs	r3, r3, #5
 800703a:	2164      	movs	r1, #100	; 0x64
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	3332      	adds	r3, #50	; 0x32
 8007046:	4a34      	ldr	r2, [pc, #208]	; (8007118 <UART_SetConfig+0x4e4>)
 8007048:	fba2 2303 	umull	r2, r3, r2, r3
 800704c:	095b      	lsrs	r3, r3, #5
 800704e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007052:	441c      	add	r4, r3
 8007054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007058:	2200      	movs	r2, #0
 800705a:	673b      	str	r3, [r7, #112]	; 0x70
 800705c:	677a      	str	r2, [r7, #116]	; 0x74
 800705e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007062:	4642      	mov	r2, r8
 8007064:	464b      	mov	r3, r9
 8007066:	1891      	adds	r1, r2, r2
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	415b      	adcs	r3, r3
 800706c:	60fb      	str	r3, [r7, #12]
 800706e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007072:	4641      	mov	r1, r8
 8007074:	1851      	adds	r1, r2, r1
 8007076:	6039      	str	r1, [r7, #0]
 8007078:	4649      	mov	r1, r9
 800707a:	414b      	adcs	r3, r1
 800707c:	607b      	str	r3, [r7, #4]
 800707e:	f04f 0200 	mov.w	r2, #0
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800708a:	4659      	mov	r1, fp
 800708c:	00cb      	lsls	r3, r1, #3
 800708e:	4651      	mov	r1, sl
 8007090:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007094:	4651      	mov	r1, sl
 8007096:	00ca      	lsls	r2, r1, #3
 8007098:	4610      	mov	r0, r2
 800709a:	4619      	mov	r1, r3
 800709c:	4603      	mov	r3, r0
 800709e:	4642      	mov	r2, r8
 80070a0:	189b      	adds	r3, r3, r2
 80070a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80070a4:	464b      	mov	r3, r9
 80070a6:	460a      	mov	r2, r1
 80070a8:	eb42 0303 	adc.w	r3, r2, r3
 80070ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	663b      	str	r3, [r7, #96]	; 0x60
 80070b8:	667a      	str	r2, [r7, #100]	; 0x64
 80070ba:	f04f 0200 	mov.w	r2, #0
 80070be:	f04f 0300 	mov.w	r3, #0
 80070c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80070c6:	4649      	mov	r1, r9
 80070c8:	008b      	lsls	r3, r1, #2
 80070ca:	4641      	mov	r1, r8
 80070cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070d0:	4641      	mov	r1, r8
 80070d2:	008a      	lsls	r2, r1, #2
 80070d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070d8:	f7f9 fdd6 	bl	8000c88 <__aeabi_uldivmod>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4b0d      	ldr	r3, [pc, #52]	; (8007118 <UART_SetConfig+0x4e4>)
 80070e2:	fba3 1302 	umull	r1, r3, r3, r2
 80070e6:	095b      	lsrs	r3, r3, #5
 80070e8:	2164      	movs	r1, #100	; 0x64
 80070ea:	fb01 f303 	mul.w	r3, r1, r3
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	3332      	adds	r3, #50	; 0x32
 80070f4:	4a08      	ldr	r2, [pc, #32]	; (8007118 <UART_SetConfig+0x4e4>)
 80070f6:	fba2 2303 	umull	r2, r3, r2, r3
 80070fa:	095b      	lsrs	r3, r3, #5
 80070fc:	f003 020f 	and.w	r2, r3, #15
 8007100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4422      	add	r2, r4
 8007108:	609a      	str	r2, [r3, #8]
}
 800710a:	bf00      	nop
 800710c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007110:	46bd      	mov	sp, r7
 8007112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007116:	bf00      	nop
 8007118:	51eb851f 	.word	0x51eb851f

0800711c <__errno>:
 800711c:	4b01      	ldr	r3, [pc, #4]	; (8007124 <__errno+0x8>)
 800711e:	6818      	ldr	r0, [r3, #0]
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	2000004c 	.word	0x2000004c

08007128 <__libc_init_array>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	4d0d      	ldr	r5, [pc, #52]	; (8007160 <__libc_init_array+0x38>)
 800712c:	4c0d      	ldr	r4, [pc, #52]	; (8007164 <__libc_init_array+0x3c>)
 800712e:	1b64      	subs	r4, r4, r5
 8007130:	10a4      	asrs	r4, r4, #2
 8007132:	2600      	movs	r6, #0
 8007134:	42a6      	cmp	r6, r4
 8007136:	d109      	bne.n	800714c <__libc_init_array+0x24>
 8007138:	4d0b      	ldr	r5, [pc, #44]	; (8007168 <__libc_init_array+0x40>)
 800713a:	4c0c      	ldr	r4, [pc, #48]	; (800716c <__libc_init_array+0x44>)
 800713c:	f002 fdc2 	bl	8009cc4 <_init>
 8007140:	1b64      	subs	r4, r4, r5
 8007142:	10a4      	asrs	r4, r4, #2
 8007144:	2600      	movs	r6, #0
 8007146:	42a6      	cmp	r6, r4
 8007148:	d105      	bne.n	8007156 <__libc_init_array+0x2e>
 800714a:	bd70      	pop	{r4, r5, r6, pc}
 800714c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007150:	4798      	blx	r3
 8007152:	3601      	adds	r6, #1
 8007154:	e7ee      	b.n	8007134 <__libc_init_array+0xc>
 8007156:	f855 3b04 	ldr.w	r3, [r5], #4
 800715a:	4798      	blx	r3
 800715c:	3601      	adds	r6, #1
 800715e:	e7f2      	b.n	8007146 <__libc_init_array+0x1e>
 8007160:	0800a10c 	.word	0x0800a10c
 8007164:	0800a10c 	.word	0x0800a10c
 8007168:	0800a10c 	.word	0x0800a10c
 800716c:	0800a110 	.word	0x0800a110

08007170 <memset>:
 8007170:	4402      	add	r2, r0
 8007172:	4603      	mov	r3, r0
 8007174:	4293      	cmp	r3, r2
 8007176:	d100      	bne.n	800717a <memset+0xa>
 8007178:	4770      	bx	lr
 800717a:	f803 1b01 	strb.w	r1, [r3], #1
 800717e:	e7f9      	b.n	8007174 <memset+0x4>

08007180 <__cvt>:
 8007180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007184:	ec55 4b10 	vmov	r4, r5, d0
 8007188:	2d00      	cmp	r5, #0
 800718a:	460e      	mov	r6, r1
 800718c:	4619      	mov	r1, r3
 800718e:	462b      	mov	r3, r5
 8007190:	bfbb      	ittet	lt
 8007192:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007196:	461d      	movlt	r5, r3
 8007198:	2300      	movge	r3, #0
 800719a:	232d      	movlt	r3, #45	; 0x2d
 800719c:	700b      	strb	r3, [r1, #0]
 800719e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071a4:	4691      	mov	r9, r2
 80071a6:	f023 0820 	bic.w	r8, r3, #32
 80071aa:	bfbc      	itt	lt
 80071ac:	4622      	movlt	r2, r4
 80071ae:	4614      	movlt	r4, r2
 80071b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071b4:	d005      	beq.n	80071c2 <__cvt+0x42>
 80071b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071ba:	d100      	bne.n	80071be <__cvt+0x3e>
 80071bc:	3601      	adds	r6, #1
 80071be:	2102      	movs	r1, #2
 80071c0:	e000      	b.n	80071c4 <__cvt+0x44>
 80071c2:	2103      	movs	r1, #3
 80071c4:	ab03      	add	r3, sp, #12
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	ab02      	add	r3, sp, #8
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	ec45 4b10 	vmov	d0, r4, r5
 80071d0:	4653      	mov	r3, sl
 80071d2:	4632      	mov	r2, r6
 80071d4:	f000 fe18 	bl	8007e08 <_dtoa_r>
 80071d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80071dc:	4607      	mov	r7, r0
 80071de:	d102      	bne.n	80071e6 <__cvt+0x66>
 80071e0:	f019 0f01 	tst.w	r9, #1
 80071e4:	d022      	beq.n	800722c <__cvt+0xac>
 80071e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071ea:	eb07 0906 	add.w	r9, r7, r6
 80071ee:	d110      	bne.n	8007212 <__cvt+0x92>
 80071f0:	783b      	ldrb	r3, [r7, #0]
 80071f2:	2b30      	cmp	r3, #48	; 0x30
 80071f4:	d10a      	bne.n	800720c <__cvt+0x8c>
 80071f6:	2200      	movs	r2, #0
 80071f8:	2300      	movs	r3, #0
 80071fa:	4620      	mov	r0, r4
 80071fc:	4629      	mov	r1, r5
 80071fe:	f7f9 fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 8007202:	b918      	cbnz	r0, 800720c <__cvt+0x8c>
 8007204:	f1c6 0601 	rsb	r6, r6, #1
 8007208:	f8ca 6000 	str.w	r6, [sl]
 800720c:	f8da 3000 	ldr.w	r3, [sl]
 8007210:	4499      	add	r9, r3
 8007212:	2200      	movs	r2, #0
 8007214:	2300      	movs	r3, #0
 8007216:	4620      	mov	r0, r4
 8007218:	4629      	mov	r1, r5
 800721a:	f7f9 fc55 	bl	8000ac8 <__aeabi_dcmpeq>
 800721e:	b108      	cbz	r0, 8007224 <__cvt+0xa4>
 8007220:	f8cd 900c 	str.w	r9, [sp, #12]
 8007224:	2230      	movs	r2, #48	; 0x30
 8007226:	9b03      	ldr	r3, [sp, #12]
 8007228:	454b      	cmp	r3, r9
 800722a:	d307      	bcc.n	800723c <__cvt+0xbc>
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007230:	1bdb      	subs	r3, r3, r7
 8007232:	4638      	mov	r0, r7
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	b004      	add	sp, #16
 8007238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800723c:	1c59      	adds	r1, r3, #1
 800723e:	9103      	str	r1, [sp, #12]
 8007240:	701a      	strb	r2, [r3, #0]
 8007242:	e7f0      	b.n	8007226 <__cvt+0xa6>

08007244 <__exponent>:
 8007244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007246:	4603      	mov	r3, r0
 8007248:	2900      	cmp	r1, #0
 800724a:	bfb8      	it	lt
 800724c:	4249      	neglt	r1, r1
 800724e:	f803 2b02 	strb.w	r2, [r3], #2
 8007252:	bfb4      	ite	lt
 8007254:	222d      	movlt	r2, #45	; 0x2d
 8007256:	222b      	movge	r2, #43	; 0x2b
 8007258:	2909      	cmp	r1, #9
 800725a:	7042      	strb	r2, [r0, #1]
 800725c:	dd2a      	ble.n	80072b4 <__exponent+0x70>
 800725e:	f10d 0407 	add.w	r4, sp, #7
 8007262:	46a4      	mov	ip, r4
 8007264:	270a      	movs	r7, #10
 8007266:	46a6      	mov	lr, r4
 8007268:	460a      	mov	r2, r1
 800726a:	fb91 f6f7 	sdiv	r6, r1, r7
 800726e:	fb07 1516 	mls	r5, r7, r6, r1
 8007272:	3530      	adds	r5, #48	; 0x30
 8007274:	2a63      	cmp	r2, #99	; 0x63
 8007276:	f104 34ff 	add.w	r4, r4, #4294967295
 800727a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800727e:	4631      	mov	r1, r6
 8007280:	dcf1      	bgt.n	8007266 <__exponent+0x22>
 8007282:	3130      	adds	r1, #48	; 0x30
 8007284:	f1ae 0502 	sub.w	r5, lr, #2
 8007288:	f804 1c01 	strb.w	r1, [r4, #-1]
 800728c:	1c44      	adds	r4, r0, #1
 800728e:	4629      	mov	r1, r5
 8007290:	4561      	cmp	r1, ip
 8007292:	d30a      	bcc.n	80072aa <__exponent+0x66>
 8007294:	f10d 0209 	add.w	r2, sp, #9
 8007298:	eba2 020e 	sub.w	r2, r2, lr
 800729c:	4565      	cmp	r5, ip
 800729e:	bf88      	it	hi
 80072a0:	2200      	movhi	r2, #0
 80072a2:	4413      	add	r3, r2
 80072a4:	1a18      	subs	r0, r3, r0
 80072a6:	b003      	add	sp, #12
 80072a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80072b2:	e7ed      	b.n	8007290 <__exponent+0x4c>
 80072b4:	2330      	movs	r3, #48	; 0x30
 80072b6:	3130      	adds	r1, #48	; 0x30
 80072b8:	7083      	strb	r3, [r0, #2]
 80072ba:	70c1      	strb	r1, [r0, #3]
 80072bc:	1d03      	adds	r3, r0, #4
 80072be:	e7f1      	b.n	80072a4 <__exponent+0x60>

080072c0 <_printf_float>:
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	ed2d 8b02 	vpush	{d8}
 80072c8:	b08d      	sub	sp, #52	; 0x34
 80072ca:	460c      	mov	r4, r1
 80072cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80072d0:	4616      	mov	r6, r2
 80072d2:	461f      	mov	r7, r3
 80072d4:	4605      	mov	r5, r0
 80072d6:	f001 fd3d 	bl	8008d54 <_localeconv_r>
 80072da:	f8d0 a000 	ldr.w	sl, [r0]
 80072de:	4650      	mov	r0, sl
 80072e0:	f7f8 ff76 	bl	80001d0 <strlen>
 80072e4:	2300      	movs	r3, #0
 80072e6:	930a      	str	r3, [sp, #40]	; 0x28
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	9305      	str	r3, [sp, #20]
 80072ec:	f8d8 3000 	ldr.w	r3, [r8]
 80072f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80072f4:	3307      	adds	r3, #7
 80072f6:	f023 0307 	bic.w	r3, r3, #7
 80072fa:	f103 0208 	add.w	r2, r3, #8
 80072fe:	f8c8 2000 	str.w	r2, [r8]
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800730a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800730e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007312:	9307      	str	r3, [sp, #28]
 8007314:	f8cd 8018 	str.w	r8, [sp, #24]
 8007318:	ee08 0a10 	vmov	s16, r0
 800731c:	4b9f      	ldr	r3, [pc, #636]	; (800759c <_printf_float+0x2dc>)
 800731e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007322:	f04f 32ff 	mov.w	r2, #4294967295
 8007326:	f7f9 fc01 	bl	8000b2c <__aeabi_dcmpun>
 800732a:	bb88      	cbnz	r0, 8007390 <_printf_float+0xd0>
 800732c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007330:	4b9a      	ldr	r3, [pc, #616]	; (800759c <_printf_float+0x2dc>)
 8007332:	f04f 32ff 	mov.w	r2, #4294967295
 8007336:	f7f9 fbdb 	bl	8000af0 <__aeabi_dcmple>
 800733a:	bb48      	cbnz	r0, 8007390 <_printf_float+0xd0>
 800733c:	2200      	movs	r2, #0
 800733e:	2300      	movs	r3, #0
 8007340:	4640      	mov	r0, r8
 8007342:	4649      	mov	r1, r9
 8007344:	f7f9 fbca 	bl	8000adc <__aeabi_dcmplt>
 8007348:	b110      	cbz	r0, 8007350 <_printf_float+0x90>
 800734a:	232d      	movs	r3, #45	; 0x2d
 800734c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007350:	4b93      	ldr	r3, [pc, #588]	; (80075a0 <_printf_float+0x2e0>)
 8007352:	4894      	ldr	r0, [pc, #592]	; (80075a4 <_printf_float+0x2e4>)
 8007354:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007358:	bf94      	ite	ls
 800735a:	4698      	movls	r8, r3
 800735c:	4680      	movhi	r8, r0
 800735e:	2303      	movs	r3, #3
 8007360:	6123      	str	r3, [r4, #16]
 8007362:	9b05      	ldr	r3, [sp, #20]
 8007364:	f023 0204 	bic.w	r2, r3, #4
 8007368:	6022      	str	r2, [r4, #0]
 800736a:	f04f 0900 	mov.w	r9, #0
 800736e:	9700      	str	r7, [sp, #0]
 8007370:	4633      	mov	r3, r6
 8007372:	aa0b      	add	r2, sp, #44	; 0x2c
 8007374:	4621      	mov	r1, r4
 8007376:	4628      	mov	r0, r5
 8007378:	f000 f9d8 	bl	800772c <_printf_common>
 800737c:	3001      	adds	r0, #1
 800737e:	f040 8090 	bne.w	80074a2 <_printf_float+0x1e2>
 8007382:	f04f 30ff 	mov.w	r0, #4294967295
 8007386:	b00d      	add	sp, #52	; 0x34
 8007388:	ecbd 8b02 	vpop	{d8}
 800738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007390:	4642      	mov	r2, r8
 8007392:	464b      	mov	r3, r9
 8007394:	4640      	mov	r0, r8
 8007396:	4649      	mov	r1, r9
 8007398:	f7f9 fbc8 	bl	8000b2c <__aeabi_dcmpun>
 800739c:	b140      	cbz	r0, 80073b0 <_printf_float+0xf0>
 800739e:	464b      	mov	r3, r9
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	bfbc      	itt	lt
 80073a4:	232d      	movlt	r3, #45	; 0x2d
 80073a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073aa:	487f      	ldr	r0, [pc, #508]	; (80075a8 <_printf_float+0x2e8>)
 80073ac:	4b7f      	ldr	r3, [pc, #508]	; (80075ac <_printf_float+0x2ec>)
 80073ae:	e7d1      	b.n	8007354 <_printf_float+0x94>
 80073b0:	6863      	ldr	r3, [r4, #4]
 80073b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80073b6:	9206      	str	r2, [sp, #24]
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	d13f      	bne.n	800743c <_printf_float+0x17c>
 80073bc:	2306      	movs	r3, #6
 80073be:	6063      	str	r3, [r4, #4]
 80073c0:	9b05      	ldr	r3, [sp, #20]
 80073c2:	6861      	ldr	r1, [r4, #4]
 80073c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80073c8:	2300      	movs	r3, #0
 80073ca:	9303      	str	r3, [sp, #12]
 80073cc:	ab0a      	add	r3, sp, #40	; 0x28
 80073ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80073d2:	ab09      	add	r3, sp, #36	; 0x24
 80073d4:	ec49 8b10 	vmov	d0, r8, r9
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	6022      	str	r2, [r4, #0]
 80073dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80073e0:	4628      	mov	r0, r5
 80073e2:	f7ff fecd 	bl	8007180 <__cvt>
 80073e6:	9b06      	ldr	r3, [sp, #24]
 80073e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073ea:	2b47      	cmp	r3, #71	; 0x47
 80073ec:	4680      	mov	r8, r0
 80073ee:	d108      	bne.n	8007402 <_printf_float+0x142>
 80073f0:	1cc8      	adds	r0, r1, #3
 80073f2:	db02      	blt.n	80073fa <_printf_float+0x13a>
 80073f4:	6863      	ldr	r3, [r4, #4]
 80073f6:	4299      	cmp	r1, r3
 80073f8:	dd41      	ble.n	800747e <_printf_float+0x1be>
 80073fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80073fe:	fa5f fb8b 	uxtb.w	fp, fp
 8007402:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007406:	d820      	bhi.n	800744a <_printf_float+0x18a>
 8007408:	3901      	subs	r1, #1
 800740a:	465a      	mov	r2, fp
 800740c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007410:	9109      	str	r1, [sp, #36]	; 0x24
 8007412:	f7ff ff17 	bl	8007244 <__exponent>
 8007416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007418:	1813      	adds	r3, r2, r0
 800741a:	2a01      	cmp	r2, #1
 800741c:	4681      	mov	r9, r0
 800741e:	6123      	str	r3, [r4, #16]
 8007420:	dc02      	bgt.n	8007428 <_printf_float+0x168>
 8007422:	6822      	ldr	r2, [r4, #0]
 8007424:	07d2      	lsls	r2, r2, #31
 8007426:	d501      	bpl.n	800742c <_printf_float+0x16c>
 8007428:	3301      	adds	r3, #1
 800742a:	6123      	str	r3, [r4, #16]
 800742c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007430:	2b00      	cmp	r3, #0
 8007432:	d09c      	beq.n	800736e <_printf_float+0xae>
 8007434:	232d      	movs	r3, #45	; 0x2d
 8007436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800743a:	e798      	b.n	800736e <_printf_float+0xae>
 800743c:	9a06      	ldr	r2, [sp, #24]
 800743e:	2a47      	cmp	r2, #71	; 0x47
 8007440:	d1be      	bne.n	80073c0 <_printf_float+0x100>
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1bc      	bne.n	80073c0 <_printf_float+0x100>
 8007446:	2301      	movs	r3, #1
 8007448:	e7b9      	b.n	80073be <_printf_float+0xfe>
 800744a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800744e:	d118      	bne.n	8007482 <_printf_float+0x1c2>
 8007450:	2900      	cmp	r1, #0
 8007452:	6863      	ldr	r3, [r4, #4]
 8007454:	dd0b      	ble.n	800746e <_printf_float+0x1ae>
 8007456:	6121      	str	r1, [r4, #16]
 8007458:	b913      	cbnz	r3, 8007460 <_printf_float+0x1a0>
 800745a:	6822      	ldr	r2, [r4, #0]
 800745c:	07d0      	lsls	r0, r2, #31
 800745e:	d502      	bpl.n	8007466 <_printf_float+0x1a6>
 8007460:	3301      	adds	r3, #1
 8007462:	440b      	add	r3, r1
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	65a1      	str	r1, [r4, #88]	; 0x58
 8007468:	f04f 0900 	mov.w	r9, #0
 800746c:	e7de      	b.n	800742c <_printf_float+0x16c>
 800746e:	b913      	cbnz	r3, 8007476 <_printf_float+0x1b6>
 8007470:	6822      	ldr	r2, [r4, #0]
 8007472:	07d2      	lsls	r2, r2, #31
 8007474:	d501      	bpl.n	800747a <_printf_float+0x1ba>
 8007476:	3302      	adds	r3, #2
 8007478:	e7f4      	b.n	8007464 <_printf_float+0x1a4>
 800747a:	2301      	movs	r3, #1
 800747c:	e7f2      	b.n	8007464 <_printf_float+0x1a4>
 800747e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007484:	4299      	cmp	r1, r3
 8007486:	db05      	blt.n	8007494 <_printf_float+0x1d4>
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	6121      	str	r1, [r4, #16]
 800748c:	07d8      	lsls	r0, r3, #31
 800748e:	d5ea      	bpl.n	8007466 <_printf_float+0x1a6>
 8007490:	1c4b      	adds	r3, r1, #1
 8007492:	e7e7      	b.n	8007464 <_printf_float+0x1a4>
 8007494:	2900      	cmp	r1, #0
 8007496:	bfd4      	ite	le
 8007498:	f1c1 0202 	rsble	r2, r1, #2
 800749c:	2201      	movgt	r2, #1
 800749e:	4413      	add	r3, r2
 80074a0:	e7e0      	b.n	8007464 <_printf_float+0x1a4>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	055a      	lsls	r2, r3, #21
 80074a6:	d407      	bmi.n	80074b8 <_printf_float+0x1f8>
 80074a8:	6923      	ldr	r3, [r4, #16]
 80074aa:	4642      	mov	r2, r8
 80074ac:	4631      	mov	r1, r6
 80074ae:	4628      	mov	r0, r5
 80074b0:	47b8      	blx	r7
 80074b2:	3001      	adds	r0, #1
 80074b4:	d12c      	bne.n	8007510 <_printf_float+0x250>
 80074b6:	e764      	b.n	8007382 <_printf_float+0xc2>
 80074b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074bc:	f240 80e0 	bls.w	8007680 <_printf_float+0x3c0>
 80074c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074c4:	2200      	movs	r2, #0
 80074c6:	2300      	movs	r3, #0
 80074c8:	f7f9 fafe 	bl	8000ac8 <__aeabi_dcmpeq>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d034      	beq.n	800753a <_printf_float+0x27a>
 80074d0:	4a37      	ldr	r2, [pc, #220]	; (80075b0 <_printf_float+0x2f0>)
 80074d2:	2301      	movs	r3, #1
 80074d4:	4631      	mov	r1, r6
 80074d6:	4628      	mov	r0, r5
 80074d8:	47b8      	blx	r7
 80074da:	3001      	adds	r0, #1
 80074dc:	f43f af51 	beq.w	8007382 <_printf_float+0xc2>
 80074e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074e4:	429a      	cmp	r2, r3
 80074e6:	db02      	blt.n	80074ee <_printf_float+0x22e>
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	07d8      	lsls	r0, r3, #31
 80074ec:	d510      	bpl.n	8007510 <_printf_float+0x250>
 80074ee:	ee18 3a10 	vmov	r3, s16
 80074f2:	4652      	mov	r2, sl
 80074f4:	4631      	mov	r1, r6
 80074f6:	4628      	mov	r0, r5
 80074f8:	47b8      	blx	r7
 80074fa:	3001      	adds	r0, #1
 80074fc:	f43f af41 	beq.w	8007382 <_printf_float+0xc2>
 8007500:	f04f 0800 	mov.w	r8, #0
 8007504:	f104 091a 	add.w	r9, r4, #26
 8007508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800750a:	3b01      	subs	r3, #1
 800750c:	4543      	cmp	r3, r8
 800750e:	dc09      	bgt.n	8007524 <_printf_float+0x264>
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	079b      	lsls	r3, r3, #30
 8007514:	f100 8105 	bmi.w	8007722 <_printf_float+0x462>
 8007518:	68e0      	ldr	r0, [r4, #12]
 800751a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800751c:	4298      	cmp	r0, r3
 800751e:	bfb8      	it	lt
 8007520:	4618      	movlt	r0, r3
 8007522:	e730      	b.n	8007386 <_printf_float+0xc6>
 8007524:	2301      	movs	r3, #1
 8007526:	464a      	mov	r2, r9
 8007528:	4631      	mov	r1, r6
 800752a:	4628      	mov	r0, r5
 800752c:	47b8      	blx	r7
 800752e:	3001      	adds	r0, #1
 8007530:	f43f af27 	beq.w	8007382 <_printf_float+0xc2>
 8007534:	f108 0801 	add.w	r8, r8, #1
 8007538:	e7e6      	b.n	8007508 <_printf_float+0x248>
 800753a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800753c:	2b00      	cmp	r3, #0
 800753e:	dc39      	bgt.n	80075b4 <_printf_float+0x2f4>
 8007540:	4a1b      	ldr	r2, [pc, #108]	; (80075b0 <_printf_float+0x2f0>)
 8007542:	2301      	movs	r3, #1
 8007544:	4631      	mov	r1, r6
 8007546:	4628      	mov	r0, r5
 8007548:	47b8      	blx	r7
 800754a:	3001      	adds	r0, #1
 800754c:	f43f af19 	beq.w	8007382 <_printf_float+0xc2>
 8007550:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007554:	4313      	orrs	r3, r2
 8007556:	d102      	bne.n	800755e <_printf_float+0x29e>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	07d9      	lsls	r1, r3, #31
 800755c:	d5d8      	bpl.n	8007510 <_printf_float+0x250>
 800755e:	ee18 3a10 	vmov	r3, s16
 8007562:	4652      	mov	r2, sl
 8007564:	4631      	mov	r1, r6
 8007566:	4628      	mov	r0, r5
 8007568:	47b8      	blx	r7
 800756a:	3001      	adds	r0, #1
 800756c:	f43f af09 	beq.w	8007382 <_printf_float+0xc2>
 8007570:	f04f 0900 	mov.w	r9, #0
 8007574:	f104 0a1a 	add.w	sl, r4, #26
 8007578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757a:	425b      	negs	r3, r3
 800757c:	454b      	cmp	r3, r9
 800757e:	dc01      	bgt.n	8007584 <_printf_float+0x2c4>
 8007580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007582:	e792      	b.n	80074aa <_printf_float+0x1ea>
 8007584:	2301      	movs	r3, #1
 8007586:	4652      	mov	r2, sl
 8007588:	4631      	mov	r1, r6
 800758a:	4628      	mov	r0, r5
 800758c:	47b8      	blx	r7
 800758e:	3001      	adds	r0, #1
 8007590:	f43f aef7 	beq.w	8007382 <_printf_float+0xc2>
 8007594:	f109 0901 	add.w	r9, r9, #1
 8007598:	e7ee      	b.n	8007578 <_printf_float+0x2b8>
 800759a:	bf00      	nop
 800759c:	7fefffff 	.word	0x7fefffff
 80075a0:	08009d2c 	.word	0x08009d2c
 80075a4:	08009d30 	.word	0x08009d30
 80075a8:	08009d38 	.word	0x08009d38
 80075ac:	08009d34 	.word	0x08009d34
 80075b0:	08009d3c 	.word	0x08009d3c
 80075b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075b8:	429a      	cmp	r2, r3
 80075ba:	bfa8      	it	ge
 80075bc:	461a      	movge	r2, r3
 80075be:	2a00      	cmp	r2, #0
 80075c0:	4691      	mov	r9, r2
 80075c2:	dc37      	bgt.n	8007634 <_printf_float+0x374>
 80075c4:	f04f 0b00 	mov.w	fp, #0
 80075c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075cc:	f104 021a 	add.w	r2, r4, #26
 80075d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075d2:	9305      	str	r3, [sp, #20]
 80075d4:	eba3 0309 	sub.w	r3, r3, r9
 80075d8:	455b      	cmp	r3, fp
 80075da:	dc33      	bgt.n	8007644 <_printf_float+0x384>
 80075dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075e0:	429a      	cmp	r2, r3
 80075e2:	db3b      	blt.n	800765c <_printf_float+0x39c>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	07da      	lsls	r2, r3, #31
 80075e8:	d438      	bmi.n	800765c <_printf_float+0x39c>
 80075ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ec:	9a05      	ldr	r2, [sp, #20]
 80075ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075f0:	1a9a      	subs	r2, r3, r2
 80075f2:	eba3 0901 	sub.w	r9, r3, r1
 80075f6:	4591      	cmp	r9, r2
 80075f8:	bfa8      	it	ge
 80075fa:	4691      	movge	r9, r2
 80075fc:	f1b9 0f00 	cmp.w	r9, #0
 8007600:	dc35      	bgt.n	800766e <_printf_float+0x3ae>
 8007602:	f04f 0800 	mov.w	r8, #0
 8007606:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800760a:	f104 0a1a 	add.w	sl, r4, #26
 800760e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007612:	1a9b      	subs	r3, r3, r2
 8007614:	eba3 0309 	sub.w	r3, r3, r9
 8007618:	4543      	cmp	r3, r8
 800761a:	f77f af79 	ble.w	8007510 <_printf_float+0x250>
 800761e:	2301      	movs	r3, #1
 8007620:	4652      	mov	r2, sl
 8007622:	4631      	mov	r1, r6
 8007624:	4628      	mov	r0, r5
 8007626:	47b8      	blx	r7
 8007628:	3001      	adds	r0, #1
 800762a:	f43f aeaa 	beq.w	8007382 <_printf_float+0xc2>
 800762e:	f108 0801 	add.w	r8, r8, #1
 8007632:	e7ec      	b.n	800760e <_printf_float+0x34e>
 8007634:	4613      	mov	r3, r2
 8007636:	4631      	mov	r1, r6
 8007638:	4642      	mov	r2, r8
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	d1c0      	bne.n	80075c4 <_printf_float+0x304>
 8007642:	e69e      	b.n	8007382 <_printf_float+0xc2>
 8007644:	2301      	movs	r3, #1
 8007646:	4631      	mov	r1, r6
 8007648:	4628      	mov	r0, r5
 800764a:	9205      	str	r2, [sp, #20]
 800764c:	47b8      	blx	r7
 800764e:	3001      	adds	r0, #1
 8007650:	f43f ae97 	beq.w	8007382 <_printf_float+0xc2>
 8007654:	9a05      	ldr	r2, [sp, #20]
 8007656:	f10b 0b01 	add.w	fp, fp, #1
 800765a:	e7b9      	b.n	80075d0 <_printf_float+0x310>
 800765c:	ee18 3a10 	vmov	r3, s16
 8007660:	4652      	mov	r2, sl
 8007662:	4631      	mov	r1, r6
 8007664:	4628      	mov	r0, r5
 8007666:	47b8      	blx	r7
 8007668:	3001      	adds	r0, #1
 800766a:	d1be      	bne.n	80075ea <_printf_float+0x32a>
 800766c:	e689      	b.n	8007382 <_printf_float+0xc2>
 800766e:	9a05      	ldr	r2, [sp, #20]
 8007670:	464b      	mov	r3, r9
 8007672:	4442      	add	r2, r8
 8007674:	4631      	mov	r1, r6
 8007676:	4628      	mov	r0, r5
 8007678:	47b8      	blx	r7
 800767a:	3001      	adds	r0, #1
 800767c:	d1c1      	bne.n	8007602 <_printf_float+0x342>
 800767e:	e680      	b.n	8007382 <_printf_float+0xc2>
 8007680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007682:	2a01      	cmp	r2, #1
 8007684:	dc01      	bgt.n	800768a <_printf_float+0x3ca>
 8007686:	07db      	lsls	r3, r3, #31
 8007688:	d538      	bpl.n	80076fc <_printf_float+0x43c>
 800768a:	2301      	movs	r3, #1
 800768c:	4642      	mov	r2, r8
 800768e:	4631      	mov	r1, r6
 8007690:	4628      	mov	r0, r5
 8007692:	47b8      	blx	r7
 8007694:	3001      	adds	r0, #1
 8007696:	f43f ae74 	beq.w	8007382 <_printf_float+0xc2>
 800769a:	ee18 3a10 	vmov	r3, s16
 800769e:	4652      	mov	r2, sl
 80076a0:	4631      	mov	r1, r6
 80076a2:	4628      	mov	r0, r5
 80076a4:	47b8      	blx	r7
 80076a6:	3001      	adds	r0, #1
 80076a8:	f43f ae6b 	beq.w	8007382 <_printf_float+0xc2>
 80076ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076b0:	2200      	movs	r2, #0
 80076b2:	2300      	movs	r3, #0
 80076b4:	f7f9 fa08 	bl	8000ac8 <__aeabi_dcmpeq>
 80076b8:	b9d8      	cbnz	r0, 80076f2 <_printf_float+0x432>
 80076ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076bc:	f108 0201 	add.w	r2, r8, #1
 80076c0:	3b01      	subs	r3, #1
 80076c2:	4631      	mov	r1, r6
 80076c4:	4628      	mov	r0, r5
 80076c6:	47b8      	blx	r7
 80076c8:	3001      	adds	r0, #1
 80076ca:	d10e      	bne.n	80076ea <_printf_float+0x42a>
 80076cc:	e659      	b.n	8007382 <_printf_float+0xc2>
 80076ce:	2301      	movs	r3, #1
 80076d0:	4652      	mov	r2, sl
 80076d2:	4631      	mov	r1, r6
 80076d4:	4628      	mov	r0, r5
 80076d6:	47b8      	blx	r7
 80076d8:	3001      	adds	r0, #1
 80076da:	f43f ae52 	beq.w	8007382 <_printf_float+0xc2>
 80076de:	f108 0801 	add.w	r8, r8, #1
 80076e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e4:	3b01      	subs	r3, #1
 80076e6:	4543      	cmp	r3, r8
 80076e8:	dcf1      	bgt.n	80076ce <_printf_float+0x40e>
 80076ea:	464b      	mov	r3, r9
 80076ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80076f0:	e6dc      	b.n	80074ac <_printf_float+0x1ec>
 80076f2:	f04f 0800 	mov.w	r8, #0
 80076f6:	f104 0a1a 	add.w	sl, r4, #26
 80076fa:	e7f2      	b.n	80076e2 <_printf_float+0x422>
 80076fc:	2301      	movs	r3, #1
 80076fe:	4642      	mov	r2, r8
 8007700:	e7df      	b.n	80076c2 <_printf_float+0x402>
 8007702:	2301      	movs	r3, #1
 8007704:	464a      	mov	r2, r9
 8007706:	4631      	mov	r1, r6
 8007708:	4628      	mov	r0, r5
 800770a:	47b8      	blx	r7
 800770c:	3001      	adds	r0, #1
 800770e:	f43f ae38 	beq.w	8007382 <_printf_float+0xc2>
 8007712:	f108 0801 	add.w	r8, r8, #1
 8007716:	68e3      	ldr	r3, [r4, #12]
 8007718:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800771a:	1a5b      	subs	r3, r3, r1
 800771c:	4543      	cmp	r3, r8
 800771e:	dcf0      	bgt.n	8007702 <_printf_float+0x442>
 8007720:	e6fa      	b.n	8007518 <_printf_float+0x258>
 8007722:	f04f 0800 	mov.w	r8, #0
 8007726:	f104 0919 	add.w	r9, r4, #25
 800772a:	e7f4      	b.n	8007716 <_printf_float+0x456>

0800772c <_printf_common>:
 800772c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007730:	4616      	mov	r6, r2
 8007732:	4699      	mov	r9, r3
 8007734:	688a      	ldr	r2, [r1, #8]
 8007736:	690b      	ldr	r3, [r1, #16]
 8007738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800773c:	4293      	cmp	r3, r2
 800773e:	bfb8      	it	lt
 8007740:	4613      	movlt	r3, r2
 8007742:	6033      	str	r3, [r6, #0]
 8007744:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007748:	4607      	mov	r7, r0
 800774a:	460c      	mov	r4, r1
 800774c:	b10a      	cbz	r2, 8007752 <_printf_common+0x26>
 800774e:	3301      	adds	r3, #1
 8007750:	6033      	str	r3, [r6, #0]
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	0699      	lsls	r1, r3, #26
 8007756:	bf42      	ittt	mi
 8007758:	6833      	ldrmi	r3, [r6, #0]
 800775a:	3302      	addmi	r3, #2
 800775c:	6033      	strmi	r3, [r6, #0]
 800775e:	6825      	ldr	r5, [r4, #0]
 8007760:	f015 0506 	ands.w	r5, r5, #6
 8007764:	d106      	bne.n	8007774 <_printf_common+0x48>
 8007766:	f104 0a19 	add.w	sl, r4, #25
 800776a:	68e3      	ldr	r3, [r4, #12]
 800776c:	6832      	ldr	r2, [r6, #0]
 800776e:	1a9b      	subs	r3, r3, r2
 8007770:	42ab      	cmp	r3, r5
 8007772:	dc26      	bgt.n	80077c2 <_printf_common+0x96>
 8007774:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007778:	1e13      	subs	r3, r2, #0
 800777a:	6822      	ldr	r2, [r4, #0]
 800777c:	bf18      	it	ne
 800777e:	2301      	movne	r3, #1
 8007780:	0692      	lsls	r2, r2, #26
 8007782:	d42b      	bmi.n	80077dc <_printf_common+0xb0>
 8007784:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007788:	4649      	mov	r1, r9
 800778a:	4638      	mov	r0, r7
 800778c:	47c0      	blx	r8
 800778e:	3001      	adds	r0, #1
 8007790:	d01e      	beq.n	80077d0 <_printf_common+0xa4>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	68e5      	ldr	r5, [r4, #12]
 8007796:	6832      	ldr	r2, [r6, #0]
 8007798:	f003 0306 	and.w	r3, r3, #6
 800779c:	2b04      	cmp	r3, #4
 800779e:	bf08      	it	eq
 80077a0:	1aad      	subeq	r5, r5, r2
 80077a2:	68a3      	ldr	r3, [r4, #8]
 80077a4:	6922      	ldr	r2, [r4, #16]
 80077a6:	bf0c      	ite	eq
 80077a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077ac:	2500      	movne	r5, #0
 80077ae:	4293      	cmp	r3, r2
 80077b0:	bfc4      	itt	gt
 80077b2:	1a9b      	subgt	r3, r3, r2
 80077b4:	18ed      	addgt	r5, r5, r3
 80077b6:	2600      	movs	r6, #0
 80077b8:	341a      	adds	r4, #26
 80077ba:	42b5      	cmp	r5, r6
 80077bc:	d11a      	bne.n	80077f4 <_printf_common+0xc8>
 80077be:	2000      	movs	r0, #0
 80077c0:	e008      	b.n	80077d4 <_printf_common+0xa8>
 80077c2:	2301      	movs	r3, #1
 80077c4:	4652      	mov	r2, sl
 80077c6:	4649      	mov	r1, r9
 80077c8:	4638      	mov	r0, r7
 80077ca:	47c0      	blx	r8
 80077cc:	3001      	adds	r0, #1
 80077ce:	d103      	bne.n	80077d8 <_printf_common+0xac>
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295
 80077d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d8:	3501      	adds	r5, #1
 80077da:	e7c6      	b.n	800776a <_printf_common+0x3e>
 80077dc:	18e1      	adds	r1, r4, r3
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	2030      	movs	r0, #48	; 0x30
 80077e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077e6:	4422      	add	r2, r4
 80077e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077f0:	3302      	adds	r3, #2
 80077f2:	e7c7      	b.n	8007784 <_printf_common+0x58>
 80077f4:	2301      	movs	r3, #1
 80077f6:	4622      	mov	r2, r4
 80077f8:	4649      	mov	r1, r9
 80077fa:	4638      	mov	r0, r7
 80077fc:	47c0      	blx	r8
 80077fe:	3001      	adds	r0, #1
 8007800:	d0e6      	beq.n	80077d0 <_printf_common+0xa4>
 8007802:	3601      	adds	r6, #1
 8007804:	e7d9      	b.n	80077ba <_printf_common+0x8e>
	...

08007808 <_printf_i>:
 8007808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800780c:	7e0f      	ldrb	r7, [r1, #24]
 800780e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007810:	2f78      	cmp	r7, #120	; 0x78
 8007812:	4691      	mov	r9, r2
 8007814:	4680      	mov	r8, r0
 8007816:	460c      	mov	r4, r1
 8007818:	469a      	mov	sl, r3
 800781a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800781e:	d807      	bhi.n	8007830 <_printf_i+0x28>
 8007820:	2f62      	cmp	r7, #98	; 0x62
 8007822:	d80a      	bhi.n	800783a <_printf_i+0x32>
 8007824:	2f00      	cmp	r7, #0
 8007826:	f000 80d8 	beq.w	80079da <_printf_i+0x1d2>
 800782a:	2f58      	cmp	r7, #88	; 0x58
 800782c:	f000 80a3 	beq.w	8007976 <_printf_i+0x16e>
 8007830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007834:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007838:	e03a      	b.n	80078b0 <_printf_i+0xa8>
 800783a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800783e:	2b15      	cmp	r3, #21
 8007840:	d8f6      	bhi.n	8007830 <_printf_i+0x28>
 8007842:	a101      	add	r1, pc, #4	; (adr r1, 8007848 <_printf_i+0x40>)
 8007844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007848:	080078a1 	.word	0x080078a1
 800784c:	080078b5 	.word	0x080078b5
 8007850:	08007831 	.word	0x08007831
 8007854:	08007831 	.word	0x08007831
 8007858:	08007831 	.word	0x08007831
 800785c:	08007831 	.word	0x08007831
 8007860:	080078b5 	.word	0x080078b5
 8007864:	08007831 	.word	0x08007831
 8007868:	08007831 	.word	0x08007831
 800786c:	08007831 	.word	0x08007831
 8007870:	08007831 	.word	0x08007831
 8007874:	080079c1 	.word	0x080079c1
 8007878:	080078e5 	.word	0x080078e5
 800787c:	080079a3 	.word	0x080079a3
 8007880:	08007831 	.word	0x08007831
 8007884:	08007831 	.word	0x08007831
 8007888:	080079e3 	.word	0x080079e3
 800788c:	08007831 	.word	0x08007831
 8007890:	080078e5 	.word	0x080078e5
 8007894:	08007831 	.word	0x08007831
 8007898:	08007831 	.word	0x08007831
 800789c:	080079ab 	.word	0x080079ab
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	1d1a      	adds	r2, r3, #4
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	602a      	str	r2, [r5, #0]
 80078a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078b0:	2301      	movs	r3, #1
 80078b2:	e0a3      	b.n	80079fc <_printf_i+0x1f4>
 80078b4:	6820      	ldr	r0, [r4, #0]
 80078b6:	6829      	ldr	r1, [r5, #0]
 80078b8:	0606      	lsls	r6, r0, #24
 80078ba:	f101 0304 	add.w	r3, r1, #4
 80078be:	d50a      	bpl.n	80078d6 <_printf_i+0xce>
 80078c0:	680e      	ldr	r6, [r1, #0]
 80078c2:	602b      	str	r3, [r5, #0]
 80078c4:	2e00      	cmp	r6, #0
 80078c6:	da03      	bge.n	80078d0 <_printf_i+0xc8>
 80078c8:	232d      	movs	r3, #45	; 0x2d
 80078ca:	4276      	negs	r6, r6
 80078cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d0:	485e      	ldr	r0, [pc, #376]	; (8007a4c <_printf_i+0x244>)
 80078d2:	230a      	movs	r3, #10
 80078d4:	e019      	b.n	800790a <_printf_i+0x102>
 80078d6:	680e      	ldr	r6, [r1, #0]
 80078d8:	602b      	str	r3, [r5, #0]
 80078da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078de:	bf18      	it	ne
 80078e0:	b236      	sxthne	r6, r6
 80078e2:	e7ef      	b.n	80078c4 <_printf_i+0xbc>
 80078e4:	682b      	ldr	r3, [r5, #0]
 80078e6:	6820      	ldr	r0, [r4, #0]
 80078e8:	1d19      	adds	r1, r3, #4
 80078ea:	6029      	str	r1, [r5, #0]
 80078ec:	0601      	lsls	r1, r0, #24
 80078ee:	d501      	bpl.n	80078f4 <_printf_i+0xec>
 80078f0:	681e      	ldr	r6, [r3, #0]
 80078f2:	e002      	b.n	80078fa <_printf_i+0xf2>
 80078f4:	0646      	lsls	r6, r0, #25
 80078f6:	d5fb      	bpl.n	80078f0 <_printf_i+0xe8>
 80078f8:	881e      	ldrh	r6, [r3, #0]
 80078fa:	4854      	ldr	r0, [pc, #336]	; (8007a4c <_printf_i+0x244>)
 80078fc:	2f6f      	cmp	r7, #111	; 0x6f
 80078fe:	bf0c      	ite	eq
 8007900:	2308      	moveq	r3, #8
 8007902:	230a      	movne	r3, #10
 8007904:	2100      	movs	r1, #0
 8007906:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800790a:	6865      	ldr	r5, [r4, #4]
 800790c:	60a5      	str	r5, [r4, #8]
 800790e:	2d00      	cmp	r5, #0
 8007910:	bfa2      	ittt	ge
 8007912:	6821      	ldrge	r1, [r4, #0]
 8007914:	f021 0104 	bicge.w	r1, r1, #4
 8007918:	6021      	strge	r1, [r4, #0]
 800791a:	b90e      	cbnz	r6, 8007920 <_printf_i+0x118>
 800791c:	2d00      	cmp	r5, #0
 800791e:	d04d      	beq.n	80079bc <_printf_i+0x1b4>
 8007920:	4615      	mov	r5, r2
 8007922:	fbb6 f1f3 	udiv	r1, r6, r3
 8007926:	fb03 6711 	mls	r7, r3, r1, r6
 800792a:	5dc7      	ldrb	r7, [r0, r7]
 800792c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007930:	4637      	mov	r7, r6
 8007932:	42bb      	cmp	r3, r7
 8007934:	460e      	mov	r6, r1
 8007936:	d9f4      	bls.n	8007922 <_printf_i+0x11a>
 8007938:	2b08      	cmp	r3, #8
 800793a:	d10b      	bne.n	8007954 <_printf_i+0x14c>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	07de      	lsls	r6, r3, #31
 8007940:	d508      	bpl.n	8007954 <_printf_i+0x14c>
 8007942:	6923      	ldr	r3, [r4, #16]
 8007944:	6861      	ldr	r1, [r4, #4]
 8007946:	4299      	cmp	r1, r3
 8007948:	bfde      	ittt	le
 800794a:	2330      	movle	r3, #48	; 0x30
 800794c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007950:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007954:	1b52      	subs	r2, r2, r5
 8007956:	6122      	str	r2, [r4, #16]
 8007958:	f8cd a000 	str.w	sl, [sp]
 800795c:	464b      	mov	r3, r9
 800795e:	aa03      	add	r2, sp, #12
 8007960:	4621      	mov	r1, r4
 8007962:	4640      	mov	r0, r8
 8007964:	f7ff fee2 	bl	800772c <_printf_common>
 8007968:	3001      	adds	r0, #1
 800796a:	d14c      	bne.n	8007a06 <_printf_i+0x1fe>
 800796c:	f04f 30ff 	mov.w	r0, #4294967295
 8007970:	b004      	add	sp, #16
 8007972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007976:	4835      	ldr	r0, [pc, #212]	; (8007a4c <_printf_i+0x244>)
 8007978:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800797c:	6829      	ldr	r1, [r5, #0]
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	f851 6b04 	ldr.w	r6, [r1], #4
 8007984:	6029      	str	r1, [r5, #0]
 8007986:	061d      	lsls	r5, r3, #24
 8007988:	d514      	bpl.n	80079b4 <_printf_i+0x1ac>
 800798a:	07df      	lsls	r7, r3, #31
 800798c:	bf44      	itt	mi
 800798e:	f043 0320 	orrmi.w	r3, r3, #32
 8007992:	6023      	strmi	r3, [r4, #0]
 8007994:	b91e      	cbnz	r6, 800799e <_printf_i+0x196>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	f023 0320 	bic.w	r3, r3, #32
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	2310      	movs	r3, #16
 80079a0:	e7b0      	b.n	8007904 <_printf_i+0xfc>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	f043 0320 	orr.w	r3, r3, #32
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	2378      	movs	r3, #120	; 0x78
 80079ac:	4828      	ldr	r0, [pc, #160]	; (8007a50 <_printf_i+0x248>)
 80079ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079b2:	e7e3      	b.n	800797c <_printf_i+0x174>
 80079b4:	0659      	lsls	r1, r3, #25
 80079b6:	bf48      	it	mi
 80079b8:	b2b6      	uxthmi	r6, r6
 80079ba:	e7e6      	b.n	800798a <_printf_i+0x182>
 80079bc:	4615      	mov	r5, r2
 80079be:	e7bb      	b.n	8007938 <_printf_i+0x130>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	6826      	ldr	r6, [r4, #0]
 80079c4:	6961      	ldr	r1, [r4, #20]
 80079c6:	1d18      	adds	r0, r3, #4
 80079c8:	6028      	str	r0, [r5, #0]
 80079ca:	0635      	lsls	r5, r6, #24
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	d501      	bpl.n	80079d4 <_printf_i+0x1cc>
 80079d0:	6019      	str	r1, [r3, #0]
 80079d2:	e002      	b.n	80079da <_printf_i+0x1d2>
 80079d4:	0670      	lsls	r0, r6, #25
 80079d6:	d5fb      	bpl.n	80079d0 <_printf_i+0x1c8>
 80079d8:	8019      	strh	r1, [r3, #0]
 80079da:	2300      	movs	r3, #0
 80079dc:	6123      	str	r3, [r4, #16]
 80079de:	4615      	mov	r5, r2
 80079e0:	e7ba      	b.n	8007958 <_printf_i+0x150>
 80079e2:	682b      	ldr	r3, [r5, #0]
 80079e4:	1d1a      	adds	r2, r3, #4
 80079e6:	602a      	str	r2, [r5, #0]
 80079e8:	681d      	ldr	r5, [r3, #0]
 80079ea:	6862      	ldr	r2, [r4, #4]
 80079ec:	2100      	movs	r1, #0
 80079ee:	4628      	mov	r0, r5
 80079f0:	f7f8 fbf6 	bl	80001e0 <memchr>
 80079f4:	b108      	cbz	r0, 80079fa <_printf_i+0x1f2>
 80079f6:	1b40      	subs	r0, r0, r5
 80079f8:	6060      	str	r0, [r4, #4]
 80079fa:	6863      	ldr	r3, [r4, #4]
 80079fc:	6123      	str	r3, [r4, #16]
 80079fe:	2300      	movs	r3, #0
 8007a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a04:	e7a8      	b.n	8007958 <_printf_i+0x150>
 8007a06:	6923      	ldr	r3, [r4, #16]
 8007a08:	462a      	mov	r2, r5
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	47d0      	blx	sl
 8007a10:	3001      	adds	r0, #1
 8007a12:	d0ab      	beq.n	800796c <_printf_i+0x164>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	079b      	lsls	r3, r3, #30
 8007a18:	d413      	bmi.n	8007a42 <_printf_i+0x23a>
 8007a1a:	68e0      	ldr	r0, [r4, #12]
 8007a1c:	9b03      	ldr	r3, [sp, #12]
 8007a1e:	4298      	cmp	r0, r3
 8007a20:	bfb8      	it	lt
 8007a22:	4618      	movlt	r0, r3
 8007a24:	e7a4      	b.n	8007970 <_printf_i+0x168>
 8007a26:	2301      	movs	r3, #1
 8007a28:	4632      	mov	r2, r6
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	47d0      	blx	sl
 8007a30:	3001      	adds	r0, #1
 8007a32:	d09b      	beq.n	800796c <_printf_i+0x164>
 8007a34:	3501      	adds	r5, #1
 8007a36:	68e3      	ldr	r3, [r4, #12]
 8007a38:	9903      	ldr	r1, [sp, #12]
 8007a3a:	1a5b      	subs	r3, r3, r1
 8007a3c:	42ab      	cmp	r3, r5
 8007a3e:	dcf2      	bgt.n	8007a26 <_printf_i+0x21e>
 8007a40:	e7eb      	b.n	8007a1a <_printf_i+0x212>
 8007a42:	2500      	movs	r5, #0
 8007a44:	f104 0619 	add.w	r6, r4, #25
 8007a48:	e7f5      	b.n	8007a36 <_printf_i+0x22e>
 8007a4a:	bf00      	nop
 8007a4c:	08009d3e 	.word	0x08009d3e
 8007a50:	08009d4f 	.word	0x08009d4f

08007a54 <iprintf>:
 8007a54:	b40f      	push	{r0, r1, r2, r3}
 8007a56:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <iprintf+0x2c>)
 8007a58:	b513      	push	{r0, r1, r4, lr}
 8007a5a:	681c      	ldr	r4, [r3, #0]
 8007a5c:	b124      	cbz	r4, 8007a68 <iprintf+0x14>
 8007a5e:	69a3      	ldr	r3, [r4, #24]
 8007a60:	b913      	cbnz	r3, 8007a68 <iprintf+0x14>
 8007a62:	4620      	mov	r0, r4
 8007a64:	f001 f8d8 	bl	8008c18 <__sinit>
 8007a68:	ab05      	add	r3, sp, #20
 8007a6a:	9a04      	ldr	r2, [sp, #16]
 8007a6c:	68a1      	ldr	r1, [r4, #8]
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	4620      	mov	r0, r4
 8007a72:	f001 fe95 	bl	80097a0 <_vfiprintf_r>
 8007a76:	b002      	add	sp, #8
 8007a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a7c:	b004      	add	sp, #16
 8007a7e:	4770      	bx	lr
 8007a80:	2000004c 	.word	0x2000004c

08007a84 <_puts_r>:
 8007a84:	b570      	push	{r4, r5, r6, lr}
 8007a86:	460e      	mov	r6, r1
 8007a88:	4605      	mov	r5, r0
 8007a8a:	b118      	cbz	r0, 8007a94 <_puts_r+0x10>
 8007a8c:	6983      	ldr	r3, [r0, #24]
 8007a8e:	b90b      	cbnz	r3, 8007a94 <_puts_r+0x10>
 8007a90:	f001 f8c2 	bl	8008c18 <__sinit>
 8007a94:	69ab      	ldr	r3, [r5, #24]
 8007a96:	68ac      	ldr	r4, [r5, #8]
 8007a98:	b913      	cbnz	r3, 8007aa0 <_puts_r+0x1c>
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	f001 f8bc 	bl	8008c18 <__sinit>
 8007aa0:	4b2c      	ldr	r3, [pc, #176]	; (8007b54 <_puts_r+0xd0>)
 8007aa2:	429c      	cmp	r4, r3
 8007aa4:	d120      	bne.n	8007ae8 <_puts_r+0x64>
 8007aa6:	686c      	ldr	r4, [r5, #4]
 8007aa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007aaa:	07db      	lsls	r3, r3, #31
 8007aac:	d405      	bmi.n	8007aba <_puts_r+0x36>
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	0598      	lsls	r0, r3, #22
 8007ab2:	d402      	bmi.n	8007aba <_puts_r+0x36>
 8007ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ab6:	f001 f952 	bl	8008d5e <__retarget_lock_acquire_recursive>
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	0719      	lsls	r1, r3, #28
 8007abe:	d51d      	bpl.n	8007afc <_puts_r+0x78>
 8007ac0:	6923      	ldr	r3, [r4, #16]
 8007ac2:	b1db      	cbz	r3, 8007afc <_puts_r+0x78>
 8007ac4:	3e01      	subs	r6, #1
 8007ac6:	68a3      	ldr	r3, [r4, #8]
 8007ac8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007acc:	3b01      	subs	r3, #1
 8007ace:	60a3      	str	r3, [r4, #8]
 8007ad0:	bb39      	cbnz	r1, 8007b22 <_puts_r+0x9e>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	da38      	bge.n	8007b48 <_puts_r+0xc4>
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	210a      	movs	r1, #10
 8007ada:	4628      	mov	r0, r5
 8007adc:	f000 f848 	bl	8007b70 <__swbuf_r>
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	d011      	beq.n	8007b08 <_puts_r+0x84>
 8007ae4:	250a      	movs	r5, #10
 8007ae6:	e011      	b.n	8007b0c <_puts_r+0x88>
 8007ae8:	4b1b      	ldr	r3, [pc, #108]	; (8007b58 <_puts_r+0xd4>)
 8007aea:	429c      	cmp	r4, r3
 8007aec:	d101      	bne.n	8007af2 <_puts_r+0x6e>
 8007aee:	68ac      	ldr	r4, [r5, #8]
 8007af0:	e7da      	b.n	8007aa8 <_puts_r+0x24>
 8007af2:	4b1a      	ldr	r3, [pc, #104]	; (8007b5c <_puts_r+0xd8>)
 8007af4:	429c      	cmp	r4, r3
 8007af6:	bf08      	it	eq
 8007af8:	68ec      	ldreq	r4, [r5, #12]
 8007afa:	e7d5      	b.n	8007aa8 <_puts_r+0x24>
 8007afc:	4621      	mov	r1, r4
 8007afe:	4628      	mov	r0, r5
 8007b00:	f000 f888 	bl	8007c14 <__swsetup_r>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d0dd      	beq.n	8007ac4 <_puts_r+0x40>
 8007b08:	f04f 35ff 	mov.w	r5, #4294967295
 8007b0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b0e:	07da      	lsls	r2, r3, #31
 8007b10:	d405      	bmi.n	8007b1e <_puts_r+0x9a>
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	059b      	lsls	r3, r3, #22
 8007b16:	d402      	bmi.n	8007b1e <_puts_r+0x9a>
 8007b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b1a:	f001 f921 	bl	8008d60 <__retarget_lock_release_recursive>
 8007b1e:	4628      	mov	r0, r5
 8007b20:	bd70      	pop	{r4, r5, r6, pc}
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	da04      	bge.n	8007b30 <_puts_r+0xac>
 8007b26:	69a2      	ldr	r2, [r4, #24]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	dc06      	bgt.n	8007b3a <_puts_r+0xb6>
 8007b2c:	290a      	cmp	r1, #10
 8007b2e:	d004      	beq.n	8007b3a <_puts_r+0xb6>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	6022      	str	r2, [r4, #0]
 8007b36:	7019      	strb	r1, [r3, #0]
 8007b38:	e7c5      	b.n	8007ac6 <_puts_r+0x42>
 8007b3a:	4622      	mov	r2, r4
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f000 f817 	bl	8007b70 <__swbuf_r>
 8007b42:	3001      	adds	r0, #1
 8007b44:	d1bf      	bne.n	8007ac6 <_puts_r+0x42>
 8007b46:	e7df      	b.n	8007b08 <_puts_r+0x84>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	250a      	movs	r5, #10
 8007b4c:	1c5a      	adds	r2, r3, #1
 8007b4e:	6022      	str	r2, [r4, #0]
 8007b50:	701d      	strb	r5, [r3, #0]
 8007b52:	e7db      	b.n	8007b0c <_puts_r+0x88>
 8007b54:	08009e10 	.word	0x08009e10
 8007b58:	08009e30 	.word	0x08009e30
 8007b5c:	08009df0 	.word	0x08009df0

08007b60 <puts>:
 8007b60:	4b02      	ldr	r3, [pc, #8]	; (8007b6c <puts+0xc>)
 8007b62:	4601      	mov	r1, r0
 8007b64:	6818      	ldr	r0, [r3, #0]
 8007b66:	f7ff bf8d 	b.w	8007a84 <_puts_r>
 8007b6a:	bf00      	nop
 8007b6c:	2000004c 	.word	0x2000004c

08007b70 <__swbuf_r>:
 8007b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b72:	460e      	mov	r6, r1
 8007b74:	4614      	mov	r4, r2
 8007b76:	4605      	mov	r5, r0
 8007b78:	b118      	cbz	r0, 8007b82 <__swbuf_r+0x12>
 8007b7a:	6983      	ldr	r3, [r0, #24]
 8007b7c:	b90b      	cbnz	r3, 8007b82 <__swbuf_r+0x12>
 8007b7e:	f001 f84b 	bl	8008c18 <__sinit>
 8007b82:	4b21      	ldr	r3, [pc, #132]	; (8007c08 <__swbuf_r+0x98>)
 8007b84:	429c      	cmp	r4, r3
 8007b86:	d12b      	bne.n	8007be0 <__swbuf_r+0x70>
 8007b88:	686c      	ldr	r4, [r5, #4]
 8007b8a:	69a3      	ldr	r3, [r4, #24]
 8007b8c:	60a3      	str	r3, [r4, #8]
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	071a      	lsls	r2, r3, #28
 8007b92:	d52f      	bpl.n	8007bf4 <__swbuf_r+0x84>
 8007b94:	6923      	ldr	r3, [r4, #16]
 8007b96:	b36b      	cbz	r3, 8007bf4 <__swbuf_r+0x84>
 8007b98:	6923      	ldr	r3, [r4, #16]
 8007b9a:	6820      	ldr	r0, [r4, #0]
 8007b9c:	1ac0      	subs	r0, r0, r3
 8007b9e:	6963      	ldr	r3, [r4, #20]
 8007ba0:	b2f6      	uxtb	r6, r6
 8007ba2:	4283      	cmp	r3, r0
 8007ba4:	4637      	mov	r7, r6
 8007ba6:	dc04      	bgt.n	8007bb2 <__swbuf_r+0x42>
 8007ba8:	4621      	mov	r1, r4
 8007baa:	4628      	mov	r0, r5
 8007bac:	f000 ffa0 	bl	8008af0 <_fflush_r>
 8007bb0:	bb30      	cbnz	r0, 8007c00 <__swbuf_r+0x90>
 8007bb2:	68a3      	ldr	r3, [r4, #8]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	60a3      	str	r3, [r4, #8]
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	6022      	str	r2, [r4, #0]
 8007bbe:	701e      	strb	r6, [r3, #0]
 8007bc0:	6963      	ldr	r3, [r4, #20]
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	4283      	cmp	r3, r0
 8007bc6:	d004      	beq.n	8007bd2 <__swbuf_r+0x62>
 8007bc8:	89a3      	ldrh	r3, [r4, #12]
 8007bca:	07db      	lsls	r3, r3, #31
 8007bcc:	d506      	bpl.n	8007bdc <__swbuf_r+0x6c>
 8007bce:	2e0a      	cmp	r6, #10
 8007bd0:	d104      	bne.n	8007bdc <__swbuf_r+0x6c>
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f000 ff8b 	bl	8008af0 <_fflush_r>
 8007bda:	b988      	cbnz	r0, 8007c00 <__swbuf_r+0x90>
 8007bdc:	4638      	mov	r0, r7
 8007bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007be0:	4b0a      	ldr	r3, [pc, #40]	; (8007c0c <__swbuf_r+0x9c>)
 8007be2:	429c      	cmp	r4, r3
 8007be4:	d101      	bne.n	8007bea <__swbuf_r+0x7a>
 8007be6:	68ac      	ldr	r4, [r5, #8]
 8007be8:	e7cf      	b.n	8007b8a <__swbuf_r+0x1a>
 8007bea:	4b09      	ldr	r3, [pc, #36]	; (8007c10 <__swbuf_r+0xa0>)
 8007bec:	429c      	cmp	r4, r3
 8007bee:	bf08      	it	eq
 8007bf0:	68ec      	ldreq	r4, [r5, #12]
 8007bf2:	e7ca      	b.n	8007b8a <__swbuf_r+0x1a>
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	f000 f80c 	bl	8007c14 <__swsetup_r>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d0cb      	beq.n	8007b98 <__swbuf_r+0x28>
 8007c00:	f04f 37ff 	mov.w	r7, #4294967295
 8007c04:	e7ea      	b.n	8007bdc <__swbuf_r+0x6c>
 8007c06:	bf00      	nop
 8007c08:	08009e10 	.word	0x08009e10
 8007c0c:	08009e30 	.word	0x08009e30
 8007c10:	08009df0 	.word	0x08009df0

08007c14 <__swsetup_r>:
 8007c14:	4b32      	ldr	r3, [pc, #200]	; (8007ce0 <__swsetup_r+0xcc>)
 8007c16:	b570      	push	{r4, r5, r6, lr}
 8007c18:	681d      	ldr	r5, [r3, #0]
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	b125      	cbz	r5, 8007c2a <__swsetup_r+0x16>
 8007c20:	69ab      	ldr	r3, [r5, #24]
 8007c22:	b913      	cbnz	r3, 8007c2a <__swsetup_r+0x16>
 8007c24:	4628      	mov	r0, r5
 8007c26:	f000 fff7 	bl	8008c18 <__sinit>
 8007c2a:	4b2e      	ldr	r3, [pc, #184]	; (8007ce4 <__swsetup_r+0xd0>)
 8007c2c:	429c      	cmp	r4, r3
 8007c2e:	d10f      	bne.n	8007c50 <__swsetup_r+0x3c>
 8007c30:	686c      	ldr	r4, [r5, #4]
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c38:	0719      	lsls	r1, r3, #28
 8007c3a:	d42c      	bmi.n	8007c96 <__swsetup_r+0x82>
 8007c3c:	06dd      	lsls	r5, r3, #27
 8007c3e:	d411      	bmi.n	8007c64 <__swsetup_r+0x50>
 8007c40:	2309      	movs	r3, #9
 8007c42:	6033      	str	r3, [r6, #0]
 8007c44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c48:	81a3      	strh	r3, [r4, #12]
 8007c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4e:	e03e      	b.n	8007cce <__swsetup_r+0xba>
 8007c50:	4b25      	ldr	r3, [pc, #148]	; (8007ce8 <__swsetup_r+0xd4>)
 8007c52:	429c      	cmp	r4, r3
 8007c54:	d101      	bne.n	8007c5a <__swsetup_r+0x46>
 8007c56:	68ac      	ldr	r4, [r5, #8]
 8007c58:	e7eb      	b.n	8007c32 <__swsetup_r+0x1e>
 8007c5a:	4b24      	ldr	r3, [pc, #144]	; (8007cec <__swsetup_r+0xd8>)
 8007c5c:	429c      	cmp	r4, r3
 8007c5e:	bf08      	it	eq
 8007c60:	68ec      	ldreq	r4, [r5, #12]
 8007c62:	e7e6      	b.n	8007c32 <__swsetup_r+0x1e>
 8007c64:	0758      	lsls	r0, r3, #29
 8007c66:	d512      	bpl.n	8007c8e <__swsetup_r+0x7a>
 8007c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c6a:	b141      	cbz	r1, 8007c7e <__swsetup_r+0x6a>
 8007c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c70:	4299      	cmp	r1, r3
 8007c72:	d002      	beq.n	8007c7a <__swsetup_r+0x66>
 8007c74:	4630      	mov	r0, r6
 8007c76:	f001 fc89 	bl	800958c <_free_r>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	6363      	str	r3, [r4, #52]	; 0x34
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c84:	81a3      	strh	r3, [r4, #12]
 8007c86:	2300      	movs	r3, #0
 8007c88:	6063      	str	r3, [r4, #4]
 8007c8a:	6923      	ldr	r3, [r4, #16]
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	f043 0308 	orr.w	r3, r3, #8
 8007c94:	81a3      	strh	r3, [r4, #12]
 8007c96:	6923      	ldr	r3, [r4, #16]
 8007c98:	b94b      	cbnz	r3, 8007cae <__swsetup_r+0x9a>
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ca4:	d003      	beq.n	8007cae <__swsetup_r+0x9a>
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f001 f87f 	bl	8008dac <__smakebuf_r>
 8007cae:	89a0      	ldrh	r0, [r4, #12]
 8007cb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cb4:	f010 0301 	ands.w	r3, r0, #1
 8007cb8:	d00a      	beq.n	8007cd0 <__swsetup_r+0xbc>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60a3      	str	r3, [r4, #8]
 8007cbe:	6963      	ldr	r3, [r4, #20]
 8007cc0:	425b      	negs	r3, r3
 8007cc2:	61a3      	str	r3, [r4, #24]
 8007cc4:	6923      	ldr	r3, [r4, #16]
 8007cc6:	b943      	cbnz	r3, 8007cda <__swsetup_r+0xc6>
 8007cc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ccc:	d1ba      	bne.n	8007c44 <__swsetup_r+0x30>
 8007cce:	bd70      	pop	{r4, r5, r6, pc}
 8007cd0:	0781      	lsls	r1, r0, #30
 8007cd2:	bf58      	it	pl
 8007cd4:	6963      	ldrpl	r3, [r4, #20]
 8007cd6:	60a3      	str	r3, [r4, #8]
 8007cd8:	e7f4      	b.n	8007cc4 <__swsetup_r+0xb0>
 8007cda:	2000      	movs	r0, #0
 8007cdc:	e7f7      	b.n	8007cce <__swsetup_r+0xba>
 8007cde:	bf00      	nop
 8007ce0:	2000004c 	.word	0x2000004c
 8007ce4:	08009e10 	.word	0x08009e10
 8007ce8:	08009e30 	.word	0x08009e30
 8007cec:	08009df0 	.word	0x08009df0

08007cf0 <quorem>:
 8007cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	6903      	ldr	r3, [r0, #16]
 8007cf6:	690c      	ldr	r4, [r1, #16]
 8007cf8:	42a3      	cmp	r3, r4
 8007cfa:	4607      	mov	r7, r0
 8007cfc:	f2c0 8081 	blt.w	8007e02 <quorem+0x112>
 8007d00:	3c01      	subs	r4, #1
 8007d02:	f101 0814 	add.w	r8, r1, #20
 8007d06:	f100 0514 	add.w	r5, r0, #20
 8007d0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d0e:	9301      	str	r3, [sp, #4]
 8007d10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d24:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d28:	d331      	bcc.n	8007d8e <quorem+0x9e>
 8007d2a:	f04f 0e00 	mov.w	lr, #0
 8007d2e:	4640      	mov	r0, r8
 8007d30:	46ac      	mov	ip, r5
 8007d32:	46f2      	mov	sl, lr
 8007d34:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d38:	b293      	uxth	r3, r2
 8007d3a:	fb06 e303 	mla	r3, r6, r3, lr
 8007d3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	ebaa 0303 	sub.w	r3, sl, r3
 8007d48:	f8dc a000 	ldr.w	sl, [ip]
 8007d4c:	0c12      	lsrs	r2, r2, #16
 8007d4e:	fa13 f38a 	uxtah	r3, r3, sl
 8007d52:	fb06 e202 	mla	r2, r6, r2, lr
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	9b00      	ldr	r3, [sp, #0]
 8007d5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d5e:	b292      	uxth	r2, r2
 8007d60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d68:	f8bd 3000 	ldrh.w	r3, [sp]
 8007d6c:	4581      	cmp	r9, r0
 8007d6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d72:	f84c 3b04 	str.w	r3, [ip], #4
 8007d76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d7a:	d2db      	bcs.n	8007d34 <quorem+0x44>
 8007d7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d80:	b92b      	cbnz	r3, 8007d8e <quorem+0x9e>
 8007d82:	9b01      	ldr	r3, [sp, #4]
 8007d84:	3b04      	subs	r3, #4
 8007d86:	429d      	cmp	r5, r3
 8007d88:	461a      	mov	r2, r3
 8007d8a:	d32e      	bcc.n	8007dea <quorem+0xfa>
 8007d8c:	613c      	str	r4, [r7, #16]
 8007d8e:	4638      	mov	r0, r7
 8007d90:	f001 fae4 	bl	800935c <__mcmp>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	db24      	blt.n	8007de2 <quorem+0xf2>
 8007d98:	3601      	adds	r6, #1
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f04f 0c00 	mov.w	ip, #0
 8007da0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007da4:	f8d0 e000 	ldr.w	lr, [r0]
 8007da8:	b293      	uxth	r3, r2
 8007daa:	ebac 0303 	sub.w	r3, ip, r3
 8007dae:	0c12      	lsrs	r2, r2, #16
 8007db0:	fa13 f38e 	uxtah	r3, r3, lr
 8007db4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007db8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dc2:	45c1      	cmp	r9, r8
 8007dc4:	f840 3b04 	str.w	r3, [r0], #4
 8007dc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007dcc:	d2e8      	bcs.n	8007da0 <quorem+0xb0>
 8007dce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dd6:	b922      	cbnz	r2, 8007de2 <quorem+0xf2>
 8007dd8:	3b04      	subs	r3, #4
 8007dda:	429d      	cmp	r5, r3
 8007ddc:	461a      	mov	r2, r3
 8007dde:	d30a      	bcc.n	8007df6 <quorem+0x106>
 8007de0:	613c      	str	r4, [r7, #16]
 8007de2:	4630      	mov	r0, r6
 8007de4:	b003      	add	sp, #12
 8007de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dea:	6812      	ldr	r2, [r2, #0]
 8007dec:	3b04      	subs	r3, #4
 8007dee:	2a00      	cmp	r2, #0
 8007df0:	d1cc      	bne.n	8007d8c <quorem+0x9c>
 8007df2:	3c01      	subs	r4, #1
 8007df4:	e7c7      	b.n	8007d86 <quorem+0x96>
 8007df6:	6812      	ldr	r2, [r2, #0]
 8007df8:	3b04      	subs	r3, #4
 8007dfa:	2a00      	cmp	r2, #0
 8007dfc:	d1f0      	bne.n	8007de0 <quorem+0xf0>
 8007dfe:	3c01      	subs	r4, #1
 8007e00:	e7eb      	b.n	8007dda <quorem+0xea>
 8007e02:	2000      	movs	r0, #0
 8007e04:	e7ee      	b.n	8007de4 <quorem+0xf4>
	...

08007e08 <_dtoa_r>:
 8007e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0c:	ed2d 8b04 	vpush	{d8-d9}
 8007e10:	ec57 6b10 	vmov	r6, r7, d0
 8007e14:	b093      	sub	sp, #76	; 0x4c
 8007e16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e1c:	9106      	str	r1, [sp, #24]
 8007e1e:	ee10 aa10 	vmov	sl, s0
 8007e22:	4604      	mov	r4, r0
 8007e24:	9209      	str	r2, [sp, #36]	; 0x24
 8007e26:	930c      	str	r3, [sp, #48]	; 0x30
 8007e28:	46bb      	mov	fp, r7
 8007e2a:	b975      	cbnz	r5, 8007e4a <_dtoa_r+0x42>
 8007e2c:	2010      	movs	r0, #16
 8007e2e:	f000 fffd 	bl	8008e2c <malloc>
 8007e32:	4602      	mov	r2, r0
 8007e34:	6260      	str	r0, [r4, #36]	; 0x24
 8007e36:	b920      	cbnz	r0, 8007e42 <_dtoa_r+0x3a>
 8007e38:	4ba7      	ldr	r3, [pc, #668]	; (80080d8 <_dtoa_r+0x2d0>)
 8007e3a:	21ea      	movs	r1, #234	; 0xea
 8007e3c:	48a7      	ldr	r0, [pc, #668]	; (80080dc <_dtoa_r+0x2d4>)
 8007e3e:	f001 fe45 	bl	8009acc <__assert_func>
 8007e42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e46:	6005      	str	r5, [r0, #0]
 8007e48:	60c5      	str	r5, [r0, #12]
 8007e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e4c:	6819      	ldr	r1, [r3, #0]
 8007e4e:	b151      	cbz	r1, 8007e66 <_dtoa_r+0x5e>
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	604a      	str	r2, [r1, #4]
 8007e54:	2301      	movs	r3, #1
 8007e56:	4093      	lsls	r3, r2
 8007e58:	608b      	str	r3, [r1, #8]
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f001 f83c 	bl	8008ed8 <_Bfree>
 8007e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	1e3b      	subs	r3, r7, #0
 8007e68:	bfaa      	itet	ge
 8007e6a:	2300      	movge	r3, #0
 8007e6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007e70:	f8c8 3000 	strge.w	r3, [r8]
 8007e74:	4b9a      	ldr	r3, [pc, #616]	; (80080e0 <_dtoa_r+0x2d8>)
 8007e76:	bfbc      	itt	lt
 8007e78:	2201      	movlt	r2, #1
 8007e7a:	f8c8 2000 	strlt.w	r2, [r8]
 8007e7e:	ea33 030b 	bics.w	r3, r3, fp
 8007e82:	d11b      	bne.n	8007ebc <_dtoa_r+0xb4>
 8007e84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e86:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e90:	4333      	orrs	r3, r6
 8007e92:	f000 8592 	beq.w	80089ba <_dtoa_r+0xbb2>
 8007e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e98:	b963      	cbnz	r3, 8007eb4 <_dtoa_r+0xac>
 8007e9a:	4b92      	ldr	r3, [pc, #584]	; (80080e4 <_dtoa_r+0x2dc>)
 8007e9c:	e022      	b.n	8007ee4 <_dtoa_r+0xdc>
 8007e9e:	4b92      	ldr	r3, [pc, #584]	; (80080e8 <_dtoa_r+0x2e0>)
 8007ea0:	9301      	str	r3, [sp, #4]
 8007ea2:	3308      	adds	r3, #8
 8007ea4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	9801      	ldr	r0, [sp, #4]
 8007eaa:	b013      	add	sp, #76	; 0x4c
 8007eac:	ecbd 8b04 	vpop	{d8-d9}
 8007eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb4:	4b8b      	ldr	r3, [pc, #556]	; (80080e4 <_dtoa_r+0x2dc>)
 8007eb6:	9301      	str	r3, [sp, #4]
 8007eb8:	3303      	adds	r3, #3
 8007eba:	e7f3      	b.n	8007ea4 <_dtoa_r+0x9c>
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	4650      	mov	r0, sl
 8007ec2:	4659      	mov	r1, fp
 8007ec4:	f7f8 fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ec8:	ec4b ab19 	vmov	d9, sl, fp
 8007ecc:	4680      	mov	r8, r0
 8007ece:	b158      	cbz	r0, 8007ee8 <_dtoa_r+0xe0>
 8007ed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	6013      	str	r3, [r2, #0]
 8007ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 856b 	beq.w	80089b4 <_dtoa_r+0xbac>
 8007ede:	4883      	ldr	r0, [pc, #524]	; (80080ec <_dtoa_r+0x2e4>)
 8007ee0:	6018      	str	r0, [r3, #0]
 8007ee2:	1e43      	subs	r3, r0, #1
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	e7df      	b.n	8007ea8 <_dtoa_r+0xa0>
 8007ee8:	ec4b ab10 	vmov	d0, sl, fp
 8007eec:	aa10      	add	r2, sp, #64	; 0x40
 8007eee:	a911      	add	r1, sp, #68	; 0x44
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f001 fad9 	bl	80094a8 <__d2b>
 8007ef6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007efa:	ee08 0a10 	vmov	s16, r0
 8007efe:	2d00      	cmp	r5, #0
 8007f00:	f000 8084 	beq.w	800800c <_dtoa_r+0x204>
 8007f04:	ee19 3a90 	vmov	r3, s19
 8007f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f10:	4656      	mov	r6, sl
 8007f12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007f1e:	4b74      	ldr	r3, [pc, #464]	; (80080f0 <_dtoa_r+0x2e8>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	4630      	mov	r0, r6
 8007f24:	4639      	mov	r1, r7
 8007f26:	f7f8 f9af 	bl	8000288 <__aeabi_dsub>
 8007f2a:	a365      	add	r3, pc, #404	; (adr r3, 80080c0 <_dtoa_r+0x2b8>)
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	f7f8 fb62 	bl	80005f8 <__aeabi_dmul>
 8007f34:	a364      	add	r3, pc, #400	; (adr r3, 80080c8 <_dtoa_r+0x2c0>)
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	f7f8 f9a7 	bl	800028c <__adddf3>
 8007f3e:	4606      	mov	r6, r0
 8007f40:	4628      	mov	r0, r5
 8007f42:	460f      	mov	r7, r1
 8007f44:	f7f8 faee 	bl	8000524 <__aeabi_i2d>
 8007f48:	a361      	add	r3, pc, #388	; (adr r3, 80080d0 <_dtoa_r+0x2c8>)
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	f7f8 fb53 	bl	80005f8 <__aeabi_dmul>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	4630      	mov	r0, r6
 8007f58:	4639      	mov	r1, r7
 8007f5a:	f7f8 f997 	bl	800028c <__adddf3>
 8007f5e:	4606      	mov	r6, r0
 8007f60:	460f      	mov	r7, r1
 8007f62:	f7f8 fdf9 	bl	8000b58 <__aeabi_d2iz>
 8007f66:	2200      	movs	r2, #0
 8007f68:	9000      	str	r0, [sp, #0]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	4639      	mov	r1, r7
 8007f70:	f7f8 fdb4 	bl	8000adc <__aeabi_dcmplt>
 8007f74:	b150      	cbz	r0, 8007f8c <_dtoa_r+0x184>
 8007f76:	9800      	ldr	r0, [sp, #0]
 8007f78:	f7f8 fad4 	bl	8000524 <__aeabi_i2d>
 8007f7c:	4632      	mov	r2, r6
 8007f7e:	463b      	mov	r3, r7
 8007f80:	f7f8 fda2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f84:	b910      	cbnz	r0, 8007f8c <_dtoa_r+0x184>
 8007f86:	9b00      	ldr	r3, [sp, #0]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	9b00      	ldr	r3, [sp, #0]
 8007f8e:	2b16      	cmp	r3, #22
 8007f90:	d85a      	bhi.n	8008048 <_dtoa_r+0x240>
 8007f92:	9a00      	ldr	r2, [sp, #0]
 8007f94:	4b57      	ldr	r3, [pc, #348]	; (80080f4 <_dtoa_r+0x2ec>)
 8007f96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	ec51 0b19 	vmov	r0, r1, d9
 8007fa2:	f7f8 fd9b 	bl	8000adc <__aeabi_dcmplt>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d050      	beq.n	800804c <_dtoa_r+0x244>
 8007faa:	9b00      	ldr	r3, [sp, #0]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fb6:	1b5d      	subs	r5, r3, r5
 8007fb8:	1e6b      	subs	r3, r5, #1
 8007fba:	9305      	str	r3, [sp, #20]
 8007fbc:	bf45      	ittet	mi
 8007fbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8007fc2:	9304      	strmi	r3, [sp, #16]
 8007fc4:	2300      	movpl	r3, #0
 8007fc6:	2300      	movmi	r3, #0
 8007fc8:	bf4c      	ite	mi
 8007fca:	9305      	strmi	r3, [sp, #20]
 8007fcc:	9304      	strpl	r3, [sp, #16]
 8007fce:	9b00      	ldr	r3, [sp, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	db3d      	blt.n	8008050 <_dtoa_r+0x248>
 8007fd4:	9b05      	ldr	r3, [sp, #20]
 8007fd6:	9a00      	ldr	r2, [sp, #0]
 8007fd8:	920a      	str	r2, [sp, #40]	; 0x28
 8007fda:	4413      	add	r3, r2
 8007fdc:	9305      	str	r3, [sp, #20]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	9307      	str	r3, [sp, #28]
 8007fe2:	9b06      	ldr	r3, [sp, #24]
 8007fe4:	2b09      	cmp	r3, #9
 8007fe6:	f200 8089 	bhi.w	80080fc <_dtoa_r+0x2f4>
 8007fea:	2b05      	cmp	r3, #5
 8007fec:	bfc4      	itt	gt
 8007fee:	3b04      	subgt	r3, #4
 8007ff0:	9306      	strgt	r3, [sp, #24]
 8007ff2:	9b06      	ldr	r3, [sp, #24]
 8007ff4:	f1a3 0302 	sub.w	r3, r3, #2
 8007ff8:	bfcc      	ite	gt
 8007ffa:	2500      	movgt	r5, #0
 8007ffc:	2501      	movle	r5, #1
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	f200 8087 	bhi.w	8008112 <_dtoa_r+0x30a>
 8008004:	e8df f003 	tbb	[pc, r3]
 8008008:	59383a2d 	.word	0x59383a2d
 800800c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008010:	441d      	add	r5, r3
 8008012:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008016:	2b20      	cmp	r3, #32
 8008018:	bfc1      	itttt	gt
 800801a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800801e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008022:	fa0b f303 	lslgt.w	r3, fp, r3
 8008026:	fa26 f000 	lsrgt.w	r0, r6, r0
 800802a:	bfda      	itte	le
 800802c:	f1c3 0320 	rsble	r3, r3, #32
 8008030:	fa06 f003 	lslle.w	r0, r6, r3
 8008034:	4318      	orrgt	r0, r3
 8008036:	f7f8 fa65 	bl	8000504 <__aeabi_ui2d>
 800803a:	2301      	movs	r3, #1
 800803c:	4606      	mov	r6, r0
 800803e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008042:	3d01      	subs	r5, #1
 8008044:	930e      	str	r3, [sp, #56]	; 0x38
 8008046:	e76a      	b.n	8007f1e <_dtoa_r+0x116>
 8008048:	2301      	movs	r3, #1
 800804a:	e7b2      	b.n	8007fb2 <_dtoa_r+0x1aa>
 800804c:	900b      	str	r0, [sp, #44]	; 0x2c
 800804e:	e7b1      	b.n	8007fb4 <_dtoa_r+0x1ac>
 8008050:	9b04      	ldr	r3, [sp, #16]
 8008052:	9a00      	ldr	r2, [sp, #0]
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	9304      	str	r3, [sp, #16]
 8008058:	4253      	negs	r3, r2
 800805a:	9307      	str	r3, [sp, #28]
 800805c:	2300      	movs	r3, #0
 800805e:	930a      	str	r3, [sp, #40]	; 0x28
 8008060:	e7bf      	b.n	8007fe2 <_dtoa_r+0x1da>
 8008062:	2300      	movs	r3, #0
 8008064:	9308      	str	r3, [sp, #32]
 8008066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008068:	2b00      	cmp	r3, #0
 800806a:	dc55      	bgt.n	8008118 <_dtoa_r+0x310>
 800806c:	2301      	movs	r3, #1
 800806e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008072:	461a      	mov	r2, r3
 8008074:	9209      	str	r2, [sp, #36]	; 0x24
 8008076:	e00c      	b.n	8008092 <_dtoa_r+0x28a>
 8008078:	2301      	movs	r3, #1
 800807a:	e7f3      	b.n	8008064 <_dtoa_r+0x25c>
 800807c:	2300      	movs	r3, #0
 800807e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008080:	9308      	str	r3, [sp, #32]
 8008082:	9b00      	ldr	r3, [sp, #0]
 8008084:	4413      	add	r3, r2
 8008086:	9302      	str	r3, [sp, #8]
 8008088:	3301      	adds	r3, #1
 800808a:	2b01      	cmp	r3, #1
 800808c:	9303      	str	r3, [sp, #12]
 800808e:	bfb8      	it	lt
 8008090:	2301      	movlt	r3, #1
 8008092:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008094:	2200      	movs	r2, #0
 8008096:	6042      	str	r2, [r0, #4]
 8008098:	2204      	movs	r2, #4
 800809a:	f102 0614 	add.w	r6, r2, #20
 800809e:	429e      	cmp	r6, r3
 80080a0:	6841      	ldr	r1, [r0, #4]
 80080a2:	d93d      	bls.n	8008120 <_dtoa_r+0x318>
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 fed7 	bl	8008e58 <_Balloc>
 80080aa:	9001      	str	r0, [sp, #4]
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d13b      	bne.n	8008128 <_dtoa_r+0x320>
 80080b0:	4b11      	ldr	r3, [pc, #68]	; (80080f8 <_dtoa_r+0x2f0>)
 80080b2:	4602      	mov	r2, r0
 80080b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080b8:	e6c0      	b.n	8007e3c <_dtoa_r+0x34>
 80080ba:	2301      	movs	r3, #1
 80080bc:	e7df      	b.n	800807e <_dtoa_r+0x276>
 80080be:	bf00      	nop
 80080c0:	636f4361 	.word	0x636f4361
 80080c4:	3fd287a7 	.word	0x3fd287a7
 80080c8:	8b60c8b3 	.word	0x8b60c8b3
 80080cc:	3fc68a28 	.word	0x3fc68a28
 80080d0:	509f79fb 	.word	0x509f79fb
 80080d4:	3fd34413 	.word	0x3fd34413
 80080d8:	08009d6d 	.word	0x08009d6d
 80080dc:	08009d84 	.word	0x08009d84
 80080e0:	7ff00000 	.word	0x7ff00000
 80080e4:	08009d69 	.word	0x08009d69
 80080e8:	08009d60 	.word	0x08009d60
 80080ec:	08009d3d 	.word	0x08009d3d
 80080f0:	3ff80000 	.word	0x3ff80000
 80080f4:	08009ed8 	.word	0x08009ed8
 80080f8:	08009ddf 	.word	0x08009ddf
 80080fc:	2501      	movs	r5, #1
 80080fe:	2300      	movs	r3, #0
 8008100:	9306      	str	r3, [sp, #24]
 8008102:	9508      	str	r5, [sp, #32]
 8008104:	f04f 33ff 	mov.w	r3, #4294967295
 8008108:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800810c:	2200      	movs	r2, #0
 800810e:	2312      	movs	r3, #18
 8008110:	e7b0      	b.n	8008074 <_dtoa_r+0x26c>
 8008112:	2301      	movs	r3, #1
 8008114:	9308      	str	r3, [sp, #32]
 8008116:	e7f5      	b.n	8008104 <_dtoa_r+0x2fc>
 8008118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800811e:	e7b8      	b.n	8008092 <_dtoa_r+0x28a>
 8008120:	3101      	adds	r1, #1
 8008122:	6041      	str	r1, [r0, #4]
 8008124:	0052      	lsls	r2, r2, #1
 8008126:	e7b8      	b.n	800809a <_dtoa_r+0x292>
 8008128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800812a:	9a01      	ldr	r2, [sp, #4]
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	9b03      	ldr	r3, [sp, #12]
 8008130:	2b0e      	cmp	r3, #14
 8008132:	f200 809d 	bhi.w	8008270 <_dtoa_r+0x468>
 8008136:	2d00      	cmp	r5, #0
 8008138:	f000 809a 	beq.w	8008270 <_dtoa_r+0x468>
 800813c:	9b00      	ldr	r3, [sp, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	dd32      	ble.n	80081a8 <_dtoa_r+0x3a0>
 8008142:	4ab7      	ldr	r2, [pc, #732]	; (8008420 <_dtoa_r+0x618>)
 8008144:	f003 030f 	and.w	r3, r3, #15
 8008148:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800814c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008150:	9b00      	ldr	r3, [sp, #0]
 8008152:	05d8      	lsls	r0, r3, #23
 8008154:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008158:	d516      	bpl.n	8008188 <_dtoa_r+0x380>
 800815a:	4bb2      	ldr	r3, [pc, #712]	; (8008424 <_dtoa_r+0x61c>)
 800815c:	ec51 0b19 	vmov	r0, r1, d9
 8008160:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008164:	f7f8 fb72 	bl	800084c <__aeabi_ddiv>
 8008168:	f007 070f 	and.w	r7, r7, #15
 800816c:	4682      	mov	sl, r0
 800816e:	468b      	mov	fp, r1
 8008170:	2503      	movs	r5, #3
 8008172:	4eac      	ldr	r6, [pc, #688]	; (8008424 <_dtoa_r+0x61c>)
 8008174:	b957      	cbnz	r7, 800818c <_dtoa_r+0x384>
 8008176:	4642      	mov	r2, r8
 8008178:	464b      	mov	r3, r9
 800817a:	4650      	mov	r0, sl
 800817c:	4659      	mov	r1, fp
 800817e:	f7f8 fb65 	bl	800084c <__aeabi_ddiv>
 8008182:	4682      	mov	sl, r0
 8008184:	468b      	mov	fp, r1
 8008186:	e028      	b.n	80081da <_dtoa_r+0x3d2>
 8008188:	2502      	movs	r5, #2
 800818a:	e7f2      	b.n	8008172 <_dtoa_r+0x36a>
 800818c:	07f9      	lsls	r1, r7, #31
 800818e:	d508      	bpl.n	80081a2 <_dtoa_r+0x39a>
 8008190:	4640      	mov	r0, r8
 8008192:	4649      	mov	r1, r9
 8008194:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008198:	f7f8 fa2e 	bl	80005f8 <__aeabi_dmul>
 800819c:	3501      	adds	r5, #1
 800819e:	4680      	mov	r8, r0
 80081a0:	4689      	mov	r9, r1
 80081a2:	107f      	asrs	r7, r7, #1
 80081a4:	3608      	adds	r6, #8
 80081a6:	e7e5      	b.n	8008174 <_dtoa_r+0x36c>
 80081a8:	f000 809b 	beq.w	80082e2 <_dtoa_r+0x4da>
 80081ac:	9b00      	ldr	r3, [sp, #0]
 80081ae:	4f9d      	ldr	r7, [pc, #628]	; (8008424 <_dtoa_r+0x61c>)
 80081b0:	425e      	negs	r6, r3
 80081b2:	4b9b      	ldr	r3, [pc, #620]	; (8008420 <_dtoa_r+0x618>)
 80081b4:	f006 020f 	and.w	r2, r6, #15
 80081b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	ec51 0b19 	vmov	r0, r1, d9
 80081c4:	f7f8 fa18 	bl	80005f8 <__aeabi_dmul>
 80081c8:	1136      	asrs	r6, r6, #4
 80081ca:	4682      	mov	sl, r0
 80081cc:	468b      	mov	fp, r1
 80081ce:	2300      	movs	r3, #0
 80081d0:	2502      	movs	r5, #2
 80081d2:	2e00      	cmp	r6, #0
 80081d4:	d17a      	bne.n	80082cc <_dtoa_r+0x4c4>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1d3      	bne.n	8008182 <_dtoa_r+0x37a>
 80081da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 8082 	beq.w	80082e6 <_dtoa_r+0x4de>
 80081e2:	4b91      	ldr	r3, [pc, #580]	; (8008428 <_dtoa_r+0x620>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	4650      	mov	r0, sl
 80081e8:	4659      	mov	r1, fp
 80081ea:	f7f8 fc77 	bl	8000adc <__aeabi_dcmplt>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d079      	beq.n	80082e6 <_dtoa_r+0x4de>
 80081f2:	9b03      	ldr	r3, [sp, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d076      	beq.n	80082e6 <_dtoa_r+0x4de>
 80081f8:	9b02      	ldr	r3, [sp, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	dd36      	ble.n	800826c <_dtoa_r+0x464>
 80081fe:	9b00      	ldr	r3, [sp, #0]
 8008200:	4650      	mov	r0, sl
 8008202:	4659      	mov	r1, fp
 8008204:	1e5f      	subs	r7, r3, #1
 8008206:	2200      	movs	r2, #0
 8008208:	4b88      	ldr	r3, [pc, #544]	; (800842c <_dtoa_r+0x624>)
 800820a:	f7f8 f9f5 	bl	80005f8 <__aeabi_dmul>
 800820e:	9e02      	ldr	r6, [sp, #8]
 8008210:	4682      	mov	sl, r0
 8008212:	468b      	mov	fp, r1
 8008214:	3501      	adds	r5, #1
 8008216:	4628      	mov	r0, r5
 8008218:	f7f8 f984 	bl	8000524 <__aeabi_i2d>
 800821c:	4652      	mov	r2, sl
 800821e:	465b      	mov	r3, fp
 8008220:	f7f8 f9ea 	bl	80005f8 <__aeabi_dmul>
 8008224:	4b82      	ldr	r3, [pc, #520]	; (8008430 <_dtoa_r+0x628>)
 8008226:	2200      	movs	r2, #0
 8008228:	f7f8 f830 	bl	800028c <__adddf3>
 800822c:	46d0      	mov	r8, sl
 800822e:	46d9      	mov	r9, fp
 8008230:	4682      	mov	sl, r0
 8008232:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008236:	2e00      	cmp	r6, #0
 8008238:	d158      	bne.n	80082ec <_dtoa_r+0x4e4>
 800823a:	4b7e      	ldr	r3, [pc, #504]	; (8008434 <_dtoa_r+0x62c>)
 800823c:	2200      	movs	r2, #0
 800823e:	4640      	mov	r0, r8
 8008240:	4649      	mov	r1, r9
 8008242:	f7f8 f821 	bl	8000288 <__aeabi_dsub>
 8008246:	4652      	mov	r2, sl
 8008248:	465b      	mov	r3, fp
 800824a:	4680      	mov	r8, r0
 800824c:	4689      	mov	r9, r1
 800824e:	f7f8 fc63 	bl	8000b18 <__aeabi_dcmpgt>
 8008252:	2800      	cmp	r0, #0
 8008254:	f040 8295 	bne.w	8008782 <_dtoa_r+0x97a>
 8008258:	4652      	mov	r2, sl
 800825a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800825e:	4640      	mov	r0, r8
 8008260:	4649      	mov	r1, r9
 8008262:	f7f8 fc3b 	bl	8000adc <__aeabi_dcmplt>
 8008266:	2800      	cmp	r0, #0
 8008268:	f040 8289 	bne.w	800877e <_dtoa_r+0x976>
 800826c:	ec5b ab19 	vmov	sl, fp, d9
 8008270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008272:	2b00      	cmp	r3, #0
 8008274:	f2c0 8148 	blt.w	8008508 <_dtoa_r+0x700>
 8008278:	9a00      	ldr	r2, [sp, #0]
 800827a:	2a0e      	cmp	r2, #14
 800827c:	f300 8144 	bgt.w	8008508 <_dtoa_r+0x700>
 8008280:	4b67      	ldr	r3, [pc, #412]	; (8008420 <_dtoa_r+0x618>)
 8008282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008286:	e9d3 8900 	ldrd	r8, r9, [r3]
 800828a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828c:	2b00      	cmp	r3, #0
 800828e:	f280 80d5 	bge.w	800843c <_dtoa_r+0x634>
 8008292:	9b03      	ldr	r3, [sp, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	f300 80d1 	bgt.w	800843c <_dtoa_r+0x634>
 800829a:	f040 826f 	bne.w	800877c <_dtoa_r+0x974>
 800829e:	4b65      	ldr	r3, [pc, #404]	; (8008434 <_dtoa_r+0x62c>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	4640      	mov	r0, r8
 80082a4:	4649      	mov	r1, r9
 80082a6:	f7f8 f9a7 	bl	80005f8 <__aeabi_dmul>
 80082aa:	4652      	mov	r2, sl
 80082ac:	465b      	mov	r3, fp
 80082ae:	f7f8 fc29 	bl	8000b04 <__aeabi_dcmpge>
 80082b2:	9e03      	ldr	r6, [sp, #12]
 80082b4:	4637      	mov	r7, r6
 80082b6:	2800      	cmp	r0, #0
 80082b8:	f040 8245 	bne.w	8008746 <_dtoa_r+0x93e>
 80082bc:	9d01      	ldr	r5, [sp, #4]
 80082be:	2331      	movs	r3, #49	; 0x31
 80082c0:	f805 3b01 	strb.w	r3, [r5], #1
 80082c4:	9b00      	ldr	r3, [sp, #0]
 80082c6:	3301      	adds	r3, #1
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	e240      	b.n	800874e <_dtoa_r+0x946>
 80082cc:	07f2      	lsls	r2, r6, #31
 80082ce:	d505      	bpl.n	80082dc <_dtoa_r+0x4d4>
 80082d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082d4:	f7f8 f990 	bl	80005f8 <__aeabi_dmul>
 80082d8:	3501      	adds	r5, #1
 80082da:	2301      	movs	r3, #1
 80082dc:	1076      	asrs	r6, r6, #1
 80082de:	3708      	adds	r7, #8
 80082e0:	e777      	b.n	80081d2 <_dtoa_r+0x3ca>
 80082e2:	2502      	movs	r5, #2
 80082e4:	e779      	b.n	80081da <_dtoa_r+0x3d2>
 80082e6:	9f00      	ldr	r7, [sp, #0]
 80082e8:	9e03      	ldr	r6, [sp, #12]
 80082ea:	e794      	b.n	8008216 <_dtoa_r+0x40e>
 80082ec:	9901      	ldr	r1, [sp, #4]
 80082ee:	4b4c      	ldr	r3, [pc, #304]	; (8008420 <_dtoa_r+0x618>)
 80082f0:	4431      	add	r1, r6
 80082f2:	910d      	str	r1, [sp, #52]	; 0x34
 80082f4:	9908      	ldr	r1, [sp, #32]
 80082f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80082fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082fe:	2900      	cmp	r1, #0
 8008300:	d043      	beq.n	800838a <_dtoa_r+0x582>
 8008302:	494d      	ldr	r1, [pc, #308]	; (8008438 <_dtoa_r+0x630>)
 8008304:	2000      	movs	r0, #0
 8008306:	f7f8 faa1 	bl	800084c <__aeabi_ddiv>
 800830a:	4652      	mov	r2, sl
 800830c:	465b      	mov	r3, fp
 800830e:	f7f7 ffbb 	bl	8000288 <__aeabi_dsub>
 8008312:	9d01      	ldr	r5, [sp, #4]
 8008314:	4682      	mov	sl, r0
 8008316:	468b      	mov	fp, r1
 8008318:	4649      	mov	r1, r9
 800831a:	4640      	mov	r0, r8
 800831c:	f7f8 fc1c 	bl	8000b58 <__aeabi_d2iz>
 8008320:	4606      	mov	r6, r0
 8008322:	f7f8 f8ff 	bl	8000524 <__aeabi_i2d>
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	4640      	mov	r0, r8
 800832c:	4649      	mov	r1, r9
 800832e:	f7f7 ffab 	bl	8000288 <__aeabi_dsub>
 8008332:	3630      	adds	r6, #48	; 0x30
 8008334:	f805 6b01 	strb.w	r6, [r5], #1
 8008338:	4652      	mov	r2, sl
 800833a:	465b      	mov	r3, fp
 800833c:	4680      	mov	r8, r0
 800833e:	4689      	mov	r9, r1
 8008340:	f7f8 fbcc 	bl	8000adc <__aeabi_dcmplt>
 8008344:	2800      	cmp	r0, #0
 8008346:	d163      	bne.n	8008410 <_dtoa_r+0x608>
 8008348:	4642      	mov	r2, r8
 800834a:	464b      	mov	r3, r9
 800834c:	4936      	ldr	r1, [pc, #216]	; (8008428 <_dtoa_r+0x620>)
 800834e:	2000      	movs	r0, #0
 8008350:	f7f7 ff9a 	bl	8000288 <__aeabi_dsub>
 8008354:	4652      	mov	r2, sl
 8008356:	465b      	mov	r3, fp
 8008358:	f7f8 fbc0 	bl	8000adc <__aeabi_dcmplt>
 800835c:	2800      	cmp	r0, #0
 800835e:	f040 80b5 	bne.w	80084cc <_dtoa_r+0x6c4>
 8008362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008364:	429d      	cmp	r5, r3
 8008366:	d081      	beq.n	800826c <_dtoa_r+0x464>
 8008368:	4b30      	ldr	r3, [pc, #192]	; (800842c <_dtoa_r+0x624>)
 800836a:	2200      	movs	r2, #0
 800836c:	4650      	mov	r0, sl
 800836e:	4659      	mov	r1, fp
 8008370:	f7f8 f942 	bl	80005f8 <__aeabi_dmul>
 8008374:	4b2d      	ldr	r3, [pc, #180]	; (800842c <_dtoa_r+0x624>)
 8008376:	4682      	mov	sl, r0
 8008378:	468b      	mov	fp, r1
 800837a:	4640      	mov	r0, r8
 800837c:	4649      	mov	r1, r9
 800837e:	2200      	movs	r2, #0
 8008380:	f7f8 f93a 	bl	80005f8 <__aeabi_dmul>
 8008384:	4680      	mov	r8, r0
 8008386:	4689      	mov	r9, r1
 8008388:	e7c6      	b.n	8008318 <_dtoa_r+0x510>
 800838a:	4650      	mov	r0, sl
 800838c:	4659      	mov	r1, fp
 800838e:	f7f8 f933 	bl	80005f8 <__aeabi_dmul>
 8008392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008394:	9d01      	ldr	r5, [sp, #4]
 8008396:	930f      	str	r3, [sp, #60]	; 0x3c
 8008398:	4682      	mov	sl, r0
 800839a:	468b      	mov	fp, r1
 800839c:	4649      	mov	r1, r9
 800839e:	4640      	mov	r0, r8
 80083a0:	f7f8 fbda 	bl	8000b58 <__aeabi_d2iz>
 80083a4:	4606      	mov	r6, r0
 80083a6:	f7f8 f8bd 	bl	8000524 <__aeabi_i2d>
 80083aa:	3630      	adds	r6, #48	; 0x30
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	4640      	mov	r0, r8
 80083b2:	4649      	mov	r1, r9
 80083b4:	f7f7 ff68 	bl	8000288 <__aeabi_dsub>
 80083b8:	f805 6b01 	strb.w	r6, [r5], #1
 80083bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083be:	429d      	cmp	r5, r3
 80083c0:	4680      	mov	r8, r0
 80083c2:	4689      	mov	r9, r1
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	d124      	bne.n	8008414 <_dtoa_r+0x60c>
 80083ca:	4b1b      	ldr	r3, [pc, #108]	; (8008438 <_dtoa_r+0x630>)
 80083cc:	4650      	mov	r0, sl
 80083ce:	4659      	mov	r1, fp
 80083d0:	f7f7 ff5c 	bl	800028c <__adddf3>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	4640      	mov	r0, r8
 80083da:	4649      	mov	r1, r9
 80083dc:	f7f8 fb9c 	bl	8000b18 <__aeabi_dcmpgt>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d173      	bne.n	80084cc <_dtoa_r+0x6c4>
 80083e4:	4652      	mov	r2, sl
 80083e6:	465b      	mov	r3, fp
 80083e8:	4913      	ldr	r1, [pc, #76]	; (8008438 <_dtoa_r+0x630>)
 80083ea:	2000      	movs	r0, #0
 80083ec:	f7f7 ff4c 	bl	8000288 <__aeabi_dsub>
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	4640      	mov	r0, r8
 80083f6:	4649      	mov	r1, r9
 80083f8:	f7f8 fb70 	bl	8000adc <__aeabi_dcmplt>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	f43f af35 	beq.w	800826c <_dtoa_r+0x464>
 8008402:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008404:	1e6b      	subs	r3, r5, #1
 8008406:	930f      	str	r3, [sp, #60]	; 0x3c
 8008408:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800840c:	2b30      	cmp	r3, #48	; 0x30
 800840e:	d0f8      	beq.n	8008402 <_dtoa_r+0x5fa>
 8008410:	9700      	str	r7, [sp, #0]
 8008412:	e049      	b.n	80084a8 <_dtoa_r+0x6a0>
 8008414:	4b05      	ldr	r3, [pc, #20]	; (800842c <_dtoa_r+0x624>)
 8008416:	f7f8 f8ef 	bl	80005f8 <__aeabi_dmul>
 800841a:	4680      	mov	r8, r0
 800841c:	4689      	mov	r9, r1
 800841e:	e7bd      	b.n	800839c <_dtoa_r+0x594>
 8008420:	08009ed8 	.word	0x08009ed8
 8008424:	08009eb0 	.word	0x08009eb0
 8008428:	3ff00000 	.word	0x3ff00000
 800842c:	40240000 	.word	0x40240000
 8008430:	401c0000 	.word	0x401c0000
 8008434:	40140000 	.word	0x40140000
 8008438:	3fe00000 	.word	0x3fe00000
 800843c:	9d01      	ldr	r5, [sp, #4]
 800843e:	4656      	mov	r6, sl
 8008440:	465f      	mov	r7, fp
 8008442:	4642      	mov	r2, r8
 8008444:	464b      	mov	r3, r9
 8008446:	4630      	mov	r0, r6
 8008448:	4639      	mov	r1, r7
 800844a:	f7f8 f9ff 	bl	800084c <__aeabi_ddiv>
 800844e:	f7f8 fb83 	bl	8000b58 <__aeabi_d2iz>
 8008452:	4682      	mov	sl, r0
 8008454:	f7f8 f866 	bl	8000524 <__aeabi_i2d>
 8008458:	4642      	mov	r2, r8
 800845a:	464b      	mov	r3, r9
 800845c:	f7f8 f8cc 	bl	80005f8 <__aeabi_dmul>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4630      	mov	r0, r6
 8008466:	4639      	mov	r1, r7
 8008468:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800846c:	f7f7 ff0c 	bl	8000288 <__aeabi_dsub>
 8008470:	f805 6b01 	strb.w	r6, [r5], #1
 8008474:	9e01      	ldr	r6, [sp, #4]
 8008476:	9f03      	ldr	r7, [sp, #12]
 8008478:	1bae      	subs	r6, r5, r6
 800847a:	42b7      	cmp	r7, r6
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	d135      	bne.n	80084ee <_dtoa_r+0x6e6>
 8008482:	f7f7 ff03 	bl	800028c <__adddf3>
 8008486:	4642      	mov	r2, r8
 8008488:	464b      	mov	r3, r9
 800848a:	4606      	mov	r6, r0
 800848c:	460f      	mov	r7, r1
 800848e:	f7f8 fb43 	bl	8000b18 <__aeabi_dcmpgt>
 8008492:	b9d0      	cbnz	r0, 80084ca <_dtoa_r+0x6c2>
 8008494:	4642      	mov	r2, r8
 8008496:	464b      	mov	r3, r9
 8008498:	4630      	mov	r0, r6
 800849a:	4639      	mov	r1, r7
 800849c:	f7f8 fb14 	bl	8000ac8 <__aeabi_dcmpeq>
 80084a0:	b110      	cbz	r0, 80084a8 <_dtoa_r+0x6a0>
 80084a2:	f01a 0f01 	tst.w	sl, #1
 80084a6:	d110      	bne.n	80084ca <_dtoa_r+0x6c2>
 80084a8:	4620      	mov	r0, r4
 80084aa:	ee18 1a10 	vmov	r1, s16
 80084ae:	f000 fd13 	bl	8008ed8 <_Bfree>
 80084b2:	2300      	movs	r3, #0
 80084b4:	9800      	ldr	r0, [sp, #0]
 80084b6:	702b      	strb	r3, [r5, #0]
 80084b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084ba:	3001      	adds	r0, #1
 80084bc:	6018      	str	r0, [r3, #0]
 80084be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f43f acf1 	beq.w	8007ea8 <_dtoa_r+0xa0>
 80084c6:	601d      	str	r5, [r3, #0]
 80084c8:	e4ee      	b.n	8007ea8 <_dtoa_r+0xa0>
 80084ca:	9f00      	ldr	r7, [sp, #0]
 80084cc:	462b      	mov	r3, r5
 80084ce:	461d      	mov	r5, r3
 80084d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084d4:	2a39      	cmp	r2, #57	; 0x39
 80084d6:	d106      	bne.n	80084e6 <_dtoa_r+0x6de>
 80084d8:	9a01      	ldr	r2, [sp, #4]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d1f7      	bne.n	80084ce <_dtoa_r+0x6c6>
 80084de:	9901      	ldr	r1, [sp, #4]
 80084e0:	2230      	movs	r2, #48	; 0x30
 80084e2:	3701      	adds	r7, #1
 80084e4:	700a      	strb	r2, [r1, #0]
 80084e6:	781a      	ldrb	r2, [r3, #0]
 80084e8:	3201      	adds	r2, #1
 80084ea:	701a      	strb	r2, [r3, #0]
 80084ec:	e790      	b.n	8008410 <_dtoa_r+0x608>
 80084ee:	4ba6      	ldr	r3, [pc, #664]	; (8008788 <_dtoa_r+0x980>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	f7f8 f881 	bl	80005f8 <__aeabi_dmul>
 80084f6:	2200      	movs	r2, #0
 80084f8:	2300      	movs	r3, #0
 80084fa:	4606      	mov	r6, r0
 80084fc:	460f      	mov	r7, r1
 80084fe:	f7f8 fae3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008502:	2800      	cmp	r0, #0
 8008504:	d09d      	beq.n	8008442 <_dtoa_r+0x63a>
 8008506:	e7cf      	b.n	80084a8 <_dtoa_r+0x6a0>
 8008508:	9a08      	ldr	r2, [sp, #32]
 800850a:	2a00      	cmp	r2, #0
 800850c:	f000 80d7 	beq.w	80086be <_dtoa_r+0x8b6>
 8008510:	9a06      	ldr	r2, [sp, #24]
 8008512:	2a01      	cmp	r2, #1
 8008514:	f300 80ba 	bgt.w	800868c <_dtoa_r+0x884>
 8008518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800851a:	2a00      	cmp	r2, #0
 800851c:	f000 80b2 	beq.w	8008684 <_dtoa_r+0x87c>
 8008520:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008524:	9e07      	ldr	r6, [sp, #28]
 8008526:	9d04      	ldr	r5, [sp, #16]
 8008528:	9a04      	ldr	r2, [sp, #16]
 800852a:	441a      	add	r2, r3
 800852c:	9204      	str	r2, [sp, #16]
 800852e:	9a05      	ldr	r2, [sp, #20]
 8008530:	2101      	movs	r1, #1
 8008532:	441a      	add	r2, r3
 8008534:	4620      	mov	r0, r4
 8008536:	9205      	str	r2, [sp, #20]
 8008538:	f000 fd86 	bl	8009048 <__i2b>
 800853c:	4607      	mov	r7, r0
 800853e:	2d00      	cmp	r5, #0
 8008540:	dd0c      	ble.n	800855c <_dtoa_r+0x754>
 8008542:	9b05      	ldr	r3, [sp, #20]
 8008544:	2b00      	cmp	r3, #0
 8008546:	dd09      	ble.n	800855c <_dtoa_r+0x754>
 8008548:	42ab      	cmp	r3, r5
 800854a:	9a04      	ldr	r2, [sp, #16]
 800854c:	bfa8      	it	ge
 800854e:	462b      	movge	r3, r5
 8008550:	1ad2      	subs	r2, r2, r3
 8008552:	9204      	str	r2, [sp, #16]
 8008554:	9a05      	ldr	r2, [sp, #20]
 8008556:	1aed      	subs	r5, r5, r3
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	9305      	str	r3, [sp, #20]
 800855c:	9b07      	ldr	r3, [sp, #28]
 800855e:	b31b      	cbz	r3, 80085a8 <_dtoa_r+0x7a0>
 8008560:	9b08      	ldr	r3, [sp, #32]
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 80af 	beq.w	80086c6 <_dtoa_r+0x8be>
 8008568:	2e00      	cmp	r6, #0
 800856a:	dd13      	ble.n	8008594 <_dtoa_r+0x78c>
 800856c:	4639      	mov	r1, r7
 800856e:	4632      	mov	r2, r6
 8008570:	4620      	mov	r0, r4
 8008572:	f000 fe29 	bl	80091c8 <__pow5mult>
 8008576:	ee18 2a10 	vmov	r2, s16
 800857a:	4601      	mov	r1, r0
 800857c:	4607      	mov	r7, r0
 800857e:	4620      	mov	r0, r4
 8008580:	f000 fd78 	bl	8009074 <__multiply>
 8008584:	ee18 1a10 	vmov	r1, s16
 8008588:	4680      	mov	r8, r0
 800858a:	4620      	mov	r0, r4
 800858c:	f000 fca4 	bl	8008ed8 <_Bfree>
 8008590:	ee08 8a10 	vmov	s16, r8
 8008594:	9b07      	ldr	r3, [sp, #28]
 8008596:	1b9a      	subs	r2, r3, r6
 8008598:	d006      	beq.n	80085a8 <_dtoa_r+0x7a0>
 800859a:	ee18 1a10 	vmov	r1, s16
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 fe12 	bl	80091c8 <__pow5mult>
 80085a4:	ee08 0a10 	vmov	s16, r0
 80085a8:	2101      	movs	r1, #1
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 fd4c 	bl	8009048 <__i2b>
 80085b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	4606      	mov	r6, r0
 80085b6:	f340 8088 	ble.w	80086ca <_dtoa_r+0x8c2>
 80085ba:	461a      	mov	r2, r3
 80085bc:	4601      	mov	r1, r0
 80085be:	4620      	mov	r0, r4
 80085c0:	f000 fe02 	bl	80091c8 <__pow5mult>
 80085c4:	9b06      	ldr	r3, [sp, #24]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	4606      	mov	r6, r0
 80085ca:	f340 8081 	ble.w	80086d0 <_dtoa_r+0x8c8>
 80085ce:	f04f 0800 	mov.w	r8, #0
 80085d2:	6933      	ldr	r3, [r6, #16]
 80085d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80085d8:	6918      	ldr	r0, [r3, #16]
 80085da:	f000 fce5 	bl	8008fa8 <__hi0bits>
 80085de:	f1c0 0020 	rsb	r0, r0, #32
 80085e2:	9b05      	ldr	r3, [sp, #20]
 80085e4:	4418      	add	r0, r3
 80085e6:	f010 001f 	ands.w	r0, r0, #31
 80085ea:	f000 8092 	beq.w	8008712 <_dtoa_r+0x90a>
 80085ee:	f1c0 0320 	rsb	r3, r0, #32
 80085f2:	2b04      	cmp	r3, #4
 80085f4:	f340 808a 	ble.w	800870c <_dtoa_r+0x904>
 80085f8:	f1c0 001c 	rsb	r0, r0, #28
 80085fc:	9b04      	ldr	r3, [sp, #16]
 80085fe:	4403      	add	r3, r0
 8008600:	9304      	str	r3, [sp, #16]
 8008602:	9b05      	ldr	r3, [sp, #20]
 8008604:	4403      	add	r3, r0
 8008606:	4405      	add	r5, r0
 8008608:	9305      	str	r3, [sp, #20]
 800860a:	9b04      	ldr	r3, [sp, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	dd07      	ble.n	8008620 <_dtoa_r+0x818>
 8008610:	ee18 1a10 	vmov	r1, s16
 8008614:	461a      	mov	r2, r3
 8008616:	4620      	mov	r0, r4
 8008618:	f000 fe30 	bl	800927c <__lshift>
 800861c:	ee08 0a10 	vmov	s16, r0
 8008620:	9b05      	ldr	r3, [sp, #20]
 8008622:	2b00      	cmp	r3, #0
 8008624:	dd05      	ble.n	8008632 <_dtoa_r+0x82a>
 8008626:	4631      	mov	r1, r6
 8008628:	461a      	mov	r2, r3
 800862a:	4620      	mov	r0, r4
 800862c:	f000 fe26 	bl	800927c <__lshift>
 8008630:	4606      	mov	r6, r0
 8008632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008634:	2b00      	cmp	r3, #0
 8008636:	d06e      	beq.n	8008716 <_dtoa_r+0x90e>
 8008638:	ee18 0a10 	vmov	r0, s16
 800863c:	4631      	mov	r1, r6
 800863e:	f000 fe8d 	bl	800935c <__mcmp>
 8008642:	2800      	cmp	r0, #0
 8008644:	da67      	bge.n	8008716 <_dtoa_r+0x90e>
 8008646:	9b00      	ldr	r3, [sp, #0]
 8008648:	3b01      	subs	r3, #1
 800864a:	ee18 1a10 	vmov	r1, s16
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	220a      	movs	r2, #10
 8008652:	2300      	movs	r3, #0
 8008654:	4620      	mov	r0, r4
 8008656:	f000 fc61 	bl	8008f1c <__multadd>
 800865a:	9b08      	ldr	r3, [sp, #32]
 800865c:	ee08 0a10 	vmov	s16, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 81b1 	beq.w	80089c8 <_dtoa_r+0xbc0>
 8008666:	2300      	movs	r3, #0
 8008668:	4639      	mov	r1, r7
 800866a:	220a      	movs	r2, #10
 800866c:	4620      	mov	r0, r4
 800866e:	f000 fc55 	bl	8008f1c <__multadd>
 8008672:	9b02      	ldr	r3, [sp, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	4607      	mov	r7, r0
 8008678:	f300 808e 	bgt.w	8008798 <_dtoa_r+0x990>
 800867c:	9b06      	ldr	r3, [sp, #24]
 800867e:	2b02      	cmp	r3, #2
 8008680:	dc51      	bgt.n	8008726 <_dtoa_r+0x91e>
 8008682:	e089      	b.n	8008798 <_dtoa_r+0x990>
 8008684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008686:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800868a:	e74b      	b.n	8008524 <_dtoa_r+0x71c>
 800868c:	9b03      	ldr	r3, [sp, #12]
 800868e:	1e5e      	subs	r6, r3, #1
 8008690:	9b07      	ldr	r3, [sp, #28]
 8008692:	42b3      	cmp	r3, r6
 8008694:	bfbf      	itttt	lt
 8008696:	9b07      	ldrlt	r3, [sp, #28]
 8008698:	9607      	strlt	r6, [sp, #28]
 800869a:	1af2      	sublt	r2, r6, r3
 800869c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800869e:	bfb6      	itet	lt
 80086a0:	189b      	addlt	r3, r3, r2
 80086a2:	1b9e      	subge	r6, r3, r6
 80086a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80086a6:	9b03      	ldr	r3, [sp, #12]
 80086a8:	bfb8      	it	lt
 80086aa:	2600      	movlt	r6, #0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	bfb7      	itett	lt
 80086b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80086b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80086b8:	1a9d      	sublt	r5, r3, r2
 80086ba:	2300      	movlt	r3, #0
 80086bc:	e734      	b.n	8008528 <_dtoa_r+0x720>
 80086be:	9e07      	ldr	r6, [sp, #28]
 80086c0:	9d04      	ldr	r5, [sp, #16]
 80086c2:	9f08      	ldr	r7, [sp, #32]
 80086c4:	e73b      	b.n	800853e <_dtoa_r+0x736>
 80086c6:	9a07      	ldr	r2, [sp, #28]
 80086c8:	e767      	b.n	800859a <_dtoa_r+0x792>
 80086ca:	9b06      	ldr	r3, [sp, #24]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	dc18      	bgt.n	8008702 <_dtoa_r+0x8fa>
 80086d0:	f1ba 0f00 	cmp.w	sl, #0
 80086d4:	d115      	bne.n	8008702 <_dtoa_r+0x8fa>
 80086d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086da:	b993      	cbnz	r3, 8008702 <_dtoa_r+0x8fa>
 80086dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80086e0:	0d1b      	lsrs	r3, r3, #20
 80086e2:	051b      	lsls	r3, r3, #20
 80086e4:	b183      	cbz	r3, 8008708 <_dtoa_r+0x900>
 80086e6:	9b04      	ldr	r3, [sp, #16]
 80086e8:	3301      	adds	r3, #1
 80086ea:	9304      	str	r3, [sp, #16]
 80086ec:	9b05      	ldr	r3, [sp, #20]
 80086ee:	3301      	adds	r3, #1
 80086f0:	9305      	str	r3, [sp, #20]
 80086f2:	f04f 0801 	mov.w	r8, #1
 80086f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f47f af6a 	bne.w	80085d2 <_dtoa_r+0x7ca>
 80086fe:	2001      	movs	r0, #1
 8008700:	e76f      	b.n	80085e2 <_dtoa_r+0x7da>
 8008702:	f04f 0800 	mov.w	r8, #0
 8008706:	e7f6      	b.n	80086f6 <_dtoa_r+0x8ee>
 8008708:	4698      	mov	r8, r3
 800870a:	e7f4      	b.n	80086f6 <_dtoa_r+0x8ee>
 800870c:	f43f af7d 	beq.w	800860a <_dtoa_r+0x802>
 8008710:	4618      	mov	r0, r3
 8008712:	301c      	adds	r0, #28
 8008714:	e772      	b.n	80085fc <_dtoa_r+0x7f4>
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	dc37      	bgt.n	800878c <_dtoa_r+0x984>
 800871c:	9b06      	ldr	r3, [sp, #24]
 800871e:	2b02      	cmp	r3, #2
 8008720:	dd34      	ble.n	800878c <_dtoa_r+0x984>
 8008722:	9b03      	ldr	r3, [sp, #12]
 8008724:	9302      	str	r3, [sp, #8]
 8008726:	9b02      	ldr	r3, [sp, #8]
 8008728:	b96b      	cbnz	r3, 8008746 <_dtoa_r+0x93e>
 800872a:	4631      	mov	r1, r6
 800872c:	2205      	movs	r2, #5
 800872e:	4620      	mov	r0, r4
 8008730:	f000 fbf4 	bl	8008f1c <__multadd>
 8008734:	4601      	mov	r1, r0
 8008736:	4606      	mov	r6, r0
 8008738:	ee18 0a10 	vmov	r0, s16
 800873c:	f000 fe0e 	bl	800935c <__mcmp>
 8008740:	2800      	cmp	r0, #0
 8008742:	f73f adbb 	bgt.w	80082bc <_dtoa_r+0x4b4>
 8008746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008748:	9d01      	ldr	r5, [sp, #4]
 800874a:	43db      	mvns	r3, r3
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	f04f 0800 	mov.w	r8, #0
 8008752:	4631      	mov	r1, r6
 8008754:	4620      	mov	r0, r4
 8008756:	f000 fbbf 	bl	8008ed8 <_Bfree>
 800875a:	2f00      	cmp	r7, #0
 800875c:	f43f aea4 	beq.w	80084a8 <_dtoa_r+0x6a0>
 8008760:	f1b8 0f00 	cmp.w	r8, #0
 8008764:	d005      	beq.n	8008772 <_dtoa_r+0x96a>
 8008766:	45b8      	cmp	r8, r7
 8008768:	d003      	beq.n	8008772 <_dtoa_r+0x96a>
 800876a:	4641      	mov	r1, r8
 800876c:	4620      	mov	r0, r4
 800876e:	f000 fbb3 	bl	8008ed8 <_Bfree>
 8008772:	4639      	mov	r1, r7
 8008774:	4620      	mov	r0, r4
 8008776:	f000 fbaf 	bl	8008ed8 <_Bfree>
 800877a:	e695      	b.n	80084a8 <_dtoa_r+0x6a0>
 800877c:	2600      	movs	r6, #0
 800877e:	4637      	mov	r7, r6
 8008780:	e7e1      	b.n	8008746 <_dtoa_r+0x93e>
 8008782:	9700      	str	r7, [sp, #0]
 8008784:	4637      	mov	r7, r6
 8008786:	e599      	b.n	80082bc <_dtoa_r+0x4b4>
 8008788:	40240000 	.word	0x40240000
 800878c:	9b08      	ldr	r3, [sp, #32]
 800878e:	2b00      	cmp	r3, #0
 8008790:	f000 80ca 	beq.w	8008928 <_dtoa_r+0xb20>
 8008794:	9b03      	ldr	r3, [sp, #12]
 8008796:	9302      	str	r3, [sp, #8]
 8008798:	2d00      	cmp	r5, #0
 800879a:	dd05      	ble.n	80087a8 <_dtoa_r+0x9a0>
 800879c:	4639      	mov	r1, r7
 800879e:	462a      	mov	r2, r5
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fd6b 	bl	800927c <__lshift>
 80087a6:	4607      	mov	r7, r0
 80087a8:	f1b8 0f00 	cmp.w	r8, #0
 80087ac:	d05b      	beq.n	8008866 <_dtoa_r+0xa5e>
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	4620      	mov	r0, r4
 80087b2:	f000 fb51 	bl	8008e58 <_Balloc>
 80087b6:	4605      	mov	r5, r0
 80087b8:	b928      	cbnz	r0, 80087c6 <_dtoa_r+0x9be>
 80087ba:	4b87      	ldr	r3, [pc, #540]	; (80089d8 <_dtoa_r+0xbd0>)
 80087bc:	4602      	mov	r2, r0
 80087be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80087c2:	f7ff bb3b 	b.w	8007e3c <_dtoa_r+0x34>
 80087c6:	693a      	ldr	r2, [r7, #16]
 80087c8:	3202      	adds	r2, #2
 80087ca:	0092      	lsls	r2, r2, #2
 80087cc:	f107 010c 	add.w	r1, r7, #12
 80087d0:	300c      	adds	r0, #12
 80087d2:	f000 fb33 	bl	8008e3c <memcpy>
 80087d6:	2201      	movs	r2, #1
 80087d8:	4629      	mov	r1, r5
 80087da:	4620      	mov	r0, r4
 80087dc:	f000 fd4e 	bl	800927c <__lshift>
 80087e0:	9b01      	ldr	r3, [sp, #4]
 80087e2:	f103 0901 	add.w	r9, r3, #1
 80087e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80087ea:	4413      	add	r3, r2
 80087ec:	9305      	str	r3, [sp, #20]
 80087ee:	f00a 0301 	and.w	r3, sl, #1
 80087f2:	46b8      	mov	r8, r7
 80087f4:	9304      	str	r3, [sp, #16]
 80087f6:	4607      	mov	r7, r0
 80087f8:	4631      	mov	r1, r6
 80087fa:	ee18 0a10 	vmov	r0, s16
 80087fe:	f7ff fa77 	bl	8007cf0 <quorem>
 8008802:	4641      	mov	r1, r8
 8008804:	9002      	str	r0, [sp, #8]
 8008806:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800880a:	ee18 0a10 	vmov	r0, s16
 800880e:	f000 fda5 	bl	800935c <__mcmp>
 8008812:	463a      	mov	r2, r7
 8008814:	9003      	str	r0, [sp, #12]
 8008816:	4631      	mov	r1, r6
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fdbb 	bl	8009394 <__mdiff>
 800881e:	68c2      	ldr	r2, [r0, #12]
 8008820:	f109 3bff 	add.w	fp, r9, #4294967295
 8008824:	4605      	mov	r5, r0
 8008826:	bb02      	cbnz	r2, 800886a <_dtoa_r+0xa62>
 8008828:	4601      	mov	r1, r0
 800882a:	ee18 0a10 	vmov	r0, s16
 800882e:	f000 fd95 	bl	800935c <__mcmp>
 8008832:	4602      	mov	r2, r0
 8008834:	4629      	mov	r1, r5
 8008836:	4620      	mov	r0, r4
 8008838:	9207      	str	r2, [sp, #28]
 800883a:	f000 fb4d 	bl	8008ed8 <_Bfree>
 800883e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008842:	ea43 0102 	orr.w	r1, r3, r2
 8008846:	9b04      	ldr	r3, [sp, #16]
 8008848:	430b      	orrs	r3, r1
 800884a:	464d      	mov	r5, r9
 800884c:	d10f      	bne.n	800886e <_dtoa_r+0xa66>
 800884e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008852:	d02a      	beq.n	80088aa <_dtoa_r+0xaa2>
 8008854:	9b03      	ldr	r3, [sp, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	dd02      	ble.n	8008860 <_dtoa_r+0xa58>
 800885a:	9b02      	ldr	r3, [sp, #8]
 800885c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008860:	f88b a000 	strb.w	sl, [fp]
 8008864:	e775      	b.n	8008752 <_dtoa_r+0x94a>
 8008866:	4638      	mov	r0, r7
 8008868:	e7ba      	b.n	80087e0 <_dtoa_r+0x9d8>
 800886a:	2201      	movs	r2, #1
 800886c:	e7e2      	b.n	8008834 <_dtoa_r+0xa2c>
 800886e:	9b03      	ldr	r3, [sp, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	db04      	blt.n	800887e <_dtoa_r+0xa76>
 8008874:	9906      	ldr	r1, [sp, #24]
 8008876:	430b      	orrs	r3, r1
 8008878:	9904      	ldr	r1, [sp, #16]
 800887a:	430b      	orrs	r3, r1
 800887c:	d122      	bne.n	80088c4 <_dtoa_r+0xabc>
 800887e:	2a00      	cmp	r2, #0
 8008880:	ddee      	ble.n	8008860 <_dtoa_r+0xa58>
 8008882:	ee18 1a10 	vmov	r1, s16
 8008886:	2201      	movs	r2, #1
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fcf7 	bl	800927c <__lshift>
 800888e:	4631      	mov	r1, r6
 8008890:	ee08 0a10 	vmov	s16, r0
 8008894:	f000 fd62 	bl	800935c <__mcmp>
 8008898:	2800      	cmp	r0, #0
 800889a:	dc03      	bgt.n	80088a4 <_dtoa_r+0xa9c>
 800889c:	d1e0      	bne.n	8008860 <_dtoa_r+0xa58>
 800889e:	f01a 0f01 	tst.w	sl, #1
 80088a2:	d0dd      	beq.n	8008860 <_dtoa_r+0xa58>
 80088a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088a8:	d1d7      	bne.n	800885a <_dtoa_r+0xa52>
 80088aa:	2339      	movs	r3, #57	; 0x39
 80088ac:	f88b 3000 	strb.w	r3, [fp]
 80088b0:	462b      	mov	r3, r5
 80088b2:	461d      	mov	r5, r3
 80088b4:	3b01      	subs	r3, #1
 80088b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088ba:	2a39      	cmp	r2, #57	; 0x39
 80088bc:	d071      	beq.n	80089a2 <_dtoa_r+0xb9a>
 80088be:	3201      	adds	r2, #1
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	e746      	b.n	8008752 <_dtoa_r+0x94a>
 80088c4:	2a00      	cmp	r2, #0
 80088c6:	dd07      	ble.n	80088d8 <_dtoa_r+0xad0>
 80088c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088cc:	d0ed      	beq.n	80088aa <_dtoa_r+0xaa2>
 80088ce:	f10a 0301 	add.w	r3, sl, #1
 80088d2:	f88b 3000 	strb.w	r3, [fp]
 80088d6:	e73c      	b.n	8008752 <_dtoa_r+0x94a>
 80088d8:	9b05      	ldr	r3, [sp, #20]
 80088da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80088de:	4599      	cmp	r9, r3
 80088e0:	d047      	beq.n	8008972 <_dtoa_r+0xb6a>
 80088e2:	ee18 1a10 	vmov	r1, s16
 80088e6:	2300      	movs	r3, #0
 80088e8:	220a      	movs	r2, #10
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 fb16 	bl	8008f1c <__multadd>
 80088f0:	45b8      	cmp	r8, r7
 80088f2:	ee08 0a10 	vmov	s16, r0
 80088f6:	f04f 0300 	mov.w	r3, #0
 80088fa:	f04f 020a 	mov.w	r2, #10
 80088fe:	4641      	mov	r1, r8
 8008900:	4620      	mov	r0, r4
 8008902:	d106      	bne.n	8008912 <_dtoa_r+0xb0a>
 8008904:	f000 fb0a 	bl	8008f1c <__multadd>
 8008908:	4680      	mov	r8, r0
 800890a:	4607      	mov	r7, r0
 800890c:	f109 0901 	add.w	r9, r9, #1
 8008910:	e772      	b.n	80087f8 <_dtoa_r+0x9f0>
 8008912:	f000 fb03 	bl	8008f1c <__multadd>
 8008916:	4639      	mov	r1, r7
 8008918:	4680      	mov	r8, r0
 800891a:	2300      	movs	r3, #0
 800891c:	220a      	movs	r2, #10
 800891e:	4620      	mov	r0, r4
 8008920:	f000 fafc 	bl	8008f1c <__multadd>
 8008924:	4607      	mov	r7, r0
 8008926:	e7f1      	b.n	800890c <_dtoa_r+0xb04>
 8008928:	9b03      	ldr	r3, [sp, #12]
 800892a:	9302      	str	r3, [sp, #8]
 800892c:	9d01      	ldr	r5, [sp, #4]
 800892e:	ee18 0a10 	vmov	r0, s16
 8008932:	4631      	mov	r1, r6
 8008934:	f7ff f9dc 	bl	8007cf0 <quorem>
 8008938:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800893c:	9b01      	ldr	r3, [sp, #4]
 800893e:	f805 ab01 	strb.w	sl, [r5], #1
 8008942:	1aea      	subs	r2, r5, r3
 8008944:	9b02      	ldr	r3, [sp, #8]
 8008946:	4293      	cmp	r3, r2
 8008948:	dd09      	ble.n	800895e <_dtoa_r+0xb56>
 800894a:	ee18 1a10 	vmov	r1, s16
 800894e:	2300      	movs	r3, #0
 8008950:	220a      	movs	r2, #10
 8008952:	4620      	mov	r0, r4
 8008954:	f000 fae2 	bl	8008f1c <__multadd>
 8008958:	ee08 0a10 	vmov	s16, r0
 800895c:	e7e7      	b.n	800892e <_dtoa_r+0xb26>
 800895e:	9b02      	ldr	r3, [sp, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	bfc8      	it	gt
 8008964:	461d      	movgt	r5, r3
 8008966:	9b01      	ldr	r3, [sp, #4]
 8008968:	bfd8      	it	le
 800896a:	2501      	movle	r5, #1
 800896c:	441d      	add	r5, r3
 800896e:	f04f 0800 	mov.w	r8, #0
 8008972:	ee18 1a10 	vmov	r1, s16
 8008976:	2201      	movs	r2, #1
 8008978:	4620      	mov	r0, r4
 800897a:	f000 fc7f 	bl	800927c <__lshift>
 800897e:	4631      	mov	r1, r6
 8008980:	ee08 0a10 	vmov	s16, r0
 8008984:	f000 fcea 	bl	800935c <__mcmp>
 8008988:	2800      	cmp	r0, #0
 800898a:	dc91      	bgt.n	80088b0 <_dtoa_r+0xaa8>
 800898c:	d102      	bne.n	8008994 <_dtoa_r+0xb8c>
 800898e:	f01a 0f01 	tst.w	sl, #1
 8008992:	d18d      	bne.n	80088b0 <_dtoa_r+0xaa8>
 8008994:	462b      	mov	r3, r5
 8008996:	461d      	mov	r5, r3
 8008998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800899c:	2a30      	cmp	r2, #48	; 0x30
 800899e:	d0fa      	beq.n	8008996 <_dtoa_r+0xb8e>
 80089a0:	e6d7      	b.n	8008752 <_dtoa_r+0x94a>
 80089a2:	9a01      	ldr	r2, [sp, #4]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d184      	bne.n	80088b2 <_dtoa_r+0xaaa>
 80089a8:	9b00      	ldr	r3, [sp, #0]
 80089aa:	3301      	adds	r3, #1
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	2331      	movs	r3, #49	; 0x31
 80089b0:	7013      	strb	r3, [r2, #0]
 80089b2:	e6ce      	b.n	8008752 <_dtoa_r+0x94a>
 80089b4:	4b09      	ldr	r3, [pc, #36]	; (80089dc <_dtoa_r+0xbd4>)
 80089b6:	f7ff ba95 	b.w	8007ee4 <_dtoa_r+0xdc>
 80089ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f47f aa6e 	bne.w	8007e9e <_dtoa_r+0x96>
 80089c2:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <_dtoa_r+0xbd8>)
 80089c4:	f7ff ba8e 	b.w	8007ee4 <_dtoa_r+0xdc>
 80089c8:	9b02      	ldr	r3, [sp, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	dcae      	bgt.n	800892c <_dtoa_r+0xb24>
 80089ce:	9b06      	ldr	r3, [sp, #24]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	f73f aea8 	bgt.w	8008726 <_dtoa_r+0x91e>
 80089d6:	e7a9      	b.n	800892c <_dtoa_r+0xb24>
 80089d8:	08009ddf 	.word	0x08009ddf
 80089dc:	08009d3c 	.word	0x08009d3c
 80089e0:	08009d60 	.word	0x08009d60

080089e4 <__sflush_r>:
 80089e4:	898a      	ldrh	r2, [r1, #12]
 80089e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ea:	4605      	mov	r5, r0
 80089ec:	0710      	lsls	r0, r2, #28
 80089ee:	460c      	mov	r4, r1
 80089f0:	d458      	bmi.n	8008aa4 <__sflush_r+0xc0>
 80089f2:	684b      	ldr	r3, [r1, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	dc05      	bgt.n	8008a04 <__sflush_r+0x20>
 80089f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	dc02      	bgt.n	8008a04 <__sflush_r+0x20>
 80089fe:	2000      	movs	r0, #0
 8008a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a06:	2e00      	cmp	r6, #0
 8008a08:	d0f9      	beq.n	80089fe <__sflush_r+0x1a>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a10:	682f      	ldr	r7, [r5, #0]
 8008a12:	602b      	str	r3, [r5, #0]
 8008a14:	d032      	beq.n	8008a7c <__sflush_r+0x98>
 8008a16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	075a      	lsls	r2, r3, #29
 8008a1c:	d505      	bpl.n	8008a2a <__sflush_r+0x46>
 8008a1e:	6863      	ldr	r3, [r4, #4]
 8008a20:	1ac0      	subs	r0, r0, r3
 8008a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a24:	b10b      	cbz	r3, 8008a2a <__sflush_r+0x46>
 8008a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a28:	1ac0      	subs	r0, r0, r3
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a30:	6a21      	ldr	r1, [r4, #32]
 8008a32:	4628      	mov	r0, r5
 8008a34:	47b0      	blx	r6
 8008a36:	1c43      	adds	r3, r0, #1
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	d106      	bne.n	8008a4a <__sflush_r+0x66>
 8008a3c:	6829      	ldr	r1, [r5, #0]
 8008a3e:	291d      	cmp	r1, #29
 8008a40:	d82c      	bhi.n	8008a9c <__sflush_r+0xb8>
 8008a42:	4a2a      	ldr	r2, [pc, #168]	; (8008aec <__sflush_r+0x108>)
 8008a44:	40ca      	lsrs	r2, r1
 8008a46:	07d6      	lsls	r6, r2, #31
 8008a48:	d528      	bpl.n	8008a9c <__sflush_r+0xb8>
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	6062      	str	r2, [r4, #4]
 8008a4e:	04d9      	lsls	r1, r3, #19
 8008a50:	6922      	ldr	r2, [r4, #16]
 8008a52:	6022      	str	r2, [r4, #0]
 8008a54:	d504      	bpl.n	8008a60 <__sflush_r+0x7c>
 8008a56:	1c42      	adds	r2, r0, #1
 8008a58:	d101      	bne.n	8008a5e <__sflush_r+0x7a>
 8008a5a:	682b      	ldr	r3, [r5, #0]
 8008a5c:	b903      	cbnz	r3, 8008a60 <__sflush_r+0x7c>
 8008a5e:	6560      	str	r0, [r4, #84]	; 0x54
 8008a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a62:	602f      	str	r7, [r5, #0]
 8008a64:	2900      	cmp	r1, #0
 8008a66:	d0ca      	beq.n	80089fe <__sflush_r+0x1a>
 8008a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a6c:	4299      	cmp	r1, r3
 8008a6e:	d002      	beq.n	8008a76 <__sflush_r+0x92>
 8008a70:	4628      	mov	r0, r5
 8008a72:	f000 fd8b 	bl	800958c <_free_r>
 8008a76:	2000      	movs	r0, #0
 8008a78:	6360      	str	r0, [r4, #52]	; 0x34
 8008a7a:	e7c1      	b.n	8008a00 <__sflush_r+0x1c>
 8008a7c:	6a21      	ldr	r1, [r4, #32]
 8008a7e:	2301      	movs	r3, #1
 8008a80:	4628      	mov	r0, r5
 8008a82:	47b0      	blx	r6
 8008a84:	1c41      	adds	r1, r0, #1
 8008a86:	d1c7      	bne.n	8008a18 <__sflush_r+0x34>
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0c4      	beq.n	8008a18 <__sflush_r+0x34>
 8008a8e:	2b1d      	cmp	r3, #29
 8008a90:	d001      	beq.n	8008a96 <__sflush_r+0xb2>
 8008a92:	2b16      	cmp	r3, #22
 8008a94:	d101      	bne.n	8008a9a <__sflush_r+0xb6>
 8008a96:	602f      	str	r7, [r5, #0]
 8008a98:	e7b1      	b.n	80089fe <__sflush_r+0x1a>
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aa0:	81a3      	strh	r3, [r4, #12]
 8008aa2:	e7ad      	b.n	8008a00 <__sflush_r+0x1c>
 8008aa4:	690f      	ldr	r7, [r1, #16]
 8008aa6:	2f00      	cmp	r7, #0
 8008aa8:	d0a9      	beq.n	80089fe <__sflush_r+0x1a>
 8008aaa:	0793      	lsls	r3, r2, #30
 8008aac:	680e      	ldr	r6, [r1, #0]
 8008aae:	bf08      	it	eq
 8008ab0:	694b      	ldreq	r3, [r1, #20]
 8008ab2:	600f      	str	r7, [r1, #0]
 8008ab4:	bf18      	it	ne
 8008ab6:	2300      	movne	r3, #0
 8008ab8:	eba6 0807 	sub.w	r8, r6, r7
 8008abc:	608b      	str	r3, [r1, #8]
 8008abe:	f1b8 0f00 	cmp.w	r8, #0
 8008ac2:	dd9c      	ble.n	80089fe <__sflush_r+0x1a>
 8008ac4:	6a21      	ldr	r1, [r4, #32]
 8008ac6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ac8:	4643      	mov	r3, r8
 8008aca:	463a      	mov	r2, r7
 8008acc:	4628      	mov	r0, r5
 8008ace:	47b0      	blx	r6
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	dc06      	bgt.n	8008ae2 <__sflush_r+0xfe>
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae0:	e78e      	b.n	8008a00 <__sflush_r+0x1c>
 8008ae2:	4407      	add	r7, r0
 8008ae4:	eba8 0800 	sub.w	r8, r8, r0
 8008ae8:	e7e9      	b.n	8008abe <__sflush_r+0xda>
 8008aea:	bf00      	nop
 8008aec:	20400001 	.word	0x20400001

08008af0 <_fflush_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	690b      	ldr	r3, [r1, #16]
 8008af4:	4605      	mov	r5, r0
 8008af6:	460c      	mov	r4, r1
 8008af8:	b913      	cbnz	r3, 8008b00 <_fflush_r+0x10>
 8008afa:	2500      	movs	r5, #0
 8008afc:	4628      	mov	r0, r5
 8008afe:	bd38      	pop	{r3, r4, r5, pc}
 8008b00:	b118      	cbz	r0, 8008b0a <_fflush_r+0x1a>
 8008b02:	6983      	ldr	r3, [r0, #24]
 8008b04:	b90b      	cbnz	r3, 8008b0a <_fflush_r+0x1a>
 8008b06:	f000 f887 	bl	8008c18 <__sinit>
 8008b0a:	4b14      	ldr	r3, [pc, #80]	; (8008b5c <_fflush_r+0x6c>)
 8008b0c:	429c      	cmp	r4, r3
 8008b0e:	d11b      	bne.n	8008b48 <_fflush_r+0x58>
 8008b10:	686c      	ldr	r4, [r5, #4]
 8008b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d0ef      	beq.n	8008afa <_fflush_r+0xa>
 8008b1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b1c:	07d0      	lsls	r0, r2, #31
 8008b1e:	d404      	bmi.n	8008b2a <_fflush_r+0x3a>
 8008b20:	0599      	lsls	r1, r3, #22
 8008b22:	d402      	bmi.n	8008b2a <_fflush_r+0x3a>
 8008b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b26:	f000 f91a 	bl	8008d5e <__retarget_lock_acquire_recursive>
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	f7ff ff59 	bl	80089e4 <__sflush_r>
 8008b32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b34:	07da      	lsls	r2, r3, #31
 8008b36:	4605      	mov	r5, r0
 8008b38:	d4e0      	bmi.n	8008afc <_fflush_r+0xc>
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	059b      	lsls	r3, r3, #22
 8008b3e:	d4dd      	bmi.n	8008afc <_fflush_r+0xc>
 8008b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b42:	f000 f90d 	bl	8008d60 <__retarget_lock_release_recursive>
 8008b46:	e7d9      	b.n	8008afc <_fflush_r+0xc>
 8008b48:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <_fflush_r+0x70>)
 8008b4a:	429c      	cmp	r4, r3
 8008b4c:	d101      	bne.n	8008b52 <_fflush_r+0x62>
 8008b4e:	68ac      	ldr	r4, [r5, #8]
 8008b50:	e7df      	b.n	8008b12 <_fflush_r+0x22>
 8008b52:	4b04      	ldr	r3, [pc, #16]	; (8008b64 <_fflush_r+0x74>)
 8008b54:	429c      	cmp	r4, r3
 8008b56:	bf08      	it	eq
 8008b58:	68ec      	ldreq	r4, [r5, #12]
 8008b5a:	e7da      	b.n	8008b12 <_fflush_r+0x22>
 8008b5c:	08009e10 	.word	0x08009e10
 8008b60:	08009e30 	.word	0x08009e30
 8008b64:	08009df0 	.word	0x08009df0

08008b68 <std>:
 8008b68:	2300      	movs	r3, #0
 8008b6a:	b510      	push	{r4, lr}
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8008b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b76:	6083      	str	r3, [r0, #8]
 8008b78:	8181      	strh	r1, [r0, #12]
 8008b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8008b7c:	81c2      	strh	r2, [r0, #14]
 8008b7e:	6183      	str	r3, [r0, #24]
 8008b80:	4619      	mov	r1, r3
 8008b82:	2208      	movs	r2, #8
 8008b84:	305c      	adds	r0, #92	; 0x5c
 8008b86:	f7fe faf3 	bl	8007170 <memset>
 8008b8a:	4b05      	ldr	r3, [pc, #20]	; (8008ba0 <std+0x38>)
 8008b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8008b8e:	4b05      	ldr	r3, [pc, #20]	; (8008ba4 <std+0x3c>)
 8008b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b92:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <std+0x40>)
 8008b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b96:	4b05      	ldr	r3, [pc, #20]	; (8008bac <std+0x44>)
 8008b98:	6224      	str	r4, [r4, #32]
 8008b9a:	6323      	str	r3, [r4, #48]	; 0x30
 8008b9c:	bd10      	pop	{r4, pc}
 8008b9e:	bf00      	nop
 8008ba0:	08009a21 	.word	0x08009a21
 8008ba4:	08009a43 	.word	0x08009a43
 8008ba8:	08009a7b 	.word	0x08009a7b
 8008bac:	08009a9f 	.word	0x08009a9f

08008bb0 <_cleanup_r>:
 8008bb0:	4901      	ldr	r1, [pc, #4]	; (8008bb8 <_cleanup_r+0x8>)
 8008bb2:	f000 b8af 	b.w	8008d14 <_fwalk_reent>
 8008bb6:	bf00      	nop
 8008bb8:	08008af1 	.word	0x08008af1

08008bbc <__sfmoreglue>:
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	2268      	movs	r2, #104	; 0x68
 8008bc0:	1e4d      	subs	r5, r1, #1
 8008bc2:	4355      	muls	r5, r2
 8008bc4:	460e      	mov	r6, r1
 8008bc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bca:	f000 fd4b 	bl	8009664 <_malloc_r>
 8008bce:	4604      	mov	r4, r0
 8008bd0:	b140      	cbz	r0, 8008be4 <__sfmoreglue+0x28>
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	e9c0 1600 	strd	r1, r6, [r0]
 8008bd8:	300c      	adds	r0, #12
 8008bda:	60a0      	str	r0, [r4, #8]
 8008bdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008be0:	f7fe fac6 	bl	8007170 <memset>
 8008be4:	4620      	mov	r0, r4
 8008be6:	bd70      	pop	{r4, r5, r6, pc}

08008be8 <__sfp_lock_acquire>:
 8008be8:	4801      	ldr	r0, [pc, #4]	; (8008bf0 <__sfp_lock_acquire+0x8>)
 8008bea:	f000 b8b8 	b.w	8008d5e <__retarget_lock_acquire_recursive>
 8008bee:	bf00      	nop
 8008bf0:	2001663d 	.word	0x2001663d

08008bf4 <__sfp_lock_release>:
 8008bf4:	4801      	ldr	r0, [pc, #4]	; (8008bfc <__sfp_lock_release+0x8>)
 8008bf6:	f000 b8b3 	b.w	8008d60 <__retarget_lock_release_recursive>
 8008bfa:	bf00      	nop
 8008bfc:	2001663d 	.word	0x2001663d

08008c00 <__sinit_lock_acquire>:
 8008c00:	4801      	ldr	r0, [pc, #4]	; (8008c08 <__sinit_lock_acquire+0x8>)
 8008c02:	f000 b8ac 	b.w	8008d5e <__retarget_lock_acquire_recursive>
 8008c06:	bf00      	nop
 8008c08:	2001663e 	.word	0x2001663e

08008c0c <__sinit_lock_release>:
 8008c0c:	4801      	ldr	r0, [pc, #4]	; (8008c14 <__sinit_lock_release+0x8>)
 8008c0e:	f000 b8a7 	b.w	8008d60 <__retarget_lock_release_recursive>
 8008c12:	bf00      	nop
 8008c14:	2001663e 	.word	0x2001663e

08008c18 <__sinit>:
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	f7ff fff0 	bl	8008c00 <__sinit_lock_acquire>
 8008c20:	69a3      	ldr	r3, [r4, #24]
 8008c22:	b11b      	cbz	r3, 8008c2c <__sinit+0x14>
 8008c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c28:	f7ff bff0 	b.w	8008c0c <__sinit_lock_release>
 8008c2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c30:	6523      	str	r3, [r4, #80]	; 0x50
 8008c32:	4b13      	ldr	r3, [pc, #76]	; (8008c80 <__sinit+0x68>)
 8008c34:	4a13      	ldr	r2, [pc, #76]	; (8008c84 <__sinit+0x6c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c3a:	42a3      	cmp	r3, r4
 8008c3c:	bf04      	itt	eq
 8008c3e:	2301      	moveq	r3, #1
 8008c40:	61a3      	streq	r3, [r4, #24]
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 f820 	bl	8008c88 <__sfp>
 8008c48:	6060      	str	r0, [r4, #4]
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f000 f81c 	bl	8008c88 <__sfp>
 8008c50:	60a0      	str	r0, [r4, #8]
 8008c52:	4620      	mov	r0, r4
 8008c54:	f000 f818 	bl	8008c88 <__sfp>
 8008c58:	2200      	movs	r2, #0
 8008c5a:	60e0      	str	r0, [r4, #12]
 8008c5c:	2104      	movs	r1, #4
 8008c5e:	6860      	ldr	r0, [r4, #4]
 8008c60:	f7ff ff82 	bl	8008b68 <std>
 8008c64:	68a0      	ldr	r0, [r4, #8]
 8008c66:	2201      	movs	r2, #1
 8008c68:	2109      	movs	r1, #9
 8008c6a:	f7ff ff7d 	bl	8008b68 <std>
 8008c6e:	68e0      	ldr	r0, [r4, #12]
 8008c70:	2202      	movs	r2, #2
 8008c72:	2112      	movs	r1, #18
 8008c74:	f7ff ff78 	bl	8008b68 <std>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	61a3      	str	r3, [r4, #24]
 8008c7c:	e7d2      	b.n	8008c24 <__sinit+0xc>
 8008c7e:	bf00      	nop
 8008c80:	08009d28 	.word	0x08009d28
 8008c84:	08008bb1 	.word	0x08008bb1

08008c88 <__sfp>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	4607      	mov	r7, r0
 8008c8c:	f7ff ffac 	bl	8008be8 <__sfp_lock_acquire>
 8008c90:	4b1e      	ldr	r3, [pc, #120]	; (8008d0c <__sfp+0x84>)
 8008c92:	681e      	ldr	r6, [r3, #0]
 8008c94:	69b3      	ldr	r3, [r6, #24]
 8008c96:	b913      	cbnz	r3, 8008c9e <__sfp+0x16>
 8008c98:	4630      	mov	r0, r6
 8008c9a:	f7ff ffbd 	bl	8008c18 <__sinit>
 8008c9e:	3648      	adds	r6, #72	; 0x48
 8008ca0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	d503      	bpl.n	8008cb0 <__sfp+0x28>
 8008ca8:	6833      	ldr	r3, [r6, #0]
 8008caa:	b30b      	cbz	r3, 8008cf0 <__sfp+0x68>
 8008cac:	6836      	ldr	r6, [r6, #0]
 8008cae:	e7f7      	b.n	8008ca0 <__sfp+0x18>
 8008cb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cb4:	b9d5      	cbnz	r5, 8008cec <__sfp+0x64>
 8008cb6:	4b16      	ldr	r3, [pc, #88]	; (8008d10 <__sfp+0x88>)
 8008cb8:	60e3      	str	r3, [r4, #12]
 8008cba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cbe:	6665      	str	r5, [r4, #100]	; 0x64
 8008cc0:	f000 f84c 	bl	8008d5c <__retarget_lock_init_recursive>
 8008cc4:	f7ff ff96 	bl	8008bf4 <__sfp_lock_release>
 8008cc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ccc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008cd0:	6025      	str	r5, [r4, #0]
 8008cd2:	61a5      	str	r5, [r4, #24]
 8008cd4:	2208      	movs	r2, #8
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008cdc:	f7fe fa48 	bl	8007170 <memset>
 8008ce0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ce4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ce8:	4620      	mov	r0, r4
 8008cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cec:	3468      	adds	r4, #104	; 0x68
 8008cee:	e7d9      	b.n	8008ca4 <__sfp+0x1c>
 8008cf0:	2104      	movs	r1, #4
 8008cf2:	4638      	mov	r0, r7
 8008cf4:	f7ff ff62 	bl	8008bbc <__sfmoreglue>
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	6030      	str	r0, [r6, #0]
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d1d5      	bne.n	8008cac <__sfp+0x24>
 8008d00:	f7ff ff78 	bl	8008bf4 <__sfp_lock_release>
 8008d04:	230c      	movs	r3, #12
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	e7ee      	b.n	8008ce8 <__sfp+0x60>
 8008d0a:	bf00      	nop
 8008d0c:	08009d28 	.word	0x08009d28
 8008d10:	ffff0001 	.word	0xffff0001

08008d14 <_fwalk_reent>:
 8008d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d18:	4606      	mov	r6, r0
 8008d1a:	4688      	mov	r8, r1
 8008d1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d20:	2700      	movs	r7, #0
 8008d22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d26:	f1b9 0901 	subs.w	r9, r9, #1
 8008d2a:	d505      	bpl.n	8008d38 <_fwalk_reent+0x24>
 8008d2c:	6824      	ldr	r4, [r4, #0]
 8008d2e:	2c00      	cmp	r4, #0
 8008d30:	d1f7      	bne.n	8008d22 <_fwalk_reent+0xe>
 8008d32:	4638      	mov	r0, r7
 8008d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d38:	89ab      	ldrh	r3, [r5, #12]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d907      	bls.n	8008d4e <_fwalk_reent+0x3a>
 8008d3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d42:	3301      	adds	r3, #1
 8008d44:	d003      	beq.n	8008d4e <_fwalk_reent+0x3a>
 8008d46:	4629      	mov	r1, r5
 8008d48:	4630      	mov	r0, r6
 8008d4a:	47c0      	blx	r8
 8008d4c:	4307      	orrs	r7, r0
 8008d4e:	3568      	adds	r5, #104	; 0x68
 8008d50:	e7e9      	b.n	8008d26 <_fwalk_reent+0x12>
	...

08008d54 <_localeconv_r>:
 8008d54:	4800      	ldr	r0, [pc, #0]	; (8008d58 <_localeconv_r+0x4>)
 8008d56:	4770      	bx	lr
 8008d58:	200001a0 	.word	0x200001a0

08008d5c <__retarget_lock_init_recursive>:
 8008d5c:	4770      	bx	lr

08008d5e <__retarget_lock_acquire_recursive>:
 8008d5e:	4770      	bx	lr

08008d60 <__retarget_lock_release_recursive>:
 8008d60:	4770      	bx	lr

08008d62 <__swhatbuf_r>:
 8008d62:	b570      	push	{r4, r5, r6, lr}
 8008d64:	460e      	mov	r6, r1
 8008d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6a:	2900      	cmp	r1, #0
 8008d6c:	b096      	sub	sp, #88	; 0x58
 8008d6e:	4614      	mov	r4, r2
 8008d70:	461d      	mov	r5, r3
 8008d72:	da08      	bge.n	8008d86 <__swhatbuf_r+0x24>
 8008d74:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	602a      	str	r2, [r5, #0]
 8008d7c:	061a      	lsls	r2, r3, #24
 8008d7e:	d410      	bmi.n	8008da2 <__swhatbuf_r+0x40>
 8008d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d84:	e00e      	b.n	8008da4 <__swhatbuf_r+0x42>
 8008d86:	466a      	mov	r2, sp
 8008d88:	f000 fee0 	bl	8009b4c <_fstat_r>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	dbf1      	blt.n	8008d74 <__swhatbuf_r+0x12>
 8008d90:	9a01      	ldr	r2, [sp, #4]
 8008d92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d9a:	425a      	negs	r2, r3
 8008d9c:	415a      	adcs	r2, r3
 8008d9e:	602a      	str	r2, [r5, #0]
 8008da0:	e7ee      	b.n	8008d80 <__swhatbuf_r+0x1e>
 8008da2:	2340      	movs	r3, #64	; 0x40
 8008da4:	2000      	movs	r0, #0
 8008da6:	6023      	str	r3, [r4, #0]
 8008da8:	b016      	add	sp, #88	; 0x58
 8008daa:	bd70      	pop	{r4, r5, r6, pc}

08008dac <__smakebuf_r>:
 8008dac:	898b      	ldrh	r3, [r1, #12]
 8008dae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008db0:	079d      	lsls	r5, r3, #30
 8008db2:	4606      	mov	r6, r0
 8008db4:	460c      	mov	r4, r1
 8008db6:	d507      	bpl.n	8008dc8 <__smakebuf_r+0x1c>
 8008db8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	6123      	str	r3, [r4, #16]
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	6163      	str	r3, [r4, #20]
 8008dc4:	b002      	add	sp, #8
 8008dc6:	bd70      	pop	{r4, r5, r6, pc}
 8008dc8:	ab01      	add	r3, sp, #4
 8008dca:	466a      	mov	r2, sp
 8008dcc:	f7ff ffc9 	bl	8008d62 <__swhatbuf_r>
 8008dd0:	9900      	ldr	r1, [sp, #0]
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f000 fc45 	bl	8009664 <_malloc_r>
 8008dda:	b948      	cbnz	r0, 8008df0 <__smakebuf_r+0x44>
 8008ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008de0:	059a      	lsls	r2, r3, #22
 8008de2:	d4ef      	bmi.n	8008dc4 <__smakebuf_r+0x18>
 8008de4:	f023 0303 	bic.w	r3, r3, #3
 8008de8:	f043 0302 	orr.w	r3, r3, #2
 8008dec:	81a3      	strh	r3, [r4, #12]
 8008dee:	e7e3      	b.n	8008db8 <__smakebuf_r+0xc>
 8008df0:	4b0d      	ldr	r3, [pc, #52]	; (8008e28 <__smakebuf_r+0x7c>)
 8008df2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008df4:	89a3      	ldrh	r3, [r4, #12]
 8008df6:	6020      	str	r0, [r4, #0]
 8008df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dfc:	81a3      	strh	r3, [r4, #12]
 8008dfe:	9b00      	ldr	r3, [sp, #0]
 8008e00:	6163      	str	r3, [r4, #20]
 8008e02:	9b01      	ldr	r3, [sp, #4]
 8008e04:	6120      	str	r0, [r4, #16]
 8008e06:	b15b      	cbz	r3, 8008e20 <__smakebuf_r+0x74>
 8008e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	f000 feaf 	bl	8009b70 <_isatty_r>
 8008e12:	b128      	cbz	r0, 8008e20 <__smakebuf_r+0x74>
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	f023 0303 	bic.w	r3, r3, #3
 8008e1a:	f043 0301 	orr.w	r3, r3, #1
 8008e1e:	81a3      	strh	r3, [r4, #12]
 8008e20:	89a0      	ldrh	r0, [r4, #12]
 8008e22:	4305      	orrs	r5, r0
 8008e24:	81a5      	strh	r5, [r4, #12]
 8008e26:	e7cd      	b.n	8008dc4 <__smakebuf_r+0x18>
 8008e28:	08008bb1 	.word	0x08008bb1

08008e2c <malloc>:
 8008e2c:	4b02      	ldr	r3, [pc, #8]	; (8008e38 <malloc+0xc>)
 8008e2e:	4601      	mov	r1, r0
 8008e30:	6818      	ldr	r0, [r3, #0]
 8008e32:	f000 bc17 	b.w	8009664 <_malloc_r>
 8008e36:	bf00      	nop
 8008e38:	2000004c 	.word	0x2000004c

08008e3c <memcpy>:
 8008e3c:	440a      	add	r2, r1
 8008e3e:	4291      	cmp	r1, r2
 8008e40:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e44:	d100      	bne.n	8008e48 <memcpy+0xc>
 8008e46:	4770      	bx	lr
 8008e48:	b510      	push	{r4, lr}
 8008e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e52:	4291      	cmp	r1, r2
 8008e54:	d1f9      	bne.n	8008e4a <memcpy+0xe>
 8008e56:	bd10      	pop	{r4, pc}

08008e58 <_Balloc>:
 8008e58:	b570      	push	{r4, r5, r6, lr}
 8008e5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	460d      	mov	r5, r1
 8008e60:	b976      	cbnz	r6, 8008e80 <_Balloc+0x28>
 8008e62:	2010      	movs	r0, #16
 8008e64:	f7ff ffe2 	bl	8008e2c <malloc>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	6260      	str	r0, [r4, #36]	; 0x24
 8008e6c:	b920      	cbnz	r0, 8008e78 <_Balloc+0x20>
 8008e6e:	4b18      	ldr	r3, [pc, #96]	; (8008ed0 <_Balloc+0x78>)
 8008e70:	4818      	ldr	r0, [pc, #96]	; (8008ed4 <_Balloc+0x7c>)
 8008e72:	2166      	movs	r1, #102	; 0x66
 8008e74:	f000 fe2a 	bl	8009acc <__assert_func>
 8008e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e7c:	6006      	str	r6, [r0, #0]
 8008e7e:	60c6      	str	r6, [r0, #12]
 8008e80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e82:	68f3      	ldr	r3, [r6, #12]
 8008e84:	b183      	cbz	r3, 8008ea8 <_Balloc+0x50>
 8008e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e8e:	b9b8      	cbnz	r0, 8008ec0 <_Balloc+0x68>
 8008e90:	2101      	movs	r1, #1
 8008e92:	fa01 f605 	lsl.w	r6, r1, r5
 8008e96:	1d72      	adds	r2, r6, #5
 8008e98:	0092      	lsls	r2, r2, #2
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 fb60 	bl	8009560 <_calloc_r>
 8008ea0:	b160      	cbz	r0, 8008ebc <_Balloc+0x64>
 8008ea2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ea6:	e00e      	b.n	8008ec6 <_Balloc+0x6e>
 8008ea8:	2221      	movs	r2, #33	; 0x21
 8008eaa:	2104      	movs	r1, #4
 8008eac:	4620      	mov	r0, r4
 8008eae:	f000 fb57 	bl	8009560 <_calloc_r>
 8008eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eb4:	60f0      	str	r0, [r6, #12]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1e4      	bne.n	8008e86 <_Balloc+0x2e>
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}
 8008ec0:	6802      	ldr	r2, [r0, #0]
 8008ec2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ecc:	e7f7      	b.n	8008ebe <_Balloc+0x66>
 8008ece:	bf00      	nop
 8008ed0:	08009d6d 	.word	0x08009d6d
 8008ed4:	08009e50 	.word	0x08009e50

08008ed8 <_Bfree>:
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008edc:	4605      	mov	r5, r0
 8008ede:	460c      	mov	r4, r1
 8008ee0:	b976      	cbnz	r6, 8008f00 <_Bfree+0x28>
 8008ee2:	2010      	movs	r0, #16
 8008ee4:	f7ff ffa2 	bl	8008e2c <malloc>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	6268      	str	r0, [r5, #36]	; 0x24
 8008eec:	b920      	cbnz	r0, 8008ef8 <_Bfree+0x20>
 8008eee:	4b09      	ldr	r3, [pc, #36]	; (8008f14 <_Bfree+0x3c>)
 8008ef0:	4809      	ldr	r0, [pc, #36]	; (8008f18 <_Bfree+0x40>)
 8008ef2:	218a      	movs	r1, #138	; 0x8a
 8008ef4:	f000 fdea 	bl	8009acc <__assert_func>
 8008ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008efc:	6006      	str	r6, [r0, #0]
 8008efe:	60c6      	str	r6, [r0, #12]
 8008f00:	b13c      	cbz	r4, 8008f12 <_Bfree+0x3a>
 8008f02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f04:	6862      	ldr	r2, [r4, #4]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f0c:	6021      	str	r1, [r4, #0]
 8008f0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f12:	bd70      	pop	{r4, r5, r6, pc}
 8008f14:	08009d6d 	.word	0x08009d6d
 8008f18:	08009e50 	.word	0x08009e50

08008f1c <__multadd>:
 8008f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f20:	690d      	ldr	r5, [r1, #16]
 8008f22:	4607      	mov	r7, r0
 8008f24:	460c      	mov	r4, r1
 8008f26:	461e      	mov	r6, r3
 8008f28:	f101 0c14 	add.w	ip, r1, #20
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	f8dc 3000 	ldr.w	r3, [ip]
 8008f32:	b299      	uxth	r1, r3
 8008f34:	fb02 6101 	mla	r1, r2, r1, r6
 8008f38:	0c1e      	lsrs	r6, r3, #16
 8008f3a:	0c0b      	lsrs	r3, r1, #16
 8008f3c:	fb02 3306 	mla	r3, r2, r6, r3
 8008f40:	b289      	uxth	r1, r1
 8008f42:	3001      	adds	r0, #1
 8008f44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f48:	4285      	cmp	r5, r0
 8008f4a:	f84c 1b04 	str.w	r1, [ip], #4
 8008f4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f52:	dcec      	bgt.n	8008f2e <__multadd+0x12>
 8008f54:	b30e      	cbz	r6, 8008f9a <__multadd+0x7e>
 8008f56:	68a3      	ldr	r3, [r4, #8]
 8008f58:	42ab      	cmp	r3, r5
 8008f5a:	dc19      	bgt.n	8008f90 <__multadd+0x74>
 8008f5c:	6861      	ldr	r1, [r4, #4]
 8008f5e:	4638      	mov	r0, r7
 8008f60:	3101      	adds	r1, #1
 8008f62:	f7ff ff79 	bl	8008e58 <_Balloc>
 8008f66:	4680      	mov	r8, r0
 8008f68:	b928      	cbnz	r0, 8008f76 <__multadd+0x5a>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <__multadd+0x84>)
 8008f6e:	480d      	ldr	r0, [pc, #52]	; (8008fa4 <__multadd+0x88>)
 8008f70:	21b5      	movs	r1, #181	; 0xb5
 8008f72:	f000 fdab 	bl	8009acc <__assert_func>
 8008f76:	6922      	ldr	r2, [r4, #16]
 8008f78:	3202      	adds	r2, #2
 8008f7a:	f104 010c 	add.w	r1, r4, #12
 8008f7e:	0092      	lsls	r2, r2, #2
 8008f80:	300c      	adds	r0, #12
 8008f82:	f7ff ff5b 	bl	8008e3c <memcpy>
 8008f86:	4621      	mov	r1, r4
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f7ff ffa5 	bl	8008ed8 <_Bfree>
 8008f8e:	4644      	mov	r4, r8
 8008f90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f94:	3501      	adds	r5, #1
 8008f96:	615e      	str	r6, [r3, #20]
 8008f98:	6125      	str	r5, [r4, #16]
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa0:	08009ddf 	.word	0x08009ddf
 8008fa4:	08009e50 	.word	0x08009e50

08008fa8 <__hi0bits>:
 8008fa8:	0c03      	lsrs	r3, r0, #16
 8008faa:	041b      	lsls	r3, r3, #16
 8008fac:	b9d3      	cbnz	r3, 8008fe4 <__hi0bits+0x3c>
 8008fae:	0400      	lsls	r0, r0, #16
 8008fb0:	2310      	movs	r3, #16
 8008fb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008fb6:	bf04      	itt	eq
 8008fb8:	0200      	lsleq	r0, r0, #8
 8008fba:	3308      	addeq	r3, #8
 8008fbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008fc0:	bf04      	itt	eq
 8008fc2:	0100      	lsleq	r0, r0, #4
 8008fc4:	3304      	addeq	r3, #4
 8008fc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008fca:	bf04      	itt	eq
 8008fcc:	0080      	lsleq	r0, r0, #2
 8008fce:	3302      	addeq	r3, #2
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	db05      	blt.n	8008fe0 <__hi0bits+0x38>
 8008fd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008fd8:	f103 0301 	add.w	r3, r3, #1
 8008fdc:	bf08      	it	eq
 8008fde:	2320      	moveq	r3, #32
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	4770      	bx	lr
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	e7e4      	b.n	8008fb2 <__hi0bits+0xa>

08008fe8 <__lo0bits>:
 8008fe8:	6803      	ldr	r3, [r0, #0]
 8008fea:	f013 0207 	ands.w	r2, r3, #7
 8008fee:	4601      	mov	r1, r0
 8008ff0:	d00b      	beq.n	800900a <__lo0bits+0x22>
 8008ff2:	07da      	lsls	r2, r3, #31
 8008ff4:	d423      	bmi.n	800903e <__lo0bits+0x56>
 8008ff6:	0798      	lsls	r0, r3, #30
 8008ff8:	bf49      	itett	mi
 8008ffa:	085b      	lsrmi	r3, r3, #1
 8008ffc:	089b      	lsrpl	r3, r3, #2
 8008ffe:	2001      	movmi	r0, #1
 8009000:	600b      	strmi	r3, [r1, #0]
 8009002:	bf5c      	itt	pl
 8009004:	600b      	strpl	r3, [r1, #0]
 8009006:	2002      	movpl	r0, #2
 8009008:	4770      	bx	lr
 800900a:	b298      	uxth	r0, r3
 800900c:	b9a8      	cbnz	r0, 800903a <__lo0bits+0x52>
 800900e:	0c1b      	lsrs	r3, r3, #16
 8009010:	2010      	movs	r0, #16
 8009012:	b2da      	uxtb	r2, r3
 8009014:	b90a      	cbnz	r2, 800901a <__lo0bits+0x32>
 8009016:	3008      	adds	r0, #8
 8009018:	0a1b      	lsrs	r3, r3, #8
 800901a:	071a      	lsls	r2, r3, #28
 800901c:	bf04      	itt	eq
 800901e:	091b      	lsreq	r3, r3, #4
 8009020:	3004      	addeq	r0, #4
 8009022:	079a      	lsls	r2, r3, #30
 8009024:	bf04      	itt	eq
 8009026:	089b      	lsreq	r3, r3, #2
 8009028:	3002      	addeq	r0, #2
 800902a:	07da      	lsls	r2, r3, #31
 800902c:	d403      	bmi.n	8009036 <__lo0bits+0x4e>
 800902e:	085b      	lsrs	r3, r3, #1
 8009030:	f100 0001 	add.w	r0, r0, #1
 8009034:	d005      	beq.n	8009042 <__lo0bits+0x5a>
 8009036:	600b      	str	r3, [r1, #0]
 8009038:	4770      	bx	lr
 800903a:	4610      	mov	r0, r2
 800903c:	e7e9      	b.n	8009012 <__lo0bits+0x2a>
 800903e:	2000      	movs	r0, #0
 8009040:	4770      	bx	lr
 8009042:	2020      	movs	r0, #32
 8009044:	4770      	bx	lr
	...

08009048 <__i2b>:
 8009048:	b510      	push	{r4, lr}
 800904a:	460c      	mov	r4, r1
 800904c:	2101      	movs	r1, #1
 800904e:	f7ff ff03 	bl	8008e58 <_Balloc>
 8009052:	4602      	mov	r2, r0
 8009054:	b928      	cbnz	r0, 8009062 <__i2b+0x1a>
 8009056:	4b05      	ldr	r3, [pc, #20]	; (800906c <__i2b+0x24>)
 8009058:	4805      	ldr	r0, [pc, #20]	; (8009070 <__i2b+0x28>)
 800905a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800905e:	f000 fd35 	bl	8009acc <__assert_func>
 8009062:	2301      	movs	r3, #1
 8009064:	6144      	str	r4, [r0, #20]
 8009066:	6103      	str	r3, [r0, #16]
 8009068:	bd10      	pop	{r4, pc}
 800906a:	bf00      	nop
 800906c:	08009ddf 	.word	0x08009ddf
 8009070:	08009e50 	.word	0x08009e50

08009074 <__multiply>:
 8009074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	4691      	mov	r9, r2
 800907a:	690a      	ldr	r2, [r1, #16]
 800907c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009080:	429a      	cmp	r2, r3
 8009082:	bfb8      	it	lt
 8009084:	460b      	movlt	r3, r1
 8009086:	460c      	mov	r4, r1
 8009088:	bfbc      	itt	lt
 800908a:	464c      	movlt	r4, r9
 800908c:	4699      	movlt	r9, r3
 800908e:	6927      	ldr	r7, [r4, #16]
 8009090:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009094:	68a3      	ldr	r3, [r4, #8]
 8009096:	6861      	ldr	r1, [r4, #4]
 8009098:	eb07 060a 	add.w	r6, r7, sl
 800909c:	42b3      	cmp	r3, r6
 800909e:	b085      	sub	sp, #20
 80090a0:	bfb8      	it	lt
 80090a2:	3101      	addlt	r1, #1
 80090a4:	f7ff fed8 	bl	8008e58 <_Balloc>
 80090a8:	b930      	cbnz	r0, 80090b8 <__multiply+0x44>
 80090aa:	4602      	mov	r2, r0
 80090ac:	4b44      	ldr	r3, [pc, #272]	; (80091c0 <__multiply+0x14c>)
 80090ae:	4845      	ldr	r0, [pc, #276]	; (80091c4 <__multiply+0x150>)
 80090b0:	f240 115d 	movw	r1, #349	; 0x15d
 80090b4:	f000 fd0a 	bl	8009acc <__assert_func>
 80090b8:	f100 0514 	add.w	r5, r0, #20
 80090bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090c0:	462b      	mov	r3, r5
 80090c2:	2200      	movs	r2, #0
 80090c4:	4543      	cmp	r3, r8
 80090c6:	d321      	bcc.n	800910c <__multiply+0x98>
 80090c8:	f104 0314 	add.w	r3, r4, #20
 80090cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80090d0:	f109 0314 	add.w	r3, r9, #20
 80090d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80090d8:	9202      	str	r2, [sp, #8]
 80090da:	1b3a      	subs	r2, r7, r4
 80090dc:	3a15      	subs	r2, #21
 80090de:	f022 0203 	bic.w	r2, r2, #3
 80090e2:	3204      	adds	r2, #4
 80090e4:	f104 0115 	add.w	r1, r4, #21
 80090e8:	428f      	cmp	r7, r1
 80090ea:	bf38      	it	cc
 80090ec:	2204      	movcc	r2, #4
 80090ee:	9201      	str	r2, [sp, #4]
 80090f0:	9a02      	ldr	r2, [sp, #8]
 80090f2:	9303      	str	r3, [sp, #12]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d80c      	bhi.n	8009112 <__multiply+0x9e>
 80090f8:	2e00      	cmp	r6, #0
 80090fa:	dd03      	ble.n	8009104 <__multiply+0x90>
 80090fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009100:	2b00      	cmp	r3, #0
 8009102:	d05a      	beq.n	80091ba <__multiply+0x146>
 8009104:	6106      	str	r6, [r0, #16]
 8009106:	b005      	add	sp, #20
 8009108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910c:	f843 2b04 	str.w	r2, [r3], #4
 8009110:	e7d8      	b.n	80090c4 <__multiply+0x50>
 8009112:	f8b3 a000 	ldrh.w	sl, [r3]
 8009116:	f1ba 0f00 	cmp.w	sl, #0
 800911a:	d024      	beq.n	8009166 <__multiply+0xf2>
 800911c:	f104 0e14 	add.w	lr, r4, #20
 8009120:	46a9      	mov	r9, r5
 8009122:	f04f 0c00 	mov.w	ip, #0
 8009126:	f85e 2b04 	ldr.w	r2, [lr], #4
 800912a:	f8d9 1000 	ldr.w	r1, [r9]
 800912e:	fa1f fb82 	uxth.w	fp, r2
 8009132:	b289      	uxth	r1, r1
 8009134:	fb0a 110b 	mla	r1, sl, fp, r1
 8009138:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800913c:	f8d9 2000 	ldr.w	r2, [r9]
 8009140:	4461      	add	r1, ip
 8009142:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009146:	fb0a c20b 	mla	r2, sl, fp, ip
 800914a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800914e:	b289      	uxth	r1, r1
 8009150:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009154:	4577      	cmp	r7, lr
 8009156:	f849 1b04 	str.w	r1, [r9], #4
 800915a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800915e:	d8e2      	bhi.n	8009126 <__multiply+0xb2>
 8009160:	9a01      	ldr	r2, [sp, #4]
 8009162:	f845 c002 	str.w	ip, [r5, r2]
 8009166:	9a03      	ldr	r2, [sp, #12]
 8009168:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800916c:	3304      	adds	r3, #4
 800916e:	f1b9 0f00 	cmp.w	r9, #0
 8009172:	d020      	beq.n	80091b6 <__multiply+0x142>
 8009174:	6829      	ldr	r1, [r5, #0]
 8009176:	f104 0c14 	add.w	ip, r4, #20
 800917a:	46ae      	mov	lr, r5
 800917c:	f04f 0a00 	mov.w	sl, #0
 8009180:	f8bc b000 	ldrh.w	fp, [ip]
 8009184:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009188:	fb09 220b 	mla	r2, r9, fp, r2
 800918c:	4492      	add	sl, r2
 800918e:	b289      	uxth	r1, r1
 8009190:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009194:	f84e 1b04 	str.w	r1, [lr], #4
 8009198:	f85c 2b04 	ldr.w	r2, [ip], #4
 800919c:	f8be 1000 	ldrh.w	r1, [lr]
 80091a0:	0c12      	lsrs	r2, r2, #16
 80091a2:	fb09 1102 	mla	r1, r9, r2, r1
 80091a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80091aa:	4567      	cmp	r7, ip
 80091ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091b0:	d8e6      	bhi.n	8009180 <__multiply+0x10c>
 80091b2:	9a01      	ldr	r2, [sp, #4]
 80091b4:	50a9      	str	r1, [r5, r2]
 80091b6:	3504      	adds	r5, #4
 80091b8:	e79a      	b.n	80090f0 <__multiply+0x7c>
 80091ba:	3e01      	subs	r6, #1
 80091bc:	e79c      	b.n	80090f8 <__multiply+0x84>
 80091be:	bf00      	nop
 80091c0:	08009ddf 	.word	0x08009ddf
 80091c4:	08009e50 	.word	0x08009e50

080091c8 <__pow5mult>:
 80091c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091cc:	4615      	mov	r5, r2
 80091ce:	f012 0203 	ands.w	r2, r2, #3
 80091d2:	4606      	mov	r6, r0
 80091d4:	460f      	mov	r7, r1
 80091d6:	d007      	beq.n	80091e8 <__pow5mult+0x20>
 80091d8:	4c25      	ldr	r4, [pc, #148]	; (8009270 <__pow5mult+0xa8>)
 80091da:	3a01      	subs	r2, #1
 80091dc:	2300      	movs	r3, #0
 80091de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091e2:	f7ff fe9b 	bl	8008f1c <__multadd>
 80091e6:	4607      	mov	r7, r0
 80091e8:	10ad      	asrs	r5, r5, #2
 80091ea:	d03d      	beq.n	8009268 <__pow5mult+0xa0>
 80091ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80091ee:	b97c      	cbnz	r4, 8009210 <__pow5mult+0x48>
 80091f0:	2010      	movs	r0, #16
 80091f2:	f7ff fe1b 	bl	8008e2c <malloc>
 80091f6:	4602      	mov	r2, r0
 80091f8:	6270      	str	r0, [r6, #36]	; 0x24
 80091fa:	b928      	cbnz	r0, 8009208 <__pow5mult+0x40>
 80091fc:	4b1d      	ldr	r3, [pc, #116]	; (8009274 <__pow5mult+0xac>)
 80091fe:	481e      	ldr	r0, [pc, #120]	; (8009278 <__pow5mult+0xb0>)
 8009200:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009204:	f000 fc62 	bl	8009acc <__assert_func>
 8009208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800920c:	6004      	str	r4, [r0, #0]
 800920e:	60c4      	str	r4, [r0, #12]
 8009210:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009214:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009218:	b94c      	cbnz	r4, 800922e <__pow5mult+0x66>
 800921a:	f240 2171 	movw	r1, #625	; 0x271
 800921e:	4630      	mov	r0, r6
 8009220:	f7ff ff12 	bl	8009048 <__i2b>
 8009224:	2300      	movs	r3, #0
 8009226:	f8c8 0008 	str.w	r0, [r8, #8]
 800922a:	4604      	mov	r4, r0
 800922c:	6003      	str	r3, [r0, #0]
 800922e:	f04f 0900 	mov.w	r9, #0
 8009232:	07eb      	lsls	r3, r5, #31
 8009234:	d50a      	bpl.n	800924c <__pow5mult+0x84>
 8009236:	4639      	mov	r1, r7
 8009238:	4622      	mov	r2, r4
 800923a:	4630      	mov	r0, r6
 800923c:	f7ff ff1a 	bl	8009074 <__multiply>
 8009240:	4639      	mov	r1, r7
 8009242:	4680      	mov	r8, r0
 8009244:	4630      	mov	r0, r6
 8009246:	f7ff fe47 	bl	8008ed8 <_Bfree>
 800924a:	4647      	mov	r7, r8
 800924c:	106d      	asrs	r5, r5, #1
 800924e:	d00b      	beq.n	8009268 <__pow5mult+0xa0>
 8009250:	6820      	ldr	r0, [r4, #0]
 8009252:	b938      	cbnz	r0, 8009264 <__pow5mult+0x9c>
 8009254:	4622      	mov	r2, r4
 8009256:	4621      	mov	r1, r4
 8009258:	4630      	mov	r0, r6
 800925a:	f7ff ff0b 	bl	8009074 <__multiply>
 800925e:	6020      	str	r0, [r4, #0]
 8009260:	f8c0 9000 	str.w	r9, [r0]
 8009264:	4604      	mov	r4, r0
 8009266:	e7e4      	b.n	8009232 <__pow5mult+0x6a>
 8009268:	4638      	mov	r0, r7
 800926a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800926e:	bf00      	nop
 8009270:	08009fa0 	.word	0x08009fa0
 8009274:	08009d6d 	.word	0x08009d6d
 8009278:	08009e50 	.word	0x08009e50

0800927c <__lshift>:
 800927c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009280:	460c      	mov	r4, r1
 8009282:	6849      	ldr	r1, [r1, #4]
 8009284:	6923      	ldr	r3, [r4, #16]
 8009286:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800928a:	68a3      	ldr	r3, [r4, #8]
 800928c:	4607      	mov	r7, r0
 800928e:	4691      	mov	r9, r2
 8009290:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009294:	f108 0601 	add.w	r6, r8, #1
 8009298:	42b3      	cmp	r3, r6
 800929a:	db0b      	blt.n	80092b4 <__lshift+0x38>
 800929c:	4638      	mov	r0, r7
 800929e:	f7ff fddb 	bl	8008e58 <_Balloc>
 80092a2:	4605      	mov	r5, r0
 80092a4:	b948      	cbnz	r0, 80092ba <__lshift+0x3e>
 80092a6:	4602      	mov	r2, r0
 80092a8:	4b2a      	ldr	r3, [pc, #168]	; (8009354 <__lshift+0xd8>)
 80092aa:	482b      	ldr	r0, [pc, #172]	; (8009358 <__lshift+0xdc>)
 80092ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80092b0:	f000 fc0c 	bl	8009acc <__assert_func>
 80092b4:	3101      	adds	r1, #1
 80092b6:	005b      	lsls	r3, r3, #1
 80092b8:	e7ee      	b.n	8009298 <__lshift+0x1c>
 80092ba:	2300      	movs	r3, #0
 80092bc:	f100 0114 	add.w	r1, r0, #20
 80092c0:	f100 0210 	add.w	r2, r0, #16
 80092c4:	4618      	mov	r0, r3
 80092c6:	4553      	cmp	r3, sl
 80092c8:	db37      	blt.n	800933a <__lshift+0xbe>
 80092ca:	6920      	ldr	r0, [r4, #16]
 80092cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092d0:	f104 0314 	add.w	r3, r4, #20
 80092d4:	f019 091f 	ands.w	r9, r9, #31
 80092d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80092e0:	d02f      	beq.n	8009342 <__lshift+0xc6>
 80092e2:	f1c9 0e20 	rsb	lr, r9, #32
 80092e6:	468a      	mov	sl, r1
 80092e8:	f04f 0c00 	mov.w	ip, #0
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	fa02 f209 	lsl.w	r2, r2, r9
 80092f2:	ea42 020c 	orr.w	r2, r2, ip
 80092f6:	f84a 2b04 	str.w	r2, [sl], #4
 80092fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80092fe:	4298      	cmp	r0, r3
 8009300:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009304:	d8f2      	bhi.n	80092ec <__lshift+0x70>
 8009306:	1b03      	subs	r3, r0, r4
 8009308:	3b15      	subs	r3, #21
 800930a:	f023 0303 	bic.w	r3, r3, #3
 800930e:	3304      	adds	r3, #4
 8009310:	f104 0215 	add.w	r2, r4, #21
 8009314:	4290      	cmp	r0, r2
 8009316:	bf38      	it	cc
 8009318:	2304      	movcc	r3, #4
 800931a:	f841 c003 	str.w	ip, [r1, r3]
 800931e:	f1bc 0f00 	cmp.w	ip, #0
 8009322:	d001      	beq.n	8009328 <__lshift+0xac>
 8009324:	f108 0602 	add.w	r6, r8, #2
 8009328:	3e01      	subs	r6, #1
 800932a:	4638      	mov	r0, r7
 800932c:	612e      	str	r6, [r5, #16]
 800932e:	4621      	mov	r1, r4
 8009330:	f7ff fdd2 	bl	8008ed8 <_Bfree>
 8009334:	4628      	mov	r0, r5
 8009336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933a:	f842 0f04 	str.w	r0, [r2, #4]!
 800933e:	3301      	adds	r3, #1
 8009340:	e7c1      	b.n	80092c6 <__lshift+0x4a>
 8009342:	3904      	subs	r1, #4
 8009344:	f853 2b04 	ldr.w	r2, [r3], #4
 8009348:	f841 2f04 	str.w	r2, [r1, #4]!
 800934c:	4298      	cmp	r0, r3
 800934e:	d8f9      	bhi.n	8009344 <__lshift+0xc8>
 8009350:	e7ea      	b.n	8009328 <__lshift+0xac>
 8009352:	bf00      	nop
 8009354:	08009ddf 	.word	0x08009ddf
 8009358:	08009e50 	.word	0x08009e50

0800935c <__mcmp>:
 800935c:	b530      	push	{r4, r5, lr}
 800935e:	6902      	ldr	r2, [r0, #16]
 8009360:	690c      	ldr	r4, [r1, #16]
 8009362:	1b12      	subs	r2, r2, r4
 8009364:	d10e      	bne.n	8009384 <__mcmp+0x28>
 8009366:	f100 0314 	add.w	r3, r0, #20
 800936a:	3114      	adds	r1, #20
 800936c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009370:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009374:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009378:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800937c:	42a5      	cmp	r5, r4
 800937e:	d003      	beq.n	8009388 <__mcmp+0x2c>
 8009380:	d305      	bcc.n	800938e <__mcmp+0x32>
 8009382:	2201      	movs	r2, #1
 8009384:	4610      	mov	r0, r2
 8009386:	bd30      	pop	{r4, r5, pc}
 8009388:	4283      	cmp	r3, r0
 800938a:	d3f3      	bcc.n	8009374 <__mcmp+0x18>
 800938c:	e7fa      	b.n	8009384 <__mcmp+0x28>
 800938e:	f04f 32ff 	mov.w	r2, #4294967295
 8009392:	e7f7      	b.n	8009384 <__mcmp+0x28>

08009394 <__mdiff>:
 8009394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009398:	460c      	mov	r4, r1
 800939a:	4606      	mov	r6, r0
 800939c:	4611      	mov	r1, r2
 800939e:	4620      	mov	r0, r4
 80093a0:	4690      	mov	r8, r2
 80093a2:	f7ff ffdb 	bl	800935c <__mcmp>
 80093a6:	1e05      	subs	r5, r0, #0
 80093a8:	d110      	bne.n	80093cc <__mdiff+0x38>
 80093aa:	4629      	mov	r1, r5
 80093ac:	4630      	mov	r0, r6
 80093ae:	f7ff fd53 	bl	8008e58 <_Balloc>
 80093b2:	b930      	cbnz	r0, 80093c2 <__mdiff+0x2e>
 80093b4:	4b3a      	ldr	r3, [pc, #232]	; (80094a0 <__mdiff+0x10c>)
 80093b6:	4602      	mov	r2, r0
 80093b8:	f240 2132 	movw	r1, #562	; 0x232
 80093bc:	4839      	ldr	r0, [pc, #228]	; (80094a4 <__mdiff+0x110>)
 80093be:	f000 fb85 	bl	8009acc <__assert_func>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093cc:	bfa4      	itt	ge
 80093ce:	4643      	movge	r3, r8
 80093d0:	46a0      	movge	r8, r4
 80093d2:	4630      	mov	r0, r6
 80093d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80093d8:	bfa6      	itte	ge
 80093da:	461c      	movge	r4, r3
 80093dc:	2500      	movge	r5, #0
 80093de:	2501      	movlt	r5, #1
 80093e0:	f7ff fd3a 	bl	8008e58 <_Balloc>
 80093e4:	b920      	cbnz	r0, 80093f0 <__mdiff+0x5c>
 80093e6:	4b2e      	ldr	r3, [pc, #184]	; (80094a0 <__mdiff+0x10c>)
 80093e8:	4602      	mov	r2, r0
 80093ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80093ee:	e7e5      	b.n	80093bc <__mdiff+0x28>
 80093f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80093f4:	6926      	ldr	r6, [r4, #16]
 80093f6:	60c5      	str	r5, [r0, #12]
 80093f8:	f104 0914 	add.w	r9, r4, #20
 80093fc:	f108 0514 	add.w	r5, r8, #20
 8009400:	f100 0e14 	add.w	lr, r0, #20
 8009404:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009408:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800940c:	f108 0210 	add.w	r2, r8, #16
 8009410:	46f2      	mov	sl, lr
 8009412:	2100      	movs	r1, #0
 8009414:	f859 3b04 	ldr.w	r3, [r9], #4
 8009418:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800941c:	fa1f f883 	uxth.w	r8, r3
 8009420:	fa11 f18b 	uxtah	r1, r1, fp
 8009424:	0c1b      	lsrs	r3, r3, #16
 8009426:	eba1 0808 	sub.w	r8, r1, r8
 800942a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800942e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009432:	fa1f f888 	uxth.w	r8, r8
 8009436:	1419      	asrs	r1, r3, #16
 8009438:	454e      	cmp	r6, r9
 800943a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800943e:	f84a 3b04 	str.w	r3, [sl], #4
 8009442:	d8e7      	bhi.n	8009414 <__mdiff+0x80>
 8009444:	1b33      	subs	r3, r6, r4
 8009446:	3b15      	subs	r3, #21
 8009448:	f023 0303 	bic.w	r3, r3, #3
 800944c:	3304      	adds	r3, #4
 800944e:	3415      	adds	r4, #21
 8009450:	42a6      	cmp	r6, r4
 8009452:	bf38      	it	cc
 8009454:	2304      	movcc	r3, #4
 8009456:	441d      	add	r5, r3
 8009458:	4473      	add	r3, lr
 800945a:	469e      	mov	lr, r3
 800945c:	462e      	mov	r6, r5
 800945e:	4566      	cmp	r6, ip
 8009460:	d30e      	bcc.n	8009480 <__mdiff+0xec>
 8009462:	f10c 0203 	add.w	r2, ip, #3
 8009466:	1b52      	subs	r2, r2, r5
 8009468:	f022 0203 	bic.w	r2, r2, #3
 800946c:	3d03      	subs	r5, #3
 800946e:	45ac      	cmp	ip, r5
 8009470:	bf38      	it	cc
 8009472:	2200      	movcc	r2, #0
 8009474:	441a      	add	r2, r3
 8009476:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800947a:	b17b      	cbz	r3, 800949c <__mdiff+0x108>
 800947c:	6107      	str	r7, [r0, #16]
 800947e:	e7a3      	b.n	80093c8 <__mdiff+0x34>
 8009480:	f856 8b04 	ldr.w	r8, [r6], #4
 8009484:	fa11 f288 	uxtah	r2, r1, r8
 8009488:	1414      	asrs	r4, r2, #16
 800948a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800948e:	b292      	uxth	r2, r2
 8009490:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009494:	f84e 2b04 	str.w	r2, [lr], #4
 8009498:	1421      	asrs	r1, r4, #16
 800949a:	e7e0      	b.n	800945e <__mdiff+0xca>
 800949c:	3f01      	subs	r7, #1
 800949e:	e7ea      	b.n	8009476 <__mdiff+0xe2>
 80094a0:	08009ddf 	.word	0x08009ddf
 80094a4:	08009e50 	.word	0x08009e50

080094a8 <__d2b>:
 80094a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094ac:	4689      	mov	r9, r1
 80094ae:	2101      	movs	r1, #1
 80094b0:	ec57 6b10 	vmov	r6, r7, d0
 80094b4:	4690      	mov	r8, r2
 80094b6:	f7ff fccf 	bl	8008e58 <_Balloc>
 80094ba:	4604      	mov	r4, r0
 80094bc:	b930      	cbnz	r0, 80094cc <__d2b+0x24>
 80094be:	4602      	mov	r2, r0
 80094c0:	4b25      	ldr	r3, [pc, #148]	; (8009558 <__d2b+0xb0>)
 80094c2:	4826      	ldr	r0, [pc, #152]	; (800955c <__d2b+0xb4>)
 80094c4:	f240 310a 	movw	r1, #778	; 0x30a
 80094c8:	f000 fb00 	bl	8009acc <__assert_func>
 80094cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80094d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094d4:	bb35      	cbnz	r5, 8009524 <__d2b+0x7c>
 80094d6:	2e00      	cmp	r6, #0
 80094d8:	9301      	str	r3, [sp, #4]
 80094da:	d028      	beq.n	800952e <__d2b+0x86>
 80094dc:	4668      	mov	r0, sp
 80094de:	9600      	str	r6, [sp, #0]
 80094e0:	f7ff fd82 	bl	8008fe8 <__lo0bits>
 80094e4:	9900      	ldr	r1, [sp, #0]
 80094e6:	b300      	cbz	r0, 800952a <__d2b+0x82>
 80094e8:	9a01      	ldr	r2, [sp, #4]
 80094ea:	f1c0 0320 	rsb	r3, r0, #32
 80094ee:	fa02 f303 	lsl.w	r3, r2, r3
 80094f2:	430b      	orrs	r3, r1
 80094f4:	40c2      	lsrs	r2, r0
 80094f6:	6163      	str	r3, [r4, #20]
 80094f8:	9201      	str	r2, [sp, #4]
 80094fa:	9b01      	ldr	r3, [sp, #4]
 80094fc:	61a3      	str	r3, [r4, #24]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	bf14      	ite	ne
 8009502:	2202      	movne	r2, #2
 8009504:	2201      	moveq	r2, #1
 8009506:	6122      	str	r2, [r4, #16]
 8009508:	b1d5      	cbz	r5, 8009540 <__d2b+0x98>
 800950a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800950e:	4405      	add	r5, r0
 8009510:	f8c9 5000 	str.w	r5, [r9]
 8009514:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009518:	f8c8 0000 	str.w	r0, [r8]
 800951c:	4620      	mov	r0, r4
 800951e:	b003      	add	sp, #12
 8009520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009528:	e7d5      	b.n	80094d6 <__d2b+0x2e>
 800952a:	6161      	str	r1, [r4, #20]
 800952c:	e7e5      	b.n	80094fa <__d2b+0x52>
 800952e:	a801      	add	r0, sp, #4
 8009530:	f7ff fd5a 	bl	8008fe8 <__lo0bits>
 8009534:	9b01      	ldr	r3, [sp, #4]
 8009536:	6163      	str	r3, [r4, #20]
 8009538:	2201      	movs	r2, #1
 800953a:	6122      	str	r2, [r4, #16]
 800953c:	3020      	adds	r0, #32
 800953e:	e7e3      	b.n	8009508 <__d2b+0x60>
 8009540:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009544:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009548:	f8c9 0000 	str.w	r0, [r9]
 800954c:	6918      	ldr	r0, [r3, #16]
 800954e:	f7ff fd2b 	bl	8008fa8 <__hi0bits>
 8009552:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009556:	e7df      	b.n	8009518 <__d2b+0x70>
 8009558:	08009ddf 	.word	0x08009ddf
 800955c:	08009e50 	.word	0x08009e50

08009560 <_calloc_r>:
 8009560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009562:	fba1 2402 	umull	r2, r4, r1, r2
 8009566:	b94c      	cbnz	r4, 800957c <_calloc_r+0x1c>
 8009568:	4611      	mov	r1, r2
 800956a:	9201      	str	r2, [sp, #4]
 800956c:	f000 f87a 	bl	8009664 <_malloc_r>
 8009570:	9a01      	ldr	r2, [sp, #4]
 8009572:	4605      	mov	r5, r0
 8009574:	b930      	cbnz	r0, 8009584 <_calloc_r+0x24>
 8009576:	4628      	mov	r0, r5
 8009578:	b003      	add	sp, #12
 800957a:	bd30      	pop	{r4, r5, pc}
 800957c:	220c      	movs	r2, #12
 800957e:	6002      	str	r2, [r0, #0]
 8009580:	2500      	movs	r5, #0
 8009582:	e7f8      	b.n	8009576 <_calloc_r+0x16>
 8009584:	4621      	mov	r1, r4
 8009586:	f7fd fdf3 	bl	8007170 <memset>
 800958a:	e7f4      	b.n	8009576 <_calloc_r+0x16>

0800958c <_free_r>:
 800958c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800958e:	2900      	cmp	r1, #0
 8009590:	d044      	beq.n	800961c <_free_r+0x90>
 8009592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009596:	9001      	str	r0, [sp, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	f1a1 0404 	sub.w	r4, r1, #4
 800959e:	bfb8      	it	lt
 80095a0:	18e4      	addlt	r4, r4, r3
 80095a2:	f000 fb19 	bl	8009bd8 <__malloc_lock>
 80095a6:	4a1e      	ldr	r2, [pc, #120]	; (8009620 <_free_r+0x94>)
 80095a8:	9801      	ldr	r0, [sp, #4]
 80095aa:	6813      	ldr	r3, [r2, #0]
 80095ac:	b933      	cbnz	r3, 80095bc <_free_r+0x30>
 80095ae:	6063      	str	r3, [r4, #4]
 80095b0:	6014      	str	r4, [r2, #0]
 80095b2:	b003      	add	sp, #12
 80095b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095b8:	f000 bb14 	b.w	8009be4 <__malloc_unlock>
 80095bc:	42a3      	cmp	r3, r4
 80095be:	d908      	bls.n	80095d2 <_free_r+0x46>
 80095c0:	6825      	ldr	r5, [r4, #0]
 80095c2:	1961      	adds	r1, r4, r5
 80095c4:	428b      	cmp	r3, r1
 80095c6:	bf01      	itttt	eq
 80095c8:	6819      	ldreq	r1, [r3, #0]
 80095ca:	685b      	ldreq	r3, [r3, #4]
 80095cc:	1949      	addeq	r1, r1, r5
 80095ce:	6021      	streq	r1, [r4, #0]
 80095d0:	e7ed      	b.n	80095ae <_free_r+0x22>
 80095d2:	461a      	mov	r2, r3
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	b10b      	cbz	r3, 80095dc <_free_r+0x50>
 80095d8:	42a3      	cmp	r3, r4
 80095da:	d9fa      	bls.n	80095d2 <_free_r+0x46>
 80095dc:	6811      	ldr	r1, [r2, #0]
 80095de:	1855      	adds	r5, r2, r1
 80095e0:	42a5      	cmp	r5, r4
 80095e2:	d10b      	bne.n	80095fc <_free_r+0x70>
 80095e4:	6824      	ldr	r4, [r4, #0]
 80095e6:	4421      	add	r1, r4
 80095e8:	1854      	adds	r4, r2, r1
 80095ea:	42a3      	cmp	r3, r4
 80095ec:	6011      	str	r1, [r2, #0]
 80095ee:	d1e0      	bne.n	80095b2 <_free_r+0x26>
 80095f0:	681c      	ldr	r4, [r3, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	6053      	str	r3, [r2, #4]
 80095f6:	4421      	add	r1, r4
 80095f8:	6011      	str	r1, [r2, #0]
 80095fa:	e7da      	b.n	80095b2 <_free_r+0x26>
 80095fc:	d902      	bls.n	8009604 <_free_r+0x78>
 80095fe:	230c      	movs	r3, #12
 8009600:	6003      	str	r3, [r0, #0]
 8009602:	e7d6      	b.n	80095b2 <_free_r+0x26>
 8009604:	6825      	ldr	r5, [r4, #0]
 8009606:	1961      	adds	r1, r4, r5
 8009608:	428b      	cmp	r3, r1
 800960a:	bf04      	itt	eq
 800960c:	6819      	ldreq	r1, [r3, #0]
 800960e:	685b      	ldreq	r3, [r3, #4]
 8009610:	6063      	str	r3, [r4, #4]
 8009612:	bf04      	itt	eq
 8009614:	1949      	addeq	r1, r1, r5
 8009616:	6021      	streq	r1, [r4, #0]
 8009618:	6054      	str	r4, [r2, #4]
 800961a:	e7ca      	b.n	80095b2 <_free_r+0x26>
 800961c:	b003      	add	sp, #12
 800961e:	bd30      	pop	{r4, r5, pc}
 8009620:	20016640 	.word	0x20016640

08009624 <sbrk_aligned>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	4e0e      	ldr	r6, [pc, #56]	; (8009660 <sbrk_aligned+0x3c>)
 8009628:	460c      	mov	r4, r1
 800962a:	6831      	ldr	r1, [r6, #0]
 800962c:	4605      	mov	r5, r0
 800962e:	b911      	cbnz	r1, 8009636 <sbrk_aligned+0x12>
 8009630:	f000 f9e6 	bl	8009a00 <_sbrk_r>
 8009634:	6030      	str	r0, [r6, #0]
 8009636:	4621      	mov	r1, r4
 8009638:	4628      	mov	r0, r5
 800963a:	f000 f9e1 	bl	8009a00 <_sbrk_r>
 800963e:	1c43      	adds	r3, r0, #1
 8009640:	d00a      	beq.n	8009658 <sbrk_aligned+0x34>
 8009642:	1cc4      	adds	r4, r0, #3
 8009644:	f024 0403 	bic.w	r4, r4, #3
 8009648:	42a0      	cmp	r0, r4
 800964a:	d007      	beq.n	800965c <sbrk_aligned+0x38>
 800964c:	1a21      	subs	r1, r4, r0
 800964e:	4628      	mov	r0, r5
 8009650:	f000 f9d6 	bl	8009a00 <_sbrk_r>
 8009654:	3001      	adds	r0, #1
 8009656:	d101      	bne.n	800965c <sbrk_aligned+0x38>
 8009658:	f04f 34ff 	mov.w	r4, #4294967295
 800965c:	4620      	mov	r0, r4
 800965e:	bd70      	pop	{r4, r5, r6, pc}
 8009660:	20016644 	.word	0x20016644

08009664 <_malloc_r>:
 8009664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009668:	1ccd      	adds	r5, r1, #3
 800966a:	f025 0503 	bic.w	r5, r5, #3
 800966e:	3508      	adds	r5, #8
 8009670:	2d0c      	cmp	r5, #12
 8009672:	bf38      	it	cc
 8009674:	250c      	movcc	r5, #12
 8009676:	2d00      	cmp	r5, #0
 8009678:	4607      	mov	r7, r0
 800967a:	db01      	blt.n	8009680 <_malloc_r+0x1c>
 800967c:	42a9      	cmp	r1, r5
 800967e:	d905      	bls.n	800968c <_malloc_r+0x28>
 8009680:	230c      	movs	r3, #12
 8009682:	603b      	str	r3, [r7, #0]
 8009684:	2600      	movs	r6, #0
 8009686:	4630      	mov	r0, r6
 8009688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800968c:	4e2e      	ldr	r6, [pc, #184]	; (8009748 <_malloc_r+0xe4>)
 800968e:	f000 faa3 	bl	8009bd8 <__malloc_lock>
 8009692:	6833      	ldr	r3, [r6, #0]
 8009694:	461c      	mov	r4, r3
 8009696:	bb34      	cbnz	r4, 80096e6 <_malloc_r+0x82>
 8009698:	4629      	mov	r1, r5
 800969a:	4638      	mov	r0, r7
 800969c:	f7ff ffc2 	bl	8009624 <sbrk_aligned>
 80096a0:	1c43      	adds	r3, r0, #1
 80096a2:	4604      	mov	r4, r0
 80096a4:	d14d      	bne.n	8009742 <_malloc_r+0xde>
 80096a6:	6834      	ldr	r4, [r6, #0]
 80096a8:	4626      	mov	r6, r4
 80096aa:	2e00      	cmp	r6, #0
 80096ac:	d140      	bne.n	8009730 <_malloc_r+0xcc>
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	4631      	mov	r1, r6
 80096b2:	4638      	mov	r0, r7
 80096b4:	eb04 0803 	add.w	r8, r4, r3
 80096b8:	f000 f9a2 	bl	8009a00 <_sbrk_r>
 80096bc:	4580      	cmp	r8, r0
 80096be:	d13a      	bne.n	8009736 <_malloc_r+0xd2>
 80096c0:	6821      	ldr	r1, [r4, #0]
 80096c2:	3503      	adds	r5, #3
 80096c4:	1a6d      	subs	r5, r5, r1
 80096c6:	f025 0503 	bic.w	r5, r5, #3
 80096ca:	3508      	adds	r5, #8
 80096cc:	2d0c      	cmp	r5, #12
 80096ce:	bf38      	it	cc
 80096d0:	250c      	movcc	r5, #12
 80096d2:	4629      	mov	r1, r5
 80096d4:	4638      	mov	r0, r7
 80096d6:	f7ff ffa5 	bl	8009624 <sbrk_aligned>
 80096da:	3001      	adds	r0, #1
 80096dc:	d02b      	beq.n	8009736 <_malloc_r+0xd2>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	442b      	add	r3, r5
 80096e2:	6023      	str	r3, [r4, #0]
 80096e4:	e00e      	b.n	8009704 <_malloc_r+0xa0>
 80096e6:	6822      	ldr	r2, [r4, #0]
 80096e8:	1b52      	subs	r2, r2, r5
 80096ea:	d41e      	bmi.n	800972a <_malloc_r+0xc6>
 80096ec:	2a0b      	cmp	r2, #11
 80096ee:	d916      	bls.n	800971e <_malloc_r+0xba>
 80096f0:	1961      	adds	r1, r4, r5
 80096f2:	42a3      	cmp	r3, r4
 80096f4:	6025      	str	r5, [r4, #0]
 80096f6:	bf18      	it	ne
 80096f8:	6059      	strne	r1, [r3, #4]
 80096fa:	6863      	ldr	r3, [r4, #4]
 80096fc:	bf08      	it	eq
 80096fe:	6031      	streq	r1, [r6, #0]
 8009700:	5162      	str	r2, [r4, r5]
 8009702:	604b      	str	r3, [r1, #4]
 8009704:	4638      	mov	r0, r7
 8009706:	f104 060b 	add.w	r6, r4, #11
 800970a:	f000 fa6b 	bl	8009be4 <__malloc_unlock>
 800970e:	f026 0607 	bic.w	r6, r6, #7
 8009712:	1d23      	adds	r3, r4, #4
 8009714:	1af2      	subs	r2, r6, r3
 8009716:	d0b6      	beq.n	8009686 <_malloc_r+0x22>
 8009718:	1b9b      	subs	r3, r3, r6
 800971a:	50a3      	str	r3, [r4, r2]
 800971c:	e7b3      	b.n	8009686 <_malloc_r+0x22>
 800971e:	6862      	ldr	r2, [r4, #4]
 8009720:	42a3      	cmp	r3, r4
 8009722:	bf0c      	ite	eq
 8009724:	6032      	streq	r2, [r6, #0]
 8009726:	605a      	strne	r2, [r3, #4]
 8009728:	e7ec      	b.n	8009704 <_malloc_r+0xa0>
 800972a:	4623      	mov	r3, r4
 800972c:	6864      	ldr	r4, [r4, #4]
 800972e:	e7b2      	b.n	8009696 <_malloc_r+0x32>
 8009730:	4634      	mov	r4, r6
 8009732:	6876      	ldr	r6, [r6, #4]
 8009734:	e7b9      	b.n	80096aa <_malloc_r+0x46>
 8009736:	230c      	movs	r3, #12
 8009738:	603b      	str	r3, [r7, #0]
 800973a:	4638      	mov	r0, r7
 800973c:	f000 fa52 	bl	8009be4 <__malloc_unlock>
 8009740:	e7a1      	b.n	8009686 <_malloc_r+0x22>
 8009742:	6025      	str	r5, [r4, #0]
 8009744:	e7de      	b.n	8009704 <_malloc_r+0xa0>
 8009746:	bf00      	nop
 8009748:	20016640 	.word	0x20016640

0800974c <__sfputc_r>:
 800974c:	6893      	ldr	r3, [r2, #8]
 800974e:	3b01      	subs	r3, #1
 8009750:	2b00      	cmp	r3, #0
 8009752:	b410      	push	{r4}
 8009754:	6093      	str	r3, [r2, #8]
 8009756:	da08      	bge.n	800976a <__sfputc_r+0x1e>
 8009758:	6994      	ldr	r4, [r2, #24]
 800975a:	42a3      	cmp	r3, r4
 800975c:	db01      	blt.n	8009762 <__sfputc_r+0x16>
 800975e:	290a      	cmp	r1, #10
 8009760:	d103      	bne.n	800976a <__sfputc_r+0x1e>
 8009762:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009766:	f7fe ba03 	b.w	8007b70 <__swbuf_r>
 800976a:	6813      	ldr	r3, [r2, #0]
 800976c:	1c58      	adds	r0, r3, #1
 800976e:	6010      	str	r0, [r2, #0]
 8009770:	7019      	strb	r1, [r3, #0]
 8009772:	4608      	mov	r0, r1
 8009774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009778:	4770      	bx	lr

0800977a <__sfputs_r>:
 800977a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977c:	4606      	mov	r6, r0
 800977e:	460f      	mov	r7, r1
 8009780:	4614      	mov	r4, r2
 8009782:	18d5      	adds	r5, r2, r3
 8009784:	42ac      	cmp	r4, r5
 8009786:	d101      	bne.n	800978c <__sfputs_r+0x12>
 8009788:	2000      	movs	r0, #0
 800978a:	e007      	b.n	800979c <__sfputs_r+0x22>
 800978c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009790:	463a      	mov	r2, r7
 8009792:	4630      	mov	r0, r6
 8009794:	f7ff ffda 	bl	800974c <__sfputc_r>
 8009798:	1c43      	adds	r3, r0, #1
 800979a:	d1f3      	bne.n	8009784 <__sfputs_r+0xa>
 800979c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097a0 <_vfiprintf_r>:
 80097a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a4:	460d      	mov	r5, r1
 80097a6:	b09d      	sub	sp, #116	; 0x74
 80097a8:	4614      	mov	r4, r2
 80097aa:	4698      	mov	r8, r3
 80097ac:	4606      	mov	r6, r0
 80097ae:	b118      	cbz	r0, 80097b8 <_vfiprintf_r+0x18>
 80097b0:	6983      	ldr	r3, [r0, #24]
 80097b2:	b90b      	cbnz	r3, 80097b8 <_vfiprintf_r+0x18>
 80097b4:	f7ff fa30 	bl	8008c18 <__sinit>
 80097b8:	4b89      	ldr	r3, [pc, #548]	; (80099e0 <_vfiprintf_r+0x240>)
 80097ba:	429d      	cmp	r5, r3
 80097bc:	d11b      	bne.n	80097f6 <_vfiprintf_r+0x56>
 80097be:	6875      	ldr	r5, [r6, #4]
 80097c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097c2:	07d9      	lsls	r1, r3, #31
 80097c4:	d405      	bmi.n	80097d2 <_vfiprintf_r+0x32>
 80097c6:	89ab      	ldrh	r3, [r5, #12]
 80097c8:	059a      	lsls	r2, r3, #22
 80097ca:	d402      	bmi.n	80097d2 <_vfiprintf_r+0x32>
 80097cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097ce:	f7ff fac6 	bl	8008d5e <__retarget_lock_acquire_recursive>
 80097d2:	89ab      	ldrh	r3, [r5, #12]
 80097d4:	071b      	lsls	r3, r3, #28
 80097d6:	d501      	bpl.n	80097dc <_vfiprintf_r+0x3c>
 80097d8:	692b      	ldr	r3, [r5, #16]
 80097da:	b9eb      	cbnz	r3, 8009818 <_vfiprintf_r+0x78>
 80097dc:	4629      	mov	r1, r5
 80097de:	4630      	mov	r0, r6
 80097e0:	f7fe fa18 	bl	8007c14 <__swsetup_r>
 80097e4:	b1c0      	cbz	r0, 8009818 <_vfiprintf_r+0x78>
 80097e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097e8:	07dc      	lsls	r4, r3, #31
 80097ea:	d50e      	bpl.n	800980a <_vfiprintf_r+0x6a>
 80097ec:	f04f 30ff 	mov.w	r0, #4294967295
 80097f0:	b01d      	add	sp, #116	; 0x74
 80097f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f6:	4b7b      	ldr	r3, [pc, #492]	; (80099e4 <_vfiprintf_r+0x244>)
 80097f8:	429d      	cmp	r5, r3
 80097fa:	d101      	bne.n	8009800 <_vfiprintf_r+0x60>
 80097fc:	68b5      	ldr	r5, [r6, #8]
 80097fe:	e7df      	b.n	80097c0 <_vfiprintf_r+0x20>
 8009800:	4b79      	ldr	r3, [pc, #484]	; (80099e8 <_vfiprintf_r+0x248>)
 8009802:	429d      	cmp	r5, r3
 8009804:	bf08      	it	eq
 8009806:	68f5      	ldreq	r5, [r6, #12]
 8009808:	e7da      	b.n	80097c0 <_vfiprintf_r+0x20>
 800980a:	89ab      	ldrh	r3, [r5, #12]
 800980c:	0598      	lsls	r0, r3, #22
 800980e:	d4ed      	bmi.n	80097ec <_vfiprintf_r+0x4c>
 8009810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009812:	f7ff faa5 	bl	8008d60 <__retarget_lock_release_recursive>
 8009816:	e7e9      	b.n	80097ec <_vfiprintf_r+0x4c>
 8009818:	2300      	movs	r3, #0
 800981a:	9309      	str	r3, [sp, #36]	; 0x24
 800981c:	2320      	movs	r3, #32
 800981e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009822:	f8cd 800c 	str.w	r8, [sp, #12]
 8009826:	2330      	movs	r3, #48	; 0x30
 8009828:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80099ec <_vfiprintf_r+0x24c>
 800982c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009830:	f04f 0901 	mov.w	r9, #1
 8009834:	4623      	mov	r3, r4
 8009836:	469a      	mov	sl, r3
 8009838:	f813 2b01 	ldrb.w	r2, [r3], #1
 800983c:	b10a      	cbz	r2, 8009842 <_vfiprintf_r+0xa2>
 800983e:	2a25      	cmp	r2, #37	; 0x25
 8009840:	d1f9      	bne.n	8009836 <_vfiprintf_r+0x96>
 8009842:	ebba 0b04 	subs.w	fp, sl, r4
 8009846:	d00b      	beq.n	8009860 <_vfiprintf_r+0xc0>
 8009848:	465b      	mov	r3, fp
 800984a:	4622      	mov	r2, r4
 800984c:	4629      	mov	r1, r5
 800984e:	4630      	mov	r0, r6
 8009850:	f7ff ff93 	bl	800977a <__sfputs_r>
 8009854:	3001      	adds	r0, #1
 8009856:	f000 80aa 	beq.w	80099ae <_vfiprintf_r+0x20e>
 800985a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800985c:	445a      	add	r2, fp
 800985e:	9209      	str	r2, [sp, #36]	; 0x24
 8009860:	f89a 3000 	ldrb.w	r3, [sl]
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 80a2 	beq.w	80099ae <_vfiprintf_r+0x20e>
 800986a:	2300      	movs	r3, #0
 800986c:	f04f 32ff 	mov.w	r2, #4294967295
 8009870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009874:	f10a 0a01 	add.w	sl, sl, #1
 8009878:	9304      	str	r3, [sp, #16]
 800987a:	9307      	str	r3, [sp, #28]
 800987c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009880:	931a      	str	r3, [sp, #104]	; 0x68
 8009882:	4654      	mov	r4, sl
 8009884:	2205      	movs	r2, #5
 8009886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800988a:	4858      	ldr	r0, [pc, #352]	; (80099ec <_vfiprintf_r+0x24c>)
 800988c:	f7f6 fca8 	bl	80001e0 <memchr>
 8009890:	9a04      	ldr	r2, [sp, #16]
 8009892:	b9d8      	cbnz	r0, 80098cc <_vfiprintf_r+0x12c>
 8009894:	06d1      	lsls	r1, r2, #27
 8009896:	bf44      	itt	mi
 8009898:	2320      	movmi	r3, #32
 800989a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800989e:	0713      	lsls	r3, r2, #28
 80098a0:	bf44      	itt	mi
 80098a2:	232b      	movmi	r3, #43	; 0x2b
 80098a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098a8:	f89a 3000 	ldrb.w	r3, [sl]
 80098ac:	2b2a      	cmp	r3, #42	; 0x2a
 80098ae:	d015      	beq.n	80098dc <_vfiprintf_r+0x13c>
 80098b0:	9a07      	ldr	r2, [sp, #28]
 80098b2:	4654      	mov	r4, sl
 80098b4:	2000      	movs	r0, #0
 80098b6:	f04f 0c0a 	mov.w	ip, #10
 80098ba:	4621      	mov	r1, r4
 80098bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098c0:	3b30      	subs	r3, #48	; 0x30
 80098c2:	2b09      	cmp	r3, #9
 80098c4:	d94e      	bls.n	8009964 <_vfiprintf_r+0x1c4>
 80098c6:	b1b0      	cbz	r0, 80098f6 <_vfiprintf_r+0x156>
 80098c8:	9207      	str	r2, [sp, #28]
 80098ca:	e014      	b.n	80098f6 <_vfiprintf_r+0x156>
 80098cc:	eba0 0308 	sub.w	r3, r0, r8
 80098d0:	fa09 f303 	lsl.w	r3, r9, r3
 80098d4:	4313      	orrs	r3, r2
 80098d6:	9304      	str	r3, [sp, #16]
 80098d8:	46a2      	mov	sl, r4
 80098da:	e7d2      	b.n	8009882 <_vfiprintf_r+0xe2>
 80098dc:	9b03      	ldr	r3, [sp, #12]
 80098de:	1d19      	adds	r1, r3, #4
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	9103      	str	r1, [sp, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	bfbb      	ittet	lt
 80098e8:	425b      	neglt	r3, r3
 80098ea:	f042 0202 	orrlt.w	r2, r2, #2
 80098ee:	9307      	strge	r3, [sp, #28]
 80098f0:	9307      	strlt	r3, [sp, #28]
 80098f2:	bfb8      	it	lt
 80098f4:	9204      	strlt	r2, [sp, #16]
 80098f6:	7823      	ldrb	r3, [r4, #0]
 80098f8:	2b2e      	cmp	r3, #46	; 0x2e
 80098fa:	d10c      	bne.n	8009916 <_vfiprintf_r+0x176>
 80098fc:	7863      	ldrb	r3, [r4, #1]
 80098fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009900:	d135      	bne.n	800996e <_vfiprintf_r+0x1ce>
 8009902:	9b03      	ldr	r3, [sp, #12]
 8009904:	1d1a      	adds	r2, r3, #4
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	9203      	str	r2, [sp, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	bfb8      	it	lt
 800990e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009912:	3402      	adds	r4, #2
 8009914:	9305      	str	r3, [sp, #20]
 8009916:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80099fc <_vfiprintf_r+0x25c>
 800991a:	7821      	ldrb	r1, [r4, #0]
 800991c:	2203      	movs	r2, #3
 800991e:	4650      	mov	r0, sl
 8009920:	f7f6 fc5e 	bl	80001e0 <memchr>
 8009924:	b140      	cbz	r0, 8009938 <_vfiprintf_r+0x198>
 8009926:	2340      	movs	r3, #64	; 0x40
 8009928:	eba0 000a 	sub.w	r0, r0, sl
 800992c:	fa03 f000 	lsl.w	r0, r3, r0
 8009930:	9b04      	ldr	r3, [sp, #16]
 8009932:	4303      	orrs	r3, r0
 8009934:	3401      	adds	r4, #1
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800993c:	482c      	ldr	r0, [pc, #176]	; (80099f0 <_vfiprintf_r+0x250>)
 800993e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009942:	2206      	movs	r2, #6
 8009944:	f7f6 fc4c 	bl	80001e0 <memchr>
 8009948:	2800      	cmp	r0, #0
 800994a:	d03f      	beq.n	80099cc <_vfiprintf_r+0x22c>
 800994c:	4b29      	ldr	r3, [pc, #164]	; (80099f4 <_vfiprintf_r+0x254>)
 800994e:	bb1b      	cbnz	r3, 8009998 <_vfiprintf_r+0x1f8>
 8009950:	9b03      	ldr	r3, [sp, #12]
 8009952:	3307      	adds	r3, #7
 8009954:	f023 0307 	bic.w	r3, r3, #7
 8009958:	3308      	adds	r3, #8
 800995a:	9303      	str	r3, [sp, #12]
 800995c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800995e:	443b      	add	r3, r7
 8009960:	9309      	str	r3, [sp, #36]	; 0x24
 8009962:	e767      	b.n	8009834 <_vfiprintf_r+0x94>
 8009964:	fb0c 3202 	mla	r2, ip, r2, r3
 8009968:	460c      	mov	r4, r1
 800996a:	2001      	movs	r0, #1
 800996c:	e7a5      	b.n	80098ba <_vfiprintf_r+0x11a>
 800996e:	2300      	movs	r3, #0
 8009970:	3401      	adds	r4, #1
 8009972:	9305      	str	r3, [sp, #20]
 8009974:	4619      	mov	r1, r3
 8009976:	f04f 0c0a 	mov.w	ip, #10
 800997a:	4620      	mov	r0, r4
 800997c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009980:	3a30      	subs	r2, #48	; 0x30
 8009982:	2a09      	cmp	r2, #9
 8009984:	d903      	bls.n	800998e <_vfiprintf_r+0x1ee>
 8009986:	2b00      	cmp	r3, #0
 8009988:	d0c5      	beq.n	8009916 <_vfiprintf_r+0x176>
 800998a:	9105      	str	r1, [sp, #20]
 800998c:	e7c3      	b.n	8009916 <_vfiprintf_r+0x176>
 800998e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009992:	4604      	mov	r4, r0
 8009994:	2301      	movs	r3, #1
 8009996:	e7f0      	b.n	800997a <_vfiprintf_r+0x1da>
 8009998:	ab03      	add	r3, sp, #12
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	462a      	mov	r2, r5
 800999e:	4b16      	ldr	r3, [pc, #88]	; (80099f8 <_vfiprintf_r+0x258>)
 80099a0:	a904      	add	r1, sp, #16
 80099a2:	4630      	mov	r0, r6
 80099a4:	f7fd fc8c 	bl	80072c0 <_printf_float>
 80099a8:	4607      	mov	r7, r0
 80099aa:	1c78      	adds	r0, r7, #1
 80099ac:	d1d6      	bne.n	800995c <_vfiprintf_r+0x1bc>
 80099ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099b0:	07d9      	lsls	r1, r3, #31
 80099b2:	d405      	bmi.n	80099c0 <_vfiprintf_r+0x220>
 80099b4:	89ab      	ldrh	r3, [r5, #12]
 80099b6:	059a      	lsls	r2, r3, #22
 80099b8:	d402      	bmi.n	80099c0 <_vfiprintf_r+0x220>
 80099ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099bc:	f7ff f9d0 	bl	8008d60 <__retarget_lock_release_recursive>
 80099c0:	89ab      	ldrh	r3, [r5, #12]
 80099c2:	065b      	lsls	r3, r3, #25
 80099c4:	f53f af12 	bmi.w	80097ec <_vfiprintf_r+0x4c>
 80099c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099ca:	e711      	b.n	80097f0 <_vfiprintf_r+0x50>
 80099cc:	ab03      	add	r3, sp, #12
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	462a      	mov	r2, r5
 80099d2:	4b09      	ldr	r3, [pc, #36]	; (80099f8 <_vfiprintf_r+0x258>)
 80099d4:	a904      	add	r1, sp, #16
 80099d6:	4630      	mov	r0, r6
 80099d8:	f7fd ff16 	bl	8007808 <_printf_i>
 80099dc:	e7e4      	b.n	80099a8 <_vfiprintf_r+0x208>
 80099de:	bf00      	nop
 80099e0:	08009e10 	.word	0x08009e10
 80099e4:	08009e30 	.word	0x08009e30
 80099e8:	08009df0 	.word	0x08009df0
 80099ec:	08009fac 	.word	0x08009fac
 80099f0:	08009fb6 	.word	0x08009fb6
 80099f4:	080072c1 	.word	0x080072c1
 80099f8:	0800977b 	.word	0x0800977b
 80099fc:	08009fb2 	.word	0x08009fb2

08009a00 <_sbrk_r>:
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	4d06      	ldr	r5, [pc, #24]	; (8009a1c <_sbrk_r+0x1c>)
 8009a04:	2300      	movs	r3, #0
 8009a06:	4604      	mov	r4, r0
 8009a08:	4608      	mov	r0, r1
 8009a0a:	602b      	str	r3, [r5, #0]
 8009a0c:	f7f9 fd38 	bl	8003480 <_sbrk>
 8009a10:	1c43      	adds	r3, r0, #1
 8009a12:	d102      	bne.n	8009a1a <_sbrk_r+0x1a>
 8009a14:	682b      	ldr	r3, [r5, #0]
 8009a16:	b103      	cbz	r3, 8009a1a <_sbrk_r+0x1a>
 8009a18:	6023      	str	r3, [r4, #0]
 8009a1a:	bd38      	pop	{r3, r4, r5, pc}
 8009a1c:	20016648 	.word	0x20016648

08009a20 <__sread>:
 8009a20:	b510      	push	{r4, lr}
 8009a22:	460c      	mov	r4, r1
 8009a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a28:	f000 f8e2 	bl	8009bf0 <_read_r>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	bfab      	itete	ge
 8009a30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a32:	89a3      	ldrhlt	r3, [r4, #12]
 8009a34:	181b      	addge	r3, r3, r0
 8009a36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a3a:	bfac      	ite	ge
 8009a3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a3e:	81a3      	strhlt	r3, [r4, #12]
 8009a40:	bd10      	pop	{r4, pc}

08009a42 <__swrite>:
 8009a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a46:	461f      	mov	r7, r3
 8009a48:	898b      	ldrh	r3, [r1, #12]
 8009a4a:	05db      	lsls	r3, r3, #23
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	460c      	mov	r4, r1
 8009a50:	4616      	mov	r6, r2
 8009a52:	d505      	bpl.n	8009a60 <__swrite+0x1e>
 8009a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a58:	2302      	movs	r3, #2
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f000 f898 	bl	8009b90 <_lseek_r>
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a6a:	81a3      	strh	r3, [r4, #12]
 8009a6c:	4632      	mov	r2, r6
 8009a6e:	463b      	mov	r3, r7
 8009a70:	4628      	mov	r0, r5
 8009a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a76:	f000 b817 	b.w	8009aa8 <_write_r>

08009a7a <__sseek>:
 8009a7a:	b510      	push	{r4, lr}
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a82:	f000 f885 	bl	8009b90 <_lseek_r>
 8009a86:	1c43      	adds	r3, r0, #1
 8009a88:	89a3      	ldrh	r3, [r4, #12]
 8009a8a:	bf15      	itete	ne
 8009a8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a96:	81a3      	strheq	r3, [r4, #12]
 8009a98:	bf18      	it	ne
 8009a9a:	81a3      	strhne	r3, [r4, #12]
 8009a9c:	bd10      	pop	{r4, pc}

08009a9e <__sclose>:
 8009a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa2:	f000 b831 	b.w	8009b08 <_close_r>
	...

08009aa8 <_write_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4d07      	ldr	r5, [pc, #28]	; (8009ac8 <_write_r+0x20>)
 8009aac:	4604      	mov	r4, r0
 8009aae:	4608      	mov	r0, r1
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	602a      	str	r2, [r5, #0]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f7f9 fd2a 	bl	8003510 <_write>
 8009abc:	1c43      	adds	r3, r0, #1
 8009abe:	d102      	bne.n	8009ac6 <_write_r+0x1e>
 8009ac0:	682b      	ldr	r3, [r5, #0]
 8009ac2:	b103      	cbz	r3, 8009ac6 <_write_r+0x1e>
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	20016648 	.word	0x20016648

08009acc <__assert_func>:
 8009acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ace:	4614      	mov	r4, r2
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	4b09      	ldr	r3, [pc, #36]	; (8009af8 <__assert_func+0x2c>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	68d8      	ldr	r0, [r3, #12]
 8009ada:	b14c      	cbz	r4, 8009af0 <__assert_func+0x24>
 8009adc:	4b07      	ldr	r3, [pc, #28]	; (8009afc <__assert_func+0x30>)
 8009ade:	9100      	str	r1, [sp, #0]
 8009ae0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ae4:	4906      	ldr	r1, [pc, #24]	; (8009b00 <__assert_func+0x34>)
 8009ae6:	462b      	mov	r3, r5
 8009ae8:	f000 f81e 	bl	8009b28 <fiprintf>
 8009aec:	f000 f89f 	bl	8009c2e <abort>
 8009af0:	4b04      	ldr	r3, [pc, #16]	; (8009b04 <__assert_func+0x38>)
 8009af2:	461c      	mov	r4, r3
 8009af4:	e7f3      	b.n	8009ade <__assert_func+0x12>
 8009af6:	bf00      	nop
 8009af8:	2000004c 	.word	0x2000004c
 8009afc:	08009fbd 	.word	0x08009fbd
 8009b00:	08009fca 	.word	0x08009fca
 8009b04:	08009ff8 	.word	0x08009ff8

08009b08 <_close_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4d06      	ldr	r5, [pc, #24]	; (8009b24 <_close_r+0x1c>)
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	4604      	mov	r4, r0
 8009b10:	4608      	mov	r0, r1
 8009b12:	602b      	str	r3, [r5, #0]
 8009b14:	f7f9 fc7f 	bl	8003416 <_close>
 8009b18:	1c43      	adds	r3, r0, #1
 8009b1a:	d102      	bne.n	8009b22 <_close_r+0x1a>
 8009b1c:	682b      	ldr	r3, [r5, #0]
 8009b1e:	b103      	cbz	r3, 8009b22 <_close_r+0x1a>
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	bd38      	pop	{r3, r4, r5, pc}
 8009b24:	20016648 	.word	0x20016648

08009b28 <fiprintf>:
 8009b28:	b40e      	push	{r1, r2, r3}
 8009b2a:	b503      	push	{r0, r1, lr}
 8009b2c:	4601      	mov	r1, r0
 8009b2e:	ab03      	add	r3, sp, #12
 8009b30:	4805      	ldr	r0, [pc, #20]	; (8009b48 <fiprintf+0x20>)
 8009b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b36:	6800      	ldr	r0, [r0, #0]
 8009b38:	9301      	str	r3, [sp, #4]
 8009b3a:	f7ff fe31 	bl	80097a0 <_vfiprintf_r>
 8009b3e:	b002      	add	sp, #8
 8009b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b44:	b003      	add	sp, #12
 8009b46:	4770      	bx	lr
 8009b48:	2000004c 	.word	0x2000004c

08009b4c <_fstat_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	4d07      	ldr	r5, [pc, #28]	; (8009b6c <_fstat_r+0x20>)
 8009b50:	2300      	movs	r3, #0
 8009b52:	4604      	mov	r4, r0
 8009b54:	4608      	mov	r0, r1
 8009b56:	4611      	mov	r1, r2
 8009b58:	602b      	str	r3, [r5, #0]
 8009b5a:	f7f9 fc68 	bl	800342e <_fstat>
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	d102      	bne.n	8009b68 <_fstat_r+0x1c>
 8009b62:	682b      	ldr	r3, [r5, #0]
 8009b64:	b103      	cbz	r3, 8009b68 <_fstat_r+0x1c>
 8009b66:	6023      	str	r3, [r4, #0]
 8009b68:	bd38      	pop	{r3, r4, r5, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20016648 	.word	0x20016648

08009b70 <_isatty_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	4d06      	ldr	r5, [pc, #24]	; (8009b8c <_isatty_r+0x1c>)
 8009b74:	2300      	movs	r3, #0
 8009b76:	4604      	mov	r4, r0
 8009b78:	4608      	mov	r0, r1
 8009b7a:	602b      	str	r3, [r5, #0]
 8009b7c:	f7f9 fc67 	bl	800344e <_isatty>
 8009b80:	1c43      	adds	r3, r0, #1
 8009b82:	d102      	bne.n	8009b8a <_isatty_r+0x1a>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	b103      	cbz	r3, 8009b8a <_isatty_r+0x1a>
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	20016648 	.word	0x20016648

08009b90 <_lseek_r>:
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4d07      	ldr	r5, [pc, #28]	; (8009bb0 <_lseek_r+0x20>)
 8009b94:	4604      	mov	r4, r0
 8009b96:	4608      	mov	r0, r1
 8009b98:	4611      	mov	r1, r2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	602a      	str	r2, [r5, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f7f9 fc60 	bl	8003464 <_lseek>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d102      	bne.n	8009bae <_lseek_r+0x1e>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	b103      	cbz	r3, 8009bae <_lseek_r+0x1e>
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	20016648 	.word	0x20016648

08009bb4 <__ascii_mbtowc>:
 8009bb4:	b082      	sub	sp, #8
 8009bb6:	b901      	cbnz	r1, 8009bba <__ascii_mbtowc+0x6>
 8009bb8:	a901      	add	r1, sp, #4
 8009bba:	b142      	cbz	r2, 8009bce <__ascii_mbtowc+0x1a>
 8009bbc:	b14b      	cbz	r3, 8009bd2 <__ascii_mbtowc+0x1e>
 8009bbe:	7813      	ldrb	r3, [r2, #0]
 8009bc0:	600b      	str	r3, [r1, #0]
 8009bc2:	7812      	ldrb	r2, [r2, #0]
 8009bc4:	1e10      	subs	r0, r2, #0
 8009bc6:	bf18      	it	ne
 8009bc8:	2001      	movne	r0, #1
 8009bca:	b002      	add	sp, #8
 8009bcc:	4770      	bx	lr
 8009bce:	4610      	mov	r0, r2
 8009bd0:	e7fb      	b.n	8009bca <__ascii_mbtowc+0x16>
 8009bd2:	f06f 0001 	mvn.w	r0, #1
 8009bd6:	e7f8      	b.n	8009bca <__ascii_mbtowc+0x16>

08009bd8 <__malloc_lock>:
 8009bd8:	4801      	ldr	r0, [pc, #4]	; (8009be0 <__malloc_lock+0x8>)
 8009bda:	f7ff b8c0 	b.w	8008d5e <__retarget_lock_acquire_recursive>
 8009bde:	bf00      	nop
 8009be0:	2001663c 	.word	0x2001663c

08009be4 <__malloc_unlock>:
 8009be4:	4801      	ldr	r0, [pc, #4]	; (8009bec <__malloc_unlock+0x8>)
 8009be6:	f7ff b8bb 	b.w	8008d60 <__retarget_lock_release_recursive>
 8009bea:	bf00      	nop
 8009bec:	2001663c 	.word	0x2001663c

08009bf0 <_read_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	4d07      	ldr	r5, [pc, #28]	; (8009c10 <_read_r+0x20>)
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	4608      	mov	r0, r1
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	602a      	str	r2, [r5, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	f7f9 fbec 	bl	80033dc <_read>
 8009c04:	1c43      	adds	r3, r0, #1
 8009c06:	d102      	bne.n	8009c0e <_read_r+0x1e>
 8009c08:	682b      	ldr	r3, [r5, #0]
 8009c0a:	b103      	cbz	r3, 8009c0e <_read_r+0x1e>
 8009c0c:	6023      	str	r3, [r4, #0]
 8009c0e:	bd38      	pop	{r3, r4, r5, pc}
 8009c10:	20016648 	.word	0x20016648

08009c14 <__ascii_wctomb>:
 8009c14:	b149      	cbz	r1, 8009c2a <__ascii_wctomb+0x16>
 8009c16:	2aff      	cmp	r2, #255	; 0xff
 8009c18:	bf85      	ittet	hi
 8009c1a:	238a      	movhi	r3, #138	; 0x8a
 8009c1c:	6003      	strhi	r3, [r0, #0]
 8009c1e:	700a      	strbls	r2, [r1, #0]
 8009c20:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c24:	bf98      	it	ls
 8009c26:	2001      	movls	r0, #1
 8009c28:	4770      	bx	lr
 8009c2a:	4608      	mov	r0, r1
 8009c2c:	4770      	bx	lr

08009c2e <abort>:
 8009c2e:	b508      	push	{r3, lr}
 8009c30:	2006      	movs	r0, #6
 8009c32:	f000 f82b 	bl	8009c8c <raise>
 8009c36:	2001      	movs	r0, #1
 8009c38:	f7f9 fbc6 	bl	80033c8 <_exit>

08009c3c <_raise_r>:
 8009c3c:	291f      	cmp	r1, #31
 8009c3e:	b538      	push	{r3, r4, r5, lr}
 8009c40:	4604      	mov	r4, r0
 8009c42:	460d      	mov	r5, r1
 8009c44:	d904      	bls.n	8009c50 <_raise_r+0x14>
 8009c46:	2316      	movs	r3, #22
 8009c48:	6003      	str	r3, [r0, #0]
 8009c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4e:	bd38      	pop	{r3, r4, r5, pc}
 8009c50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c52:	b112      	cbz	r2, 8009c5a <_raise_r+0x1e>
 8009c54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c58:	b94b      	cbnz	r3, 8009c6e <_raise_r+0x32>
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f000 f830 	bl	8009cc0 <_getpid_r>
 8009c60:	462a      	mov	r2, r5
 8009c62:	4601      	mov	r1, r0
 8009c64:	4620      	mov	r0, r4
 8009c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c6a:	f000 b817 	b.w	8009c9c <_kill_r>
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d00a      	beq.n	8009c88 <_raise_r+0x4c>
 8009c72:	1c59      	adds	r1, r3, #1
 8009c74:	d103      	bne.n	8009c7e <_raise_r+0x42>
 8009c76:	2316      	movs	r3, #22
 8009c78:	6003      	str	r3, [r0, #0]
 8009c7a:	2001      	movs	r0, #1
 8009c7c:	e7e7      	b.n	8009c4e <_raise_r+0x12>
 8009c7e:	2400      	movs	r4, #0
 8009c80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c84:	4628      	mov	r0, r5
 8009c86:	4798      	blx	r3
 8009c88:	2000      	movs	r0, #0
 8009c8a:	e7e0      	b.n	8009c4e <_raise_r+0x12>

08009c8c <raise>:
 8009c8c:	4b02      	ldr	r3, [pc, #8]	; (8009c98 <raise+0xc>)
 8009c8e:	4601      	mov	r1, r0
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	f7ff bfd3 	b.w	8009c3c <_raise_r>
 8009c96:	bf00      	nop
 8009c98:	2000004c 	.word	0x2000004c

08009c9c <_kill_r>:
 8009c9c:	b538      	push	{r3, r4, r5, lr}
 8009c9e:	4d07      	ldr	r5, [pc, #28]	; (8009cbc <_kill_r+0x20>)
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	4608      	mov	r0, r1
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	602b      	str	r3, [r5, #0]
 8009caa:	f7f9 fb7d 	bl	80033a8 <_kill>
 8009cae:	1c43      	adds	r3, r0, #1
 8009cb0:	d102      	bne.n	8009cb8 <_kill_r+0x1c>
 8009cb2:	682b      	ldr	r3, [r5, #0]
 8009cb4:	b103      	cbz	r3, 8009cb8 <_kill_r+0x1c>
 8009cb6:	6023      	str	r3, [r4, #0]
 8009cb8:	bd38      	pop	{r3, r4, r5, pc}
 8009cba:	bf00      	nop
 8009cbc:	20016648 	.word	0x20016648

08009cc0 <_getpid_r>:
 8009cc0:	f7f9 bb6a 	b.w	8003398 <_getpid>

08009cc4 <_init>:
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	bf00      	nop
 8009cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cca:	bc08      	pop	{r3}
 8009ccc:	469e      	mov	lr, r3
 8009cce:	4770      	bx	lr

08009cd0 <_fini>:
 8009cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd2:	bf00      	nop
 8009cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cd6:	bc08      	pop	{r3}
 8009cd8:	469e      	mov	lr, r3
 8009cda:	4770      	bx	lr
