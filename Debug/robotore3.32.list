
robotore3.32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08009758  08009758  00019758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b54  08009b54  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  08009b54  08009b54  00019b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b5c  08009b5c  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b5c  08009b5c  00019b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b60  08009b60  00019b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08009b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020218  2**0
                  CONTENTS
 10 .bss          00000454  20000218  20000218  00020218  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000066c  2000066c  00020218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015de2  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c8f  00000000  00000000  0003602a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00038cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001298  00000000  00000000  0003a068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002308b  00000000  00000000  0003b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018760  00000000  00000000  0005e38b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d38e2  00000000  00000000  00076aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a3cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006428  00000000  00000000  0014a420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009740 	.word	0x08009740

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08009740 	.word	0x08009740

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <LED_RGB>:
//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3


void LED_RGB(int i){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

	switch (i)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	2b06      	cmp	r3, #6
 8000f9a:	f200 8088 	bhi.w	80010ae <LED_RGB+0x122>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <LED_RGB+0x18>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08000fc1 	.word	0x08000fc1
 8000fa8:	08000fe3 	.word	0x08000fe3
 8000fac:	08001005 	.word	0x08001005
 8000fb0:	08001027 	.word	0x08001027
 8000fb4:	08001049 	.word	0x08001049
 8000fb8:	0800106b 	.word	0x0800106b
 8000fbc:	0800108d 	.word	0x0800108d
	            {
	            case 1://R
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	4844      	ldr	r0, [pc, #272]	; (80010d8 <LED_RGB+0x14c>)
 8000fc6:	f003 fc7f 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2110      	movs	r1, #16
 8000fce:	4842      	ldr	r0, [pc, #264]	; (80010d8 <LED_RGB+0x14c>)
 8000fd0:	f003 fc7a 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fda:	4840      	ldr	r0, [pc, #256]	; (80010dc <LED_RGB+0x150>)
 8000fdc:	f003 fc74 	bl	80048c8 <HAL_GPIO_WritePin>

	                break;
 8000fe0:	e076      	b.n	80010d0 <LED_RGB+0x144>

	            case 2://G
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2120      	movs	r1, #32
 8000fe6:	483c      	ldr	r0, [pc, #240]	; (80010d8 <LED_RGB+0x14c>)
 8000fe8:	f003 fc6e 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8000fec:	2200      	movs	r2, #0
 8000fee:	2110      	movs	r1, #16
 8000ff0:	4839      	ldr	r0, [pc, #228]	; (80010d8 <LED_RGB+0x14c>)
 8000ff2:	f003 fc69 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffc:	4837      	ldr	r0, [pc, #220]	; (80010dc <LED_RGB+0x150>)
 8000ffe:	f003 fc63 	bl	80048c8 <HAL_GPIO_WritePin>

	                break;
 8001002:	e065      	b.n	80010d0 <LED_RGB+0x144>

	            case 3://B
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 8001004:	2201      	movs	r2, #1
 8001006:	2120      	movs	r1, #32
 8001008:	4833      	ldr	r0, [pc, #204]	; (80010d8 <LED_RGB+0x14c>)
 800100a:	f003 fc5d 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 800100e:	2201      	movs	r2, #1
 8001010:	2110      	movs	r1, #16
 8001012:	4831      	ldr	r0, [pc, #196]	; (80010d8 <LED_RGB+0x14c>)
 8001014:	f003 fc58 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101e:	482f      	ldr	r0, [pc, #188]	; (80010dc <LED_RGB+0x150>)
 8001020:	f003 fc52 	bl	80048c8 <HAL_GPIO_WritePin>

	                break;
 8001024:	e054      	b.n	80010d0 <LED_RGB+0x144>

	            case 4://y
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 8001026:	2200      	movs	r2, #0
 8001028:	2120      	movs	r1, #32
 800102a:	482b      	ldr	r0, [pc, #172]	; (80010d8 <LED_RGB+0x14c>)
 800102c:	f003 fc4c 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8001030:	2200      	movs	r2, #0
 8001032:	2110      	movs	r1, #16
 8001034:	4828      	ldr	r0, [pc, #160]	; (80010d8 <LED_RGB+0x14c>)
 8001036:	f003 fc47 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001040:	4826      	ldr	r0, [pc, #152]	; (80010dc <LED_RGB+0x150>)
 8001042:	f003 fc41 	bl	80048c8 <HAL_GPIO_WritePin>

	                break;
 8001046:	e043      	b.n	80010d0 <LED_RGB+0x144>

	            case 5://pink
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 8001048:	2200      	movs	r2, #0
 800104a:	2120      	movs	r1, #32
 800104c:	4822      	ldr	r0, [pc, #136]	; (80010d8 <LED_RGB+0x14c>)
 800104e:	f003 fc3b 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 8001052:	2201      	movs	r2, #1
 8001054:	2110      	movs	r1, #16
 8001056:	4820      	ldr	r0, [pc, #128]	; (80010d8 <LED_RGB+0x14c>)
 8001058:	f003 fc36 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001062:	481e      	ldr	r0, [pc, #120]	; (80010dc <LED_RGB+0x150>)
 8001064:	f003 fc30 	bl	80048c8 <HAL_GPIO_WritePin>

	                break;
 8001068:	e032      	b.n	80010d0 <LED_RGB+0x144>

	            case 6://white
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);//R_1-2
 800106a:	2200      	movs	r2, #0
 800106c:	2120      	movs	r1, #32
 800106e:	481a      	ldr	r0, [pc, #104]	; (80010d8 <LED_RGB+0x14c>)
 8001070:	f003 fc2a 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	4817      	ldr	r0, [pc, #92]	; (80010d8 <LED_RGB+0x14c>)
 800107a:	f003 fc25 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001084:	4815      	ldr	r0, [pc, #84]	; (80010dc <LED_RGB+0x150>)
 8001086:	f003 fc1f 	bl	80048c8 <HAL_GPIO_WritePin>

	                break;
 800108a:	e021      	b.n	80010d0 <LED_RGB+0x144>

	            case 7://Cyan
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 800108c:	2201      	movs	r2, #1
 800108e:	2120      	movs	r1, #32
 8001090:	4811      	ldr	r0, [pc, #68]	; (80010d8 <LED_RGB+0x14c>)
 8001092:	f003 fc19 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//G_1-4
 8001096:	2200      	movs	r2, #0
 8001098:	2110      	movs	r1, #16
 800109a:	480f      	ldr	r0, [pc, #60]	; (80010d8 <LED_RGB+0x14c>)
 800109c:	f003 fc14 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);//B_1-3
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <LED_RGB+0x150>)
 80010a8:	f003 fc0e 	bl	80048c8 <HAL_GPIO_WritePin>

	                break;
 80010ac:	e010      	b.n	80010d0 <LED_RGB+0x144>

	            default:
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);//R_1-2
 80010ae:	2201      	movs	r2, #1
 80010b0:	2120      	movs	r1, #32
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <LED_RGB+0x14c>)
 80010b4:	f003 fc08 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_1-4
 80010b8:	2201      	movs	r2, #1
 80010ba:	2110      	movs	r1, #16
 80010bc:	4806      	ldr	r0, [pc, #24]	; (80010d8 <LED_RGB+0x14c>)
 80010be:	f003 fc03 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//B_1-3
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <LED_RGB+0x150>)
 80010ca:	f003 fbfd 	bl	80048c8 <HAL_GPIO_WritePin>
	                break;
 80010ce:	bf00      	nop
	            }


}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40020000 	.word	0x40020000

080010e0 <LED_RGB_2>:

void LED_RGB_2(int n){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

	switch (n)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	2b06      	cmp	r3, #6
 80010ee:	f200 8095 	bhi.w	800121c <LED_RGB_2+0x13c>
 80010f2:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <LED_RGB_2+0x18>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	08001115 	.word	0x08001115
 80010fc:	08001139 	.word	0x08001139
 8001100:	0800115f 	.word	0x0800115f
 8001104:	08001185 	.word	0x08001185
 8001108:	080011ab 	.word	0x080011ab
 800110c:	080011d1 	.word	0x080011d1
 8001110:	080011f7 	.word	0x080011f7
	            {
	            case 1://R
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111a:	484c      	ldr	r0, [pc, #304]	; (800124c <LED_RGB_2+0x16c>)
 800111c:	f003 fbd4 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//G_2-4
 8001120:	2201      	movs	r2, #1
 8001122:	2110      	movs	r1, #16
 8001124:	4849      	ldr	r0, [pc, #292]	; (800124c <LED_RGB_2+0x16c>)
 8001126:	f003 fbcf 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001130:	4846      	ldr	r0, [pc, #280]	; (800124c <LED_RGB_2+0x16c>)
 8001132:	f003 fbc9 	bl	80048c8 <HAL_GPIO_WritePin>

	                break;
 8001136:	e084      	b.n	8001242 <LED_RGB_2+0x162>

	            case 2://G
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113e:	4843      	ldr	r0, [pc, #268]	; (800124c <LED_RGB_2+0x16c>)
 8001140:	f003 fbc2 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114a:	4840      	ldr	r0, [pc, #256]	; (800124c <LED_RGB_2+0x16c>)
 800114c:	f003 fbbc 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001156:	483d      	ldr	r0, [pc, #244]	; (800124c <LED_RGB_2+0x16c>)
 8001158:	f003 fbb6 	bl	80048c8 <HAL_GPIO_WritePin>
	                break;
 800115c:	e071      	b.n	8001242 <LED_RGB_2+0x162>

	            case 3://B
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001164:	4839      	ldr	r0, [pc, #228]	; (800124c <LED_RGB_2+0x16c>)
 8001166:	f003 fbaf 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001170:	4836      	ldr	r0, [pc, #216]	; (800124c <LED_RGB_2+0x16c>)
 8001172:	f003 fba9 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117c:	4833      	ldr	r0, [pc, #204]	; (800124c <LED_RGB_2+0x16c>)
 800117e:	f003 fba3 	bl	80048c8 <HAL_GPIO_WritePin>
	                break;
 8001182:	e05e      	b.n	8001242 <LED_RGB_2+0x162>

	            case 4://y
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118a:	4830      	ldr	r0, [pc, #192]	; (800124c <LED_RGB_2+0x16c>)
 800118c:	f003 fb9c 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	482d      	ldr	r0, [pc, #180]	; (800124c <LED_RGB_2+0x16c>)
 8001198:	f003 fb96 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a2:	482a      	ldr	r0, [pc, #168]	; (800124c <LED_RGB_2+0x16c>)
 80011a4:	f003 fb90 	bl	80048c8 <HAL_GPIO_WritePin>

	                break;
 80011a8:	e04b      	b.n	8001242 <LED_RGB_2+0x162>

	            case 5://pink
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b0:	4826      	ldr	r0, [pc, #152]	; (800124c <LED_RGB_2+0x16c>)
 80011b2:	f003 fb89 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011bc:	4823      	ldr	r0, [pc, #140]	; (800124c <LED_RGB_2+0x16c>)
 80011be:	f003 fb83 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c8:	4820      	ldr	r0, [pc, #128]	; (800124c <LED_RGB_2+0x16c>)
 80011ca:	f003 fb7d 	bl	80048c8 <HAL_GPIO_WritePin>

	                break;
 80011ce:	e038      	b.n	8001242 <LED_RGB_2+0x162>

	            case 6://white
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//R_2-2
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d6:	481d      	ldr	r0, [pc, #116]	; (800124c <LED_RGB_2+0x16c>)
 80011d8:	f003 fb76 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e2:	481a      	ldr	r0, [pc, #104]	; (800124c <LED_RGB_2+0x16c>)
 80011e4:	f003 fb70 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ee:	4817      	ldr	r0, [pc, #92]	; (800124c <LED_RGB_2+0x16c>)
 80011f0:	f003 fb6a 	bl	80048c8 <HAL_GPIO_WritePin>
	                break;
 80011f4:	e025      	b.n	8001242 <LED_RGB_2+0x162>

	            case 7://Cyan
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011fc:	4813      	ldr	r0, [pc, #76]	; (800124c <LED_RGB_2+0x16c>)
 80011fe:	f003 fb63 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//G_2-4
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001208:	4810      	ldr	r0, [pc, #64]	; (800124c <LED_RGB_2+0x16c>)
 800120a:	f003 fb5d 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//B_2-3
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <LED_RGB_2+0x16c>)
 8001216:	f003 fb57 	bl	80048c8 <HAL_GPIO_WritePin>

	                break;
 800121a:	e012      	b.n	8001242 <LED_RGB_2+0x162>

	            default:
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//R_2-2
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001222:	480a      	ldr	r0, [pc, #40]	; (800124c <LED_RGB_2+0x16c>)
 8001224:	f003 fb50 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//G_2-4
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <LED_RGB_2+0x16c>)
 8001230:	f003 fb4a 	bl	80048c8 <HAL_GPIO_WritePin>
	            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//B_2-3
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <LED_RGB_2+0x16c>)
 800123c:	f003 fb44 	bl	80048c8 <HAL_GPIO_WritePin>
	                break;
 8001240:	bf00      	nop
	            }


}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40020400 	.word	0x40020400

08001250 <ButtonPress>:

int mode =0;
int calibrate_count =0;
//int mode_processed;

void ButtonPress(void){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	mode=0;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <ButtonPress+0x70>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
	LED_RGB_2(6);
 800125a:	2006      	movs	r0, #6
 800125c:	f7ff ff40 	bl	80010e0 <LED_RGB_2>
	HAL_Delay(1000);
 8001260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001264:	f002 f8ce 	bl	8003404 <HAL_Delay>

	while(1){
    if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_RESET)//SW1
 8001268:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126c:	4815      	ldr	r0, [pc, #84]	; (80012c4 <ButtonPress+0x74>)
 800126e:	f003 fb13 	bl	8004898 <HAL_GPIO_ReadPin>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d104      	bne.n	8001282 <ButtonPress+0x32>
    {
    	HAL_Delay(1000);
 8001278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127c:	f002 f8c2 	bl	8003404 <HAL_Delay>
    	break;
 8001280:	e01c      	b.n	80012bc <ButtonPress+0x6c>

    }

    if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15) == GPIO_PIN_RESET)//SW2
 8001282:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001286:	4810      	ldr	r0, [pc, #64]	; (80012c8 <ButtonPress+0x78>)
 8001288:	f003 fb06 	bl	8004898 <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1ea      	bne.n	8001268 <ButtonPress+0x18>
    {
    	mode++;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <ButtonPress+0x70>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <ButtonPress+0x70>)
 800129a:	6013      	str	r3, [r2, #0]
    	LED_RGB(mode);
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <ButtonPress+0x70>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fe73 	bl	8000f8c <LED_RGB>
		HAL_Delay(200);
 80012a6:	20c8      	movs	r0, #200	; 0xc8
 80012a8:	f002 f8ac 	bl	8003404 <HAL_Delay>

        if(mode >7){
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <ButtonPress+0x70>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b07      	cmp	r3, #7
 80012b2:	ddd9      	ble.n	8001268 <ButtonPress+0x18>
        	mode = 0;
 80012b4:	4b02      	ldr	r3, [pc, #8]	; (80012c0 <ButtonPress+0x70>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_RESET)//SW1
 80012ba:	e7d5      	b.n	8001268 <ButtonPress+0x18>
//        mode_processed = 0;
     //   LED_RGB(0);
    }
	}

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000234 	.word	0x20000234
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020400 	.word	0x40020400
 80012cc:	00000000 	.word	0x00000000

080012d0 <mode_test>:



void mode_test(void){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0


  switch(mode)
 80012d4:	4b52      	ldr	r3, [pc, #328]	; (8001420 <mode_test+0x150>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	2b06      	cmp	r3, #6
 80012dc:	f200 8094 	bhi.w	8001408 <mode_test+0x138>
 80012e0:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <mode_test+0x18>)
 80012e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e6:	bf00      	nop
 80012e8:	08001305 	.word	0x08001305
 80012ec:	08001323 	.word	0x08001323
 80012f0:	0800135d 	.word	0x0800135d
 80012f4:	0800137f 	.word	0x0800137f
 80012f8:	080013a3 	.word	0x080013a3
 80012fc:	080013c5 	.word	0x080013c5
 8001300:	080013e7 	.word	0x080013e7
	  {
	  case 1:
		  LED_RGB(mode);
 8001304:	4b46      	ldr	r3, [pc, #280]	; (8001420 <mode_test+0x150>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fe3f 	bl	8000f8c <LED_RGB>
		  if(calibrate_count == 0){
 800130e:	4b45      	ldr	r3, [pc, #276]	; (8001424 <mode_test+0x154>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d17c      	bne.n	8001410 <mode_test+0x140>
			  calibrate_sensors();
 8001316:	f000 ff9d 	bl	8002254 <calibrate_sensors>
			  calibrate_count = 1;
 800131a:	4b42      	ldr	r3, [pc, #264]	; (8001424 <mode_test+0x154>)
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
//		  base_speed1=0;




		  break;
 8001320:	e076      	b.n	8001410 <mode_test+0x140>

	  case 2:
		  LED_RGB(mode);
 8001322:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <mode_test+0x150>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fe30 	bl	8000f8c <LED_RGB>

		  LED_RGB_2(3);
 800132c:	2003      	movs	r0, #3
 800132e:	f7ff fed7 	bl	80010e0 <LED_RGB_2>
		  LED_RGB(3);
 8001332:	2003      	movs	r0, #3
 8001334:	f7ff fe2a 	bl	8000f8c <LED_RGB>
		  target_speed =1.4;
 8001338:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <mode_test+0x158>)
 800133a:	4a3c      	ldr	r2, [pc, #240]	; (800142c <mode_test+0x15c>)
 800133c:	601a      	str	r2, [r3, #0]

	//	while(1);
		  HAL_TIM_Base_Start_IT(&htim6);
 800133e:	483c      	ldr	r0, [pc, #240]	; (8001430 <mode_test+0x160>)
 8001340:	f004 f950 	bl	80055e4 <HAL_TIM_Base_Start_IT>
		  test_DD();
 8001344:	f000 f888 	bl	8001458 <test_DD>
//		HAL_TIM_Base_Stop_IT(&htim6);
		ControlMotor(0, 0);
 8001348:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8001418 <mode_test+0x148>
 800134c:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8001418 <mode_test+0x148>
 8001350:	f000 f914 	bl	800157c <ControlMotor>
		  LED_RGB(0);
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff fe19 	bl	8000f8c <LED_RGB>
//		  base_speed1=0;
		  break;
 800135a:	e05a      	b.n	8001412 <mode_test+0x142>


	  case 3:
		  LED_RGB(mode);
 800135c:	4b30      	ldr	r3, [pc, #192]	; (8001420 <mode_test+0x150>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fe13 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff fe10 	bl	8000f8c <LED_RGB>


		  target_speed =1.8;
 800136c:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <mode_test+0x158>)
 800136e:	4a31      	ldr	r2, [pc, #196]	; (8001434 <mode_test+0x164>)
 8001370:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 8001372:	482f      	ldr	r0, [pc, #188]	; (8001430 <mode_test+0x160>)
 8001374:	f004 f936 	bl	80055e4 <HAL_TIM_Base_Start_IT>
		  test_DD();
 8001378:	f000 f86e 	bl	8001458 <test_DD>
//		  base_speed1=-125;


		  break;
 800137c:	e049      	b.n	8001412 <mode_test+0x142>

	  case 4:
		  LED_RGB(mode);
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <mode_test+0x150>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fe02 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 8001388:	2000      	movs	r0, #0
 800138a:	f7ff fdff 	bl	8000f8c <LED_RGB>

		  target_speed =2.0;
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <mode_test+0x158>)
 8001390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001394:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 8001396:	4826      	ldr	r0, [pc, #152]	; (8001430 <mode_test+0x160>)
 8001398:	f004 f924 	bl	80055e4 <HAL_TIM_Base_Start_IT>
		  test_DD();
 800139c:	f000 f85c 	bl	8001458 <test_DD>

//		  base_speed1=-127;
		  break;
 80013a0:	e037      	b.n	8001412 <mode_test+0x142>


	  case 5:
		  LED_RGB(mode);
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <mode_test+0x150>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fdf0 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff fded 	bl	8000f8c <LED_RGB>

		  target_speed =2.8;
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <mode_test+0x158>)
 80013b4:	4a20      	ldr	r2, [pc, #128]	; (8001438 <mode_test+0x168>)
 80013b6:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 80013b8:	481d      	ldr	r0, [pc, #116]	; (8001430 <mode_test+0x160>)
 80013ba:	f004 f913 	bl	80055e4 <HAL_TIM_Base_Start_IT>
		  test_DD();
 80013be:	f000 f84b 	bl	8001458 <test_DD>

//		  base_speed1=-129;

		  break;
 80013c2:	e026      	b.n	8001412 <mode_test+0x142>

	  case 6:
		  LED_RGB(mode);
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <mode_test+0x150>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fddf 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff fddc 	bl	8000f8c <LED_RGB>

		  target_speed =3.1;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <mode_test+0x158>)
 80013d6:	4a19      	ldr	r2, [pc, #100]	; (800143c <mode_test+0x16c>)
 80013d8:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 80013da:	4815      	ldr	r0, [pc, #84]	; (8001430 <mode_test+0x160>)
 80013dc:	f004 f902 	bl	80055e4 <HAL_TIM_Base_Start_IT>
		  test_DD();
 80013e0:	f000 f83a 	bl	8001458 <test_DD>

//		  base_speed1=-129;

		  break;
 80013e4:	e015      	b.n	8001412 <mode_test+0x142>

	  case 7:
		  LED_RGB(mode);
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <mode_test+0x150>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fdce 	bl	8000f8c <LED_RGB>
//		  HAL_TIM_Base_Start_IT(&htim6);
		  LED_RGB(0);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff fdcb 	bl	8000f8c <LED_RGB>

		  target_speed =3.2;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <mode_test+0x158>)
 80013f8:	4a11      	ldr	r2, [pc, #68]	; (8001440 <mode_test+0x170>)
 80013fa:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <mode_test+0x160>)
 80013fe:	f004 f8f1 	bl	80055e4 <HAL_TIM_Base_Start_IT>
		  test_DD();
 8001402:	f000 f829 	bl	8001458 <test_DD>

//		  base_speed1=-129;

		  break;
 8001406:	e004      	b.n	8001412 <mode_test+0x142>

	  default:
		  LED_RGB(7);
 8001408:	2007      	movs	r0, #7
 800140a:	f7ff fdbf 	bl	8000f8c <LED_RGB>
//		  base_speed1=0;
//		  target_speed =0.0;



		  break;
 800140e:	e000      	b.n	8001412 <mode_test+0x142>
		  break;
 8001410:	bf00      	nop

	  }
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
	...
 8001420:	20000234 	.word	0x20000234
 8001424:	20000238 	.word	0x20000238
 8001428:	20000634 	.word	0x20000634
 800142c:	3fb33333 	.word	0x3fb33333
 8001430:	200004b8 	.word	0x200004b8
 8001434:	3fe66666 	.word	0x3fe66666
 8001438:	40333333 	.word	0x40333333
 800143c:	40466666 	.word	0x40466666
 8001440:	404ccccd 	.word	0x404ccccd

08001444 <change_mode>:

void change_mode(){
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	ButtonPress();
 8001448:	f7ff ff02 	bl	8001250 <ButtonPress>
	mode_test();
 800144c:	f7ff ff40 	bl	80012d0 <mode_test>
//		calculateEncoderSpeed();

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	0000      	movs	r0, r0
	...

08001458 <test_DD>:

void test_DD(){
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	test_flag =0;
 800145c:	4b3c      	ldr	r3, [pc, #240]	; (8001550 <test_DD+0xf8>)
 800145e:	2200      	movs	r2, #0
 8001460:	801a      	strh	r2, [r3, #0]
	TIM4 -> CNT=32767;
 8001462:	4b3c      	ldr	r3, [pc, #240]	; (8001554 <test_DD+0xfc>)
 8001464:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3 -> CNT=32767;
 800146a:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <test_DD+0x100>)
 800146c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
	LED_RGB_2(3);
 8001472:	2003      	movs	r0, #3
 8001474:	f7ff fe34 	bl	80010e0 <LED_RGB_2>
//		readSens2();
//		test_flag = 1;

		//change_mode();

		if (Line3_sens[1] == 0 && cross_flag ==0) {
 8001478:	4b38      	ldr	r3, [pc, #224]	; (800155c <test_DD+0x104>)
 800147a:	edd3 7a01 	vldr	s15, [r3, #4]
 800147e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001486:	d113      	bne.n	80014b0 <test_DD+0x58>
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <test_DD+0x108>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10f      	bne.n	80014b0 <test_DD+0x58>
			while (1) {

				if (Line3_sens[1] == 1) {
 8001490:	4b32      	ldr	r3, [pc, #200]	; (800155c <test_DD+0x104>)
 8001492:	edd3 7a01 	vldr	s15, [r3, #4]
 8001496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800149a:	eef4 7a47 	vcmp.f32	s15, s14
 800149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a2:	d1f5      	bne.n	8001490 <test_DD+0x38>
					test_flag++;
 80014a4:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <test_DD+0xf8>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <test_DD+0xf8>)
 80014ae:	801a      	strh	r2, [r3, #0]
					break;
				}
			}
		}

		if (test_flag >= 2) {
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <test_DD+0xf8>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d9df      	bls.n	8001478 <test_DD+0x20>
				LED_RGB_2(7);
 80014b8:	2007      	movs	r0, #7
 80014ba:	f7ff fe11 	bl	80010e0 <LED_RGB_2>
				HAL_TIM_Base_Stop_IT(&htim6);
 80014be:	4829      	ldr	r0, [pc, #164]	; (8001564 <test_DD+0x10c>)
 80014c0:	f004 f900 	bl	80056c4 <HAL_TIM_Base_Stop_IT>
				ControlMotor(0, 0);
 80014c4:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8001548 <test_DD+0xf0>
 80014c8:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001548 <test_DD+0xf0>
 80014cc:	f000 f856 	bl	800157c <ControlMotor>
			break;
 80014d0:	bf00      	nop

		}

	}

	calculateEncoderSpeed();
 80014d2:	f001 f82d 	bl	8002530 <calculateEncoderSpeed>
	HAL_TIM_Base_Start_IT(&htim6);
 80014d6:	4823      	ldr	r0, [pc, #140]	; (8001564 <test_DD+0x10c>)
 80014d8:	f004 f884 	bl	80055e4 <HAL_TIM_Base_Start_IT>


	 accumulation = 0;
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <test_DD+0x110>)
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
	 target_speed = 1.1;
 80014e4:	4b21      	ldr	r3, [pc, #132]	; (800156c <test_DD+0x114>)
 80014e6:	4a22      	ldr	r2, [pc, #136]	; (8001570 <test_DD+0x118>)
 80014e8:	601a      	str	r2, [r3, #0]
     calculateEncoderSpeed();
 80014ea:	f001 f821 	bl	8002530 <calculateEncoderSpeed>
 	LED_RGB_2(5);
 80014ee:	2005      	movs	r0, #5
 80014f0:	f7ff fdf6 	bl	80010e0 <LED_RGB_2>



	    while (accumulation < 45) {
 80014f4:	e00d      	b.n	8001512 <test_DD+0xba>
	        accumulation += distance_1ms;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <test_DD+0x110>)
 80014f8:	ed93 7a00 	vldr	s14, [r3]
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <test_DD+0x11c>)
 80014fe:	edd3 7a00 	vldr	s15, [r3]
 8001502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <test_DD+0x110>)
 8001508:	edc3 7a00 	vstr	s15, [r3]
//	        ControlMotor(110, 110);
	        HAL_Delay(10);
 800150c:	200a      	movs	r0, #10
 800150e:	f001 ff79 	bl	8003404 <HAL_Delay>
	    while (accumulation < 45) {
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <test_DD+0x110>)
 8001514:	edd3 7a00 	vldr	s15, [r3]
 8001518:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001578 <test_DD+0x120>
 800151c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001524:	d4e7      	bmi.n	80014f6 <test_DD+0x9e>
	    }


	LED_RGB_2(2);
 8001526:	2002      	movs	r0, #2
 8001528:	f7ff fdda 	bl	80010e0 <LED_RGB_2>
	HAL_TIM_Base_Stop_IT(&htim6);
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <test_DD+0x10c>)
 800152e:	f004 f8c9 	bl	80056c4 <HAL_TIM_Base_Stop_IT>
	ControlMotor(0, 0);
 8001532:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8001548 <test_DD+0xf0>
 8001536:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8001548 <test_DD+0xf0>
 800153a:	f000 f81f 	bl	800157c <ControlMotor>
	return 0;
 800153e:	bf00      	nop
}
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	f3af 8000 	nop.w
	...
 8001550:	2000023c 	.word	0x2000023c
 8001554:	40000800 	.word	0x40000800
 8001558:	40000400 	.word	0x40000400
 800155c:	200005a0 	.word	0x200005a0
 8001560:	20000638 	.word	0x20000638
 8001564:	200004b8 	.word	0x200004b8
 8001568:	2000064c 	.word	0x2000064c
 800156c:	20000634 	.word	0x20000634
 8001570:	3f8ccccd 	.word	0x3f8ccccd
 8001574:	2000058c 	.word	0x2000058c
 8001578:	42340000 	.word	0x42340000

0800157c <ControlMotor>:
//#define REDUCTION_RATIO 0.4 // 減速比
//#define DISTANCE_PER_CNT (M_PI * TIRE * REDUCTION_RATIO / ENCODER_CPR) //[mm per cnt]
//float distance_1ms,distance_1ms_L,distance_1ms_R;


void ControlMotor(double duty_L, double duty_R){
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	ed87 0b04 	vstr	d0, [r7, #16]
 8001586:	ed87 1b02 	vstr	d1, [r7, #8]

    if (duty_L >= 0) {
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001596:	f7ff fab5 	bl	8000b04 <__aeabi_dcmpge>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00e      	beq.n	80015be <ControlMotor+0x42>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // PH-HIGH(+)
 80015a0:	2201      	movs	r2, #1
 80015a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a6:	4828      	ldr	r0, [pc, #160]	; (8001648 <ControlMotor+0xcc>)
 80015a8:	f003 f98e 	bl	80048c8 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim8,TIM_CHANNEL_4, duty_L);
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <ControlMotor+0xd0>)
 80015ae:	681e      	ldr	r6, [r3, #0]
 80015b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015b4:	f7ff faf8 	bl	8000ba8 <__aeabi_d2uiz>
 80015b8:	4603      	mov	r3, r0
 80015ba:	6433      	str	r3, [r6, #64]	; 0x40
 80015bc:	e013      	b.n	80015e6 <ControlMotor+0x6a>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // PH-LOW(-)
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c4:	4820      	ldr	r0, [pc, #128]	; (8001648 <ControlMotor+0xcc>)
 80015c6:	f003 f97f 	bl	80048c8 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim8,TIM_CHANNEL_4, -duty_L);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <ControlMotor+0xd0>)
 80015d8:	681e      	ldr	r6, [r3, #0]
 80015da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015de:	f7ff fae3 	bl	8000ba8 <__aeabi_d2uiz>
 80015e2:	4603      	mov	r3, r0
 80015e4:	6433      	str	r3, [r6, #64]	; 0x40
    }
    if (duty_R >= 0) {
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015f2:	f7ff fa87 	bl	8000b04 <__aeabi_dcmpge>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00e      	beq.n	800161a <ControlMotor+0x9e>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // PH-HIGH(+)
 80015fc:	2201      	movs	r2, #1
 80015fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001602:	4813      	ldr	r0, [pc, #76]	; (8001650 <ControlMotor+0xd4>)
 8001604:	f003 f960 	bl	80048c8 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim1,TIM_CHANNEL_2, duty_R);
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <ControlMotor+0xd8>)
 800160a:	681c      	ldr	r4, [r3, #0]
 800160c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001610:	f7ff faca 	bl	8000ba8 <__aeabi_d2uiz>
 8001614:	4603      	mov	r3, r0
 8001616:	63a3      	str	r3, [r4, #56]	; 0x38
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // PH-LOW(-)
        __HAL_TIM_SET_COMPARE( &htim1,TIM_CHANNEL_2, -duty_R);
        }
}
 8001618:	e011      	b.n	800163e <ControlMotor+0xc2>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // PH-LOW(-)
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001620:	480b      	ldr	r0, [pc, #44]	; (8001650 <ControlMotor+0xd4>)
 8001622:	f003 f951 	bl	80048c8 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE( &htim1,TIM_CHANNEL_2, -duty_R);
 8001626:	68bc      	ldr	r4, [r7, #8]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <ControlMotor+0xd8>)
 8001630:	681e      	ldr	r6, [r3, #0]
 8001632:	4620      	mov	r0, r4
 8001634:	4629      	mov	r1, r5
 8001636:	f7ff fab7 	bl	8000ba8 <__aeabi_d2uiz>
 800163a:	4603      	mov	r3, r0
 800163c:	63b3      	str	r3, [r6, #56]	; 0x38
}
 800163e:	bf00      	nop
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001646:	bf00      	nop
 8001648:	40020800 	.word	0x40020800
 800164c:	20000500 	.word	0x20000500
 8001650:	40020000 	.word	0x40020000
 8001654:	20000398 	.word	0x20000398

08001658 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	SpeedControl_NoENC();
 8001660:	f001 f8e2 	bl	8002828 <SpeedControl_NoENC>
//	calculateEncoderSpeed();


	readSens2();
 8001664:	f000 fdd2 	bl	800220c <readSens2>
//	EncoderSpeed();

}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {//ADC後にこ�???��?��関数が呼ばれる
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	//ADC後�???��?��処??��?��?
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	0000      	movs	r0, r0
	...

08001688 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800168c:	f001 fe48 	bl	8003320 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001690:	f000 f89a 	bl	80017c8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001694:	f000 fce6 	bl	8002064 <MX_GPIO_Init>
	MX_DMA_Init();
 8001698:	f000 fcc4 	bl	8002024 <MX_DMA_Init>
	MX_ADC1_Init();
 800169c:	f000 f8fe 	bl	800189c <MX_ADC1_Init>
	MX_TIM1_Init();
 80016a0:	f000 fa5a 	bl	8001b58 <MX_TIM1_Init>
	MX_TIM2_Init();
 80016a4:	f000 fadc 	bl	8001c60 <MX_TIM2_Init>
	MX_TIM4_Init();
 80016a8:	f000 fb86 	bl	8001db8 <MX_TIM4_Init>
	MX_TIM8_Init();
 80016ac:	f000 fc0e 	bl	8001ecc <MX_TIM8_Init>
	MX_TIM3_Init();
 80016b0:	f000 fb2e 	bl	8001d10 <MX_TIM3_Init>
	MX_I2C1_Init();
 80016b4:	f000 f9ec 	bl	8001a90 <MX_I2C1_Init>
	MX_SPI3_Init();
 80016b8:	f000 fa18 	bl	8001aec <MX_SPI3_Init>
	MX_USART6_UART_Init();
 80016bc:	f000 fc88 	bl	8001fd0 <MX_USART6_UART_Init>
	MX_TIM6_Init();
 80016c0:	f000 fbce 	bl	8001e60 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) Line_sens, 13) != HAL_OK) {
 80016c4:	220d      	movs	r2, #13
 80016c6:	4936      	ldr	r1, [pc, #216]	; (80017a0 <main+0x118>)
 80016c8:	4836      	ldr	r0, [pc, #216]	; (80017a4 <main+0x11c>)
 80016ca:	f001 ff03 	bl	80034d4 <HAL_ADC_Start_DMA>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <main+0x50>
		Error_Handler();
 80016d4:	f000 fd92 	bl	80021fc <Error_Handler>
	}
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);	//ENC1
 80016d8:	213c      	movs	r1, #60	; 0x3c
 80016da:	4833      	ldr	r0, [pc, #204]	; (80017a8 <main+0x120>)
 80016dc:	f004 fa2c 	bl	8005b38 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);	//ENC2
 80016e0:	213c      	movs	r1, #60	; 0x3c
 80016e2:	4832      	ldr	r0, [pc, #200]	; (80017ac <main+0x124>)
 80016e4:	f004 fa28 	bl	8005b38 <HAL_TIM_Encoder_Start_IT>

	//TIM4->CNT = OFFSET;
	//TIM3->CNT = OFFSET;

	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);	//DRVR
 80016e8:	2104      	movs	r1, #4
 80016ea:	4831      	ldr	r0, [pc, #196]	; (80017b0 <main+0x128>)
 80016ec:	f004 f868 	bl	80057c0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4);	//DRVL
 80016f0:	210c      	movs	r1, #12
 80016f2:	4830      	ldr	r0, [pc, #192]	; (80017b4 <main+0x12c>)
 80016f4:	f004 f864 	bl	80057c0 <HAL_TIM_PWM_Start_IT>

	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);	//fan
 80016f8:	2108      	movs	r1, #8
 80016fa:	482f      	ldr	r0, [pc, #188]	; (80017b8 <main+0x130>)
 80016fc:	f004 f860 	bl	80057c0 <HAL_TIM_PWM_Start_IT>

	//PW-re
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <main+0x128>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2200      	movs	r2, #0
 8001706:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8001708:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <main+0x12c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2200      	movs	r2, #0
 800170e:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001710:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <main+0x130>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2200      	movs	r2, #0
 8001716:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);	//LED1
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171e:	4827      	ldr	r0, [pc, #156]	; (80017bc <main+0x134>)
 8001720:	f003 f8d2 	bl	80048c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);	//LED2
 8001724:	2201      	movs	r2, #1
 8001726:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800172a:	4824      	ldr	r0, [pc, #144]	; (80017bc <main+0x134>)
 800172c:	f003 f8cc 	bl	80048c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);	//LED3
 8001730:	2201      	movs	r2, #1
 8001732:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001736:	4821      	ldr	r0, [pc, #132]	; (80017bc <main+0x134>)
 8001738:	f003 f8c6 	bl	80048c8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);	//R_1-2
 800173c:	2200      	movs	r2, #0
 800173e:	2120      	movs	r1, #32
 8001740:	481f      	ldr	r0, [pc, #124]	; (80017c0 <main+0x138>)
 8001742:	f003 f8c1 	bl	80048c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);	//G_1-3
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800174c:	481b      	ldr	r0, [pc, #108]	; (80017bc <main+0x134>)
 800174e:	f003 f8bb 	bl	80048c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);	//B_1-4
 8001752:	2201      	movs	r2, #1
 8001754:	2110      	movs	r1, #16
 8001756:	481a      	ldr	r0, [pc, #104]	; (80017c0 <main+0x138>)
 8001758:	f003 f8b6 	bl	80048c8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);	//R_2-2
 800175c:	2200      	movs	r2, #0
 800175e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001762:	4817      	ldr	r0, [pc, #92]	; (80017c0 <main+0x138>)
 8001764:	f003 f8b0 	bl	80048c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	//G_2-3
 8001768:	2201      	movs	r2, #1
 800176a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176e:	4814      	ldr	r0, [pc, #80]	; (80017c0 <main+0x138>)
 8001770:	f003 f8aa 	bl	80048c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);	//B_2-4
 8001774:	2201      	movs	r2, #1
 8001776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177a:	4811      	ldr	r0, [pc, #68]	; (80017c0 <main+0x138>)
 800177c:	f003 f8a4 	bl	80048c8 <HAL_GPIO_WritePin>

	ControlMotor(0, 0);
 8001780:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8001798 <main+0x110>
 8001784:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8001798 <main+0x110>
 8001788:	f7ff fef8 	bl	800157c <ControlMotor>

	test_flag = 0;
 800178c:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <main+0x13c>)
 800178e:	2200      	movs	r2, #0
 8001790:	801a      	strh	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		change_mode();
 8001792:	f7ff fe57 	bl	8001444 <change_mode>
 8001796:	e7fc      	b.n	8001792 <main+0x10a>
	...
 80017a0:	200005a8 	.word	0x200005a8
 80017a4:	20000244 	.word	0x20000244
 80017a8:	20000428 	.word	0x20000428
 80017ac:	20000470 	.word	0x20000470
 80017b0:	20000398 	.word	0x20000398
 80017b4:	20000500 	.word	0x20000500
 80017b8:	200003e0 	.word	0x200003e0
 80017bc:	40020000 	.word	0x40020000
 80017c0:	40020400 	.word	0x40020400
 80017c4:	2000023c 	.word	0x2000023c

080017c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b094      	sub	sp, #80	; 0x50
 80017cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80017ce:	f107 0320 	add.w	r3, r7, #32
 80017d2:	2230      	movs	r2, #48	; 0x30
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f005 fa92 	bl	8006d00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	4b28      	ldr	r3, [pc, #160]	; (8001894 <SystemClock_Config+0xcc>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	4a27      	ldr	r2, [pc, #156]	; (8001894 <SystemClock_Config+0xcc>)
 80017f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fa:	6413      	str	r3, [r2, #64]	; 0x40
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <SystemClock_Config+0xcc>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	4b22      	ldr	r3, [pc, #136]	; (8001898 <SystemClock_Config+0xd0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a21      	ldr	r2, [pc, #132]	; (8001898 <SystemClock_Config+0xd0>)
 8001812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <SystemClock_Config+0xd0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001824:	2302      	movs	r3, #2
 8001826:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001828:	2301      	movs	r3, #1
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800182c:	2310      	movs	r3, #16
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001830:	2302      	movs	r3, #2
 8001832:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001834:	2300      	movs	r3, #0
 8001836:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001838:	2308      	movs	r3, #8
 800183a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800183c:	23a8      	movs	r3, #168	; 0xa8
 800183e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001840:	2302      	movs	r3, #2
 8001842:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001844:	2304      	movs	r3, #4
 8001846:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	4618      	mov	r0, r3
 800184e:	f003 f999 	bl	8004b84 <HAL_RCC_OscConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0x94>
		Error_Handler();
 8001858:	f000 fcd0 	bl	80021fc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800185c:	230f      	movs	r3, #15
 800185e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001860:	2302      	movs	r3, #2
 8001862:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001868:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800186c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800186e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001872:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2105      	movs	r1, #5
 800187a:	4618      	mov	r0, r3
 800187c:	f003 fbfa 	bl	8005074 <HAL_RCC_ClockConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <SystemClock_Config+0xc2>
		Error_Handler();
 8001886:	f000 fcb9 	bl	80021fc <Error_Handler>
	}
}
 800188a:	bf00      	nop
 800188c:	3750      	adds	r7, #80	; 0x50
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40007000 	.word	0x40007000

0800189c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */
	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80018a2:	463b      	mov	r3, r7
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */
	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80018ae:	4b75      	ldr	r3, [pc, #468]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80018b0:	4a75      	ldr	r2, [pc, #468]	; (8001a88 <MX_ADC1_Init+0x1ec>)
 80018b2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018b4:	4b73      	ldr	r3, [pc, #460]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80018b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018ba:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018bc:	4b71      	ldr	r3, [pc, #452]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80018c2:	4b70      	ldr	r3, [pc, #448]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80018c8:	4b6e      	ldr	r3, [pc, #440]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ce:	4b6d      	ldr	r3, [pc, #436]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d6:	4b6b      	ldr	r3, [pc, #428]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018dc:	4b69      	ldr	r3, [pc, #420]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80018de:	4a6b      	ldr	r2, [pc, #428]	; (8001a8c <MX_ADC1_Init+0x1f0>)
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018e2:	4b68      	ldr	r3, [pc, #416]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 13;
 80018e8:	4b66      	ldr	r3, [pc, #408]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80018ea:	220d      	movs	r2, #13
 80018ec:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80018ee:	4b65      	ldr	r3, [pc, #404]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f6:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80018fc:	4861      	ldr	r0, [pc, #388]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80018fe:	f001 fda5 	bl	800344c <HAL_ADC_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_ADC1_Init+0x70>
		Error_Handler();
 8001908:	f000 fc78 	bl	80021fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800190c:	2309      	movs	r3, #9
 800190e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001910:	2301      	movs	r3, #1
 8001912:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001914:	2307      	movs	r3, #7
 8001916:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001918:	463b      	mov	r3, r7
 800191a:	4619      	mov	r1, r3
 800191c:	4859      	ldr	r0, [pc, #356]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 800191e:	f001 fefd 	bl	800371c <HAL_ADC_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_ADC1_Init+0x90>
		Error_Handler();
 8001928:	f000 fc68 	bl	80021fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 800192c:	2308      	movs	r3, #8
 800192e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001930:	2302      	movs	r3, #2
 8001932:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001934:	463b      	mov	r3, r7
 8001936:	4619      	mov	r1, r3
 8001938:	4852      	ldr	r0, [pc, #328]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 800193a:	f001 feef 	bl	800371c <HAL_ADC_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_ADC1_Init+0xac>
		Error_Handler();
 8001944:	f000 fc5a 	bl	80021fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8001948:	230f      	movs	r3, #15
 800194a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 800194c:	2303      	movs	r3, #3
 800194e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001950:	463b      	mov	r3, r7
 8001952:	4619      	mov	r1, r3
 8001954:	484b      	ldr	r0, [pc, #300]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 8001956:	f001 fee1 	bl	800371c <HAL_ADC_ConfigChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_ADC1_Init+0xc8>
		Error_Handler();
 8001960:	f000 fc4c 	bl	80021fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8001964:	230e      	movs	r3, #14
 8001966:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 8001968:	2304      	movs	r3, #4
 800196a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800196c:	463b      	mov	r3, r7
 800196e:	4619      	mov	r1, r3
 8001970:	4844      	ldr	r0, [pc, #272]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 8001972:	f001 fed3 	bl	800371c <HAL_ADC_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_ADC1_Init+0xe4>
		Error_Handler();
 800197c:	f000 fc3e 	bl	80021fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001980:	2305      	movs	r3, #5
 8001982:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 5;
 8001984:	2305      	movs	r3, #5
 8001986:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001988:	463b      	mov	r3, r7
 800198a:	4619      	mov	r1, r3
 800198c:	483d      	ldr	r0, [pc, #244]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 800198e:	f001 fec5 	bl	800371c <HAL_ADC_ConfigChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_ADC1_Init+0x100>
		Error_Handler();
 8001998:	f000 fc30 	bl	80021fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 800199c:	2304      	movs	r3, #4
 800199e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 6;
 80019a0:	2306      	movs	r3, #6
 80019a2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80019a4:	463b      	mov	r3, r7
 80019a6:	4619      	mov	r1, r3
 80019a8:	4836      	ldr	r0, [pc, #216]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80019aa:	f001 feb7 	bl	800371c <HAL_ADC_ConfigChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_ADC1_Init+0x11c>
		Error_Handler();
 80019b4:	f000 fc22 	bl	80021fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80019b8:	2303      	movs	r3, #3
 80019ba:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 7;
 80019bc:	2307      	movs	r3, #7
 80019be:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80019c0:	463b      	mov	r3, r7
 80019c2:	4619      	mov	r1, r3
 80019c4:	482f      	ldr	r0, [pc, #188]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80019c6:	f001 fea9 	bl	800371c <HAL_ADC_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_ADC1_Init+0x138>
		Error_Handler();
 80019d0:	f000 fc14 	bl	80021fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80019d4:	2302      	movs	r3, #2
 80019d6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 8;
 80019d8:	2308      	movs	r3, #8
 80019da:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80019dc:	463b      	mov	r3, r7
 80019de:	4619      	mov	r1, r3
 80019e0:	4828      	ldr	r0, [pc, #160]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80019e2:	f001 fe9b 	bl	800371c <HAL_ADC_ConfigChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_ADC1_Init+0x154>
		Error_Handler();
 80019ec:	f000 fc06 	bl	80021fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80019f0:	2301      	movs	r3, #1
 80019f2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 9;
 80019f4:	2309      	movs	r3, #9
 80019f6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80019f8:	463b      	mov	r3, r7
 80019fa:	4619      	mov	r1, r3
 80019fc:	4821      	ldr	r0, [pc, #132]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 80019fe:	f001 fe8d 	bl	800371c <HAL_ADC_ConfigChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_ADC1_Init+0x170>
		Error_Handler();
 8001a08:	f000 fbf8 	bl	80021fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 10;
 8001a10:	230a      	movs	r3, #10
 8001a12:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001a14:	463b      	mov	r3, r7
 8001a16:	4619      	mov	r1, r3
 8001a18:	481a      	ldr	r0, [pc, #104]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 8001a1a:	f001 fe7f 	bl	800371c <HAL_ADC_ConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_ADC1_Init+0x18c>
		Error_Handler();
 8001a24:	f000 fbea 	bl	80021fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8001a28:	230d      	movs	r3, #13
 8001a2a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 11;
 8001a2c:	230b      	movs	r3, #11
 8001a2e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001a30:	463b      	mov	r3, r7
 8001a32:	4619      	mov	r1, r3
 8001a34:	4813      	ldr	r0, [pc, #76]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 8001a36:	f001 fe71 	bl	800371c <HAL_ADC_ConfigChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_ADC1_Init+0x1a8>
		Error_Handler();
 8001a40:	f000 fbdc 	bl	80021fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8001a44:	230c      	movs	r3, #12
 8001a46:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 12;
 8001a48:	230c      	movs	r3, #12
 8001a4a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 8001a52:	f001 fe63 	bl	800371c <HAL_ADC_ConfigChannel>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_ADC1_Init+0x1c4>
		Error_Handler();
 8001a5c:	f000 fbce 	bl	80021fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8001a60:	230b      	movs	r3, #11
 8001a62:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 13;
 8001a64:	230d      	movs	r3, #13
 8001a66:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001a68:	463b      	mov	r3, r7
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_ADC1_Init+0x1e8>)
 8001a6e:	f001 fe55 	bl	800371c <HAL_ADC_ConfigChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_ADC1_Init+0x1e0>
		Error_Handler();
 8001a78:	f000 fbc0 	bl	80021fc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	/* USER CODE END ADC1_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000244 	.word	0x20000244
 8001a88:	40012000 	.word	0x40012000
 8001a8c:	0f000001 	.word	0x0f000001

08001a90 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_Init 0 */
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */
	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <MX_I2C1_Init+0x50>)
 8001a96:	4a13      	ldr	r2, [pc, #76]	; (8001ae4 <MX_I2C1_Init+0x54>)
 8001a98:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_I2C1_Init+0x50>)
 8001a9c:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <MX_I2C1_Init+0x58>)
 8001a9e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_I2C1_Init+0x50>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_I2C1_Init+0x50>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_I2C1_Init+0x50>)
 8001aae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ab2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <MX_I2C1_Init+0x50>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_I2C1_Init+0x50>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <MX_I2C1_Init+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_I2C1_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001acc:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <MX_I2C1_Init+0x50>)
 8001ace:	f002 ff15 	bl	80048fc <HAL_I2C_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001ad8:	f000 fb90 	bl	80021fc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	/* USER CODE END I2C1_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200002ec 	.word	0x200002ec
 8001ae4:	40005400 	.word	0x40005400
 8001ae8:	000186a0 	.word	0x000186a0

08001aec <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	/* USER CODE END SPI3_Init 0 */

	/* USER CODE BEGIN SPI3_Init 1 */
	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <MX_SPI3_Init+0x64>)
 8001af2:	4a18      	ldr	r2, [pc, #96]	; (8001b54 <MX_SPI3_Init+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <MX_SPI3_Init+0x64>)
 8001af8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001afc:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MX_SPI3_Init+0x64>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <MX_SPI3_Init+0x64>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <MX_SPI3_Init+0x64>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <MX_SPI3_Init+0x64>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <MX_SPI3_Init+0x64>)
 8001b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1c:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <MX_SPI3_Init+0x64>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <MX_SPI3_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MX_SPI3_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <MX_SPI3_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <MX_SPI3_Init+0x64>)
 8001b38:	220a      	movs	r2, #10
 8001b3a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001b3c:	4804      	ldr	r0, [pc, #16]	; (8001b50 <MX_SPI3_Init+0x64>)
 8001b3e:	f003 fc79 	bl	8005434 <HAL_SPI_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_SPI3_Init+0x60>
		Error_Handler();
 8001b48:	f000 fb58 	bl	80021fc <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */
	/* USER CODE END SPI3_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000340 	.word	0x20000340
 8001b54:	40003c00 	.word	0x40003c00

08001b58 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b092      	sub	sp, #72	; 0x48
 8001b5c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */
	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
 8001b78:	615a      	str	r2, [r3, #20]
 8001b7a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2220      	movs	r2, #32
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f005 f8bc 	bl	8006d00 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */
	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001b88:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <MX_TIM1_Init+0x100>)
 8001b8a:	4a34      	ldr	r2, [pc, #208]	; (8001c5c <MX_TIM1_Init+0x104>)
 8001b8c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001b8e:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <MX_TIM1_Init+0x100>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <MX_TIM1_Init+0x100>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 499;
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <MX_TIM1_Init+0x100>)
 8001b9c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001ba0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <MX_TIM1_Init+0x100>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <MX_TIM1_Init+0x100>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bae:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <MX_TIM1_Init+0x100>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001bb4:	4828      	ldr	r0, [pc, #160]	; (8001c58 <MX_TIM1_Init+0x100>)
 8001bb6:	f003 fdb4 	bl	8005722 <HAL_TIM_PWM_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM1_Init+0x6c>
		Error_Handler();
 8001bc0:	f000 fb1c 	bl	80021fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001bcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4821      	ldr	r0, [pc, #132]	; (8001c58 <MX_TIM1_Init+0x100>)
 8001bd4:	f004 fcc6 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001bde:	f000 fb0d 	bl	80021fc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be2:	2360      	movs	r3, #96	; 0x60
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8001bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c02:	2204      	movs	r2, #4
 8001c04:	4619      	mov	r1, r3
 8001c06:	4814      	ldr	r0, [pc, #80]	; (8001c58 <MX_TIM1_Init+0x100>)
 8001c08:	f004 f94c 	bl	8005ea4 <HAL_TIM_PWM_ConfigChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 8001c12:	f000 faf3 	bl	80021fc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c2e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4807      	ldr	r0, [pc, #28]	; (8001c58 <MX_TIM1_Init+0x100>)
 8001c3a:	f004 fd0f 	bl	800665c <HAL_TIMEx_ConfigBreakDeadTime>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8001c44:	f000 fada 	bl	80021fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */
	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001c48:	4803      	ldr	r0, [pc, #12]	; (8001c58 <MX_TIM1_Init+0x100>)
 8001c4a:	f001 f957 	bl	8002efc <HAL_TIM_MspPostInit>

}
 8001c4e:	bf00      	nop
 8001c50:	3748      	adds	r7, #72	; 0x48
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000398 	.word	0x20000398
 8001c5c:	40010000 	.word	0x40010000

08001c60 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */
	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]
 8001c7e:	615a      	str	r2, [r3, #20]
 8001c80:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */
	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001c82:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001c84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c88:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c90:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4095;
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001c98:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001c9c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001caa:	4818      	ldr	r0, [pc, #96]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001cac:	f003 fd39 	bl	8005722 <HAL_TIM_PWM_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM2_Init+0x5a>
		Error_Handler();
 8001cb6:	f000 faa1 	bl	80021fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001cc2:	f107 0320 	add.w	r3, r7, #32
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4810      	ldr	r0, [pc, #64]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001cca:	f004 fc4b 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8001cd4:	f000 fa92 	bl	80021fc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd8:	2360      	movs	r3, #96	; 0x60
 8001cda:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	2208      	movs	r2, #8
 8001cec:	4619      	mov	r1, r3
 8001cee:	4807      	ldr	r0, [pc, #28]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001cf0:	f004 f8d8 	bl	8005ea4 <HAL_TIM_PWM_ConfigChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8001cfa:	f000 fa7f 	bl	80021fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001cfe:	4803      	ldr	r0, [pc, #12]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001d00:	f001 f8fc 	bl	8002efc <HAL_TIM_MspPostInit>

}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200003e0 	.word	0x200003e0

08001d10 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */
	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	2224      	movs	r2, #36	; 0x24
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f004 ffee 	bl	8006d00 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */
	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <MX_TIM3_Init+0xa0>)
 8001d2e:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <MX_TIM3_Init+0xa4>)
 8001d30:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001d32:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <MX_TIM3_Init+0xa0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <MX_TIM3_Init+0xa0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <MX_TIM3_Init+0xa0>)
 8001d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d44:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <MX_TIM3_Init+0xa0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <MX_TIM3_Init+0xa0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d52:	2303      	movs	r3, #3
 8001d54:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <MX_TIM3_Init+0xa0>)
 8001d7e:	f003 fe35 	bl	80059ec <HAL_TIM_Encoder_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM3_Init+0x7c>
		Error_Handler();
 8001d88:	f000 fa38 	bl	80021fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_TIM3_Init+0xa0>)
 8001d9a:	f004 fbe3 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001da4:	f000 fa2a 	bl	80021fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	/* USER CODE END TIM3_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	3730      	adds	r7, #48	; 0x30
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000428 	.word	0x20000428
 8001db4:	40000400 	.word	0x40000400

08001db8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08c      	sub	sp, #48	; 0x30
 8001dbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */
	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001dbe:	f107 030c 	add.w	r3, r7, #12
 8001dc2:	2224      	movs	r2, #36	; 0x24
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f004 ff9a 	bl	8006d00 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */
	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <MX_TIM4_Init+0xa0>)
 8001dd6:	4a21      	ldr	r2, [pc, #132]	; (8001e5c <MX_TIM4_Init+0xa4>)
 8001dd8:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001dda:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <MX_TIM4_Init+0xa0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <MX_TIM4_Init+0xa0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <MX_TIM4_Init+0xa0>)
 8001de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dec:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <MX_TIM4_Init+0xa0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <MX_TIM4_Init+0xa0>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e02:	2301      	movs	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e12:	2301      	movs	r3, #1
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	4619      	mov	r1, r3
 8001e24:	480c      	ldr	r0, [pc, #48]	; (8001e58 <MX_TIM4_Init+0xa0>)
 8001e26:	f003 fde1 	bl	80059ec <HAL_TIM_Encoder_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM4_Init+0x7c>
		Error_Handler();
 8001e30:	f000 f9e4 	bl	80021fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_TIM4_Init+0xa0>)
 8001e42:	f004 fb8f 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM4_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001e4c:	f000 f9d6 	bl	80021fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	/* USER CODE END TIM4_Init 2 */

}
 8001e50:	bf00      	nop
 8001e52:	3730      	adds	r7, #48	; 0x30
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000470 	.word	0x20000470
 8001e5c:	40000800 	.word	0x40000800

08001e60 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */
	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001e66:	463b      	mov	r3, r7
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */
	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <MX_TIM6_Init+0x64>)
 8001e70:	4a15      	ldr	r2, [pc, #84]	; (8001ec8 <MX_TIM6_Init+0x68>)
 8001e72:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 83;
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <MX_TIM6_Init+0x64>)
 8001e76:	2253      	movs	r2, #83	; 0x53
 8001e78:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <MX_TIM6_Init+0x64>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 999;
 8001e80:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <MX_TIM6_Init+0x64>)
 8001e82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e86:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e88:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_TIM6_Init+0x64>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001e8e:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <MX_TIM6_Init+0x64>)
 8001e90:	f003 fb59 	bl	8005546 <HAL_TIM_Base_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM6_Init+0x3e>
		Error_Handler();
 8001e9a:	f000 f9af 	bl	80021fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <MX_TIM6_Init+0x64>)
 8001eac:	f004 fb5a 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM6_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8001eb6:	f000 f9a1 	bl	80021fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */
	/* USER CODE END TIM6_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200004b8 	.word	0x200004b8
 8001ec8:	40001000 	.word	0x40001000

08001ecc <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b092      	sub	sp, #72	; 0x48
 8001ed0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */
	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ed2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
 8001eec:	615a      	str	r2, [r3, #20]
 8001eee:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f004 ff02 	bl	8006d00 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */
	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001efc:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <MX_TIM8_Init+0xfc>)
 8001efe:	4a33      	ldr	r2, [pc, #204]	; (8001fcc <MX_TIM8_Init+0x100>)
 8001f00:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001f02:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <MX_TIM8_Init+0xfc>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f08:	4b2f      	ldr	r3, [pc, #188]	; (8001fc8 <MX_TIM8_Init+0xfc>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 499;
 8001f0e:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <MX_TIM8_Init+0xfc>)
 8001f10:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001f14:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f16:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <MX_TIM8_Init+0xfc>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001f1c:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <MX_TIM8_Init+0xfc>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f22:	4b29      	ldr	r3, [pc, #164]	; (8001fc8 <MX_TIM8_Init+0xfc>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001f28:	4827      	ldr	r0, [pc, #156]	; (8001fc8 <MX_TIM8_Init+0xfc>)
 8001f2a:	f003 fbfa 	bl	8005722 <HAL_TIM_PWM_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM8_Init+0x6c>
		Error_Handler();
 8001f34:	f000 f962 	bl	80021fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8001f40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f44:	4619      	mov	r1, r3
 8001f46:	4820      	ldr	r0, [pc, #128]	; (8001fc8 <MX_TIM8_Init+0xfc>)
 8001f48:	f004 fb0c 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM8_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001f52:	f000 f953 	bl	80021fc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f56:	2360      	movs	r3, #96	; 0x60
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 8001f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f72:	220c      	movs	r2, #12
 8001f74:	4619      	mov	r1, r3
 8001f76:	4814      	ldr	r0, [pc, #80]	; (8001fc8 <MX_TIM8_Init+0xfc>)
 8001f78:	f003 ff94 	bl	8005ea4 <HAL_TIM_PWM_ConfigChannel>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM8_Init+0xba>
			!= HAL_OK) {
		Error_Handler();
 8001f82:	f000 f93b 	bl	80021fc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f9e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4807      	ldr	r0, [pc, #28]	; (8001fc8 <MX_TIM8_Init+0xfc>)
 8001faa:	f004 fb57 	bl	800665c <HAL_TIMEx_ConfigBreakDeadTime>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM8_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8001fb4:	f000 f922 	bl	80021fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */
	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8001fb8:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <MX_TIM8_Init+0xfc>)
 8001fba:	f000 ff9f 	bl	8002efc <HAL_TIM_MspPostInit>

}
 8001fbe:	bf00      	nop
 8001fc0:	3748      	adds	r7, #72	; 0x48
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000500 	.word	0x20000500
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART6_Init 0 */
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */
	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <MX_USART6_UART_Init+0x50>)
 8001fd8:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fe0:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8002008:	f004 fb8e 	bl	8006728 <HAL_UART_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8002012:	f000 f8f3 	bl	80021fc <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */
	/* USER CODE END USART6_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000548 	.word	0x20000548
 8002020:	40011400 	.word	0x40011400

08002024 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_DMA_Init+0x3c>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <MX_DMA_Init+0x3c>)
 8002034:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_DMA_Init+0x3c>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	2038      	movs	r0, #56	; 0x38
 800204c:	f001 fee1 	bl	8003e12 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002050:	2038      	movs	r0, #56	; 0x38
 8002052:	f001 fefa 	bl	8003e4a <HAL_NVIC_EnableIRQ>

}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	4b5a      	ldr	r3, [pc, #360]	; (80021e8 <MX_GPIO_Init+0x184>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a59      	ldr	r2, [pc, #356]	; (80021e8 <MX_GPIO_Init+0x184>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <MX_GPIO_Init+0x184>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <MX_GPIO_Init+0x184>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a52      	ldr	r2, [pc, #328]	; (80021e8 <MX_GPIO_Init+0x184>)
 80020a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b50      	ldr	r3, [pc, #320]	; (80021e8 <MX_GPIO_Init+0x184>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <MX_GPIO_Init+0x184>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a4b      	ldr	r2, [pc, #300]	; (80021e8 <MX_GPIO_Init+0x184>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b49      	ldr	r3, [pc, #292]	; (80021e8 <MX_GPIO_Init+0x184>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4b45      	ldr	r3, [pc, #276]	; (80021e8 <MX_GPIO_Init+0x184>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a44      	ldr	r2, [pc, #272]	; (80021e8 <MX_GPIO_Init+0x184>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b42      	ldr	r3, [pc, #264]	; (80021e8 <MX_GPIO_Init+0x184>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <MX_GPIO_Init+0x184>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a3d      	ldr	r2, [pc, #244]	; (80021e8 <MX_GPIO_Init+0x184>)
 80020f4:	f043 0308 	orr.w	r3, r3, #8
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <MX_GPIO_Init+0x184>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002106:	2200      	movs	r2, #0
 8002108:	f247 0130 	movw	r1, #28720	; 0x7030
 800210c:	4837      	ldr	r0, [pc, #220]	; (80021ec <MX_GPIO_Init+0x188>)
 800210e:	f002 fbdb 	bl	80048c8 <HAL_GPIO_WritePin>
			LED2_ARGB3_GPIO_OUT_Pin | LED2_ARGB4_GPIO_OUT_Pin
					| LED2_ARGB2_GPIO_OUT_Pin | LED_ARGB4_GPIO_OUT_Pin
					| LED_ARGB2_GPIO_OUT_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DRVL_IN2_GPIO_GPIO_Port, DRVL_IN2_GPIO_Pin,
 8002112:	2200      	movs	r2, #0
 8002114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002118:	4835      	ldr	r0, [pc, #212]	; (80021f0 <MX_GPIO_Init+0x18c>)
 800211a:	f002 fbd5 	bl	80048c8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800211e:	2200      	movs	r2, #0
 8002120:	f44f 411d 	mov.w	r1, #40192	; 0x9d00
 8002124:	4833      	ldr	r0, [pc, #204]	; (80021f4 <MX_GPIO_Init+0x190>)
 8002126:	f002 fbcf 	bl	80048c8 <HAL_GPIO_WritePin>
			DRVR_IN2_GPIO_OUT_Pin | LED3_GPIO_OUT_Pin | LED2_GPIO_OUT_Pin
					| LED1_GPIO_OUT_Pin | LED_ARGB3_GPIO_OUT_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(NCS_GPIO_OUT_GPIO_Port, NCS_GPIO_OUT_Pin, GPIO_PIN_RESET);
 800212a:	2200      	movs	r2, #0
 800212c:	2104      	movs	r1, #4
 800212e:	4832      	ldr	r0, [pc, #200]	; (80021f8 <MX_GPIO_Init+0x194>)
 8002130:	f002 fbca 	bl	80048c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : SW1_GPIO_IN_Pin SIDE_SENSOR_R_GPIO_IN_Pin */
	GPIO_InitStruct.Pin = SW1_GPIO_IN_Pin | SIDE_SENSOR_R_GPIO_IN_Pin;
 8002134:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002138:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4619      	mov	r1, r3
 8002148:	4829      	ldr	r0, [pc, #164]	; (80021f0 <MX_GPIO_Init+0x18c>)
 800214a:	f002 fa09 	bl	8004560 <HAL_GPIO_Init>

	/*Configure GPIO pins : SIDE_SENSOR_L_GPIO_IN_Pin SW2_GPIO_IN_Pin */
	GPIO_InitStruct.Pin = SIDE_SENSOR_L_GPIO_IN_Pin | SW2_GPIO_IN_Pin;
 800214e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002152:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	4619      	mov	r1, r3
 8002162:	4822      	ldr	r0, [pc, #136]	; (80021ec <MX_GPIO_Init+0x188>)
 8002164:	f002 f9fc 	bl	8004560 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_ARGB3_GPIO_OUT_Pin LED2_ARGB4_GPIO_OUT_Pin LED2_ARGB2_GPIO_OUT_Pin LED_ARGB4_GPIO_OUT_Pin
	 LED_ARGB2_GPIO_OUT_Pin */
	GPIO_InitStruct.Pin = LED2_ARGB3_GPIO_OUT_Pin | LED2_ARGB4_GPIO_OUT_Pin
 8002168:	f247 0330 	movw	r3, #28720	; 0x7030
 800216c:	617b      	str	r3, [r7, #20]
			| LED2_ARGB2_GPIO_OUT_Pin | LED_ARGB4_GPIO_OUT_Pin
			| LED_ARGB2_GPIO_OUT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216e:	2301      	movs	r3, #1
 8002170:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217a:	f107 0314 	add.w	r3, r7, #20
 800217e:	4619      	mov	r1, r3
 8002180:	481a      	ldr	r0, [pc, #104]	; (80021ec <MX_GPIO_Init+0x188>)
 8002182:	f002 f9ed 	bl	8004560 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRVL_IN2_GPIO_Pin */
	GPIO_InitStruct.Pin = DRVL_IN2_GPIO_Pin;
 8002186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800218a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218c:	2301      	movs	r3, #1
 800218e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DRVL_IN2_GPIO_GPIO_Port, &GPIO_InitStruct);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4619      	mov	r1, r3
 800219e:	4814      	ldr	r0, [pc, #80]	; (80021f0 <MX_GPIO_Init+0x18c>)
 80021a0:	f002 f9de 	bl	8004560 <HAL_GPIO_Init>

	/*Configure GPIO pins : DRVR_IN2_GPIO_OUT_Pin LED3_GPIO_OUT_Pin LED2_GPIO_OUT_Pin LED1_GPIO_OUT_Pin
	 LED_ARGB3_GPIO_OUT_Pin */
	GPIO_InitStruct.Pin = DRVR_IN2_GPIO_OUT_Pin | LED3_GPIO_OUT_Pin
 80021a4:	f44f 431d 	mov.w	r3, #40192	; 0x9d00
 80021a8:	617b      	str	r3, [r7, #20]
			| LED2_GPIO_OUT_Pin | LED1_GPIO_OUT_Pin | LED_ARGB3_GPIO_OUT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021aa:	2301      	movs	r3, #1
 80021ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	480d      	ldr	r0, [pc, #52]	; (80021f4 <MX_GPIO_Init+0x190>)
 80021be:	f002 f9cf 	bl	8004560 <HAL_GPIO_Init>

	/*Configure GPIO pin : NCS_GPIO_OUT_Pin */
	GPIO_InitStruct.Pin = NCS_GPIO_OUT_Pin;
 80021c2:	2304      	movs	r3, #4
 80021c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c6:	2301      	movs	r3, #1
 80021c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(NCS_GPIO_OUT_GPIO_Port, &GPIO_InitStruct);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4619      	mov	r1, r3
 80021d8:	4807      	ldr	r0, [pc, #28]	; (80021f8 <MX_GPIO_Init+0x194>)
 80021da:	f002 f9c1 	bl	8004560 <HAL_GPIO_Init>

}
 80021de:	bf00      	nop
 80021e0:	3728      	adds	r7, #40	; 0x28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40020400 	.word	0x40020400
 80021f0:	40020800 	.word	0x40020800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40020c00 	.word	0x40020c00

080021fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* USER CODE END Error_Handler_Debug */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <readSens2>:

    }
}


void readSens2(){
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
	Line3_sens[0] = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2);//L
 8002210:	2104      	movs	r1, #4
 8002212:	480d      	ldr	r0, [pc, #52]	; (8002248 <readSens2+0x3c>)
 8002214:	f002 fb40 	bl	8004898 <HAL_GPIO_ReadPin>
 8002218:	4603      	mov	r3, r0
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <readSens2+0x40>)
 8002224:	edc3 7a00 	vstr	s15, [r3]
    Line3_sens[1] = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);//R
 8002228:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800222c:	4808      	ldr	r0, [pc, #32]	; (8002250 <readSens2+0x44>)
 800222e:	f002 fb33 	bl	8004898 <HAL_GPIO_ReadPin>
 8002232:	4603      	mov	r3, r0
 8002234:	ee07 3a90 	vmov	s15, r3
 8002238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <readSens2+0x40>)
 800223e:	edc3 7a01 	vstr	s15, [r3, #4]

}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40020400 	.word	0x40020400
 800224c:	200005a0 	.word	0x200005a0
 8002250:	40020800 	.word	0x40020800

08002254 <calibrate_sensors>:


void calibrate_sensors(void){    
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0

    for (int k = 0; k < SENSOR_COUNT; k++) {
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	e00f      	b.n	8002280 <calibrate_sensors+0x2c>
        Line_min[k] = 3000.0;  // 初期値
 8002260:	4a3c      	ldr	r2, [pc, #240]	; (8002354 <calibrate_sensors+0x100>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	4a3b      	ldr	r2, [pc, #236]	; (8002358 <calibrate_sensors+0x104>)
 800226a:	601a      	str	r2, [r3, #0]
        Line_max[k] = 0.0;     // 初期値
 800226c:	4a3b      	ldr	r2, [pc, #236]	; (800235c <calibrate_sensors+0x108>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
    for (int k = 0; k < SENSOR_COUNT; k++) {
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3301      	adds	r3, #1
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	ddec      	ble.n	8002260 <calibrate_sensors+0xc>
    }
HAL_Delay(500);
 8002286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800228a:	f001 f8bb 	bl	8003404 <HAL_Delay>
       while(1){//SW2

    	   if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15) == GPIO_PIN_RESET){
 800228e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002292:	4833      	ldr	r0, [pc, #204]	; (8002360 <calibrate_sensors+0x10c>)
 8002294:	f002 fb00 	bl	8004898 <HAL_GPIO_ReadPin>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d051      	beq.n	8002342 <calibrate_sensors+0xee>
    		   break;
    	   }
           //readSens();
           LED_RGB_2(2);
 800229e:	2002      	movs	r0, #2
 80022a0:	f7fe ff1e 	bl	80010e0 <LED_RGB_2>
           LED_RGB(2);
 80022a4:	2002      	movs	r0, #2
 80022a6:	f7fe fe71 	bl	8000f8c <LED_RGB>
           for(int k = 0; k < SENSOR_COUNT; k++){
 80022aa:	2300      	movs	r3, #0
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	e044      	b.n	800233a <calibrate_sensors+0xe6>
        	   if(Line_sens[k] < Line_min[k]){
 80022b0:	4a2c      	ldr	r2, [pc, #176]	; (8002364 <calibrate_sensors+0x110>)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022b8:	ee07 3a90 	vmov	s15, r3
 80022bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c0:	4a24      	ldr	r2, [pc, #144]	; (8002354 <calibrate_sensors+0x100>)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	edd3 7a00 	vldr	s15, [r3]
 80022cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d4:	d50d      	bpl.n	80022f2 <calibrate_sensors+0x9e>
        		   Line_min[k] = Line_sens[k];
 80022d6:	4a23      	ldr	r2, [pc, #140]	; (8002364 <calibrate_sensors+0x110>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e6:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <calibrate_sensors+0x100>)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	edc3 7a00 	vstr	s15, [r3]
        	   }
        	   if(Line_sens[k] > Line_max[k] ){
 80022f2:	4a1c      	ldr	r2, [pc, #112]	; (8002364 <calibrate_sensors+0x110>)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002302:	4a16      	ldr	r2, [pc, #88]	; (800235c <calibrate_sensors+0x108>)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002316:	dd0d      	ble.n	8002334 <calibrate_sensors+0xe0>
        		   Line_max[k] = Line_sens[k];
 8002318:	4a12      	ldr	r2, [pc, #72]	; (8002364 <calibrate_sensors+0x110>)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002328:	4a0c      	ldr	r2, [pc, #48]	; (800235c <calibrate_sensors+0x108>)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	edc3 7a00 	vstr	s15, [r3]
           for(int k = 0; k < SENSOR_COUNT; k++){
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	3301      	adds	r3, #1
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	ddb7      	ble.n	80022b0 <calibrate_sensors+0x5c>
    	   if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15) == GPIO_PIN_RESET){
 8002340:	e7a5      	b.n	800228e <calibrate_sensors+0x3a>
    		   break;
 8002342:	bf00      	nop
			   }
		   }
	   }

       LED_RGB_2(0);
 8002344:	2000      	movs	r0, #0
 8002346:	f7fe fecb 	bl	80010e0 <LED_RGB_2>

	}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000000 	.word	0x20000000
 8002358:	453b8000 	.word	0x453b8000
 800235c:	200005c4 	.word	0x200005c4
 8002360:	40020400 	.word	0x40020400
 8002364:	200005a8 	.word	0x200005a8

08002368 <sens_get>:


float sens_get(void){
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
	float Line1_sum = 0.0;
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	607b      	str	r3, [r7, #4]
	float Line2_sum = 0.0;
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	603b      	str	r3, [r7, #0]
//	static const int g1[SENSOR_COUNT] = {1,1,1,1,1,1,1,1,1,1,1,1,1};//L
//	static const int g2[] = {1,1,1,1,1,1};


	for (int i = 0; i < SENSOR_COUNT; i++){
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e076      	b.n	800246e <sens_get+0x106>
		float range = Line_max[i] - Line_min[i];
 8002380:	4a63      	ldr	r2, [pc, #396]	; (8002510 <sens_get+0x1a8>)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	ed93 7a00 	vldr	s14, [r3]
 800238c:	4a61      	ldr	r2, [pc, #388]	; (8002514 <sens_get+0x1ac>)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800239c:	edc7 7a02 	vstr	s15, [r7, #8]
			if(range == 0){
 80023a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80023a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ac:	d102      	bne.n	80023b4 <sens_get+0x4c>
				range = 1;
 80023ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023b2:	60bb      	str	r3, [r7, #8]
			}
			if(Line_min[i] >=Line_sens[i]){
 80023b4:	4a57      	ldr	r2, [pc, #348]	; (8002514 <sens_get+0x1ac>)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	ed93 7a00 	vldr	s14, [r3]
 80023c0:	4a55      	ldr	r2, [pc, #340]	; (8002518 <sens_get+0x1b0>)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023c8:	ee07 3a90 	vmov	s15, r3
 80023cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	db0e      	blt.n	80023f8 <sens_get+0x90>
				Line_sens[i] = Line_min[i];
 80023da:	4a4e      	ldr	r2, [pc, #312]	; (8002514 <sens_get+0x1ac>)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	edd3 7a00 	vldr	s15, [r3]
 80023e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ea:	ee17 3a90 	vmov	r3, s15
 80023ee:	b299      	uxth	r1, r3
 80023f0:	4a49      	ldr	r2, [pc, #292]	; (8002518 <sens_get+0x1b0>)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		Line_sum[i] =0.0;
 80023f8:	4a48      	ldr	r2, [pc, #288]	; (800251c <sens_get+0x1b4>)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
		//Line_sum[i] = (Line_sens[i]/ Line_max[i])*1000;
		Line_sum[i]=((Line_sens[i]-Line_min[i] )/range)*1000;
 8002406:	4a44      	ldr	r2, [pc, #272]	; (8002518 <sens_get+0x1b0>)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002416:	4a3f      	ldr	r2, [pc, #252]	; (8002514 <sens_get+0x1ac>)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	edd3 7a00 	vldr	s15, [r3]
 8002422:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002426:	ed97 7a02 	vldr	s14, [r7, #8]
 800242a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800242e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002520 <sens_get+0x1b8>
 8002432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002436:	4a39      	ldr	r2, [pc, #228]	; (800251c <sens_get+0x1b4>)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	edc3 7a00 	vstr	s15, [r3]
		if(Line_sum[i]>1000)Line_sum[i]=1000;
 8002442:	4a36      	ldr	r2, [pc, #216]	; (800251c <sens_get+0x1b4>)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002520 <sens_get+0x1b8>
 8002452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245a:	dd05      	ble.n	8002468 <sens_get+0x100>
 800245c:	4a2f      	ldr	r2, [pc, #188]	; (800251c <sens_get+0x1b4>)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	4a2f      	ldr	r2, [pc, #188]	; (8002524 <sens_get+0x1bc>)
 8002466:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < SENSOR_COUNT; i++){
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3301      	adds	r3, #1
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b0c      	cmp	r3, #12
 8002472:	dd85      	ble.n	8002380 <sens_get+0x18>

	}

		Line1_sum =Line_sum[1]+Line_sum[2]+Line_sum[3]+Line_sum[4]+Line_sum[5];
 8002474:	4b29      	ldr	r3, [pc, #164]	; (800251c <sens_get+0x1b4>)
 8002476:	ed93 7a01 	vldr	s14, [r3, #4]
 800247a:	4b28      	ldr	r3, [pc, #160]	; (800251c <sens_get+0x1b4>)
 800247c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <sens_get+0x1b4>)
 8002486:	edd3 7a03 	vldr	s15, [r3, #12]
 800248a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800248e:	4b23      	ldr	r3, [pc, #140]	; (800251c <sens_get+0x1b4>)
 8002490:	edd3 7a04 	vldr	s15, [r3, #16]
 8002494:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002498:	4b20      	ldr	r3, [pc, #128]	; (800251c <sens_get+0x1b4>)
 800249a:	edd3 7a05 	vldr	s15, [r3, #20]
 800249e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a2:	edc7 7a01 	vstr	s15, [r7, #4]
		Line2_sum =Line_sum[7]+Line_sum[8]+Line_sum[9]+Line_sum[10]+Line_sum[11];
 80024a6:	4b1d      	ldr	r3, [pc, #116]	; (800251c <sens_get+0x1b4>)
 80024a8:	ed93 7a07 	vldr	s14, [r3, #28]
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <sens_get+0x1b4>)
 80024ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80024b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <sens_get+0x1b4>)
 80024b8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80024bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <sens_get+0x1b4>)
 80024c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80024c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024ca:	4b14      	ldr	r3, [pc, #80]	; (800251c <sens_get+0x1b4>)
 80024cc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80024d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d4:	edc7 7a00 	vstr	s15, [r7]


		average_cross = (Line_sum[2] + Line_sum[10])/2;
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <sens_get+0x1b4>)
 80024da:	ed93 7a02 	vldr	s14, [r3, #8]
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <sens_get+0x1b4>)
 80024e0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80024e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80024ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <sens_get+0x1c0>)
 80024f2:	edc3 7a00 	vstr	s15, [r3]

//		}
//

	return  Line1_sum - Line2_sum;
 80024f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80024fa:	edd7 7a00 	vldr	s15, [r7]
 80024fe:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002502:	eeb0 0a67 	vmov.f32	s0, s15
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	200005c4 	.word	0x200005c4
 8002514:	20000000 	.word	0x20000000
 8002518:	200005a8 	.word	0x200005a8
 800251c:	200005f8 	.word	0x200005f8
 8002520:	447a0000 	.word	0x447a0000
 8002524:	447a0000 	.word	0x447a0000
 8002528:	20000240 	.word	0x20000240
 800252c:	00000000 	.word	0x00000000

08002530 <calculateEncoderSpeed>:


// int32_t cnt_test; //Max value is 2048

float calculateEncoderSpeed(){
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0


	cnt_new_L =  TIM4 -> CNT ; //dL
 8002534:	4b58      	ldr	r3, [pc, #352]	; (8002698 <calculateEncoderSpeed+0x168>)
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	461a      	mov	r2, r3
 800253a:	4b58      	ldr	r3, [pc, #352]	; (800269c <calculateEncoderSpeed+0x16c>)
 800253c:	601a      	str	r2, [r3, #0]
	cnt_new_R = TIM3 -> CNT; //dR
 800253e:	4b58      	ldr	r3, [pc, #352]	; (80026a0 <calculateEncoderSpeed+0x170>)
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	461a      	mov	r2, r3
 8002544:	4b57      	ldr	r3, [pc, #348]	; (80026a4 <calculateEncoderSpeed+0x174>)
 8002546:	601a      	str	r2, [r3, #0]

	 TIM4 -> CNT=32767;
 8002548:	4b53      	ldr	r3, [pc, #332]	; (8002698 <calculateEncoderSpeed+0x168>)
 800254a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800254e:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM3 -> CNT=32767;
 8002550:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <calculateEncoderSpeed+0x170>)
 8002552:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002556:	625a      	str	r2, [r3, #36]	; 0x24

//	 test_cnt_L =TIM4 -> CNT ;
//	 test_cnt_R =TIM3 -> CNT;

	cnt_L = -(cnt_new_L - 32767);
 8002558:	4b50      	ldr	r3, [pc, #320]	; (800269c <calculateEncoderSpeed+0x16c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8002560:	337f      	adds	r3, #127	; 0x7f
 8002562:	4a51      	ldr	r2, [pc, #324]	; (80026a8 <calculateEncoderSpeed+0x178>)
 8002564:	6013      	str	r3, [r2, #0]
	cnt_R = -(cnt_new_R - 32767);
 8002566:	4b4f      	ldr	r3, [pc, #316]	; (80026a4 <calculateEncoderSpeed+0x174>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 800256e:	337f      	adds	r3, #127	; 0x7f
 8002570:	4a4e      	ldr	r2, [pc, #312]	; (80026ac <calculateEncoderSpeed+0x17c>)
 8002572:	6013      	str	r3, [r2, #0]





	distance_1ms = DISTANCE_PER_CNT * (cnt_L + cnt_R) / 2;
 8002574:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <calculateEncoderSpeed+0x178>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b4c      	ldr	r3, [pc, #304]	; (80026ac <calculateEncoderSpeed+0x17c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4413      	add	r3, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f7fd ffd0 	bl	8000524 <__aeabi_i2d>
 8002584:	a342      	add	r3, pc, #264	; (adr r3, 8002690 <calculateEncoderSpeed+0x160>)
 8002586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258a:	f7fe f835 	bl	80005f8 <__aeabi_dmul>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800259e:	f7fe f955 	bl	800084c <__aeabi_ddiv>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	f7fe fb1d 	bl	8000be8 <__aeabi_d2f>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4a3f      	ldr	r2, [pc, #252]	; (80026b0 <calculateEncoderSpeed+0x180>)
 80025b2:	6013      	str	r3, [r2, #0]
//	accumulation += distance_1ms;
	distance_1ms_L = DISTANCE_PER_CNT * cnt_L;
 80025b4:	4b3c      	ldr	r3, [pc, #240]	; (80026a8 <calculateEncoderSpeed+0x178>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd ffb3 	bl	8000524 <__aeabi_i2d>
 80025be:	a334      	add	r3, pc, #208	; (adr r3, 8002690 <calculateEncoderSpeed+0x160>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	f7fe f818 	bl	80005f8 <__aeabi_dmul>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	f7fe fb0a 	bl	8000be8 <__aeabi_d2f>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4a37      	ldr	r2, [pc, #220]	; (80026b4 <calculateEncoderSpeed+0x184>)
 80025d8:	6013      	str	r3, [r2, #0]
	distance_1ms_R = DISTANCE_PER_CNT * cnt_R;
 80025da:	4b34      	ldr	r3, [pc, #208]	; (80026ac <calculateEncoderSpeed+0x17c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd ffa0 	bl	8000524 <__aeabi_i2d>
 80025e4:	a32a      	add	r3, pc, #168	; (adr r3, 8002690 <calculateEncoderSpeed+0x160>)
 80025e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ea:	f7fe f805 	bl	80005f8 <__aeabi_dmul>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	f7fe faf7 	bl	8000be8 <__aeabi_d2f>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4a2e      	ldr	r2, [pc, #184]	; (80026b8 <calculateEncoderSpeed+0x188>)
 80025fe:	6013      	str	r3, [r2, #0]



	if(average_cross <250){
 8002600:	4b2e      	ldr	r3, [pc, #184]	; (80026bc <calculateEncoderSpeed+0x18c>)
 8002602:	edd3 7a00 	vldr	s15, [r3]
 8002606:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80026c0 <calculateEncoderSpeed+0x190>
 800260a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002612:	d509      	bpl.n	8002628 <calculateEncoderSpeed+0xf8>
		 cross_flag = 1;
 8002614:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <calculateEncoderSpeed+0x194>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]
		 accumulation = 0;
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <calculateEncoderSpeed+0x198>)
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
		 LED_RGB(1);
 8002622:	2001      	movs	r0, #1
 8002624:	f7fe fcb2 	bl	8000f8c <LED_RGB>
	}

	if(cross_flag == 1){
 8002628:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <calculateEncoderSpeed+0x194>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d11e      	bne.n	800266e <calculateEncoderSpeed+0x13e>
//		 LED_RGB(1);
		accumulation +=distance_1ms;
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <calculateEncoderSpeed+0x198>)
 8002632:	ed93 7a00 	vldr	s14, [r3]
 8002636:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <calculateEncoderSpeed+0x180>)
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002640:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <calculateEncoderSpeed+0x198>)
 8002642:	edc3 7a00 	vstr	s15, [r3]
		if(accumulation >800){
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <calculateEncoderSpeed+0x198>)
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80026cc <calculateEncoderSpeed+0x19c>
 8002650:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002658:	dd09      	ble.n	800266e <calculateEncoderSpeed+0x13e>
			cross_flag = 0;
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <calculateEncoderSpeed+0x194>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
			accumulation = 0;
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <calculateEncoderSpeed+0x198>)
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
			LED_RGB(0);
 8002668:	2000      	movs	r0, #0
 800266a:	f7fe fc8f 	bl	8000f8c <LED_RGB>
	}else{
	}



	cnt_old_L = cnt_new_L;
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <calculateEncoderSpeed+0x16c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <calculateEncoderSpeed+0x1a0>)
 8002674:	6013      	str	r3, [r2, #0]
    cnt_old_R = cnt_new_R;
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <calculateEncoderSpeed+0x174>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <calculateEncoderSpeed+0x1a4>)
 800267c:	6013      	str	r3, [r2, #0]


    return distance_1ms;
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <calculateEncoderSpeed+0x180>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	ee07 3a90 	vmov	s15, r3
}
 8002686:	eeb0 0a67 	vmov.f32	s0, s15
 800268a:	bd80      	pop	{r7, pc}
 800268c:	f3af 8000 	nop.w
 8002690:	4317cb34 	.word	0x4317cb34
 8002694:	3f8ba561 	.word	0x3f8ba561
 8002698:	40000800 	.word	0x40000800
 800269c:	2000063c 	.word	0x2000063c
 80026a0:	40000400 	.word	0x40000400
 80026a4:	20000640 	.word	0x20000640
 80026a8:	20000644 	.word	0x20000644
 80026ac:	20000648 	.word	0x20000648
 80026b0:	2000058c 	.word	0x2000058c
 80026b4:	20000590 	.word	0x20000590
 80026b8:	20000594 	.word	0x20000594
 80026bc:	20000240 	.word	0x20000240
 80026c0:	437a0000 	.word	0x437a0000
 80026c4:	20000638 	.word	0x20000638
 80026c8:	2000064c 	.word	0x2000064c
 80026cc:	44480000 	.word	0x44480000
 80026d0:	20000598 	.word	0x20000598
 80026d4:	2000059c 	.word	0x2000059c

080026d8 <EncoderSpeed>:




float EncoderSpeed() {
 80026d8:	b5b0      	push	{r4, r5, r7, lr}
 80026da:	ed2d 8b02 	vpush	{d8}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0


	float Sp = 800;
 80026e2:	4b43      	ldr	r3, [pc, #268]	; (80027f0 <EncoderSpeed+0x118>)
 80026e4:	613b      	str	r3, [r7, #16]
	float Si = 8000;
 80026e6:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <EncoderSpeed+0x11c>)
 80026e8:	60fb      	str	r3, [r7, #12]

	float adjusted_speed = target_speed - calculateEncoderSpeed();
 80026ea:	4b43      	ldr	r3, [pc, #268]	; (80027f8 <EncoderSpeed+0x120>)
 80026ec:	ed93 8a00 	vldr	s16, [r3]
 80026f0:	f7ff ff1e 	bl	8002530 <calculateEncoderSpeed>
 80026f4:	eef0 7a40 	vmov.f32	s15, s0
 80026f8:	ee78 7a67 	vsub.f32	s15, s16, s15
 80026fc:	edc7 7a02 	vstr	s15, [r7, #8]

	static float integral= 0;
	integral += adjusted_speed * dt;
 8002700:	4b3e      	ldr	r3, [pc, #248]	; (80027fc <EncoderSpeed+0x124>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd ff1f 	bl	8000548 <__aeabi_f2d>
 800270a:	4604      	mov	r4, r0
 800270c:	460d      	mov	r5, r1
 800270e:	68b8      	ldr	r0, [r7, #8]
 8002710:	f7fd ff1a 	bl	8000548 <__aeabi_f2d>
 8002714:	a334      	add	r3, pc, #208	; (adr r3, 80027e8 <EncoderSpeed+0x110>)
 8002716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271a:	f7fd ff6d 	bl	80005f8 <__aeabi_dmul>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4620      	mov	r0, r4
 8002724:	4629      	mov	r1, r5
 8002726:	f7fd fdb1 	bl	800028c <__adddf3>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	f7fe fa59 	bl	8000be8 <__aeabi_d2f>
 8002736:	4603      	mov	r3, r0
 8002738:	4a30      	ldr	r2, [pc, #192]	; (80027fc <EncoderSpeed+0x124>)
 800273a:	6013      	str	r3, [r2, #0]



	//P
	float speed_P_gain = Sp * adjusted_speed;
 800273c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002740:	edd7 7a02 	vldr	s15, [r7, #8]
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	edc7 7a01 	vstr	s15, [r7, #4]
	//I
    float speed_I_gain = Si * integral;
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <EncoderSpeed+0x124>)
 800274e:	edd3 7a00 	vldr	s15, [r3]
 8002752:	ed97 7a03 	vldr	s14, [r7, #12]
 8002756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275a:	edc7 7a00 	vstr	s15, [r7]



	#define I_LIMIT 1000
	if (integral > I_LIMIT) integral= I_LIMIT;
 800275e:	4b27      	ldr	r3, [pc, #156]	; (80027fc <EncoderSpeed+0x124>)
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002800 <EncoderSpeed+0x128>
 8002768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002770:	dd02      	ble.n	8002778 <EncoderSpeed+0xa0>
 8002772:	4b22      	ldr	r3, [pc, #136]	; (80027fc <EncoderSpeed+0x124>)
 8002774:	4a23      	ldr	r2, [pc, #140]	; (8002804 <EncoderSpeed+0x12c>)
 8002776:	601a      	str	r2, [r3, #0]
	if (integral < -I_LIMIT) integral = -I_LIMIT;
 8002778:	4b20      	ldr	r3, [pc, #128]	; (80027fc <EncoderSpeed+0x124>)
 800277a:	edd3 7a00 	vldr	s15, [r3]
 800277e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002808 <EncoderSpeed+0x130>
 8002782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278a:	d502      	bpl.n	8002792 <EncoderSpeed+0xba>
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <EncoderSpeed+0x124>)
 800278e:	4a1f      	ldr	r2, [pc, #124]	; (800280c <EncoderSpeed+0x134>)
 8002790:	601a      	str	r2, [r3, #0]


	float duty = speed_P_gain + speed_I_gain;
 8002792:	ed97 7a01 	vldr	s14, [r7, #4]
 8002796:	edd7 7a00 	vldr	s15, [r7]
 800279a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279e:	edc7 7a05 	vstr	s15, [r7, #20]

    if (duty > 250) duty = 250;
 80027a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027a6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002810 <EncoderSpeed+0x138>
 80027aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b2:	dd01      	ble.n	80027b8 <EncoderSpeed+0xe0>
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <EncoderSpeed+0x13c>)
 80027b6:	617b      	str	r3, [r7, #20]
    if (duty < -250) duty = -250;
 80027b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027bc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002818 <EncoderSpeed+0x140>
 80027c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c8:	d501      	bpl.n	80027ce <EncoderSpeed+0xf6>
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <EncoderSpeed+0x144>)
 80027cc:	617b      	str	r3, [r7, #20]


    previous_speed_error = adjusted_speed;
 80027ce:	4a14      	ldr	r2, [pc, #80]	; (8002820 <EncoderSpeed+0x148>)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6013      	str	r3, [r2, #0]




    // モータ
    return duty;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	ee07 3a90 	vmov	s15, r3
}
 80027da:	eeb0 0a67 	vmov.f32	s0, s15
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	ecbd 8b02 	vpop	{d8}
 80027e6:	bdb0      	pop	{r4, r5, r7, pc}
 80027e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80027ec:	3f50624d 	.word	0x3f50624d
 80027f0:	44480000 	.word	0x44480000
 80027f4:	45fa0000 	.word	0x45fa0000
 80027f8:	20000634 	.word	0x20000634
 80027fc:	20000650 	.word	0x20000650
 8002800:	447a0000 	.word	0x447a0000
 8002804:	447a0000 	.word	0x447a0000
 8002808:	c47a0000 	.word	0xc47a0000
 800280c:	c47a0000 	.word	0xc47a0000
 8002810:	437a0000 	.word	0x437a0000
 8002814:	437a0000 	.word	0x437a0000
 8002818:	c37a0000 	.word	0xc37a0000
 800281c:	c37a0000 	.word	0xc37a0000
 8002820:	20000630 	.word	0x20000630
 8002824:	00000000 	.word	0x00000000

08002828 <SpeedControl_NoENC>:



void SpeedControl_NoENC() {
 8002828:	b5b0      	push	{r4, r5, r7, lr}
 800282a:	b08c      	sub	sp, #48	; 0x30
 800282c:	af00      	add	r7, sp, #0

//		readSens2();

	     float error = sens_get();
 800282e:	f7ff fd9b 	bl	8002368 <sens_get>
 8002832:	ed87 0a07 	vstr	s0, [r7, #28]
	     // PD
	     float derivative = (error - previous_error) / dt;
 8002836:	4b80      	ldr	r3, [pc, #512]	; (8002a38 <SpeedControl_NoENC+0x210>)
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002844:	ee17 0a90 	vmov	r0, s15
 8002848:	f7fd fe7e 	bl	8000548 <__aeabi_f2d>
 800284c:	a378      	add	r3, pc, #480	; (adr r3, 8002a30 <SpeedControl_NoENC+0x208>)
 800284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002852:	f7fd fffb 	bl	800084c <__aeabi_ddiv>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	f7fe f9c3 	bl	8000be8 <__aeabi_d2f>
 8002862:	4603      	mov	r3, r0
 8002864:	61bb      	str	r3, [r7, #24]

	     float P =Kp * error;
 8002866:	4b75      	ldr	r3, [pc, #468]	; (8002a3c <SpeedControl_NoENC+0x214>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002874:	edc7 7a05 	vstr	s15, [r7, #20]
	     float D =Kd * derivative;
 8002878:	4b71      	ldr	r3, [pc, #452]	; (8002a40 <SpeedControl_NoENC+0x218>)
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002886:	edc7 7a04 	vstr	s15, [r7, #16]

	     float output = P + D;
 800288a:	ed97 7a05 	vldr	s14, [r7, #20]
 800288e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002896:	edc7 7a03 	vstr	s15, [r7, #12]
	     previous_error = error;
 800289a:	4a67      	ldr	r2, [pc, #412]	; (8002a38 <SpeedControl_NoENC+0x210>)
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	6013      	str	r3, [r2, #0]

	     float sp =EncoderSpeed();
 80028a0:	f7ff ff1a 	bl	80026d8 <EncoderSpeed>
 80028a4:	ed87 0a02 	vstr	s0, [r7, #8]

	     float motor_L = output + sp;
 80028a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80028ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80028b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	     float motor_R = -output + sp;
 80028b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80028bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80028c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28


	     float max_output = 499;
 80028c8:	4b5e      	ldr	r3, [pc, #376]	; (8002a44 <SpeedControl_NoENC+0x21c>)
 80028ca:	607b      	str	r3, [r7, #4]


	     float overflow_L = 0;
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
	     float overflow_R = 0;
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	623b      	str	r3, [r7, #32]

	     if (motor_L > max_output) {
 80028d8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80028dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e8:	dd0a      	ble.n	8002900 <SpeedControl_NoENC+0xd8>
	         overflow_L = motor_L - max_output;
 80028ea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80028ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80028f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	         motor_L = max_output;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028fe:	e018      	b.n	8002932 <SpeedControl_NoENC+0x10a>
	     } else if (motor_L < -max_output) {
 8002900:	edd7 7a01 	vldr	s15, [r7, #4]
 8002904:	eef1 7a67 	vneg.f32	s15, s15
 8002908:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800290c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002914:	d50d      	bpl.n	8002932 <SpeedControl_NoENC+0x10a>
	         overflow_L = motor_L - max_output;
 8002916:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800291a:	edd7 7a01 	vldr	s15, [r7, #4]
 800291e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002922:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	         motor_L = -max_output;
 8002926:	edd7 7a01 	vldr	s15, [r7, #4]
 800292a:	eef1 7a67 	vneg.f32	s15, s15
 800292e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	     }

	     if (motor_R > max_output) {
 8002932:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002936:	edd7 7a01 	vldr	s15, [r7, #4]
 800293a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800293e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002942:	dd0a      	ble.n	800295a <SpeedControl_NoENC+0x132>
	         overflow_R = motor_R - max_output;
 8002944:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002948:	edd7 7a01 	vldr	s15, [r7, #4]
 800294c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002950:	edc7 7a08 	vstr	s15, [r7, #32]
	         motor_R = max_output;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
 8002958:	e018      	b.n	800298c <SpeedControl_NoENC+0x164>
	     } else if (motor_R < -max_output) {
 800295a:	edd7 7a01 	vldr	s15, [r7, #4]
 800295e:	eef1 7a67 	vneg.f32	s15, s15
 8002962:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	d50d      	bpl.n	800298c <SpeedControl_NoENC+0x164>
	         overflow_R = motor_R - max_output;
 8002970:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002974:	edd7 7a01 	vldr	s15, [r7, #4]
 8002978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800297c:	edc7 7a08 	vstr	s15, [r7, #32]
	         motor_R = -max_output;
 8002980:	edd7 7a01 	vldr	s15, [r7, #4]
 8002984:	eef1 7a67 	vneg.f32	s15, s15
 8002988:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	     }



	     if (overflow_L > 0) {
 800298c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002990:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002998:	dd07      	ble.n	80029aa <SpeedControl_NoENC+0x182>
	         motor_R -= overflow_L;
 800299a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800299e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	     }
	     if (overflow_L < 0) {
 80029aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b6:	d507      	bpl.n	80029c8 <SpeedControl_NoENC+0x1a0>
	         motor_R += overflow_L;
 80029b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80029bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	     }
	     if (overflow_R > 0) {
 80029c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80029cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d4:	dd07      	ble.n	80029e6 <SpeedControl_NoENC+0x1be>
	         motor_L -= overflow_R;
 80029d6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80029da:	edd7 7a08 	vldr	s15, [r7, #32]
 80029de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	     }
	     if (overflow_R < 0) {
 80029e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80029ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f2:	d507      	bpl.n	8002a04 <SpeedControl_NoENC+0x1dc>
	         motor_L += overflow_R;
 80029f4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80029f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80029fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a00:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	     }


	     // モータ
	     ControlMotor(motor_L, motor_R);
 8002a04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a06:	f7fd fd9f 	bl	8000548 <__aeabi_f2d>
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	460d      	mov	r5, r1
 8002a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a10:	f7fd fd9a 	bl	8000548 <__aeabi_f2d>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	ec43 2b11 	vmov	d1, r2, r3
 8002a1c:	ec45 4b10 	vmov	d0, r4, r5
 8002a20:	f7fe fdac 	bl	800157c <ControlMotor>
}
 8002a24:	bf00      	nop
 8002a26:	3730      	adds	r7, #48	; 0x30
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a2c:	f3af 8000 	nop.w
 8002a30:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a34:	3f50624d 	.word	0x3f50624d
 8002a38:	2000062c 	.word	0x2000062c
 8002a3c:	20000034 	.word	0x20000034
 8002a40:	20000038 	.word	0x20000038
 8002a44:	43f98000 	.word	0x43f98000

08002a48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	4a08      	ldr	r2, [pc, #32]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a78:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800

08002a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08c      	sub	sp, #48	; 0x30
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 031c 	add.w	r3, r7, #28
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a49      	ldr	r2, [pc, #292]	; (8002bdc <HAL_ADC_MspInit+0x144>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	f040 808c 	bne.w	8002bd4 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002abc:	2300      	movs	r3, #0
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	4b47      	ldr	r3, [pc, #284]	; (8002be0 <HAL_ADC_MspInit+0x148>)
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac4:	4a46      	ldr	r2, [pc, #280]	; (8002be0 <HAL_ADC_MspInit+0x148>)
 8002ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aca:	6453      	str	r3, [r2, #68]	; 0x44
 8002acc:	4b44      	ldr	r3, [pc, #272]	; (8002be0 <HAL_ADC_MspInit+0x148>)
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	4b40      	ldr	r3, [pc, #256]	; (8002be0 <HAL_ADC_MspInit+0x148>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	4a3f      	ldr	r2, [pc, #252]	; (8002be0 <HAL_ADC_MspInit+0x148>)
 8002ae2:	f043 0304 	orr.w	r3, r3, #4
 8002ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae8:	4b3d      	ldr	r3, [pc, #244]	; (8002be0 <HAL_ADC_MspInit+0x148>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <HAL_ADC_MspInit+0x148>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	4a38      	ldr	r2, [pc, #224]	; (8002be0 <HAL_ADC_MspInit+0x148>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6313      	str	r3, [r2, #48]	; 0x30
 8002b04:	4b36      	ldr	r3, [pc, #216]	; (8002be0 <HAL_ADC_MspInit+0x148>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	4b32      	ldr	r3, [pc, #200]	; (8002be0 <HAL_ADC_MspInit+0x148>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	4a31      	ldr	r2, [pc, #196]	; (8002be0 <HAL_ADC_MspInit+0x148>)
 8002b1a:	f043 0302 	orr.w	r3, r3, #2
 8002b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b20:	4b2f      	ldr	r3, [pc, #188]	; (8002be0 <HAL_ADC_MspInit+0x148>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LINE_Sens13_ADC1_in11_Pin|LINE_Sens12_ADC1_in12_Pin|LINE_Sens11_ADC1_in13_Pin|LINE_Sens4_ADC1_in14_Pin
 8002b2c:	233e      	movs	r3, #62	; 0x3e
 8002b2e:	61fb      	str	r3, [r7, #28]
                          |LINE_Sens3_ADC1_in15_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b30:	2303      	movs	r3, #3
 8002b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b38:	f107 031c 	add.w	r3, r7, #28
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4829      	ldr	r0, [pc, #164]	; (8002be4 <HAL_ADC_MspInit+0x14c>)
 8002b40:	f001 fd0e 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LINE_Sens10_ADC1_in0_Pin|LINE_Sens9_ADC1_in1_Pin|LINE_Sens8_ADC1_in2_Pin|LINE_Sens7_ADC1_in3_Pin
 8002b44:	233f      	movs	r3, #63	; 0x3f
 8002b46:	61fb      	str	r3, [r7, #28]
                          |LINE_Sens6_ADC1_in4_Pin|LINE_Sens5_ADC1_in5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	4619      	mov	r1, r3
 8002b56:	4824      	ldr	r0, [pc, #144]	; (8002be8 <HAL_ADC_MspInit+0x150>)
 8002b58:	f001 fd02 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LINE_Sens2_ADC1_in8_Pin|LINE_Sens1_ADC1_in9_Pin;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b60:	2303      	movs	r3, #3
 8002b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	481f      	ldr	r0, [pc, #124]	; (8002bec <HAL_ADC_MspInit+0x154>)
 8002b70:	f001 fcf6 	bl	8004560 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002b74:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <HAL_ADC_MspInit+0x158>)
 8002b76:	4a1f      	ldr	r2, [pc, #124]	; (8002bf4 <HAL_ADC_MspInit+0x15c>)
 8002b78:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_ADC_MspInit+0x158>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b80:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_ADC_MspInit+0x158>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b86:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <HAL_ADC_MspInit+0x158>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b8c:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <HAL_ADC_MspInit+0x158>)
 8002b8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b92:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b94:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <HAL_ADC_MspInit+0x158>)
 8002b96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b9a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <HAL_ADC_MspInit+0x158>)
 8002b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ba2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_ADC_MspInit+0x158>)
 8002ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002baa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002bac:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <HAL_ADC_MspInit+0x158>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <HAL_ADC_MspInit+0x158>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002bb8:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <HAL_ADC_MspInit+0x158>)
 8002bba:	f001 f961 	bl	8003e80 <HAL_DMA_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002bc4:	f7ff fb1a 	bl	80021fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <HAL_ADC_MspInit+0x158>)
 8002bcc:	639a      	str	r2, [r3, #56]	; 0x38
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <HAL_ADC_MspInit+0x158>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bd4:	bf00      	nop
 8002bd6:	3730      	adds	r7, #48	; 0x30
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40012000 	.word	0x40012000
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40020800 	.word	0x40020800
 8002be8:	40020000 	.word	0x40020000
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	2000028c 	.word	0x2000028c
 8002bf4:	40026410 	.word	0x40026410

08002bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 0314 	add.w	r3, r7, #20
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a19      	ldr	r2, [pc, #100]	; (8002c7c <HAL_I2C_MspInit+0x84>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d12c      	bne.n	8002c74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <HAL_I2C_MspInit+0x88>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <HAL_I2C_MspInit+0x88>)
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <HAL_I2C_MspInit+0x88>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_3_I2C1_SCL_Pin|LCD2_I2C1_SDA_Pin;
 8002c36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c3c:	2312      	movs	r3, #18
 8002c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c44:	2303      	movs	r3, #3
 8002c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c48:	2304      	movs	r3, #4
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	4619      	mov	r1, r3
 8002c52:	480c      	ldr	r0, [pc, #48]	; (8002c84 <HAL_I2C_MspInit+0x8c>)
 8002c54:	f001 fc84 	bl	8004560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_I2C_MspInit+0x88>)
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <HAL_I2C_MspInit+0x88>)
 8002c62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c66:	6413      	str	r3, [r2, #64]	; 0x40
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_I2C_MspInit+0x88>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c74:	bf00      	nop
 8002c76:	3728      	adds	r7, #40	; 0x28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40005400 	.word	0x40005400
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020400 	.word	0x40020400

08002c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	; 0x28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <HAL_SPI_MspInit+0x84>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d12c      	bne.n	8002d04 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <HAL_SPI_MspInit+0x88>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <HAL_SPI_MspInit+0x88>)
 8002cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <HAL_SPI_MspInit+0x88>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_SPI_MspInit+0x88>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <HAL_SPI_MspInit+0x88>)
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <HAL_SPI_MspInit+0x88>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002ce2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002cf4:	2306      	movs	r3, #6
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4805      	ldr	r0, [pc, #20]	; (8002d14 <HAL_SPI_MspInit+0x8c>)
 8002d00:	f001 fc2e 	bl	8004560 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002d04:	bf00      	nop
 8002d06:	3728      	adds	r7, #40	; 0x28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40003c00 	.word	0x40003c00
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40020800 	.word	0x40020800

08002d18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1f      	ldr	r2, [pc, #124]	; (8002da4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d10e      	bne.n	8002d48 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	4a1d      	ldr	r2, [pc, #116]	; (8002da8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3a:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002d46:	e026      	b.n	8002d96 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d10e      	bne.n	8002d70 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a13      	ldr	r2, [pc, #76]	; (8002da8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	693b      	ldr	r3, [r7, #16]
}
 8002d6e:	e012      	b.n	8002d96 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <HAL_TIM_PWM_MspInit+0x94>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d10d      	bne.n	8002d96 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	4a09      	ldr	r2, [pc, #36]	; (8002da8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40010000 	.word	0x40010000
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40010400 	.word	0x40010400

08002db0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08c      	sub	sp, #48	; 0x30
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 031c 	add.w	r3, r7, #28
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a32      	ldr	r2, [pc, #200]	; (8002e98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d12c      	bne.n	8002e2c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_TIM_Encoder_MspInit+0xec>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a30      	ldr	r2, [pc, #192]	; (8002e9c <HAL_TIM_Encoder_MspInit+0xec>)
 8002ddc:	f043 0302 	orr.w	r3, r3, #2
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <HAL_TIM_Encoder_MspInit+0xec>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <HAL_TIM_Encoder_MspInit+0xec>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a29      	ldr	r2, [pc, #164]	; (8002e9c <HAL_TIM_Encoder_MspInit+0xec>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <HAL_TIM_Encoder_MspInit+0xec>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1_6_TIM3_CH1_Pin|ENC1_8_TIM3_CH2_Pin;
 8002e0a:	23c0      	movs	r3, #192	; 0xc0
 8002e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e16:	2300      	movs	r3, #0
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1e:	f107 031c 	add.w	r3, r7, #28
 8002e22:	4619      	mov	r1, r3
 8002e24:	481e      	ldr	r0, [pc, #120]	; (8002ea0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002e26:	f001 fb9b 	bl	8004560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e2a:	e030      	b.n	8002e8e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1c      	ldr	r2, [pc, #112]	; (8002ea4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d12b      	bne.n	8002e8e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <HAL_TIM_Encoder_MspInit+0xec>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <HAL_TIM_Encoder_MspInit+0xec>)
 8002e40:	f043 0304 	orr.w	r3, r3, #4
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <HAL_TIM_Encoder_MspInit+0xec>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <HAL_TIM_Encoder_MspInit+0xec>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <HAL_TIM_Encoder_MspInit+0xec>)
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_TIM_Encoder_MspInit+0xec>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2_8_TIM4_CH1_Pin|ENC2_6_TIM4_CH2_Pin;
 8002e6e:	23c0      	movs	r3, #192	; 0xc0
 8002e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e82:	f107 031c 	add.w	r3, r7, #28
 8002e86:	4619      	mov	r1, r3
 8002e88:	4807      	ldr	r0, [pc, #28]	; (8002ea8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002e8a:	f001 fb69 	bl	8004560 <HAL_GPIO_Init>
}
 8002e8e:	bf00      	nop
 8002e90:	3730      	adds	r7, #48	; 0x30
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40000400 	.word	0x40000400
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	40000800 	.word	0x40000800
 8002ea8:	40020400 	.word	0x40020400

08002eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <HAL_TIM_Base_MspInit+0x48>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d115      	bne.n	8002eea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <HAL_TIM_Base_MspInit+0x4c>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	4a0c      	ldr	r2, [pc, #48]	; (8002ef8 <HAL_TIM_Base_MspInit+0x4c>)
 8002ec8:	f043 0310 	orr.w	r3, r3, #16
 8002ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_TIM_Base_MspInit+0x4c>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002eda:	2200      	movs	r2, #0
 8002edc:	2100      	movs	r1, #0
 8002ede:	2036      	movs	r0, #54	; 0x36
 8002ee0:	f000 ff97 	bl	8003e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ee4:	2036      	movs	r0, #54	; 0x36
 8002ee6:	f000 ffb0 	bl	8003e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40001000 	.word	0x40001000
 8002ef8:	40023800 	.word	0x40023800

08002efc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a37      	ldr	r2, [pc, #220]	; (8002ff8 <HAL_TIM_MspPostInit+0xfc>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d11f      	bne.n	8002f5e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <HAL_TIM_MspPostInit+0x100>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a35      	ldr	r2, [pc, #212]	; (8002ffc <HAL_TIM_MspPostInit+0x100>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b33      	ldr	r3, [pc, #204]	; (8002ffc <HAL_TIM_MspPostInit+0x100>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = DRVR_IN1_TIM1_CH2_Pin;
 8002f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DRVR_IN1_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	4619      	mov	r1, r3
 8002f56:	482a      	ldr	r0, [pc, #168]	; (8003000 <HAL_TIM_MspPostInit+0x104>)
 8002f58:	f001 fb02 	bl	8004560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002f5c:	e048      	b.n	8002ff0 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f66:	d11f      	bne.n	8002fa8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_TIM_MspPostInit+0x100>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	4a22      	ldr	r2, [pc, #136]	; (8002ffc <HAL_TIM_MspPostInit+0x100>)
 8002f72:	f043 0302 	orr.w	r3, r3, #2
 8002f76:	6313      	str	r3, [r2, #48]	; 0x30
 8002f78:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <HAL_TIM_MspPostInit+0x100>)
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = fan_PWM_1_TIM2_CH3_Pin;
 8002f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f92:	2300      	movs	r3, #0
 8002f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f96:	2301      	movs	r3, #1
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(fan_PWM_1_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 8002f9a:	f107 0314 	add.w	r3, r7, #20
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4818      	ldr	r0, [pc, #96]	; (8003004 <HAL_TIM_MspPostInit+0x108>)
 8002fa2:	f001 fadd 	bl	8004560 <HAL_GPIO_Init>
}
 8002fa6:	e023      	b.n	8002ff0 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM8)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a16      	ldr	r2, [pc, #88]	; (8003008 <HAL_TIM_MspPostInit+0x10c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d11e      	bne.n	8002ff0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_TIM_MspPostInit+0x100>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a10      	ldr	r2, [pc, #64]	; (8002ffc <HAL_TIM_MspPostInit+0x100>)
 8002fbc:	f043 0304 	orr.w	r3, r3, #4
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_TIM_MspPostInit+0x100>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DRVL_IN1_TIM8_CH4_Pin;
 8002fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DRVL_IN1_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4808      	ldr	r0, [pc, #32]	; (800300c <HAL_TIM_MspPostInit+0x110>)
 8002fec:	f001 fab8 	bl	8004560 <HAL_GPIO_Init>
}
 8002ff0:	bf00      	nop
 8002ff2:	3728      	adds	r7, #40	; 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40010000 	.word	0x40010000
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020000 	.word	0x40020000
 8003004:	40020400 	.word	0x40020400
 8003008:	40010400 	.word	0x40010400
 800300c:	40020800 	.word	0x40020800

08003010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	; 0x28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003018:	f107 0314 	add.w	r3, r7, #20
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	60da      	str	r2, [r3, #12]
 8003026:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a19      	ldr	r2, [pc, #100]	; (8003094 <HAL_UART_MspInit+0x84>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d12b      	bne.n	800308a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_UART_MspInit+0x88>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	4a17      	ldr	r2, [pc, #92]	; (8003098 <HAL_UART_MspInit+0x88>)
 800303c:	f043 0320 	orr.w	r3, r3, #32
 8003040:	6453      	str	r3, [r2, #68]	; 0x44
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <HAL_UART_MspInit+0x88>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <HAL_UART_MspInit+0x88>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	4a10      	ldr	r2, [pc, #64]	; (8003098 <HAL_UART_MspInit+0x88>)
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	6313      	str	r3, [r2, #48]	; 0x30
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_UART_MspInit+0x88>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800306a:	23c0      	movs	r3, #192	; 0xc0
 800306c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306e:	2302      	movs	r3, #2
 8003070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003076:	2303      	movs	r3, #3
 8003078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800307a:	2308      	movs	r3, #8
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800307e:	f107 0314 	add.w	r3, r7, #20
 8003082:	4619      	mov	r1, r3
 8003084:	4805      	ldr	r0, [pc, #20]	; (800309c <HAL_UART_MspInit+0x8c>)
 8003086:	f001 fa6b 	bl	8004560 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800308a:	bf00      	nop
 800308c:	3728      	adds	r7, #40	; 0x28
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40011400 	.word	0x40011400
 8003098:	40023800 	.word	0x40023800
 800309c:	40020800 	.word	0x40020800

080030a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030a4:	e7fe      	b.n	80030a4 <NMI_Handler+0x4>

080030a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030aa:	e7fe      	b.n	80030aa <HardFault_Handler+0x4>

080030ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <MemManage_Handler+0x4>

080030b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b6:	e7fe      	b.n	80030b6 <BusFault_Handler+0x4>

080030b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030bc:	e7fe      	b.n	80030bc <UsageFault_Handler+0x4>

080030be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ec:	f000 f96a 	bl	80033c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f0:	bf00      	nop
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <TIM6_DAC_IRQHandler+0x10>)
 80030fa:	f002 fdcb 	bl	8005c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	200004b8 	.word	0x200004b8

08003108 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <DMA2_Stream0_IRQHandler+0x10>)
 800310e:	f000 ffbd 	bl	800408c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	2000028c 	.word	0x2000028c

0800311c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return 1;
 8003120:	2301      	movs	r3, #1
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <_kill>:

int _kill(int pid, int sig)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003136:	f003 fdb9 	bl	8006cac <__errno>
 800313a:	4603      	mov	r3, r0
 800313c:	2216      	movs	r2, #22
 800313e:	601a      	str	r2, [r3, #0]
  return -1;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <_exit>:

void _exit (int status)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003154:	f04f 31ff 	mov.w	r1, #4294967295
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ffe7 	bl	800312c <_kill>
  while (1) {}    /* Make sure we hang here */
 800315e:	e7fe      	b.n	800315e <_exit+0x12>

08003160 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	e00a      	b.n	8003188 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003172:	f3af 8000 	nop.w
 8003176:	4601      	mov	r1, r0
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	60ba      	str	r2, [r7, #8]
 800317e:	b2ca      	uxtb	r2, r1
 8003180:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	3301      	adds	r3, #1
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	dbf0      	blt.n	8003172 <_read+0x12>
  }

  return len;
 8003190:	687b      	ldr	r3, [r7, #4]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	e009      	b.n	80031c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	60ba      	str	r2, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	3301      	adds	r3, #1
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	dbf1      	blt.n	80031ac <_write+0x12>
  }
  return len;
 80031c8:	687b      	ldr	r3, [r7, #4]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <_close>:

int _close(int file)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031fa:	605a      	str	r2, [r3, #4]
  return 0;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <_isatty>:

int _isatty(int file)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003212:	2301      	movs	r3, #1
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003244:	4a14      	ldr	r2, [pc, #80]	; (8003298 <_sbrk+0x5c>)
 8003246:	4b15      	ldr	r3, [pc, #84]	; (800329c <_sbrk+0x60>)
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003250:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <_sbrk+0x64>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <_sbrk+0x64>)
 800325a:	4a12      	ldr	r2, [pc, #72]	; (80032a4 <_sbrk+0x68>)
 800325c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <_sbrk+0x64>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	429a      	cmp	r2, r3
 800326a:	d207      	bcs.n	800327c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800326c:	f003 fd1e 	bl	8006cac <__errno>
 8003270:	4603      	mov	r3, r0
 8003272:	220c      	movs	r2, #12
 8003274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295
 800327a:	e009      	b.n	8003290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800327c:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <_sbrk+0x64>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003282:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <_sbrk+0x64>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	4a05      	ldr	r2, [pc, #20]	; (80032a0 <_sbrk+0x64>)
 800328c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800328e:	68fb      	ldr	r3, [r7, #12]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20020000 	.word	0x20020000
 800329c:	00000400 	.word	0x00000400
 80032a0:	20000654 	.word	0x20000654
 80032a4:	20000670 	.word	0x20000670

080032a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032ac:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <SystemInit+0x20>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <SystemInit+0x20>)
 80032b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032bc:	bf00      	nop
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003304 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032d0:	480d      	ldr	r0, [pc, #52]	; (8003308 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032d2:	490e      	ldr	r1, [pc, #56]	; (800330c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032d4:	4a0e      	ldr	r2, [pc, #56]	; (8003310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d8:	e002      	b.n	80032e0 <LoopCopyDataInit>

080032da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032de:	3304      	adds	r3, #4

080032e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e4:	d3f9      	bcc.n	80032da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e6:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032e8:	4c0b      	ldr	r4, [pc, #44]	; (8003318 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032ec:	e001      	b.n	80032f2 <LoopFillZerobss>

080032ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032f0:	3204      	adds	r2, #4

080032f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f4:	d3fb      	bcc.n	80032ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032f6:	f7ff ffd7 	bl	80032a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032fa:	f003 fcdd 	bl	8006cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032fe:	f7fe f9c3 	bl	8001688 <main>
  bx  lr    
 8003302:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800330c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003310:	08009b64 	.word	0x08009b64
  ldr r2, =_sbss
 8003314:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003318:	2000066c 	.word	0x2000066c

0800331c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800331c:	e7fe      	b.n	800331c <ADC_IRQHandler>
	...

08003320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <HAL_Init+0x40>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <HAL_Init+0x40>)
 800332a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800332e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_Init+0x40>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <HAL_Init+0x40>)
 8003336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800333a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_Init+0x40>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a07      	ldr	r2, [pc, #28]	; (8003360 <HAL_Init+0x40>)
 8003342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003348:	2003      	movs	r0, #3
 800334a:	f000 fd57 	bl	8003dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800334e:	200f      	movs	r0, #15
 8003350:	f000 f808 	bl	8003364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003354:	f7ff fb78 	bl	8002a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40023c00 	.word	0x40023c00

08003364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800336c:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_InitTick+0x54>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_InitTick+0x58>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	4619      	mov	r1, r3
 8003376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800337a:	fbb3 f3f1 	udiv	r3, r3, r1
 800337e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fd6f 	bl	8003e66 <HAL_SYSTICK_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e00e      	b.n	80033b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b0f      	cmp	r3, #15
 8003396:	d80a      	bhi.n	80033ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003398:	2200      	movs	r2, #0
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	f04f 30ff 	mov.w	r0, #4294967295
 80033a0:	f000 fd37 	bl	8003e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033a4:	4a06      	ldr	r2, [pc, #24]	; (80033c0 <HAL_InitTick+0x5c>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e000      	b.n	80033b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	2000003c 	.word	0x2000003c
 80033bc:	20000044 	.word	0x20000044
 80033c0:	20000040 	.word	0x20000040

080033c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_IncTick+0x20>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_IncTick+0x24>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <HAL_IncTick+0x24>)
 80033d6:	6013      	str	r3, [r2, #0]
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000044 	.word	0x20000044
 80033e8:	20000658 	.word	0x20000658

080033ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return uwTick;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_GetTick+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000658 	.word	0x20000658

08003404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800340c:	f7ff ffee 	bl	80033ec <HAL_GetTick>
 8003410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d005      	beq.n	800342a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <HAL_Delay+0x44>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800342a:	bf00      	nop
 800342c:	f7ff ffde 	bl	80033ec <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	429a      	cmp	r2, r3
 800343a:	d8f7      	bhi.n	800342c <HAL_Delay+0x28>
  {
  }
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000044 	.word	0x20000044

0800344c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e033      	b.n	80034ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff fb14 	bl	8002a98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	d118      	bne.n	80034bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003492:	f023 0302 	bic.w	r3, r3, #2
 8003496:	f043 0202 	orr.w	r2, r3, #2
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fa5e 	bl	8003960 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f023 0303 	bic.w	r3, r3, #3
 80034b2:	f043 0201 	orr.w	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40
 80034ba:	e001      	b.n	80034c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_Start_DMA+0x1e>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e0e9      	b.n	80036c6 <HAL_ADC_Start_DMA+0x1f2>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d018      	beq.n	800353a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003518:	4b6d      	ldr	r3, [pc, #436]	; (80036d0 <HAL_ADC_Start_DMA+0x1fc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a6d      	ldr	r2, [pc, #436]	; (80036d4 <HAL_ADC_Start_DMA+0x200>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	0c9a      	lsrs	r2, r3, #18
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800352c:	e002      	b.n	8003534 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	3b01      	subs	r3, #1
 8003532:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f9      	bne.n	800352e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003548:	d107      	bne.n	800355a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003558:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	f040 80a1 	bne.w	80036ac <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003594:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a8:	d106      	bne.n	80035b8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f023 0206 	bic.w	r2, r3, #6
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
 80035b6:	e002      	b.n	80035be <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035c6:	4b44      	ldr	r3, [pc, #272]	; (80036d8 <HAL_ADC_Start_DMA+0x204>)
 80035c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	4a43      	ldr	r2, [pc, #268]	; (80036dc <HAL_ADC_Start_DMA+0x208>)
 80035d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	4a42      	ldr	r2, [pc, #264]	; (80036e0 <HAL_ADC_Start_DMA+0x20c>)
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	4a41      	ldr	r2, [pc, #260]	; (80036e4 <HAL_ADC_Start_DMA+0x210>)
 80035e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80035ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80035fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800360a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	334c      	adds	r3, #76	; 0x4c
 8003616:	4619      	mov	r1, r3
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f000 fcde 	bl	8003fdc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	2b00      	cmp	r3, #0
 800362a:	d12a      	bne.n	8003682 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2d      	ldr	r2, [pc, #180]	; (80036e8 <HAL_ADC_Start_DMA+0x214>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d015      	beq.n	8003662 <HAL_ADC_Start_DMA+0x18e>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2c      	ldr	r2, [pc, #176]	; (80036ec <HAL_ADC_Start_DMA+0x218>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d105      	bne.n	800364c <HAL_ADC_Start_DMA+0x178>
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <HAL_ADC_Start_DMA+0x204>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <HAL_ADC_Start_DMA+0x21c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d136      	bne.n	80036c4 <HAL_ADC_Start_DMA+0x1f0>
 8003656:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <HAL_ADC_Start_DMA+0x204>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b00      	cmp	r3, #0
 8003660:	d130      	bne.n	80036c4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d129      	bne.n	80036c4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	e020      	b.n	80036c4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <HAL_ADC_Start_DMA+0x214>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d11b      	bne.n	80036c4 <HAL_ADC_Start_DMA+0x1f0>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d114      	bne.n	80036c4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036a8:	609a      	str	r2, [r3, #8]
 80036aa:	e00b      	b.n	80036c4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	f043 0210 	orr.w	r2, r3, #16
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	f043 0201 	orr.w	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	2000003c 	.word	0x2000003c
 80036d4:	431bde83 	.word	0x431bde83
 80036d8:	40012300 	.word	0x40012300
 80036dc:	08003b59 	.word	0x08003b59
 80036e0:	08003c13 	.word	0x08003c13
 80036e4:	08003c2f 	.word	0x08003c2f
 80036e8:	40012000 	.word	0x40012000
 80036ec:	40012100 	.word	0x40012100
 80036f0:	40012200 	.word	0x40012200

080036f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x1c>
 8003734:	2302      	movs	r3, #2
 8003736:	e105      	b.n	8003944 <HAL_ADC_ConfigChannel+0x228>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b09      	cmp	r3, #9
 8003746:	d925      	bls.n	8003794 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68d9      	ldr	r1, [r3, #12]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	3b1e      	subs	r3, #30
 800375e:	2207      	movs	r2, #7
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43da      	mvns	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	400a      	ands	r2, r1
 800376c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68d9      	ldr	r1, [r3, #12]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b29b      	uxth	r3, r3
 800377e:	4618      	mov	r0, r3
 8003780:	4603      	mov	r3, r0
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4403      	add	r3, r0
 8003786:	3b1e      	subs	r3, #30
 8003788:	409a      	lsls	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	e022      	b.n	80037da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6919      	ldr	r1, [r3, #16]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	2207      	movs	r2, #7
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43da      	mvns	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	400a      	ands	r2, r1
 80037b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6919      	ldr	r1, [r3, #16]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	4618      	mov	r0, r3
 80037ca:	4603      	mov	r3, r0
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4403      	add	r3, r0
 80037d0:	409a      	lsls	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b06      	cmp	r3, #6
 80037e0:	d824      	bhi.n	800382c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	3b05      	subs	r3, #5
 80037f4:	221f      	movs	r2, #31
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43da      	mvns	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	400a      	ands	r2, r1
 8003802:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	b29b      	uxth	r3, r3
 8003810:	4618      	mov	r0, r3
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	3b05      	subs	r3, #5
 800381e:	fa00 f203 	lsl.w	r2, r0, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	635a      	str	r2, [r3, #52]	; 0x34
 800382a:	e04c      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b0c      	cmp	r3, #12
 8003832:	d824      	bhi.n	800387e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	3b23      	subs	r3, #35	; 0x23
 8003846:	221f      	movs	r2, #31
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43da      	mvns	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	400a      	ands	r2, r1
 8003854:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	4618      	mov	r0, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	3b23      	subs	r3, #35	; 0x23
 8003870:	fa00 f203 	lsl.w	r2, r0, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
 800387c:	e023      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	3b41      	subs	r3, #65	; 0x41
 8003890:	221f      	movs	r2, #31
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43da      	mvns	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	400a      	ands	r2, r1
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	4618      	mov	r0, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	3b41      	subs	r3, #65	; 0x41
 80038ba:	fa00 f203 	lsl.w	r2, r0, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038c6:	4b22      	ldr	r3, [pc, #136]	; (8003950 <HAL_ADC_ConfigChannel+0x234>)
 80038c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a21      	ldr	r2, [pc, #132]	; (8003954 <HAL_ADC_ConfigChannel+0x238>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d109      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x1cc>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b12      	cmp	r3, #18
 80038da:	d105      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a19      	ldr	r2, [pc, #100]	; (8003954 <HAL_ADC_ConfigChannel+0x238>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d123      	bne.n	800393a <HAL_ADC_ConfigChannel+0x21e>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d003      	beq.n	8003902 <HAL_ADC_ConfigChannel+0x1e6>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b11      	cmp	r3, #17
 8003900:	d11b      	bne.n	800393a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b10      	cmp	r3, #16
 8003914:	d111      	bne.n	800393a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <HAL_ADC_ConfigChannel+0x23c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a10      	ldr	r2, [pc, #64]	; (800395c <HAL_ADC_ConfigChannel+0x240>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	0c9a      	lsrs	r2, r3, #18
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800392c:	e002      	b.n	8003934 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3b01      	subs	r3, #1
 8003932:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f9      	bne.n	800392e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	40012300 	.word	0x40012300
 8003954:	40012000 	.word	0x40012000
 8003958:	2000003c 	.word	0x2000003c
 800395c:	431bde83 	.word	0x431bde83

08003960 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003968:	4b79      	ldr	r3, [pc, #484]	; (8003b50 <ADC_Init+0x1f0>)
 800396a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	431a      	orrs	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	021a      	lsls	r2, r3, #8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6899      	ldr	r1, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	4a58      	ldr	r2, [pc, #352]	; (8003b54 <ADC_Init+0x1f4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d022      	beq.n	8003a3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6899      	ldr	r1, [r3, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6899      	ldr	r1, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	e00f      	b.n	8003a5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0202 	bic.w	r2, r2, #2
 8003a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6899      	ldr	r1, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	7e1b      	ldrb	r3, [r3, #24]
 8003a78:	005a      	lsls	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01b      	beq.n	8003ac4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003aaa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6859      	ldr	r1, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	035a      	lsls	r2, r3, #13
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	e007      	b.n	8003ad4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	051a      	lsls	r2, r3, #20
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6899      	ldr	r1, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b16:	025a      	lsls	r2, r3, #9
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6899      	ldr	r1, [r3, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	029a      	lsls	r2, r3, #10
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40012300 	.word	0x40012300
 8003b54:	0f000001 	.word	0x0f000001

08003b58 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d13c      	bne.n	8003bec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d12b      	bne.n	8003be4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d127      	bne.n	8003be4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d006      	beq.n	8003bb0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d119      	bne.n	8003be4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0220 	bic.w	r2, r2, #32
 8003bbe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d105      	bne.n	8003be4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	f043 0201 	orr.w	r2, r3, #1
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f7fd fd43 	bl	8001670 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bea:	e00e      	b.n	8003c0a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f7ff fd85 	bl	8003708 <HAL_ADC_ErrorCallback>
}
 8003bfe:	e004      	b.n	8003c0a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	4798      	blx	r3
}
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f7ff fd67 	bl	80036f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c26:	bf00      	nop
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2240      	movs	r2, #64	; 0x40
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	f043 0204 	orr.w	r2, r3, #4
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f7ff fd5a 	bl	8003708 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c78:	4013      	ands	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c8e:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	60d3      	str	r3, [r2, #12]
}
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	e000ed00 	.word	0xe000ed00

08003ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <__NVIC_GetPriorityGrouping+0x18>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	0a1b      	lsrs	r3, r3, #8
 8003cae:	f003 0307 	and.w	r3, r3, #7
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	e000ed00 	.word	0xe000ed00

08003cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	db0b      	blt.n	8003cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	f003 021f 	and.w	r2, r3, #31
 8003cd8:	4907      	ldr	r1, [pc, #28]	; (8003cf8 <__NVIC_EnableIRQ+0x38>)
 8003cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	e000e100 	.word	0xe000e100

08003cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	6039      	str	r1, [r7, #0]
 8003d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	db0a      	blt.n	8003d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	490c      	ldr	r1, [pc, #48]	; (8003d48 <__NVIC_SetPriority+0x4c>)
 8003d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1a:	0112      	lsls	r2, r2, #4
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	440b      	add	r3, r1
 8003d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d24:	e00a      	b.n	8003d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	4908      	ldr	r1, [pc, #32]	; (8003d4c <__NVIC_SetPriority+0x50>)
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	3b04      	subs	r3, #4
 8003d34:	0112      	lsls	r2, r2, #4
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	440b      	add	r3, r1
 8003d3a:	761a      	strb	r2, [r3, #24]
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	e000e100 	.word	0xe000e100
 8003d4c:	e000ed00 	.word	0xe000ed00

08003d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b089      	sub	sp, #36	; 0x24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f1c3 0307 	rsb	r3, r3, #7
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	bf28      	it	cs
 8003d6e:	2304      	movcs	r3, #4
 8003d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3304      	adds	r3, #4
 8003d76:	2b06      	cmp	r3, #6
 8003d78:	d902      	bls.n	8003d80 <NVIC_EncodePriority+0x30>
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3b03      	subs	r3, #3
 8003d7e:	e000      	b.n	8003d82 <NVIC_EncodePriority+0x32>
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d84:	f04f 32ff 	mov.w	r2, #4294967295
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43da      	mvns	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	401a      	ands	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d98:	f04f 31ff 	mov.w	r1, #4294967295
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003da2:	43d9      	mvns	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da8:	4313      	orrs	r3, r2
         );
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3724      	adds	r7, #36	; 0x24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dc8:	d301      	bcc.n	8003dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e00f      	b.n	8003dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dce:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <SysTick_Config+0x40>)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dd6:	210f      	movs	r1, #15
 8003dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ddc:	f7ff ff8e 	bl	8003cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <SysTick_Config+0x40>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003de6:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <SysTick_Config+0x40>)
 8003de8:	2207      	movs	r2, #7
 8003dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	e000e010 	.word	0xe000e010

08003dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff ff29 	bl	8003c5c <__NVIC_SetPriorityGrouping>
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	4603      	mov	r3, r0
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e24:	f7ff ff3e 	bl	8003ca4 <__NVIC_GetPriorityGrouping>
 8003e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	6978      	ldr	r0, [r7, #20]
 8003e30:	f7ff ff8e 	bl	8003d50 <NVIC_EncodePriority>
 8003e34:	4602      	mov	r2, r0
 8003e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff ff5d 	bl	8003cfc <__NVIC_SetPriority>
}
 8003e42:	bf00      	nop
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	4603      	mov	r3, r0
 8003e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff ff31 	bl	8003cc0 <__NVIC_EnableIRQ>
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff ffa2 	bl	8003db8 <SysTick_Config>
 8003e74:	4603      	mov	r3, r0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e8c:	f7ff faae 	bl	80033ec <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e099      	b.n	8003fd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ebc:	e00f      	b.n	8003ede <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ebe:	f7ff fa95 	bl	80033ec <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b05      	cmp	r3, #5
 8003eca:	d908      	bls.n	8003ede <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e078      	b.n	8003fd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e8      	bne.n	8003ebe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4b38      	ldr	r3, [pc, #224]	; (8003fd8 <HAL_DMA_Init+0x158>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d107      	bne.n	8003f48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	4313      	orrs	r3, r2
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f023 0307 	bic.w	r3, r3, #7
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d117      	bne.n	8003fa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00e      	beq.n	8003fa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fa6f 	bl	8004468 <DMA_CheckFifoParam>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2240      	movs	r2, #64	; 0x40
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e016      	b.n	8003fd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fa26 	bl	80043fc <DMA_CalcBaseAndBitshift>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb8:	223f      	movs	r2, #63	; 0x3f
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	f010803f 	.word	0xf010803f

08003fdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_DMA_Start_IT+0x26>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e040      	b.n	8004084 <HAL_DMA_Start_IT+0xa8>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b01      	cmp	r3, #1
 8004014:	d12f      	bne.n	8004076 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2202      	movs	r2, #2
 800401a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f9b8 	bl	80043a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004034:	223f      	movs	r2, #63	; 0x3f
 8004036:	409a      	lsls	r2, r3
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0216 	orr.w	r2, r2, #22
 800404a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0208 	orr.w	r2, r2, #8
 8004062:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	e005      	b.n	8004082 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800407e:	2302      	movs	r3, #2
 8004080:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004082:	7dfb      	ldrb	r3, [r7, #23]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004098:	4b8e      	ldr	r3, [pc, #568]	; (80042d4 <HAL_DMA_IRQHandler+0x248>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a8e      	ldr	r2, [pc, #568]	; (80042d8 <HAL_DMA_IRQHandler+0x24c>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	0a9b      	lsrs	r3, r3, #10
 80040a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b6:	2208      	movs	r2, #8
 80040b8:	409a      	lsls	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4013      	ands	r3, r2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01a      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d013      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0204 	bic.w	r2, r2, #4
 80040de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e4:	2208      	movs	r2, #8
 80040e6:	409a      	lsls	r2, r3
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	f043 0201 	orr.w	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fc:	2201      	movs	r2, #1
 80040fe:	409a      	lsls	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d012      	beq.n	800412e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411a:	2201      	movs	r2, #1
 800411c:	409a      	lsls	r2, r3
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004126:	f043 0202 	orr.w	r2, r3, #2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	2204      	movs	r2, #4
 8004134:	409a      	lsls	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4013      	ands	r3, r2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d012      	beq.n	8004164 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00b      	beq.n	8004164 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004150:	2204      	movs	r2, #4
 8004152:	409a      	lsls	r2, r3
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	f043 0204 	orr.w	r2, r3, #4
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004168:	2210      	movs	r2, #16
 800416a:	409a      	lsls	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4013      	ands	r3, r2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d043      	beq.n	80041fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d03c      	beq.n	80041fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004186:	2210      	movs	r2, #16
 8004188:	409a      	lsls	r2, r3
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d018      	beq.n	80041ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d108      	bne.n	80041bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d024      	beq.n	80041fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	4798      	blx	r3
 80041ba:	e01f      	b.n	80041fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01b      	beq.n	80041fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	4798      	blx	r3
 80041cc:	e016      	b.n	80041fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d107      	bne.n	80041ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0208 	bic.w	r2, r2, #8
 80041ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004200:	2220      	movs	r2, #32
 8004202:	409a      	lsls	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4013      	ands	r3, r2
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 808f 	beq.w	800432c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 8087 	beq.w	800432c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004222:	2220      	movs	r2, #32
 8004224:	409a      	lsls	r2, r3
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b05      	cmp	r3, #5
 8004234:	d136      	bne.n	80042a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0216 	bic.w	r2, r2, #22
 8004244:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695a      	ldr	r2, [r3, #20]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004254:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d103      	bne.n	8004266 <HAL_DMA_IRQHandler+0x1da>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0208 	bic.w	r2, r2, #8
 8004274:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427a:	223f      	movs	r2, #63	; 0x3f
 800427c:	409a      	lsls	r2, r3
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004296:	2b00      	cmp	r3, #0
 8004298:	d07e      	beq.n	8004398 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	4798      	blx	r3
        }
        return;
 80042a2:	e079      	b.n	8004398 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01d      	beq.n	80042ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10d      	bne.n	80042dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d031      	beq.n	800432c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4798      	blx	r3
 80042d0:	e02c      	b.n	800432c <HAL_DMA_IRQHandler+0x2a0>
 80042d2:	bf00      	nop
 80042d4:	2000003c 	.word	0x2000003c
 80042d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d023      	beq.n	800432c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
 80042ec:	e01e      	b.n	800432c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10f      	bne.n	800431c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0210 	bic.w	r2, r2, #16
 800430a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	2b00      	cmp	r3, #0
 8004332:	d032      	beq.n	800439a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d022      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2205      	movs	r2, #5
 8004344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	3301      	adds	r3, #1
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	429a      	cmp	r2, r3
 8004362:	d307      	bcc.n	8004374 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f2      	bne.n	8004358 <HAL_DMA_IRQHandler+0x2cc>
 8004372:	e000      	b.n	8004376 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004374:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
 8004396:	e000      	b.n	800439a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004398:	bf00      	nop
    }
  }
}
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b40      	cmp	r3, #64	; 0x40
 80043cc:	d108      	bne.n	80043e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043de:	e007      	b.n	80043f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	60da      	str	r2, [r3, #12]
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	3b10      	subs	r3, #16
 800440c:	4a14      	ldr	r2, [pc, #80]	; (8004460 <DMA_CalcBaseAndBitshift+0x64>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004416:	4a13      	ldr	r2, [pc, #76]	; (8004464 <DMA_CalcBaseAndBitshift+0x68>)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b03      	cmp	r3, #3
 8004428:	d909      	bls.n	800443e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004432:	f023 0303 	bic.w	r3, r3, #3
 8004436:	1d1a      	adds	r2, r3, #4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	659a      	str	r2, [r3, #88]	; 0x58
 800443c:	e007      	b.n	800444e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004446:	f023 0303 	bic.w	r3, r3, #3
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	aaaaaaab 	.word	0xaaaaaaab
 8004464:	08009770 	.word	0x08009770

08004468 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d11f      	bne.n	80044c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d856      	bhi.n	8004536 <DMA_CheckFifoParam+0xce>
 8004488:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <DMA_CheckFifoParam+0x28>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044a1 	.word	0x080044a1
 8004494:	080044b3 	.word	0x080044b3
 8004498:	080044a1 	.word	0x080044a1
 800449c:	08004537 	.word	0x08004537
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d046      	beq.n	800453a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b0:	e043      	b.n	800453a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044ba:	d140      	bne.n	800453e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044c0:	e03d      	b.n	800453e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ca:	d121      	bne.n	8004510 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d837      	bhi.n	8004542 <DMA_CheckFifoParam+0xda>
 80044d2:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <DMA_CheckFifoParam+0x70>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	080044ef 	.word	0x080044ef
 80044e0:	080044e9 	.word	0x080044e9
 80044e4:	08004501 	.word	0x08004501
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
      break;
 80044ec:	e030      	b.n	8004550 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d025      	beq.n	8004546 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044fe:	e022      	b.n	8004546 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004508:	d11f      	bne.n	800454a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800450e:	e01c      	b.n	800454a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d903      	bls.n	800451e <DMA_CheckFifoParam+0xb6>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b03      	cmp	r3, #3
 800451a:	d003      	beq.n	8004524 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800451c:	e018      	b.n	8004550 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	73fb      	strb	r3, [r7, #15]
      break;
 8004522:	e015      	b.n	8004550 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00e      	beq.n	800454e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
      break;
 8004534:	e00b      	b.n	800454e <DMA_CheckFifoParam+0xe6>
      break;
 8004536:	bf00      	nop
 8004538:	e00a      	b.n	8004550 <DMA_CheckFifoParam+0xe8>
      break;
 800453a:	bf00      	nop
 800453c:	e008      	b.n	8004550 <DMA_CheckFifoParam+0xe8>
      break;
 800453e:	bf00      	nop
 8004540:	e006      	b.n	8004550 <DMA_CheckFifoParam+0xe8>
      break;
 8004542:	bf00      	nop
 8004544:	e004      	b.n	8004550 <DMA_CheckFifoParam+0xe8>
      break;
 8004546:	bf00      	nop
 8004548:	e002      	b.n	8004550 <DMA_CheckFifoParam+0xe8>
      break;   
 800454a:	bf00      	nop
 800454c:	e000      	b.n	8004550 <DMA_CheckFifoParam+0xe8>
      break;
 800454e:	bf00      	nop
    }
  } 
  
  return status; 
 8004550:	7bfb      	ldrb	r3, [r7, #15]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop

08004560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004560:	b480      	push	{r7}
 8004562:	b089      	sub	sp, #36	; 0x24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800456e:	2300      	movs	r3, #0
 8004570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004572:	2300      	movs	r3, #0
 8004574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	e16b      	b.n	8004854 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800457c:	2201      	movs	r2, #1
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4013      	ands	r3, r2
 800458e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	429a      	cmp	r2, r3
 8004596:	f040 815a 	bne.w	800484e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d005      	beq.n	80045b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d130      	bne.n	8004614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	2203      	movs	r2, #3
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4013      	ands	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045e8:	2201      	movs	r2, #1
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	091b      	lsrs	r3, r3, #4
 80045fe:	f003 0201 	and.w	r2, r3, #1
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4313      	orrs	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	2b03      	cmp	r3, #3
 800461e:	d017      	beq.n	8004650 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	2203      	movs	r2, #3
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4013      	ands	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4313      	orrs	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d123      	bne.n	80046a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	08da      	lsrs	r2, r3, #3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3208      	adds	r2, #8
 8004664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	220f      	movs	r2, #15
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4013      	ands	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4313      	orrs	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	08da      	lsrs	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3208      	adds	r2, #8
 800469e:	69b9      	ldr	r1, [r7, #24]
 80046a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	2203      	movs	r2, #3
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 0203 	and.w	r2, r3, #3
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80b4 	beq.w	800484e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	4b60      	ldr	r3, [pc, #384]	; (800486c <HAL_GPIO_Init+0x30c>)
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	4a5f      	ldr	r2, [pc, #380]	; (800486c <HAL_GPIO_Init+0x30c>)
 80046f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046f4:	6453      	str	r3, [r2, #68]	; 0x44
 80046f6:	4b5d      	ldr	r3, [pc, #372]	; (800486c <HAL_GPIO_Init+0x30c>)
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004702:	4a5b      	ldr	r2, [pc, #364]	; (8004870 <HAL_GPIO_Init+0x310>)
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	3302      	adds	r3, #2
 800470a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	220f      	movs	r2, #15
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4013      	ands	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a52      	ldr	r2, [pc, #328]	; (8004874 <HAL_GPIO_Init+0x314>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d02b      	beq.n	8004786 <HAL_GPIO_Init+0x226>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a51      	ldr	r2, [pc, #324]	; (8004878 <HAL_GPIO_Init+0x318>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d025      	beq.n	8004782 <HAL_GPIO_Init+0x222>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a50      	ldr	r2, [pc, #320]	; (800487c <HAL_GPIO_Init+0x31c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01f      	beq.n	800477e <HAL_GPIO_Init+0x21e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a4f      	ldr	r2, [pc, #316]	; (8004880 <HAL_GPIO_Init+0x320>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d019      	beq.n	800477a <HAL_GPIO_Init+0x21a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a4e      	ldr	r2, [pc, #312]	; (8004884 <HAL_GPIO_Init+0x324>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <HAL_GPIO_Init+0x216>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a4d      	ldr	r2, [pc, #308]	; (8004888 <HAL_GPIO_Init+0x328>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00d      	beq.n	8004772 <HAL_GPIO_Init+0x212>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a4c      	ldr	r2, [pc, #304]	; (800488c <HAL_GPIO_Init+0x32c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <HAL_GPIO_Init+0x20e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a4b      	ldr	r2, [pc, #300]	; (8004890 <HAL_GPIO_Init+0x330>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d101      	bne.n	800476a <HAL_GPIO_Init+0x20a>
 8004766:	2307      	movs	r3, #7
 8004768:	e00e      	b.n	8004788 <HAL_GPIO_Init+0x228>
 800476a:	2308      	movs	r3, #8
 800476c:	e00c      	b.n	8004788 <HAL_GPIO_Init+0x228>
 800476e:	2306      	movs	r3, #6
 8004770:	e00a      	b.n	8004788 <HAL_GPIO_Init+0x228>
 8004772:	2305      	movs	r3, #5
 8004774:	e008      	b.n	8004788 <HAL_GPIO_Init+0x228>
 8004776:	2304      	movs	r3, #4
 8004778:	e006      	b.n	8004788 <HAL_GPIO_Init+0x228>
 800477a:	2303      	movs	r3, #3
 800477c:	e004      	b.n	8004788 <HAL_GPIO_Init+0x228>
 800477e:	2302      	movs	r3, #2
 8004780:	e002      	b.n	8004788 <HAL_GPIO_Init+0x228>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <HAL_GPIO_Init+0x228>
 8004786:	2300      	movs	r3, #0
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	f002 0203 	and.w	r2, r2, #3
 800478e:	0092      	lsls	r2, r2, #2
 8004790:	4093      	lsls	r3, r2
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4313      	orrs	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004798:	4935      	ldr	r1, [pc, #212]	; (8004870 <HAL_GPIO_Init+0x310>)
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	089b      	lsrs	r3, r3, #2
 800479e:	3302      	adds	r3, #2
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047a6:	4b3b      	ldr	r3, [pc, #236]	; (8004894 <HAL_GPIO_Init+0x334>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	43db      	mvns	r3, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047ca:	4a32      	ldr	r2, [pc, #200]	; (8004894 <HAL_GPIO_Init+0x334>)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047d0:	4b30      	ldr	r3, [pc, #192]	; (8004894 <HAL_GPIO_Init+0x334>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047f4:	4a27      	ldr	r2, [pc, #156]	; (8004894 <HAL_GPIO_Init+0x334>)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047fa:	4b26      	ldr	r3, [pc, #152]	; (8004894 <HAL_GPIO_Init+0x334>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800481e:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <HAL_GPIO_Init+0x334>)
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004824:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <HAL_GPIO_Init+0x334>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004848:	4a12      	ldr	r2, [pc, #72]	; (8004894 <HAL_GPIO_Init+0x334>)
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3301      	adds	r3, #1
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	2b0f      	cmp	r3, #15
 8004858:	f67f ae90 	bls.w	800457c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	3724      	adds	r7, #36	; 0x24
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800
 8004870:	40013800 	.word	0x40013800
 8004874:	40020000 	.word	0x40020000
 8004878:	40020400 	.word	0x40020400
 800487c:	40020800 	.word	0x40020800
 8004880:	40020c00 	.word	0x40020c00
 8004884:	40021000 	.word	0x40021000
 8004888:	40021400 	.word	0x40021400
 800488c:	40021800 	.word	0x40021800
 8004890:	40021c00 	.word	0x40021c00
 8004894:	40013c00 	.word	0x40013c00

08004898 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	887b      	ldrh	r3, [r7, #2]
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
 80048b4:	e001      	b.n	80048ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048b6:	2300      	movs	r3, #0
 80048b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	807b      	strh	r3, [r7, #2]
 80048d4:	4613      	mov	r3, r2
 80048d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048d8:	787b      	ldrb	r3, [r7, #1]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048de:	887a      	ldrh	r2, [r7, #2]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048e4:	e003      	b.n	80048ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048e6:	887b      	ldrh	r3, [r7, #2]
 80048e8:	041a      	lsls	r2, r3, #16
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	619a      	str	r2, [r3, #24]
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e12b      	b.n	8004b66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fe f968 	bl	8002bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2224      	movs	r2, #36	; 0x24
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800494e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800495e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004960:	f000 fd40 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 8004964:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	4a81      	ldr	r2, [pc, #516]	; (8004b70 <HAL_I2C_Init+0x274>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d807      	bhi.n	8004980 <HAL_I2C_Init+0x84>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4a80      	ldr	r2, [pc, #512]	; (8004b74 <HAL_I2C_Init+0x278>)
 8004974:	4293      	cmp	r3, r2
 8004976:	bf94      	ite	ls
 8004978:	2301      	movls	r3, #1
 800497a:	2300      	movhi	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	e006      	b.n	800498e <HAL_I2C_Init+0x92>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4a7d      	ldr	r2, [pc, #500]	; (8004b78 <HAL_I2C_Init+0x27c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	bf94      	ite	ls
 8004988:	2301      	movls	r3, #1
 800498a:	2300      	movhi	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e0e7      	b.n	8004b66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a78      	ldr	r2, [pc, #480]	; (8004b7c <HAL_I2C_Init+0x280>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	0c9b      	lsrs	r3, r3, #18
 80049a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4a6a      	ldr	r2, [pc, #424]	; (8004b70 <HAL_I2C_Init+0x274>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d802      	bhi.n	80049d0 <HAL_I2C_Init+0xd4>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	3301      	adds	r3, #1
 80049ce:	e009      	b.n	80049e4 <HAL_I2C_Init+0xe8>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
 80049da:	4a69      	ldr	r2, [pc, #420]	; (8004b80 <HAL_I2C_Init+0x284>)
 80049dc:	fba2 2303 	umull	r2, r3, r2, r3
 80049e0:	099b      	lsrs	r3, r3, #6
 80049e2:	3301      	adds	r3, #1
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	430b      	orrs	r3, r1
 80049ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	495c      	ldr	r1, [pc, #368]	; (8004b70 <HAL_I2C_Init+0x274>)
 8004a00:	428b      	cmp	r3, r1
 8004a02:	d819      	bhi.n	8004a38 <HAL_I2C_Init+0x13c>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1e59      	subs	r1, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a12:	1c59      	adds	r1, r3, #1
 8004a14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a18:	400b      	ands	r3, r1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <HAL_I2C_Init+0x138>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1e59      	subs	r1, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a32:	e051      	b.n	8004ad8 <HAL_I2C_Init+0x1dc>
 8004a34:	2304      	movs	r3, #4
 8004a36:	e04f      	b.n	8004ad8 <HAL_I2C_Init+0x1dc>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d111      	bne.n	8004a64 <HAL_I2C_Init+0x168>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1e58      	subs	r0, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6859      	ldr	r1, [r3, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	440b      	add	r3, r1
 8004a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a52:	3301      	adds	r3, #1
 8004a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	e012      	b.n	8004a8a <HAL_I2C_Init+0x18e>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	1e58      	subs	r0, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	0099      	lsls	r1, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Init+0x196>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e022      	b.n	8004ad8 <HAL_I2C_Init+0x1dc>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10e      	bne.n	8004ab8 <HAL_I2C_Init+0x1bc>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1e58      	subs	r0, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6859      	ldr	r1, [r3, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	440b      	add	r3, r1
 8004aa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aac:	3301      	adds	r3, #1
 8004aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab6:	e00f      	b.n	8004ad8 <HAL_I2C_Init+0x1dc>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	1e58      	subs	r0, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6859      	ldr	r1, [r3, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	0099      	lsls	r1, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	6809      	ldr	r1, [r1, #0]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6911      	ldr	r1, [r2, #16]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68d2      	ldr	r2, [r2, #12]
 8004b12:	4311      	orrs	r1, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695a      	ldr	r2, [r3, #20]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	000186a0 	.word	0x000186a0
 8004b74:	001e847f 	.word	0x001e847f
 8004b78:	003d08ff 	.word	0x003d08ff
 8004b7c:	431bde83 	.word	0x431bde83
 8004b80:	10624dd3 	.word	0x10624dd3

08004b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e267      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d075      	beq.n	8004c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ba2:	4b88      	ldr	r3, [pc, #544]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d00c      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bae:	4b85      	ldr	r3, [pc, #532]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d112      	bne.n	8004be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bba:	4b82      	ldr	r3, [pc, #520]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc6:	d10b      	bne.n	8004be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc8:	4b7e      	ldr	r3, [pc, #504]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d05b      	beq.n	8004c8c <HAL_RCC_OscConfig+0x108>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d157      	bne.n	8004c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e242      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be8:	d106      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x74>
 8004bea:	4b76      	ldr	r3, [pc, #472]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a75      	ldr	r2, [pc, #468]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e01d      	b.n	8004c34 <HAL_RCC_OscConfig+0xb0>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c00:	d10c      	bne.n	8004c1c <HAL_RCC_OscConfig+0x98>
 8004c02:	4b70      	ldr	r3, [pc, #448]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a6f      	ldr	r2, [pc, #444]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4b6d      	ldr	r3, [pc, #436]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a6c      	ldr	r2, [pc, #432]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	e00b      	b.n	8004c34 <HAL_RCC_OscConfig+0xb0>
 8004c1c:	4b69      	ldr	r3, [pc, #420]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a68      	ldr	r2, [pc, #416]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	4b66      	ldr	r3, [pc, #408]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a65      	ldr	r2, [pc, #404]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d013      	beq.n	8004c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3c:	f7fe fbd6 	bl	80033ec <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c44:	f7fe fbd2 	bl	80033ec <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b64      	cmp	r3, #100	; 0x64
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e207      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c56:	4b5b      	ldr	r3, [pc, #364]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0xc0>
 8004c62:	e014      	b.n	8004c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7fe fbc2 	bl	80033ec <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c6c:	f7fe fbbe 	bl	80033ec <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	; 0x64
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e1f3      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7e:	4b51      	ldr	r3, [pc, #324]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0xe8>
 8004c8a:	e000      	b.n	8004c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d063      	beq.n	8004d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c9a:	4b4a      	ldr	r3, [pc, #296]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ca6:	4b47      	ldr	r3, [pc, #284]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d11c      	bne.n	8004cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb2:	4b44      	ldr	r3, [pc, #272]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d116      	bne.n	8004cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cbe:	4b41      	ldr	r3, [pc, #260]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x152>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d001      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e1c7      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd6:	4b3b      	ldr	r3, [pc, #236]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4937      	ldr	r1, [pc, #220]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cea:	e03a      	b.n	8004d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d020      	beq.n	8004d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf4:	4b34      	ldr	r3, [pc, #208]	; (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fe fb77 	bl	80033ec <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d02:	f7fe fb73 	bl	80033ec <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e1a8      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d14:	4b2b      	ldr	r3, [pc, #172]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d20:	4b28      	ldr	r3, [pc, #160]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	4925      	ldr	r1, [pc, #148]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]
 8004d34:	e015      	b.n	8004d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fe fb56 	bl	80033ec <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d44:	f7fe fb52 	bl	80033ec <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e187      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d56:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d036      	beq.n	8004ddc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d76:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <HAL_RCC_OscConfig+0x248>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fe fb36 	bl	80033ec <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d84:	f7fe fb32 	bl	80033ec <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e167      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x200>
 8004da2:	e01b      	b.n	8004ddc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da4:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <HAL_RCC_OscConfig+0x248>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004daa:	f7fe fb1f 	bl	80033ec <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db0:	e00e      	b.n	8004dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db2:	f7fe fb1b 	bl	80033ec <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d907      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e150      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	42470000 	.word	0x42470000
 8004dcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd0:	4b88      	ldr	r3, [pc, #544]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1ea      	bne.n	8004db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8097 	beq.w	8004f18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dea:	2300      	movs	r3, #0
 8004dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dee:	4b81      	ldr	r3, [pc, #516]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10f      	bne.n	8004e1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	4b7d      	ldr	r3, [pc, #500]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	4a7c      	ldr	r2, [pc, #496]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e08:	6413      	str	r3, [r2, #64]	; 0x40
 8004e0a:	4b7a      	ldr	r3, [pc, #488]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e12:	60bb      	str	r3, [r7, #8]
 8004e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e16:	2301      	movs	r3, #1
 8004e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1a:	4b77      	ldr	r3, [pc, #476]	; (8004ff8 <HAL_RCC_OscConfig+0x474>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d118      	bne.n	8004e58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e26:	4b74      	ldr	r3, [pc, #464]	; (8004ff8 <HAL_RCC_OscConfig+0x474>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a73      	ldr	r2, [pc, #460]	; (8004ff8 <HAL_RCC_OscConfig+0x474>)
 8004e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e32:	f7fe fadb 	bl	80033ec <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3a:	f7fe fad7 	bl	80033ec <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e10c      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4c:	4b6a      	ldr	r3, [pc, #424]	; (8004ff8 <HAL_RCC_OscConfig+0x474>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d106      	bne.n	8004e6e <HAL_RCC_OscConfig+0x2ea>
 8004e60:	4b64      	ldr	r3, [pc, #400]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e64:	4a63      	ldr	r2, [pc, #396]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6c:	e01c      	b.n	8004ea8 <HAL_RCC_OscConfig+0x324>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b05      	cmp	r3, #5
 8004e74:	d10c      	bne.n	8004e90 <HAL_RCC_OscConfig+0x30c>
 8004e76:	4b5f      	ldr	r3, [pc, #380]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	4a5e      	ldr	r2, [pc, #376]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e7c:	f043 0304 	orr.w	r3, r3, #4
 8004e80:	6713      	str	r3, [r2, #112]	; 0x70
 8004e82:	4b5c      	ldr	r3, [pc, #368]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	4a5b      	ldr	r2, [pc, #364]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8e:	e00b      	b.n	8004ea8 <HAL_RCC_OscConfig+0x324>
 8004e90:	4b58      	ldr	r3, [pc, #352]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e94:	4a57      	ldr	r2, [pc, #348]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e96:	f023 0301 	bic.w	r3, r3, #1
 8004e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9c:	4b55      	ldr	r3, [pc, #340]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	4a54      	ldr	r2, [pc, #336]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	f023 0304 	bic.w	r3, r3, #4
 8004ea6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d015      	beq.n	8004edc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb0:	f7fe fa9c 	bl	80033ec <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb6:	e00a      	b.n	8004ece <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb8:	f7fe fa98 	bl	80033ec <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e0cb      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ece:	4b49      	ldr	r3, [pc, #292]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0ee      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x334>
 8004eda:	e014      	b.n	8004f06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004edc:	f7fe fa86 	bl	80033ec <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee4:	f7fe fa82 	bl	80033ec <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e0b5      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efa:	4b3e      	ldr	r3, [pc, #248]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1ee      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d105      	bne.n	8004f18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f0c:	4b39      	ldr	r3, [pc, #228]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	4a38      	ldr	r2, [pc, #224]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80a1 	beq.w	8005064 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f22:	4b34      	ldr	r3, [pc, #208]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 030c 	and.w	r3, r3, #12
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d05c      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d141      	bne.n	8004fba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f36:	4b31      	ldr	r3, [pc, #196]	; (8004ffc <HAL_RCC_OscConfig+0x478>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fe fa56 	bl	80033ec <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fe fa52 	bl	80033ec <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e087      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f56:	4b27      	ldr	r3, [pc, #156]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	019b      	lsls	r3, r3, #6
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	041b      	lsls	r3, r3, #16
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	061b      	lsls	r3, r3, #24
 8004f86:	491b      	ldr	r1, [pc, #108]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f8c:	4b1b      	ldr	r3, [pc, #108]	; (8004ffc <HAL_RCC_OscConfig+0x478>)
 8004f8e:	2201      	movs	r2, #1
 8004f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f92:	f7fe fa2b 	bl	80033ec <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f9a:	f7fe fa27 	bl	80033ec <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e05c      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fac:	4b11      	ldr	r3, [pc, #68]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0f0      	beq.n	8004f9a <HAL_RCC_OscConfig+0x416>
 8004fb8:	e054      	b.n	8005064 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fba:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <HAL_RCC_OscConfig+0x478>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc0:	f7fe fa14 	bl	80033ec <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc8:	f7fe fa10 	bl	80033ec <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e045      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fda:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x444>
 8004fe6:	e03d      	b.n	8005064 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d107      	bne.n	8005000 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e038      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	40007000 	.word	0x40007000
 8004ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005000:	4b1b      	ldr	r3, [pc, #108]	; (8005070 <HAL_RCC_OscConfig+0x4ec>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d028      	beq.n	8005060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005018:	429a      	cmp	r2, r3
 800501a:	d121      	bne.n	8005060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005026:	429a      	cmp	r2, r3
 8005028:	d11a      	bne.n	8005060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005030:	4013      	ands	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005038:	4293      	cmp	r3, r2
 800503a:	d111      	bne.n	8005060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005046:	085b      	lsrs	r3, r3, #1
 8005048:	3b01      	subs	r3, #1
 800504a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800504c:	429a      	cmp	r2, r3
 800504e:	d107      	bne.n	8005060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800

08005074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0cc      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005088:	4b68      	ldr	r3, [pc, #416]	; (800522c <HAL_RCC_ClockConfig+0x1b8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d90c      	bls.n	80050b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005096:	4b65      	ldr	r3, [pc, #404]	; (800522c <HAL_RCC_ClockConfig+0x1b8>)
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800509e:	4b63      	ldr	r3, [pc, #396]	; (800522c <HAL_RCC_ClockConfig+0x1b8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d001      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0b8      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d020      	beq.n	80050fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d005      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050c8:	4b59      	ldr	r3, [pc, #356]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	4a58      	ldr	r2, [pc, #352]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050e0:	4b53      	ldr	r3, [pc, #332]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4a52      	ldr	r2, [pc, #328]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ec:	4b50      	ldr	r3, [pc, #320]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	494d      	ldr	r1, [pc, #308]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d044      	beq.n	8005194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d107      	bne.n	8005122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005112:	4b47      	ldr	r3, [pc, #284]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d119      	bne.n	8005152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e07f      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d003      	beq.n	8005132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800512e:	2b03      	cmp	r3, #3
 8005130:	d107      	bne.n	8005142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005132:	4b3f      	ldr	r3, [pc, #252]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e06f      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005142:	4b3b      	ldr	r3, [pc, #236]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e067      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005152:	4b37      	ldr	r3, [pc, #220]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f023 0203 	bic.w	r2, r3, #3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4934      	ldr	r1, [pc, #208]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	4313      	orrs	r3, r2
 8005162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005164:	f7fe f942 	bl	80033ec <HAL_GetTick>
 8005168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516a:	e00a      	b.n	8005182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800516c:	f7fe f93e 	bl	80033ec <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	f241 3288 	movw	r2, #5000	; 0x1388
 800517a:	4293      	cmp	r3, r2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e04f      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005182:	4b2b      	ldr	r3, [pc, #172]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 020c 	and.w	r2, r3, #12
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	429a      	cmp	r2, r3
 8005192:	d1eb      	bne.n	800516c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005194:	4b25      	ldr	r3, [pc, #148]	; (800522c <HAL_RCC_ClockConfig+0x1b8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d20c      	bcs.n	80051bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a2:	4b22      	ldr	r3, [pc, #136]	; (800522c <HAL_RCC_ClockConfig+0x1b8>)
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051aa:	4b20      	ldr	r3, [pc, #128]	; (800522c <HAL_RCC_ClockConfig+0x1b8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d001      	beq.n	80051bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e032      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051c8:	4b19      	ldr	r3, [pc, #100]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4916      	ldr	r1, [pc, #88]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051e6:	4b12      	ldr	r3, [pc, #72]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	490e      	ldr	r1, [pc, #56]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051fa:	f000 f821 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 80051fe:	4602      	mov	r2, r0
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	490a      	ldr	r1, [pc, #40]	; (8005234 <HAL_RCC_ClockConfig+0x1c0>)
 800520c:	5ccb      	ldrb	r3, [r1, r3]
 800520e:	fa22 f303 	lsr.w	r3, r2, r3
 8005212:	4a09      	ldr	r2, [pc, #36]	; (8005238 <HAL_RCC_ClockConfig+0x1c4>)
 8005214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005216:	4b09      	ldr	r3, [pc, #36]	; (800523c <HAL_RCC_ClockConfig+0x1c8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f7fe f8a2 	bl	8003364 <HAL_InitTick>

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40023c00 	.word	0x40023c00
 8005230:	40023800 	.word	0x40023800
 8005234:	08009758 	.word	0x08009758
 8005238:	2000003c 	.word	0x2000003c
 800523c:	20000040 	.word	0x20000040

08005240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005244:	b090      	sub	sp, #64	; 0x40
 8005246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	637b      	str	r3, [r7, #52]	; 0x34
 800524c:	2300      	movs	r3, #0
 800524e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005250:	2300      	movs	r3, #0
 8005252:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005258:	4b59      	ldr	r3, [pc, #356]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 030c 	and.w	r3, r3, #12
 8005260:	2b08      	cmp	r3, #8
 8005262:	d00d      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0x40>
 8005264:	2b08      	cmp	r3, #8
 8005266:	f200 80a1 	bhi.w	80053ac <HAL_RCC_GetSysClockFreq+0x16c>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <HAL_RCC_GetSysClockFreq+0x34>
 800526e:	2b04      	cmp	r3, #4
 8005270:	d003      	beq.n	800527a <HAL_RCC_GetSysClockFreq+0x3a>
 8005272:	e09b      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005274:	4b53      	ldr	r3, [pc, #332]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005276:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005278:	e09b      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800527a:	4b53      	ldr	r3, [pc, #332]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800527c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800527e:	e098      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005280:	4b4f      	ldr	r3, [pc, #316]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005288:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800528a:	4b4d      	ldr	r3, [pc, #308]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d028      	beq.n	80052e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005296:	4b4a      	ldr	r3, [pc, #296]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	099b      	lsrs	r3, r3, #6
 800529c:	2200      	movs	r2, #0
 800529e:	623b      	str	r3, [r7, #32]
 80052a0:	627a      	str	r2, [r7, #36]	; 0x24
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80052a8:	2100      	movs	r1, #0
 80052aa:	4b47      	ldr	r3, [pc, #284]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80052ac:	fb03 f201 	mul.w	r2, r3, r1
 80052b0:	2300      	movs	r3, #0
 80052b2:	fb00 f303 	mul.w	r3, r0, r3
 80052b6:	4413      	add	r3, r2
 80052b8:	4a43      	ldr	r2, [pc, #268]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80052ba:	fba0 1202 	umull	r1, r2, r0, r2
 80052be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052c0:	460a      	mov	r2, r1
 80052c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80052c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c6:	4413      	add	r3, r2
 80052c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052cc:	2200      	movs	r2, #0
 80052ce:	61bb      	str	r3, [r7, #24]
 80052d0:	61fa      	str	r2, [r7, #28]
 80052d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052da:	f7fb fcd5 	bl	8000c88 <__aeabi_uldivmod>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4613      	mov	r3, r2
 80052e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e6:	e053      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052e8:	4b35      	ldr	r3, [pc, #212]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	099b      	lsrs	r3, r3, #6
 80052ee:	2200      	movs	r2, #0
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	617a      	str	r2, [r7, #20]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80052fa:	f04f 0b00 	mov.w	fp, #0
 80052fe:	4652      	mov	r2, sl
 8005300:	465b      	mov	r3, fp
 8005302:	f04f 0000 	mov.w	r0, #0
 8005306:	f04f 0100 	mov.w	r1, #0
 800530a:	0159      	lsls	r1, r3, #5
 800530c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005310:	0150      	lsls	r0, r2, #5
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	ebb2 080a 	subs.w	r8, r2, sl
 800531a:	eb63 090b 	sbc.w	r9, r3, fp
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800532a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800532e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005332:	ebb2 0408 	subs.w	r4, r2, r8
 8005336:	eb63 0509 	sbc.w	r5, r3, r9
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	00eb      	lsls	r3, r5, #3
 8005344:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005348:	00e2      	lsls	r2, r4, #3
 800534a:	4614      	mov	r4, r2
 800534c:	461d      	mov	r5, r3
 800534e:	eb14 030a 	adds.w	r3, r4, sl
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	eb45 030b 	adc.w	r3, r5, fp
 8005358:	607b      	str	r3, [r7, #4]
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005366:	4629      	mov	r1, r5
 8005368:	028b      	lsls	r3, r1, #10
 800536a:	4621      	mov	r1, r4
 800536c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005370:	4621      	mov	r1, r4
 8005372:	028a      	lsls	r2, r1, #10
 8005374:	4610      	mov	r0, r2
 8005376:	4619      	mov	r1, r3
 8005378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537a:	2200      	movs	r2, #0
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	60fa      	str	r2, [r7, #12]
 8005380:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005384:	f7fb fc80 	bl	8000c88 <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4613      	mov	r3, r2
 800538e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	0c1b      	lsrs	r3, r3, #16
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	3301      	adds	r3, #1
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80053a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053aa:	e002      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80053ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3740      	adds	r7, #64	; 0x40
 80053b8:	46bd      	mov	sp, r7
 80053ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053be:	bf00      	nop
 80053c0:	40023800 	.word	0x40023800
 80053c4:	00f42400 	.word	0x00f42400
 80053c8:	00b71b00 	.word	0x00b71b00

080053cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d0:	4b03      	ldr	r3, [pc, #12]	; (80053e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053d2:	681b      	ldr	r3, [r3, #0]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	2000003c 	.word	0x2000003c

080053e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053e8:	f7ff fff0 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	0a9b      	lsrs	r3, r3, #10
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	4903      	ldr	r1, [pc, #12]	; (8005408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053fa:	5ccb      	ldrb	r3, [r1, r3]
 80053fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005400:	4618      	mov	r0, r3
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40023800 	.word	0x40023800
 8005408:	08009768 	.word	0x08009768

0800540c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005410:	f7ff ffdc 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 8005414:	4602      	mov	r2, r0
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	0b5b      	lsrs	r3, r3, #13
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	4903      	ldr	r1, [pc, #12]	; (8005430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005422:	5ccb      	ldrb	r3, [r1, r3]
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005428:	4618      	mov	r0, r3
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40023800 	.word	0x40023800
 8005430:	08009768 	.word	0x08009768

08005434 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e07b      	b.n	800553e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	2b00      	cmp	r3, #0
 800544c:	d108      	bne.n	8005460 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005456:	d009      	beq.n	800546c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	61da      	str	r2, [r3, #28]
 800545e:	e005      	b.n	800546c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d106      	bne.n	800548c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fd fbfe 	bl	8002c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f0:	ea42 0103 	orr.w	r1, r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	0c1b      	lsrs	r3, r3, #16
 800550a:	f003 0104 	and.w	r1, r3, #4
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	f003 0210 	and.w	r2, r3, #16
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800552c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e041      	b.n	80055dc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d106      	bne.n	8005572 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fd fc9d 	bl	8002eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2202      	movs	r2, #2
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3304      	adds	r3, #4
 8005582:	4619      	mov	r1, r3
 8005584:	4610      	mov	r0, r2
 8005586:	f000 fd77 	bl	8006078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d001      	beq.n	80055fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e04e      	b.n	800569a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a23      	ldr	r2, [pc, #140]	; (80056a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d022      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x80>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005626:	d01d      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x80>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a1f      	ldr	r2, [pc, #124]	; (80056ac <HAL_TIM_Base_Start_IT+0xc8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d018      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x80>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1e      	ldr	r2, [pc, #120]	; (80056b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d013      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x80>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a1c      	ldr	r2, [pc, #112]	; (80056b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00e      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x80>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1b      	ldr	r2, [pc, #108]	; (80056b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d009      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x80>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a19      	ldr	r2, [pc, #100]	; (80056bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d004      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x80>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d111      	bne.n	8005688 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b06      	cmp	r3, #6
 8005674:	d010      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0201 	orr.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005686:	e007      	b.n	8005698 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40010000 	.word	0x40010000
 80056ac:	40000400 	.word	0x40000400
 80056b0:	40000800 	.word	0x40000800
 80056b4:	40000c00 	.word	0x40000c00
 80056b8:	40010400 	.word	0x40010400
 80056bc:	40014000 	.word	0x40014000
 80056c0:	40001800 	.word	0x40001800

080056c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0201 	bic.w	r2, r2, #1
 80056da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6a1a      	ldr	r2, [r3, #32]
 80056e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80056e6:	4013      	ands	r3, r2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10f      	bne.n	800570c <HAL_TIM_Base_Stop_IT+0x48>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6a1a      	ldr	r2, [r3, #32]
 80056f2:	f240 4344 	movw	r3, #1092	; 0x444
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d107      	bne.n	800570c <HAL_TIM_Base_Stop_IT+0x48>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0201 	bic.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b082      	sub	sp, #8
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e041      	b.n	80057b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d106      	bne.n	800574e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7fd fae5 	bl	8002d18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2202      	movs	r2, #2
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3304      	adds	r3, #4
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f000 fc89 	bl	8006078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <HAL_TIM_PWM_Start_IT+0x28>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b01      	cmp	r3, #1
 80057de:	bf14      	ite	ne
 80057e0:	2301      	movne	r3, #1
 80057e2:	2300      	moveq	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	e022      	b.n	800582e <HAL_TIM_PWM_Start_IT+0x6e>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d109      	bne.n	8005802 <HAL_TIM_PWM_Start_IT+0x42>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	bf14      	ite	ne
 80057fa:	2301      	movne	r3, #1
 80057fc:	2300      	moveq	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	e015      	b.n	800582e <HAL_TIM_PWM_Start_IT+0x6e>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b08      	cmp	r3, #8
 8005806:	d109      	bne.n	800581c <HAL_TIM_PWM_Start_IT+0x5c>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b01      	cmp	r3, #1
 8005812:	bf14      	ite	ne
 8005814:	2301      	movne	r3, #1
 8005816:	2300      	moveq	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	e008      	b.n	800582e <HAL_TIM_PWM_Start_IT+0x6e>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	bf14      	ite	ne
 8005828:	2301      	movne	r3, #1
 800582a:	2300      	moveq	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e0c7      	b.n	80059c6 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <HAL_TIM_PWM_Start_IT+0x86>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005844:	e013      	b.n	800586e <HAL_TIM_PWM_Start_IT+0xae>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b04      	cmp	r3, #4
 800584a:	d104      	bne.n	8005856 <HAL_TIM_PWM_Start_IT+0x96>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005854:	e00b      	b.n	800586e <HAL_TIM_PWM_Start_IT+0xae>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b08      	cmp	r3, #8
 800585a:	d104      	bne.n	8005866 <HAL_TIM_PWM_Start_IT+0xa6>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005864:	e003      	b.n	800586e <HAL_TIM_PWM_Start_IT+0xae>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b0c      	cmp	r3, #12
 8005872:	d841      	bhi.n	80058f8 <HAL_TIM_PWM_Start_IT+0x138>
 8005874:	a201      	add	r2, pc, #4	; (adr r2, 800587c <HAL_TIM_PWM_Start_IT+0xbc>)
 8005876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587a:	bf00      	nop
 800587c:	080058b1 	.word	0x080058b1
 8005880:	080058f9 	.word	0x080058f9
 8005884:	080058f9 	.word	0x080058f9
 8005888:	080058f9 	.word	0x080058f9
 800588c:	080058c3 	.word	0x080058c3
 8005890:	080058f9 	.word	0x080058f9
 8005894:	080058f9 	.word	0x080058f9
 8005898:	080058f9 	.word	0x080058f9
 800589c:	080058d5 	.word	0x080058d5
 80058a0:	080058f9 	.word	0x080058f9
 80058a4:	080058f9 	.word	0x080058f9
 80058a8:	080058f9 	.word	0x080058f9
 80058ac:	080058e7 	.word	0x080058e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0202 	orr.w	r2, r2, #2
 80058be:	60da      	str	r2, [r3, #12]
      break;
 80058c0:	e01d      	b.n	80058fe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0204 	orr.w	r2, r2, #4
 80058d0:	60da      	str	r2, [r3, #12]
      break;
 80058d2:	e014      	b.n	80058fe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0208 	orr.w	r2, r2, #8
 80058e2:	60da      	str	r2, [r3, #12]
      break;
 80058e4:	e00b      	b.n	80058fe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0210 	orr.w	r2, r2, #16
 80058f4:	60da      	str	r2, [r3, #12]
      break;
 80058f6:	e002      	b.n	80058fe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
      break;
 80058fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d15f      	bne.n	80059c4 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2201      	movs	r2, #1
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fe03 	bl	8006518 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a2e      	ldr	r2, [pc, #184]	; (80059d0 <HAL_TIM_PWM_Start_IT+0x210>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_TIM_PWM_Start_IT+0x166>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a2c      	ldr	r2, [pc, #176]	; (80059d4 <HAL_TIM_PWM_Start_IT+0x214>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d101      	bne.n	800592a <HAL_TIM_PWM_Start_IT+0x16a>
 8005926:	2301      	movs	r3, #1
 8005928:	e000      	b.n	800592c <HAL_TIM_PWM_Start_IT+0x16c>
 800592a:	2300      	movs	r3, #0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d007      	beq.n	8005940 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800593e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a22      	ldr	r2, [pc, #136]	; (80059d0 <HAL_TIM_PWM_Start_IT+0x210>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d022      	beq.n	8005990 <HAL_TIM_PWM_Start_IT+0x1d0>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005952:	d01d      	beq.n	8005990 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a1f      	ldr	r2, [pc, #124]	; (80059d8 <HAL_TIM_PWM_Start_IT+0x218>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d018      	beq.n	8005990 <HAL_TIM_PWM_Start_IT+0x1d0>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1e      	ldr	r2, [pc, #120]	; (80059dc <HAL_TIM_PWM_Start_IT+0x21c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d013      	beq.n	8005990 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <HAL_TIM_PWM_Start_IT+0x220>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00e      	beq.n	8005990 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a17      	ldr	r2, [pc, #92]	; (80059d4 <HAL_TIM_PWM_Start_IT+0x214>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d009      	beq.n	8005990 <HAL_TIM_PWM_Start_IT+0x1d0>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a18      	ldr	r2, [pc, #96]	; (80059e4 <HAL_TIM_PWM_Start_IT+0x224>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d004      	beq.n	8005990 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <HAL_TIM_PWM_Start_IT+0x228>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d111      	bne.n	80059b4 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b06      	cmp	r3, #6
 80059a0:	d010      	beq.n	80059c4 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b2:	e007      	b.n	80059c4 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40010400 	.word	0x40010400
 80059d8:	40000400 	.word	0x40000400
 80059dc:	40000800 	.word	0x40000800
 80059e0:	40000c00 	.word	0x40000c00
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40001800 	.word	0x40001800

080059ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e097      	b.n	8005b30 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d106      	bne.n	8005a1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7fd f9cb 	bl	8002db0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6812      	ldr	r2, [r2, #0]
 8005a2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a30:	f023 0307 	bic.w	r3, r3, #7
 8005a34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f000 fb19 	bl	8006078 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005a8c:	f023 030c 	bic.w	r3, r3, #12
 8005a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	011a      	lsls	r2, r3, #4
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	031b      	lsls	r3, r3, #12
 8005abc:	4313      	orrs	r3, r2
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005aca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d110      	bne.n	8005b8a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d102      	bne.n	8005b74 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b6e:	7b7b      	ldrb	r3, [r7, #13]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d001      	beq.n	8005b78 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e089      	b.n	8005c8c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b88:	e031      	b.n	8005bee <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d110      	bne.n	8005bb2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b90:	7bbb      	ldrb	r3, [r7, #14]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d102      	bne.n	8005b9c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b96:	7b3b      	ldrb	r3, [r7, #12]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d001      	beq.n	8005ba0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e075      	b.n	8005c8c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bb0:	e01d      	b.n	8005bee <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d108      	bne.n	8005bca <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bb8:	7bbb      	ldrb	r3, [r7, #14]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d105      	bne.n	8005bca <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bbe:	7b7b      	ldrb	r3, [r7, #13]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d102      	bne.n	8005bca <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bc4:	7b3b      	ldrb	r3, [r7, #12]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d001      	beq.n	8005bce <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e05e      	b.n	8005c8c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2202      	movs	r2, #2
 8005be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2202      	movs	r2, #2
 8005bea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_TIM_Encoder_Start_IT+0xc4>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	d010      	beq.n	8005c1c <HAL_TIM_Encoder_Start_IT+0xe4>
 8005bfa:	e01f      	b.n	8005c3c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2201      	movs	r2, #1
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fc87 	bl	8006518 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0202 	orr.w	r2, r2, #2
 8005c18:	60da      	str	r2, [r3, #12]
      break;
 8005c1a:	e02e      	b.n	8005c7a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2201      	movs	r2, #1
 8005c22:	2104      	movs	r1, #4
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fc77 	bl	8006518 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0204 	orr.w	r2, r2, #4
 8005c38:	60da      	str	r2, [r3, #12]
      break;
 8005c3a:	e01e      	b.n	8005c7a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2201      	movs	r2, #1
 8005c42:	2100      	movs	r1, #0
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fc67 	bl	8006518 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	2104      	movs	r1, #4
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fc60 	bl	8006518 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0202 	orr.w	r2, r2, #2
 8005c66:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0204 	orr.w	r2, r2, #4
 8005c76:	60da      	str	r2, [r3, #12]
      break;
 8005c78:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0201 	orr.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d122      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0202 	mvn.w	r2, #2
 8005cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f9b0 	bl	800603c <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e005      	b.n	8005cea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f9a2 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f9b3 	bl	8006050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d122      	bne.n	8005d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d11b      	bne.n	8005d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0204 	mvn.w	r2, #4
 8005d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f986 	bl	800603c <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f978 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f989 	bl	8006050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d122      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d11b      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0208 	mvn.w	r2, #8
 8005d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f95c 	bl	800603c <HAL_TIM_IC_CaptureCallback>
 8005d84:	e005      	b.n	8005d92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f94e 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f95f 	bl	8006050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d122      	bne.n	8005dec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d11b      	bne.n	8005dec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0210 	mvn.w	r2, #16
 8005dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f932 	bl	800603c <HAL_TIM_IC_CaptureCallback>
 8005dd8:	e005      	b.n	8005de6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f924 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f935 	bl	8006050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d10e      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d107      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0201 	mvn.w	r2, #1
 8005e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7fb fc20 	bl	8001658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d10e      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e30:	2b80      	cmp	r3, #128	; 0x80
 8005e32:	d107      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fc68 	bl	8006714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d10e      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b40      	cmp	r3, #64	; 0x40
 8005e5e:	d107      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f8fa 	bl	8006064 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d10e      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d107      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0220 	mvn.w	r2, #32
 8005e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fc32 	bl	8006700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e9c:	bf00      	nop
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e0ae      	b.n	8006020 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b0c      	cmp	r3, #12
 8005ece:	f200 809f 	bhi.w	8006010 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ed2:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005f0d 	.word	0x08005f0d
 8005edc:	08006011 	.word	0x08006011
 8005ee0:	08006011 	.word	0x08006011
 8005ee4:	08006011 	.word	0x08006011
 8005ee8:	08005f4d 	.word	0x08005f4d
 8005eec:	08006011 	.word	0x08006011
 8005ef0:	08006011 	.word	0x08006011
 8005ef4:	08006011 	.word	0x08006011
 8005ef8:	08005f8f 	.word	0x08005f8f
 8005efc:	08006011 	.word	0x08006011
 8005f00:	08006011 	.word	0x08006011
 8005f04:	08006011 	.word	0x08006011
 8005f08:	08005fcf 	.word	0x08005fcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 f950 	bl	80061b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0208 	orr.w	r2, r2, #8
 8005f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0204 	bic.w	r2, r2, #4
 8005f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6999      	ldr	r1, [r3, #24]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691a      	ldr	r2, [r3, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	619a      	str	r2, [r3, #24]
      break;
 8005f4a:	e064      	b.n	8006016 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 f9a0 	bl	8006298 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6999      	ldr	r1, [r3, #24]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	021a      	lsls	r2, r3, #8
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	619a      	str	r2, [r3, #24]
      break;
 8005f8c:	e043      	b.n	8006016 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 f9f5 	bl	8006384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0208 	orr.w	r2, r2, #8
 8005fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0204 	bic.w	r2, r2, #4
 8005fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69d9      	ldr	r1, [r3, #28]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	61da      	str	r2, [r3, #28]
      break;
 8005fcc:	e023      	b.n	8006016 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fa49 	bl	800646c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69da      	ldr	r2, [r3, #28]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69da      	ldr	r2, [r3, #28]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69d9      	ldr	r1, [r3, #28]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	021a      	lsls	r2, r3, #8
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	61da      	str	r2, [r3, #28]
      break;
 800600e:	e002      	b.n	8006016 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	75fb      	strb	r3, [r7, #23]
      break;
 8006014:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800601e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a40      	ldr	r2, [pc, #256]	; (800618c <TIM_Base_SetConfig+0x114>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d013      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006096:	d00f      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a3d      	ldr	r2, [pc, #244]	; (8006190 <TIM_Base_SetConfig+0x118>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00b      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a3c      	ldr	r2, [pc, #240]	; (8006194 <TIM_Base_SetConfig+0x11c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d007      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a3b      	ldr	r2, [pc, #236]	; (8006198 <TIM_Base_SetConfig+0x120>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d003      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a3a      	ldr	r2, [pc, #232]	; (800619c <TIM_Base_SetConfig+0x124>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d108      	bne.n	80060ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2f      	ldr	r2, [pc, #188]	; (800618c <TIM_Base_SetConfig+0x114>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d02b      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d8:	d027      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2c      	ldr	r2, [pc, #176]	; (8006190 <TIM_Base_SetConfig+0x118>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d023      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a2b      	ldr	r2, [pc, #172]	; (8006194 <TIM_Base_SetConfig+0x11c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d01f      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a2a      	ldr	r2, [pc, #168]	; (8006198 <TIM_Base_SetConfig+0x120>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01b      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a29      	ldr	r2, [pc, #164]	; (800619c <TIM_Base_SetConfig+0x124>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d017      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <TIM_Base_SetConfig+0x128>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d013      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a27      	ldr	r2, [pc, #156]	; (80061a4 <TIM_Base_SetConfig+0x12c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00f      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a26      	ldr	r2, [pc, #152]	; (80061a8 <TIM_Base_SetConfig+0x130>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00b      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a25      	ldr	r2, [pc, #148]	; (80061ac <TIM_Base_SetConfig+0x134>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d007      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a24      	ldr	r2, [pc, #144]	; (80061b0 <TIM_Base_SetConfig+0x138>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d003      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a23      	ldr	r2, [pc, #140]	; (80061b4 <TIM_Base_SetConfig+0x13c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d108      	bne.n	800613c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a0a      	ldr	r2, [pc, #40]	; (800618c <TIM_Base_SetConfig+0x114>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d003      	beq.n	8006170 <TIM_Base_SetConfig+0xf8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a0c      	ldr	r2, [pc, #48]	; (800619c <TIM_Base_SetConfig+0x124>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d103      	bne.n	8006178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	615a      	str	r2, [r3, #20]
}
 800617e:	bf00      	nop
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40010000 	.word	0x40010000
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800
 8006198:	40000c00 	.word	0x40000c00
 800619c:	40010400 	.word	0x40010400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40014400 	.word	0x40014400
 80061a8:	40014800 	.word	0x40014800
 80061ac:	40001800 	.word	0x40001800
 80061b0:	40001c00 	.word	0x40001c00
 80061b4:	40002000 	.word	0x40002000

080061b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f023 0201 	bic.w	r2, r3, #1
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f023 0302 	bic.w	r3, r3, #2
 8006200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a20      	ldr	r2, [pc, #128]	; (8006290 <TIM_OC1_SetConfig+0xd8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d003      	beq.n	800621c <TIM_OC1_SetConfig+0x64>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a1f      	ldr	r2, [pc, #124]	; (8006294 <TIM_OC1_SetConfig+0xdc>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d10c      	bne.n	8006236 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 0308 	bic.w	r3, r3, #8
 8006222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f023 0304 	bic.w	r3, r3, #4
 8006234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a15      	ldr	r2, [pc, #84]	; (8006290 <TIM_OC1_SetConfig+0xd8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d003      	beq.n	8006246 <TIM_OC1_SetConfig+0x8e>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a14      	ldr	r2, [pc, #80]	; (8006294 <TIM_OC1_SetConfig+0xdc>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d111      	bne.n	800626a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800624c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	4313      	orrs	r3, r2
 800625e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4313      	orrs	r3, r2
 8006268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	621a      	str	r2, [r3, #32]
}
 8006284:	bf00      	nop
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	40010000 	.word	0x40010000
 8006294:	40010400 	.word	0x40010400

08006298 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	f023 0210 	bic.w	r2, r3, #16
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	021b      	lsls	r3, r3, #8
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f023 0320 	bic.w	r3, r3, #32
 80062e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a22      	ldr	r2, [pc, #136]	; (800637c <TIM_OC2_SetConfig+0xe4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d003      	beq.n	8006300 <TIM_OC2_SetConfig+0x68>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a21      	ldr	r2, [pc, #132]	; (8006380 <TIM_OC2_SetConfig+0xe8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d10d      	bne.n	800631c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800631a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a17      	ldr	r2, [pc, #92]	; (800637c <TIM_OC2_SetConfig+0xe4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_OC2_SetConfig+0x94>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a16      	ldr	r2, [pc, #88]	; (8006380 <TIM_OC2_SetConfig+0xe8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d113      	bne.n	8006354 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800633a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40010000 	.word	0x40010000
 8006380:	40010400 	.word	0x40010400

08006384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a21      	ldr	r2, [pc, #132]	; (8006464 <TIM_OC3_SetConfig+0xe0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d003      	beq.n	80063ea <TIM_OC3_SetConfig+0x66>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a20      	ldr	r2, [pc, #128]	; (8006468 <TIM_OC3_SetConfig+0xe4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d10d      	bne.n	8006406 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a16      	ldr	r2, [pc, #88]	; (8006464 <TIM_OC3_SetConfig+0xe0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d003      	beq.n	8006416 <TIM_OC3_SetConfig+0x92>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a15      	ldr	r2, [pc, #84]	; (8006468 <TIM_OC3_SetConfig+0xe4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d113      	bne.n	800643e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800641c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	011b      	lsls	r3, r3, #4
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	621a      	str	r2, [r3, #32]
}
 8006458:	bf00      	nop
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	40010000 	.word	0x40010000
 8006468:	40010400 	.word	0x40010400

0800646c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	021b      	lsls	r3, r3, #8
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	031b      	lsls	r3, r3, #12
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a12      	ldr	r2, [pc, #72]	; (8006510 <TIM_OC4_SetConfig+0xa4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_OC4_SetConfig+0x68>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a11      	ldr	r2, [pc, #68]	; (8006514 <TIM_OC4_SetConfig+0xa8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d109      	bne.n	80064e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	019b      	lsls	r3, r3, #6
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	621a      	str	r2, [r3, #32]
}
 8006502:	bf00      	nop
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40010000 	.word	0x40010000
 8006514:	40010400 	.word	0x40010400

08006518 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	2201      	movs	r2, #1
 800652c:	fa02 f303 	lsl.w	r3, r2, r3
 8006530:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6a1a      	ldr	r2, [r3, #32]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	43db      	mvns	r3, r3
 800653a:	401a      	ands	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a1a      	ldr	r2, [r3, #32]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f003 031f 	and.w	r3, r3, #31
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	fa01 f303 	lsl.w	r3, r1, r3
 8006550:	431a      	orrs	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	621a      	str	r2, [r3, #32]
}
 8006556:	bf00      	nop
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
	...

08006564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006578:	2302      	movs	r3, #2
 800657a:	e05a      	b.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a21      	ldr	r2, [pc, #132]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d022      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c8:	d01d      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d018      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1b      	ldr	r2, [pc, #108]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d013      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1a      	ldr	r2, [pc, #104]	; (800664c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00e      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a18      	ldr	r2, [pc, #96]	; (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d009      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a17      	ldr	r2, [pc, #92]	; (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d004      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a15      	ldr	r2, [pc, #84]	; (8006658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d10c      	bne.n	8006620 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800660c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	4313      	orrs	r3, r2
 8006616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40010000 	.word	0x40010000
 8006644:	40000400 	.word	0x40000400
 8006648:	40000800 	.word	0x40000800
 800664c:	40000c00 	.word	0x40000c00
 8006650:	40010400 	.word	0x40010400
 8006654:	40014000 	.word	0x40014000
 8006658:	40001800 	.word	0x40001800

0800665c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006674:	2302      	movs	r3, #2
 8006676:	e03d      	b.n	80066f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e03f      	b.n	80067ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fc fc5e 	bl	8003010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2224      	movs	r2, #36	; 0x24
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800676a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f829 	bl	80067c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695a      	ldr	r2, [r3, #20]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067c8:	b0c0      	sub	sp, #256	; 0x100
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e0:	68d9      	ldr	r1, [r3, #12]
 80067e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	ea40 0301 	orr.w	r3, r0, r1
 80067ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	431a      	orrs	r2, r3
 8006804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800681c:	f021 010c 	bic.w	r1, r1, #12
 8006820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800682a:	430b      	orrs	r3, r1
 800682c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800682e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800683a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683e:	6999      	ldr	r1, [r3, #24]
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	ea40 0301 	orr.w	r3, r0, r1
 800684a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800684c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	4b8f      	ldr	r3, [pc, #572]	; (8006a90 <UART_SetConfig+0x2cc>)
 8006854:	429a      	cmp	r2, r3
 8006856:	d005      	beq.n	8006864 <UART_SetConfig+0xa0>
 8006858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b8d      	ldr	r3, [pc, #564]	; (8006a94 <UART_SetConfig+0x2d0>)
 8006860:	429a      	cmp	r2, r3
 8006862:	d104      	bne.n	800686e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006864:	f7fe fdd2 	bl	800540c <HAL_RCC_GetPCLK2Freq>
 8006868:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800686c:	e003      	b.n	8006876 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800686e:	f7fe fdb9 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 8006872:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006880:	f040 810c 	bne.w	8006a9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006888:	2200      	movs	r2, #0
 800688a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800688e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006892:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006896:	4622      	mov	r2, r4
 8006898:	462b      	mov	r3, r5
 800689a:	1891      	adds	r1, r2, r2
 800689c:	65b9      	str	r1, [r7, #88]	; 0x58
 800689e:	415b      	adcs	r3, r3
 80068a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068a6:	4621      	mov	r1, r4
 80068a8:	eb12 0801 	adds.w	r8, r2, r1
 80068ac:	4629      	mov	r1, r5
 80068ae:	eb43 0901 	adc.w	r9, r3, r1
 80068b2:	f04f 0200 	mov.w	r2, #0
 80068b6:	f04f 0300 	mov.w	r3, #0
 80068ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068c6:	4690      	mov	r8, r2
 80068c8:	4699      	mov	r9, r3
 80068ca:	4623      	mov	r3, r4
 80068cc:	eb18 0303 	adds.w	r3, r8, r3
 80068d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068d4:	462b      	mov	r3, r5
 80068d6:	eb49 0303 	adc.w	r3, r9, r3
 80068da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068f2:	460b      	mov	r3, r1
 80068f4:	18db      	adds	r3, r3, r3
 80068f6:	653b      	str	r3, [r7, #80]	; 0x50
 80068f8:	4613      	mov	r3, r2
 80068fa:	eb42 0303 	adc.w	r3, r2, r3
 80068fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006900:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006904:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006908:	f7fa f9be 	bl	8000c88 <__aeabi_uldivmod>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4b61      	ldr	r3, [pc, #388]	; (8006a98 <UART_SetConfig+0x2d4>)
 8006912:	fba3 2302 	umull	r2, r3, r3, r2
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	011c      	lsls	r4, r3, #4
 800691a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800691e:	2200      	movs	r2, #0
 8006920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006924:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006928:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800692c:	4642      	mov	r2, r8
 800692e:	464b      	mov	r3, r9
 8006930:	1891      	adds	r1, r2, r2
 8006932:	64b9      	str	r1, [r7, #72]	; 0x48
 8006934:	415b      	adcs	r3, r3
 8006936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006938:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800693c:	4641      	mov	r1, r8
 800693e:	eb12 0a01 	adds.w	sl, r2, r1
 8006942:	4649      	mov	r1, r9
 8006944:	eb43 0b01 	adc.w	fp, r3, r1
 8006948:	f04f 0200 	mov.w	r2, #0
 800694c:	f04f 0300 	mov.w	r3, #0
 8006950:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006954:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800695c:	4692      	mov	sl, r2
 800695e:	469b      	mov	fp, r3
 8006960:	4643      	mov	r3, r8
 8006962:	eb1a 0303 	adds.w	r3, sl, r3
 8006966:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800696a:	464b      	mov	r3, r9
 800696c:	eb4b 0303 	adc.w	r3, fp, r3
 8006970:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006980:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006984:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006988:	460b      	mov	r3, r1
 800698a:	18db      	adds	r3, r3, r3
 800698c:	643b      	str	r3, [r7, #64]	; 0x40
 800698e:	4613      	mov	r3, r2
 8006990:	eb42 0303 	adc.w	r3, r2, r3
 8006994:	647b      	str	r3, [r7, #68]	; 0x44
 8006996:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800699a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800699e:	f7fa f973 	bl	8000c88 <__aeabi_uldivmod>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	4611      	mov	r1, r2
 80069a8:	4b3b      	ldr	r3, [pc, #236]	; (8006a98 <UART_SetConfig+0x2d4>)
 80069aa:	fba3 2301 	umull	r2, r3, r3, r1
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	2264      	movs	r2, #100	; 0x64
 80069b2:	fb02 f303 	mul.w	r3, r2, r3
 80069b6:	1acb      	subs	r3, r1, r3
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069be:	4b36      	ldr	r3, [pc, #216]	; (8006a98 <UART_SetConfig+0x2d4>)
 80069c0:	fba3 2302 	umull	r2, r3, r3, r2
 80069c4:	095b      	lsrs	r3, r3, #5
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069cc:	441c      	add	r4, r3
 80069ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069e0:	4642      	mov	r2, r8
 80069e2:	464b      	mov	r3, r9
 80069e4:	1891      	adds	r1, r2, r2
 80069e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80069e8:	415b      	adcs	r3, r3
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069f0:	4641      	mov	r1, r8
 80069f2:	1851      	adds	r1, r2, r1
 80069f4:	6339      	str	r1, [r7, #48]	; 0x30
 80069f6:	4649      	mov	r1, r9
 80069f8:	414b      	adcs	r3, r1
 80069fa:	637b      	str	r3, [r7, #52]	; 0x34
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	f04f 0300 	mov.w	r3, #0
 8006a04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a08:	4659      	mov	r1, fp
 8006a0a:	00cb      	lsls	r3, r1, #3
 8006a0c:	4651      	mov	r1, sl
 8006a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a12:	4651      	mov	r1, sl
 8006a14:	00ca      	lsls	r2, r1, #3
 8006a16:	4610      	mov	r0, r2
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	189b      	adds	r3, r3, r2
 8006a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a24:	464b      	mov	r3, r9
 8006a26:	460a      	mov	r2, r1
 8006a28:	eb42 0303 	adc.w	r3, r2, r3
 8006a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a44:	460b      	mov	r3, r1
 8006a46:	18db      	adds	r3, r3, r3
 8006a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	eb42 0303 	adc.w	r3, r2, r3
 8006a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a5a:	f7fa f915 	bl	8000c88 <__aeabi_uldivmod>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	4b0d      	ldr	r3, [pc, #52]	; (8006a98 <UART_SetConfig+0x2d4>)
 8006a64:	fba3 1302 	umull	r1, r3, r3, r2
 8006a68:	095b      	lsrs	r3, r3, #5
 8006a6a:	2164      	movs	r1, #100	; 0x64
 8006a6c:	fb01 f303 	mul.w	r3, r1, r3
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	3332      	adds	r3, #50	; 0x32
 8006a76:	4a08      	ldr	r2, [pc, #32]	; (8006a98 <UART_SetConfig+0x2d4>)
 8006a78:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	f003 0207 	and.w	r2, r3, #7
 8006a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4422      	add	r2, r4
 8006a8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a8c:	e105      	b.n	8006c9a <UART_SetConfig+0x4d6>
 8006a8e:	bf00      	nop
 8006a90:	40011000 	.word	0x40011000
 8006a94:	40011400 	.word	0x40011400
 8006a98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006aa6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006aaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006aae:	4642      	mov	r2, r8
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	1891      	adds	r1, r2, r2
 8006ab4:	6239      	str	r1, [r7, #32]
 8006ab6:	415b      	adcs	r3, r3
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8006aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006abe:	4641      	mov	r1, r8
 8006ac0:	1854      	adds	r4, r2, r1
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	eb43 0501 	adc.w	r5, r3, r1
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	f04f 0300 	mov.w	r3, #0
 8006ad0:	00eb      	lsls	r3, r5, #3
 8006ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ad6:	00e2      	lsls	r2, r4, #3
 8006ad8:	4614      	mov	r4, r2
 8006ada:	461d      	mov	r5, r3
 8006adc:	4643      	mov	r3, r8
 8006ade:	18e3      	adds	r3, r4, r3
 8006ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	eb45 0303 	adc.w	r3, r5, r3
 8006aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006afa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	f04f 0300 	mov.w	r3, #0
 8006b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	008b      	lsls	r3, r1, #2
 8006b0e:	4621      	mov	r1, r4
 8006b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b14:	4621      	mov	r1, r4
 8006b16:	008a      	lsls	r2, r1, #2
 8006b18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b1c:	f7fa f8b4 	bl	8000c88 <__aeabi_uldivmod>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4b60      	ldr	r3, [pc, #384]	; (8006ca8 <UART_SetConfig+0x4e4>)
 8006b26:	fba3 2302 	umull	r2, r3, r3, r2
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	011c      	lsls	r4, r3, #4
 8006b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b40:	4642      	mov	r2, r8
 8006b42:	464b      	mov	r3, r9
 8006b44:	1891      	adds	r1, r2, r2
 8006b46:	61b9      	str	r1, [r7, #24]
 8006b48:	415b      	adcs	r3, r3
 8006b4a:	61fb      	str	r3, [r7, #28]
 8006b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b50:	4641      	mov	r1, r8
 8006b52:	1851      	adds	r1, r2, r1
 8006b54:	6139      	str	r1, [r7, #16]
 8006b56:	4649      	mov	r1, r9
 8006b58:	414b      	adcs	r3, r1
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	f04f 0200 	mov.w	r2, #0
 8006b60:	f04f 0300 	mov.w	r3, #0
 8006b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b68:	4659      	mov	r1, fp
 8006b6a:	00cb      	lsls	r3, r1, #3
 8006b6c:	4651      	mov	r1, sl
 8006b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b72:	4651      	mov	r1, sl
 8006b74:	00ca      	lsls	r2, r1, #3
 8006b76:	4610      	mov	r0, r2
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	4642      	mov	r2, r8
 8006b7e:	189b      	adds	r3, r3, r2
 8006b80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b84:	464b      	mov	r3, r9
 8006b86:	460a      	mov	r2, r1
 8006b88:	eb42 0303 	adc.w	r3, r2, r3
 8006b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b9c:	f04f 0200 	mov.w	r2, #0
 8006ba0:	f04f 0300 	mov.w	r3, #0
 8006ba4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ba8:	4649      	mov	r1, r9
 8006baa:	008b      	lsls	r3, r1, #2
 8006bac:	4641      	mov	r1, r8
 8006bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bb2:	4641      	mov	r1, r8
 8006bb4:	008a      	lsls	r2, r1, #2
 8006bb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006bba:	f7fa f865 	bl	8000c88 <__aeabi_uldivmod>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	4b39      	ldr	r3, [pc, #228]	; (8006ca8 <UART_SetConfig+0x4e4>)
 8006bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8006bc8:	095b      	lsrs	r3, r3, #5
 8006bca:	2164      	movs	r1, #100	; 0x64
 8006bcc:	fb01 f303 	mul.w	r3, r1, r3
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	3332      	adds	r3, #50	; 0x32
 8006bd6:	4a34      	ldr	r2, [pc, #208]	; (8006ca8 <UART_SetConfig+0x4e4>)
 8006bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bdc:	095b      	lsrs	r3, r3, #5
 8006bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006be2:	441c      	add	r4, r3
 8006be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be8:	2200      	movs	r2, #0
 8006bea:	673b      	str	r3, [r7, #112]	; 0x70
 8006bec:	677a      	str	r2, [r7, #116]	; 0x74
 8006bee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006bf2:	4642      	mov	r2, r8
 8006bf4:	464b      	mov	r3, r9
 8006bf6:	1891      	adds	r1, r2, r2
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	415b      	adcs	r3, r3
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c02:	4641      	mov	r1, r8
 8006c04:	1851      	adds	r1, r2, r1
 8006c06:	6039      	str	r1, [r7, #0]
 8006c08:	4649      	mov	r1, r9
 8006c0a:	414b      	adcs	r3, r1
 8006c0c:	607b      	str	r3, [r7, #4]
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c1a:	4659      	mov	r1, fp
 8006c1c:	00cb      	lsls	r3, r1, #3
 8006c1e:	4651      	mov	r1, sl
 8006c20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c24:	4651      	mov	r1, sl
 8006c26:	00ca      	lsls	r2, r1, #3
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	4642      	mov	r2, r8
 8006c30:	189b      	adds	r3, r3, r2
 8006c32:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c34:	464b      	mov	r3, r9
 8006c36:	460a      	mov	r2, r1
 8006c38:	eb42 0303 	adc.w	r3, r2, r3
 8006c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	663b      	str	r3, [r7, #96]	; 0x60
 8006c48:	667a      	str	r2, [r7, #100]	; 0x64
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	f04f 0300 	mov.w	r3, #0
 8006c52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c56:	4649      	mov	r1, r9
 8006c58:	008b      	lsls	r3, r1, #2
 8006c5a:	4641      	mov	r1, r8
 8006c5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c60:	4641      	mov	r1, r8
 8006c62:	008a      	lsls	r2, r1, #2
 8006c64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c68:	f7fa f80e 	bl	8000c88 <__aeabi_uldivmod>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4b0d      	ldr	r3, [pc, #52]	; (8006ca8 <UART_SetConfig+0x4e4>)
 8006c72:	fba3 1302 	umull	r1, r3, r3, r2
 8006c76:	095b      	lsrs	r3, r3, #5
 8006c78:	2164      	movs	r1, #100	; 0x64
 8006c7a:	fb01 f303 	mul.w	r3, r1, r3
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	3332      	adds	r3, #50	; 0x32
 8006c84:	4a08      	ldr	r2, [pc, #32]	; (8006ca8 <UART_SetConfig+0x4e4>)
 8006c86:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	f003 020f 	and.w	r2, r3, #15
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4422      	add	r2, r4
 8006c98:	609a      	str	r2, [r3, #8]
}
 8006c9a:	bf00      	nop
 8006c9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ca6:	bf00      	nop
 8006ca8:	51eb851f 	.word	0x51eb851f

08006cac <__errno>:
 8006cac:	4b01      	ldr	r3, [pc, #4]	; (8006cb4 <__errno+0x8>)
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	20000048 	.word	0x20000048

08006cb8 <__libc_init_array>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	4d0d      	ldr	r5, [pc, #52]	; (8006cf0 <__libc_init_array+0x38>)
 8006cbc:	4c0d      	ldr	r4, [pc, #52]	; (8006cf4 <__libc_init_array+0x3c>)
 8006cbe:	1b64      	subs	r4, r4, r5
 8006cc0:	10a4      	asrs	r4, r4, #2
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	42a6      	cmp	r6, r4
 8006cc6:	d109      	bne.n	8006cdc <__libc_init_array+0x24>
 8006cc8:	4d0b      	ldr	r5, [pc, #44]	; (8006cf8 <__libc_init_array+0x40>)
 8006cca:	4c0c      	ldr	r4, [pc, #48]	; (8006cfc <__libc_init_array+0x44>)
 8006ccc:	f002 fd38 	bl	8009740 <_init>
 8006cd0:	1b64      	subs	r4, r4, r5
 8006cd2:	10a4      	asrs	r4, r4, #2
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	42a6      	cmp	r6, r4
 8006cd8:	d105      	bne.n	8006ce6 <__libc_init_array+0x2e>
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce0:	4798      	blx	r3
 8006ce2:	3601      	adds	r6, #1
 8006ce4:	e7ee      	b.n	8006cc4 <__libc_init_array+0xc>
 8006ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cea:	4798      	blx	r3
 8006cec:	3601      	adds	r6, #1
 8006cee:	e7f2      	b.n	8006cd6 <__libc_init_array+0x1e>
 8006cf0:	08009b5c 	.word	0x08009b5c
 8006cf4:	08009b5c 	.word	0x08009b5c
 8006cf8:	08009b5c 	.word	0x08009b5c
 8006cfc:	08009b60 	.word	0x08009b60

08006d00 <memset>:
 8006d00:	4402      	add	r2, r0
 8006d02:	4603      	mov	r3, r0
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d100      	bne.n	8006d0a <memset+0xa>
 8006d08:	4770      	bx	lr
 8006d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d0e:	e7f9      	b.n	8006d04 <memset+0x4>

08006d10 <__cvt>:
 8006d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d14:	ec55 4b10 	vmov	r4, r5, d0
 8006d18:	2d00      	cmp	r5, #0
 8006d1a:	460e      	mov	r6, r1
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	462b      	mov	r3, r5
 8006d20:	bfbb      	ittet	lt
 8006d22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d26:	461d      	movlt	r5, r3
 8006d28:	2300      	movge	r3, #0
 8006d2a:	232d      	movlt	r3, #45	; 0x2d
 8006d2c:	700b      	strb	r3, [r1, #0]
 8006d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d34:	4691      	mov	r9, r2
 8006d36:	f023 0820 	bic.w	r8, r3, #32
 8006d3a:	bfbc      	itt	lt
 8006d3c:	4622      	movlt	r2, r4
 8006d3e:	4614      	movlt	r4, r2
 8006d40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d44:	d005      	beq.n	8006d52 <__cvt+0x42>
 8006d46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d4a:	d100      	bne.n	8006d4e <__cvt+0x3e>
 8006d4c:	3601      	adds	r6, #1
 8006d4e:	2102      	movs	r1, #2
 8006d50:	e000      	b.n	8006d54 <__cvt+0x44>
 8006d52:	2103      	movs	r1, #3
 8006d54:	ab03      	add	r3, sp, #12
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	ab02      	add	r3, sp, #8
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	ec45 4b10 	vmov	d0, r4, r5
 8006d60:	4653      	mov	r3, sl
 8006d62:	4632      	mov	r2, r6
 8006d64:	f000 fccc 	bl	8007700 <_dtoa_r>
 8006d68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	d102      	bne.n	8006d76 <__cvt+0x66>
 8006d70:	f019 0f01 	tst.w	r9, #1
 8006d74:	d022      	beq.n	8006dbc <__cvt+0xac>
 8006d76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d7a:	eb07 0906 	add.w	r9, r7, r6
 8006d7e:	d110      	bne.n	8006da2 <__cvt+0x92>
 8006d80:	783b      	ldrb	r3, [r7, #0]
 8006d82:	2b30      	cmp	r3, #48	; 0x30
 8006d84:	d10a      	bne.n	8006d9c <__cvt+0x8c>
 8006d86:	2200      	movs	r2, #0
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	f7f9 fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d92:	b918      	cbnz	r0, 8006d9c <__cvt+0x8c>
 8006d94:	f1c6 0601 	rsb	r6, r6, #1
 8006d98:	f8ca 6000 	str.w	r6, [sl]
 8006d9c:	f8da 3000 	ldr.w	r3, [sl]
 8006da0:	4499      	add	r9, r3
 8006da2:	2200      	movs	r2, #0
 8006da4:	2300      	movs	r3, #0
 8006da6:	4620      	mov	r0, r4
 8006da8:	4629      	mov	r1, r5
 8006daa:	f7f9 fe8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dae:	b108      	cbz	r0, 8006db4 <__cvt+0xa4>
 8006db0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006db4:	2230      	movs	r2, #48	; 0x30
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	454b      	cmp	r3, r9
 8006dba:	d307      	bcc.n	8006dcc <__cvt+0xbc>
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dc0:	1bdb      	subs	r3, r3, r7
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	b004      	add	sp, #16
 8006dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dcc:	1c59      	adds	r1, r3, #1
 8006dce:	9103      	str	r1, [sp, #12]
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	e7f0      	b.n	8006db6 <__cvt+0xa6>

08006dd4 <__exponent>:
 8006dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	bfb8      	it	lt
 8006ddc:	4249      	neglt	r1, r1
 8006dde:	f803 2b02 	strb.w	r2, [r3], #2
 8006de2:	bfb4      	ite	lt
 8006de4:	222d      	movlt	r2, #45	; 0x2d
 8006de6:	222b      	movge	r2, #43	; 0x2b
 8006de8:	2909      	cmp	r1, #9
 8006dea:	7042      	strb	r2, [r0, #1]
 8006dec:	dd2a      	ble.n	8006e44 <__exponent+0x70>
 8006dee:	f10d 0407 	add.w	r4, sp, #7
 8006df2:	46a4      	mov	ip, r4
 8006df4:	270a      	movs	r7, #10
 8006df6:	46a6      	mov	lr, r4
 8006df8:	460a      	mov	r2, r1
 8006dfa:	fb91 f6f7 	sdiv	r6, r1, r7
 8006dfe:	fb07 1516 	mls	r5, r7, r6, r1
 8006e02:	3530      	adds	r5, #48	; 0x30
 8006e04:	2a63      	cmp	r2, #99	; 0x63
 8006e06:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e0e:	4631      	mov	r1, r6
 8006e10:	dcf1      	bgt.n	8006df6 <__exponent+0x22>
 8006e12:	3130      	adds	r1, #48	; 0x30
 8006e14:	f1ae 0502 	sub.w	r5, lr, #2
 8006e18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e1c:	1c44      	adds	r4, r0, #1
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4561      	cmp	r1, ip
 8006e22:	d30a      	bcc.n	8006e3a <__exponent+0x66>
 8006e24:	f10d 0209 	add.w	r2, sp, #9
 8006e28:	eba2 020e 	sub.w	r2, r2, lr
 8006e2c:	4565      	cmp	r5, ip
 8006e2e:	bf88      	it	hi
 8006e30:	2200      	movhi	r2, #0
 8006e32:	4413      	add	r3, r2
 8006e34:	1a18      	subs	r0, r3, r0
 8006e36:	b003      	add	sp, #12
 8006e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e42:	e7ed      	b.n	8006e20 <__exponent+0x4c>
 8006e44:	2330      	movs	r3, #48	; 0x30
 8006e46:	3130      	adds	r1, #48	; 0x30
 8006e48:	7083      	strb	r3, [r0, #2]
 8006e4a:	70c1      	strb	r1, [r0, #3]
 8006e4c:	1d03      	adds	r3, r0, #4
 8006e4e:	e7f1      	b.n	8006e34 <__exponent+0x60>

08006e50 <_printf_float>:
 8006e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e54:	ed2d 8b02 	vpush	{d8}
 8006e58:	b08d      	sub	sp, #52	; 0x34
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e60:	4616      	mov	r6, r2
 8006e62:	461f      	mov	r7, r3
 8006e64:	4605      	mov	r5, r0
 8006e66:	f001 fa39 	bl	80082dc <_localeconv_r>
 8006e6a:	f8d0 a000 	ldr.w	sl, [r0]
 8006e6e:	4650      	mov	r0, sl
 8006e70:	f7f9 f9ae 	bl	80001d0 <strlen>
 8006e74:	2300      	movs	r3, #0
 8006e76:	930a      	str	r3, [sp, #40]	; 0x28
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	9305      	str	r3, [sp, #20]
 8006e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e84:	3307      	adds	r3, #7
 8006e86:	f023 0307 	bic.w	r3, r3, #7
 8006e8a:	f103 0208 	add.w	r2, r3, #8
 8006e8e:	f8c8 2000 	str.w	r2, [r8]
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ea2:	9307      	str	r3, [sp, #28]
 8006ea4:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ea8:	ee08 0a10 	vmov	s16, r0
 8006eac:	4b9f      	ldr	r3, [pc, #636]	; (800712c <_printf_float+0x2dc>)
 8006eae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb6:	f7f9 fe39 	bl	8000b2c <__aeabi_dcmpun>
 8006eba:	bb88      	cbnz	r0, 8006f20 <_printf_float+0xd0>
 8006ebc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ec0:	4b9a      	ldr	r3, [pc, #616]	; (800712c <_printf_float+0x2dc>)
 8006ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec6:	f7f9 fe13 	bl	8000af0 <__aeabi_dcmple>
 8006eca:	bb48      	cbnz	r0, 8006f20 <_printf_float+0xd0>
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2300      	movs	r3, #0
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	f7f9 fe02 	bl	8000adc <__aeabi_dcmplt>
 8006ed8:	b110      	cbz	r0, 8006ee0 <_printf_float+0x90>
 8006eda:	232d      	movs	r3, #45	; 0x2d
 8006edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ee0:	4b93      	ldr	r3, [pc, #588]	; (8007130 <_printf_float+0x2e0>)
 8006ee2:	4894      	ldr	r0, [pc, #592]	; (8007134 <_printf_float+0x2e4>)
 8006ee4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ee8:	bf94      	ite	ls
 8006eea:	4698      	movls	r8, r3
 8006eec:	4680      	movhi	r8, r0
 8006eee:	2303      	movs	r3, #3
 8006ef0:	6123      	str	r3, [r4, #16]
 8006ef2:	9b05      	ldr	r3, [sp, #20]
 8006ef4:	f023 0204 	bic.w	r2, r3, #4
 8006ef8:	6022      	str	r2, [r4, #0]
 8006efa:	f04f 0900 	mov.w	r9, #0
 8006efe:	9700      	str	r7, [sp, #0]
 8006f00:	4633      	mov	r3, r6
 8006f02:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f04:	4621      	mov	r1, r4
 8006f06:	4628      	mov	r0, r5
 8006f08:	f000 f9d8 	bl	80072bc <_printf_common>
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	f040 8090 	bne.w	8007032 <_printf_float+0x1e2>
 8006f12:	f04f 30ff 	mov.w	r0, #4294967295
 8006f16:	b00d      	add	sp, #52	; 0x34
 8006f18:	ecbd 8b02 	vpop	{d8}
 8006f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	4642      	mov	r2, r8
 8006f22:	464b      	mov	r3, r9
 8006f24:	4640      	mov	r0, r8
 8006f26:	4649      	mov	r1, r9
 8006f28:	f7f9 fe00 	bl	8000b2c <__aeabi_dcmpun>
 8006f2c:	b140      	cbz	r0, 8006f40 <_printf_float+0xf0>
 8006f2e:	464b      	mov	r3, r9
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bfbc      	itt	lt
 8006f34:	232d      	movlt	r3, #45	; 0x2d
 8006f36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f3a:	487f      	ldr	r0, [pc, #508]	; (8007138 <_printf_float+0x2e8>)
 8006f3c:	4b7f      	ldr	r3, [pc, #508]	; (800713c <_printf_float+0x2ec>)
 8006f3e:	e7d1      	b.n	8006ee4 <_printf_float+0x94>
 8006f40:	6863      	ldr	r3, [r4, #4]
 8006f42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f46:	9206      	str	r2, [sp, #24]
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	d13f      	bne.n	8006fcc <_printf_float+0x17c>
 8006f4c:	2306      	movs	r3, #6
 8006f4e:	6063      	str	r3, [r4, #4]
 8006f50:	9b05      	ldr	r3, [sp, #20]
 8006f52:	6861      	ldr	r1, [r4, #4]
 8006f54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f58:	2300      	movs	r3, #0
 8006f5a:	9303      	str	r3, [sp, #12]
 8006f5c:	ab0a      	add	r3, sp, #40	; 0x28
 8006f5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f62:	ab09      	add	r3, sp, #36	; 0x24
 8006f64:	ec49 8b10 	vmov	d0, r8, r9
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	6022      	str	r2, [r4, #0]
 8006f6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f70:	4628      	mov	r0, r5
 8006f72:	f7ff fecd 	bl	8006d10 <__cvt>
 8006f76:	9b06      	ldr	r3, [sp, #24]
 8006f78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f7a:	2b47      	cmp	r3, #71	; 0x47
 8006f7c:	4680      	mov	r8, r0
 8006f7e:	d108      	bne.n	8006f92 <_printf_float+0x142>
 8006f80:	1cc8      	adds	r0, r1, #3
 8006f82:	db02      	blt.n	8006f8a <_printf_float+0x13a>
 8006f84:	6863      	ldr	r3, [r4, #4]
 8006f86:	4299      	cmp	r1, r3
 8006f88:	dd41      	ble.n	800700e <_printf_float+0x1be>
 8006f8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f8e:	fa5f fb8b 	uxtb.w	fp, fp
 8006f92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f96:	d820      	bhi.n	8006fda <_printf_float+0x18a>
 8006f98:	3901      	subs	r1, #1
 8006f9a:	465a      	mov	r2, fp
 8006f9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fa0:	9109      	str	r1, [sp, #36]	; 0x24
 8006fa2:	f7ff ff17 	bl	8006dd4 <__exponent>
 8006fa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fa8:	1813      	adds	r3, r2, r0
 8006faa:	2a01      	cmp	r2, #1
 8006fac:	4681      	mov	r9, r0
 8006fae:	6123      	str	r3, [r4, #16]
 8006fb0:	dc02      	bgt.n	8006fb8 <_printf_float+0x168>
 8006fb2:	6822      	ldr	r2, [r4, #0]
 8006fb4:	07d2      	lsls	r2, r2, #31
 8006fb6:	d501      	bpl.n	8006fbc <_printf_float+0x16c>
 8006fb8:	3301      	adds	r3, #1
 8006fba:	6123      	str	r3, [r4, #16]
 8006fbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d09c      	beq.n	8006efe <_printf_float+0xae>
 8006fc4:	232d      	movs	r3, #45	; 0x2d
 8006fc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fca:	e798      	b.n	8006efe <_printf_float+0xae>
 8006fcc:	9a06      	ldr	r2, [sp, #24]
 8006fce:	2a47      	cmp	r2, #71	; 0x47
 8006fd0:	d1be      	bne.n	8006f50 <_printf_float+0x100>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1bc      	bne.n	8006f50 <_printf_float+0x100>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e7b9      	b.n	8006f4e <_printf_float+0xfe>
 8006fda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006fde:	d118      	bne.n	8007012 <_printf_float+0x1c2>
 8006fe0:	2900      	cmp	r1, #0
 8006fe2:	6863      	ldr	r3, [r4, #4]
 8006fe4:	dd0b      	ble.n	8006ffe <_printf_float+0x1ae>
 8006fe6:	6121      	str	r1, [r4, #16]
 8006fe8:	b913      	cbnz	r3, 8006ff0 <_printf_float+0x1a0>
 8006fea:	6822      	ldr	r2, [r4, #0]
 8006fec:	07d0      	lsls	r0, r2, #31
 8006fee:	d502      	bpl.n	8006ff6 <_printf_float+0x1a6>
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	440b      	add	r3, r1
 8006ff4:	6123      	str	r3, [r4, #16]
 8006ff6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ff8:	f04f 0900 	mov.w	r9, #0
 8006ffc:	e7de      	b.n	8006fbc <_printf_float+0x16c>
 8006ffe:	b913      	cbnz	r3, 8007006 <_printf_float+0x1b6>
 8007000:	6822      	ldr	r2, [r4, #0]
 8007002:	07d2      	lsls	r2, r2, #31
 8007004:	d501      	bpl.n	800700a <_printf_float+0x1ba>
 8007006:	3302      	adds	r3, #2
 8007008:	e7f4      	b.n	8006ff4 <_printf_float+0x1a4>
 800700a:	2301      	movs	r3, #1
 800700c:	e7f2      	b.n	8006ff4 <_printf_float+0x1a4>
 800700e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007014:	4299      	cmp	r1, r3
 8007016:	db05      	blt.n	8007024 <_printf_float+0x1d4>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	6121      	str	r1, [r4, #16]
 800701c:	07d8      	lsls	r0, r3, #31
 800701e:	d5ea      	bpl.n	8006ff6 <_printf_float+0x1a6>
 8007020:	1c4b      	adds	r3, r1, #1
 8007022:	e7e7      	b.n	8006ff4 <_printf_float+0x1a4>
 8007024:	2900      	cmp	r1, #0
 8007026:	bfd4      	ite	le
 8007028:	f1c1 0202 	rsble	r2, r1, #2
 800702c:	2201      	movgt	r2, #1
 800702e:	4413      	add	r3, r2
 8007030:	e7e0      	b.n	8006ff4 <_printf_float+0x1a4>
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	055a      	lsls	r2, r3, #21
 8007036:	d407      	bmi.n	8007048 <_printf_float+0x1f8>
 8007038:	6923      	ldr	r3, [r4, #16]
 800703a:	4642      	mov	r2, r8
 800703c:	4631      	mov	r1, r6
 800703e:	4628      	mov	r0, r5
 8007040:	47b8      	blx	r7
 8007042:	3001      	adds	r0, #1
 8007044:	d12c      	bne.n	80070a0 <_printf_float+0x250>
 8007046:	e764      	b.n	8006f12 <_printf_float+0xc2>
 8007048:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800704c:	f240 80e0 	bls.w	8007210 <_printf_float+0x3c0>
 8007050:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007054:	2200      	movs	r2, #0
 8007056:	2300      	movs	r3, #0
 8007058:	f7f9 fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 800705c:	2800      	cmp	r0, #0
 800705e:	d034      	beq.n	80070ca <_printf_float+0x27a>
 8007060:	4a37      	ldr	r2, [pc, #220]	; (8007140 <_printf_float+0x2f0>)
 8007062:	2301      	movs	r3, #1
 8007064:	4631      	mov	r1, r6
 8007066:	4628      	mov	r0, r5
 8007068:	47b8      	blx	r7
 800706a:	3001      	adds	r0, #1
 800706c:	f43f af51 	beq.w	8006f12 <_printf_float+0xc2>
 8007070:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007074:	429a      	cmp	r2, r3
 8007076:	db02      	blt.n	800707e <_printf_float+0x22e>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	07d8      	lsls	r0, r3, #31
 800707c:	d510      	bpl.n	80070a0 <_printf_float+0x250>
 800707e:	ee18 3a10 	vmov	r3, s16
 8007082:	4652      	mov	r2, sl
 8007084:	4631      	mov	r1, r6
 8007086:	4628      	mov	r0, r5
 8007088:	47b8      	blx	r7
 800708a:	3001      	adds	r0, #1
 800708c:	f43f af41 	beq.w	8006f12 <_printf_float+0xc2>
 8007090:	f04f 0800 	mov.w	r8, #0
 8007094:	f104 091a 	add.w	r9, r4, #26
 8007098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800709a:	3b01      	subs	r3, #1
 800709c:	4543      	cmp	r3, r8
 800709e:	dc09      	bgt.n	80070b4 <_printf_float+0x264>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	079b      	lsls	r3, r3, #30
 80070a4:	f100 8105 	bmi.w	80072b2 <_printf_float+0x462>
 80070a8:	68e0      	ldr	r0, [r4, #12]
 80070aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ac:	4298      	cmp	r0, r3
 80070ae:	bfb8      	it	lt
 80070b0:	4618      	movlt	r0, r3
 80070b2:	e730      	b.n	8006f16 <_printf_float+0xc6>
 80070b4:	2301      	movs	r3, #1
 80070b6:	464a      	mov	r2, r9
 80070b8:	4631      	mov	r1, r6
 80070ba:	4628      	mov	r0, r5
 80070bc:	47b8      	blx	r7
 80070be:	3001      	adds	r0, #1
 80070c0:	f43f af27 	beq.w	8006f12 <_printf_float+0xc2>
 80070c4:	f108 0801 	add.w	r8, r8, #1
 80070c8:	e7e6      	b.n	8007098 <_printf_float+0x248>
 80070ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	dc39      	bgt.n	8007144 <_printf_float+0x2f4>
 80070d0:	4a1b      	ldr	r2, [pc, #108]	; (8007140 <_printf_float+0x2f0>)
 80070d2:	2301      	movs	r3, #1
 80070d4:	4631      	mov	r1, r6
 80070d6:	4628      	mov	r0, r5
 80070d8:	47b8      	blx	r7
 80070da:	3001      	adds	r0, #1
 80070dc:	f43f af19 	beq.w	8006f12 <_printf_float+0xc2>
 80070e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070e4:	4313      	orrs	r3, r2
 80070e6:	d102      	bne.n	80070ee <_printf_float+0x29e>
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	07d9      	lsls	r1, r3, #31
 80070ec:	d5d8      	bpl.n	80070a0 <_printf_float+0x250>
 80070ee:	ee18 3a10 	vmov	r3, s16
 80070f2:	4652      	mov	r2, sl
 80070f4:	4631      	mov	r1, r6
 80070f6:	4628      	mov	r0, r5
 80070f8:	47b8      	blx	r7
 80070fa:	3001      	adds	r0, #1
 80070fc:	f43f af09 	beq.w	8006f12 <_printf_float+0xc2>
 8007100:	f04f 0900 	mov.w	r9, #0
 8007104:	f104 0a1a 	add.w	sl, r4, #26
 8007108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800710a:	425b      	negs	r3, r3
 800710c:	454b      	cmp	r3, r9
 800710e:	dc01      	bgt.n	8007114 <_printf_float+0x2c4>
 8007110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007112:	e792      	b.n	800703a <_printf_float+0x1ea>
 8007114:	2301      	movs	r3, #1
 8007116:	4652      	mov	r2, sl
 8007118:	4631      	mov	r1, r6
 800711a:	4628      	mov	r0, r5
 800711c:	47b8      	blx	r7
 800711e:	3001      	adds	r0, #1
 8007120:	f43f aef7 	beq.w	8006f12 <_printf_float+0xc2>
 8007124:	f109 0901 	add.w	r9, r9, #1
 8007128:	e7ee      	b.n	8007108 <_printf_float+0x2b8>
 800712a:	bf00      	nop
 800712c:	7fefffff 	.word	0x7fefffff
 8007130:	0800977c 	.word	0x0800977c
 8007134:	08009780 	.word	0x08009780
 8007138:	08009788 	.word	0x08009788
 800713c:	08009784 	.word	0x08009784
 8007140:	0800978c 	.word	0x0800978c
 8007144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007146:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007148:	429a      	cmp	r2, r3
 800714a:	bfa8      	it	ge
 800714c:	461a      	movge	r2, r3
 800714e:	2a00      	cmp	r2, #0
 8007150:	4691      	mov	r9, r2
 8007152:	dc37      	bgt.n	80071c4 <_printf_float+0x374>
 8007154:	f04f 0b00 	mov.w	fp, #0
 8007158:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800715c:	f104 021a 	add.w	r2, r4, #26
 8007160:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007162:	9305      	str	r3, [sp, #20]
 8007164:	eba3 0309 	sub.w	r3, r3, r9
 8007168:	455b      	cmp	r3, fp
 800716a:	dc33      	bgt.n	80071d4 <_printf_float+0x384>
 800716c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007170:	429a      	cmp	r2, r3
 8007172:	db3b      	blt.n	80071ec <_printf_float+0x39c>
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	07da      	lsls	r2, r3, #31
 8007178:	d438      	bmi.n	80071ec <_printf_float+0x39c>
 800717a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800717c:	9a05      	ldr	r2, [sp, #20]
 800717e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007180:	1a9a      	subs	r2, r3, r2
 8007182:	eba3 0901 	sub.w	r9, r3, r1
 8007186:	4591      	cmp	r9, r2
 8007188:	bfa8      	it	ge
 800718a:	4691      	movge	r9, r2
 800718c:	f1b9 0f00 	cmp.w	r9, #0
 8007190:	dc35      	bgt.n	80071fe <_printf_float+0x3ae>
 8007192:	f04f 0800 	mov.w	r8, #0
 8007196:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800719a:	f104 0a1a 	add.w	sl, r4, #26
 800719e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071a2:	1a9b      	subs	r3, r3, r2
 80071a4:	eba3 0309 	sub.w	r3, r3, r9
 80071a8:	4543      	cmp	r3, r8
 80071aa:	f77f af79 	ble.w	80070a0 <_printf_float+0x250>
 80071ae:	2301      	movs	r3, #1
 80071b0:	4652      	mov	r2, sl
 80071b2:	4631      	mov	r1, r6
 80071b4:	4628      	mov	r0, r5
 80071b6:	47b8      	blx	r7
 80071b8:	3001      	adds	r0, #1
 80071ba:	f43f aeaa 	beq.w	8006f12 <_printf_float+0xc2>
 80071be:	f108 0801 	add.w	r8, r8, #1
 80071c2:	e7ec      	b.n	800719e <_printf_float+0x34e>
 80071c4:	4613      	mov	r3, r2
 80071c6:	4631      	mov	r1, r6
 80071c8:	4642      	mov	r2, r8
 80071ca:	4628      	mov	r0, r5
 80071cc:	47b8      	blx	r7
 80071ce:	3001      	adds	r0, #1
 80071d0:	d1c0      	bne.n	8007154 <_printf_float+0x304>
 80071d2:	e69e      	b.n	8006f12 <_printf_float+0xc2>
 80071d4:	2301      	movs	r3, #1
 80071d6:	4631      	mov	r1, r6
 80071d8:	4628      	mov	r0, r5
 80071da:	9205      	str	r2, [sp, #20]
 80071dc:	47b8      	blx	r7
 80071de:	3001      	adds	r0, #1
 80071e0:	f43f ae97 	beq.w	8006f12 <_printf_float+0xc2>
 80071e4:	9a05      	ldr	r2, [sp, #20]
 80071e6:	f10b 0b01 	add.w	fp, fp, #1
 80071ea:	e7b9      	b.n	8007160 <_printf_float+0x310>
 80071ec:	ee18 3a10 	vmov	r3, s16
 80071f0:	4652      	mov	r2, sl
 80071f2:	4631      	mov	r1, r6
 80071f4:	4628      	mov	r0, r5
 80071f6:	47b8      	blx	r7
 80071f8:	3001      	adds	r0, #1
 80071fa:	d1be      	bne.n	800717a <_printf_float+0x32a>
 80071fc:	e689      	b.n	8006f12 <_printf_float+0xc2>
 80071fe:	9a05      	ldr	r2, [sp, #20]
 8007200:	464b      	mov	r3, r9
 8007202:	4442      	add	r2, r8
 8007204:	4631      	mov	r1, r6
 8007206:	4628      	mov	r0, r5
 8007208:	47b8      	blx	r7
 800720a:	3001      	adds	r0, #1
 800720c:	d1c1      	bne.n	8007192 <_printf_float+0x342>
 800720e:	e680      	b.n	8006f12 <_printf_float+0xc2>
 8007210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007212:	2a01      	cmp	r2, #1
 8007214:	dc01      	bgt.n	800721a <_printf_float+0x3ca>
 8007216:	07db      	lsls	r3, r3, #31
 8007218:	d538      	bpl.n	800728c <_printf_float+0x43c>
 800721a:	2301      	movs	r3, #1
 800721c:	4642      	mov	r2, r8
 800721e:	4631      	mov	r1, r6
 8007220:	4628      	mov	r0, r5
 8007222:	47b8      	blx	r7
 8007224:	3001      	adds	r0, #1
 8007226:	f43f ae74 	beq.w	8006f12 <_printf_float+0xc2>
 800722a:	ee18 3a10 	vmov	r3, s16
 800722e:	4652      	mov	r2, sl
 8007230:	4631      	mov	r1, r6
 8007232:	4628      	mov	r0, r5
 8007234:	47b8      	blx	r7
 8007236:	3001      	adds	r0, #1
 8007238:	f43f ae6b 	beq.w	8006f12 <_printf_float+0xc2>
 800723c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007240:	2200      	movs	r2, #0
 8007242:	2300      	movs	r3, #0
 8007244:	f7f9 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 8007248:	b9d8      	cbnz	r0, 8007282 <_printf_float+0x432>
 800724a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800724c:	f108 0201 	add.w	r2, r8, #1
 8007250:	3b01      	subs	r3, #1
 8007252:	4631      	mov	r1, r6
 8007254:	4628      	mov	r0, r5
 8007256:	47b8      	blx	r7
 8007258:	3001      	adds	r0, #1
 800725a:	d10e      	bne.n	800727a <_printf_float+0x42a>
 800725c:	e659      	b.n	8006f12 <_printf_float+0xc2>
 800725e:	2301      	movs	r3, #1
 8007260:	4652      	mov	r2, sl
 8007262:	4631      	mov	r1, r6
 8007264:	4628      	mov	r0, r5
 8007266:	47b8      	blx	r7
 8007268:	3001      	adds	r0, #1
 800726a:	f43f ae52 	beq.w	8006f12 <_printf_float+0xc2>
 800726e:	f108 0801 	add.w	r8, r8, #1
 8007272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007274:	3b01      	subs	r3, #1
 8007276:	4543      	cmp	r3, r8
 8007278:	dcf1      	bgt.n	800725e <_printf_float+0x40e>
 800727a:	464b      	mov	r3, r9
 800727c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007280:	e6dc      	b.n	800703c <_printf_float+0x1ec>
 8007282:	f04f 0800 	mov.w	r8, #0
 8007286:	f104 0a1a 	add.w	sl, r4, #26
 800728a:	e7f2      	b.n	8007272 <_printf_float+0x422>
 800728c:	2301      	movs	r3, #1
 800728e:	4642      	mov	r2, r8
 8007290:	e7df      	b.n	8007252 <_printf_float+0x402>
 8007292:	2301      	movs	r3, #1
 8007294:	464a      	mov	r2, r9
 8007296:	4631      	mov	r1, r6
 8007298:	4628      	mov	r0, r5
 800729a:	47b8      	blx	r7
 800729c:	3001      	adds	r0, #1
 800729e:	f43f ae38 	beq.w	8006f12 <_printf_float+0xc2>
 80072a2:	f108 0801 	add.w	r8, r8, #1
 80072a6:	68e3      	ldr	r3, [r4, #12]
 80072a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072aa:	1a5b      	subs	r3, r3, r1
 80072ac:	4543      	cmp	r3, r8
 80072ae:	dcf0      	bgt.n	8007292 <_printf_float+0x442>
 80072b0:	e6fa      	b.n	80070a8 <_printf_float+0x258>
 80072b2:	f04f 0800 	mov.w	r8, #0
 80072b6:	f104 0919 	add.w	r9, r4, #25
 80072ba:	e7f4      	b.n	80072a6 <_printf_float+0x456>

080072bc <_printf_common>:
 80072bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c0:	4616      	mov	r6, r2
 80072c2:	4699      	mov	r9, r3
 80072c4:	688a      	ldr	r2, [r1, #8]
 80072c6:	690b      	ldr	r3, [r1, #16]
 80072c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072cc:	4293      	cmp	r3, r2
 80072ce:	bfb8      	it	lt
 80072d0:	4613      	movlt	r3, r2
 80072d2:	6033      	str	r3, [r6, #0]
 80072d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072d8:	4607      	mov	r7, r0
 80072da:	460c      	mov	r4, r1
 80072dc:	b10a      	cbz	r2, 80072e2 <_printf_common+0x26>
 80072de:	3301      	adds	r3, #1
 80072e0:	6033      	str	r3, [r6, #0]
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	0699      	lsls	r1, r3, #26
 80072e6:	bf42      	ittt	mi
 80072e8:	6833      	ldrmi	r3, [r6, #0]
 80072ea:	3302      	addmi	r3, #2
 80072ec:	6033      	strmi	r3, [r6, #0]
 80072ee:	6825      	ldr	r5, [r4, #0]
 80072f0:	f015 0506 	ands.w	r5, r5, #6
 80072f4:	d106      	bne.n	8007304 <_printf_common+0x48>
 80072f6:	f104 0a19 	add.w	sl, r4, #25
 80072fa:	68e3      	ldr	r3, [r4, #12]
 80072fc:	6832      	ldr	r2, [r6, #0]
 80072fe:	1a9b      	subs	r3, r3, r2
 8007300:	42ab      	cmp	r3, r5
 8007302:	dc26      	bgt.n	8007352 <_printf_common+0x96>
 8007304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007308:	1e13      	subs	r3, r2, #0
 800730a:	6822      	ldr	r2, [r4, #0]
 800730c:	bf18      	it	ne
 800730e:	2301      	movne	r3, #1
 8007310:	0692      	lsls	r2, r2, #26
 8007312:	d42b      	bmi.n	800736c <_printf_common+0xb0>
 8007314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007318:	4649      	mov	r1, r9
 800731a:	4638      	mov	r0, r7
 800731c:	47c0      	blx	r8
 800731e:	3001      	adds	r0, #1
 8007320:	d01e      	beq.n	8007360 <_printf_common+0xa4>
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	68e5      	ldr	r5, [r4, #12]
 8007326:	6832      	ldr	r2, [r6, #0]
 8007328:	f003 0306 	and.w	r3, r3, #6
 800732c:	2b04      	cmp	r3, #4
 800732e:	bf08      	it	eq
 8007330:	1aad      	subeq	r5, r5, r2
 8007332:	68a3      	ldr	r3, [r4, #8]
 8007334:	6922      	ldr	r2, [r4, #16]
 8007336:	bf0c      	ite	eq
 8007338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800733c:	2500      	movne	r5, #0
 800733e:	4293      	cmp	r3, r2
 8007340:	bfc4      	itt	gt
 8007342:	1a9b      	subgt	r3, r3, r2
 8007344:	18ed      	addgt	r5, r5, r3
 8007346:	2600      	movs	r6, #0
 8007348:	341a      	adds	r4, #26
 800734a:	42b5      	cmp	r5, r6
 800734c:	d11a      	bne.n	8007384 <_printf_common+0xc8>
 800734e:	2000      	movs	r0, #0
 8007350:	e008      	b.n	8007364 <_printf_common+0xa8>
 8007352:	2301      	movs	r3, #1
 8007354:	4652      	mov	r2, sl
 8007356:	4649      	mov	r1, r9
 8007358:	4638      	mov	r0, r7
 800735a:	47c0      	blx	r8
 800735c:	3001      	adds	r0, #1
 800735e:	d103      	bne.n	8007368 <_printf_common+0xac>
 8007360:	f04f 30ff 	mov.w	r0, #4294967295
 8007364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007368:	3501      	adds	r5, #1
 800736a:	e7c6      	b.n	80072fa <_printf_common+0x3e>
 800736c:	18e1      	adds	r1, r4, r3
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	2030      	movs	r0, #48	; 0x30
 8007372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007376:	4422      	add	r2, r4
 8007378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800737c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007380:	3302      	adds	r3, #2
 8007382:	e7c7      	b.n	8007314 <_printf_common+0x58>
 8007384:	2301      	movs	r3, #1
 8007386:	4622      	mov	r2, r4
 8007388:	4649      	mov	r1, r9
 800738a:	4638      	mov	r0, r7
 800738c:	47c0      	blx	r8
 800738e:	3001      	adds	r0, #1
 8007390:	d0e6      	beq.n	8007360 <_printf_common+0xa4>
 8007392:	3601      	adds	r6, #1
 8007394:	e7d9      	b.n	800734a <_printf_common+0x8e>
	...

08007398 <_printf_i>:
 8007398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800739c:	7e0f      	ldrb	r7, [r1, #24]
 800739e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073a0:	2f78      	cmp	r7, #120	; 0x78
 80073a2:	4691      	mov	r9, r2
 80073a4:	4680      	mov	r8, r0
 80073a6:	460c      	mov	r4, r1
 80073a8:	469a      	mov	sl, r3
 80073aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073ae:	d807      	bhi.n	80073c0 <_printf_i+0x28>
 80073b0:	2f62      	cmp	r7, #98	; 0x62
 80073b2:	d80a      	bhi.n	80073ca <_printf_i+0x32>
 80073b4:	2f00      	cmp	r7, #0
 80073b6:	f000 80d8 	beq.w	800756a <_printf_i+0x1d2>
 80073ba:	2f58      	cmp	r7, #88	; 0x58
 80073bc:	f000 80a3 	beq.w	8007506 <_printf_i+0x16e>
 80073c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073c8:	e03a      	b.n	8007440 <_printf_i+0xa8>
 80073ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073ce:	2b15      	cmp	r3, #21
 80073d0:	d8f6      	bhi.n	80073c0 <_printf_i+0x28>
 80073d2:	a101      	add	r1, pc, #4	; (adr r1, 80073d8 <_printf_i+0x40>)
 80073d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073d8:	08007431 	.word	0x08007431
 80073dc:	08007445 	.word	0x08007445
 80073e0:	080073c1 	.word	0x080073c1
 80073e4:	080073c1 	.word	0x080073c1
 80073e8:	080073c1 	.word	0x080073c1
 80073ec:	080073c1 	.word	0x080073c1
 80073f0:	08007445 	.word	0x08007445
 80073f4:	080073c1 	.word	0x080073c1
 80073f8:	080073c1 	.word	0x080073c1
 80073fc:	080073c1 	.word	0x080073c1
 8007400:	080073c1 	.word	0x080073c1
 8007404:	08007551 	.word	0x08007551
 8007408:	08007475 	.word	0x08007475
 800740c:	08007533 	.word	0x08007533
 8007410:	080073c1 	.word	0x080073c1
 8007414:	080073c1 	.word	0x080073c1
 8007418:	08007573 	.word	0x08007573
 800741c:	080073c1 	.word	0x080073c1
 8007420:	08007475 	.word	0x08007475
 8007424:	080073c1 	.word	0x080073c1
 8007428:	080073c1 	.word	0x080073c1
 800742c:	0800753b 	.word	0x0800753b
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	1d1a      	adds	r2, r3, #4
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	602a      	str	r2, [r5, #0]
 8007438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800743c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007440:	2301      	movs	r3, #1
 8007442:	e0a3      	b.n	800758c <_printf_i+0x1f4>
 8007444:	6820      	ldr	r0, [r4, #0]
 8007446:	6829      	ldr	r1, [r5, #0]
 8007448:	0606      	lsls	r6, r0, #24
 800744a:	f101 0304 	add.w	r3, r1, #4
 800744e:	d50a      	bpl.n	8007466 <_printf_i+0xce>
 8007450:	680e      	ldr	r6, [r1, #0]
 8007452:	602b      	str	r3, [r5, #0]
 8007454:	2e00      	cmp	r6, #0
 8007456:	da03      	bge.n	8007460 <_printf_i+0xc8>
 8007458:	232d      	movs	r3, #45	; 0x2d
 800745a:	4276      	negs	r6, r6
 800745c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007460:	485e      	ldr	r0, [pc, #376]	; (80075dc <_printf_i+0x244>)
 8007462:	230a      	movs	r3, #10
 8007464:	e019      	b.n	800749a <_printf_i+0x102>
 8007466:	680e      	ldr	r6, [r1, #0]
 8007468:	602b      	str	r3, [r5, #0]
 800746a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800746e:	bf18      	it	ne
 8007470:	b236      	sxthne	r6, r6
 8007472:	e7ef      	b.n	8007454 <_printf_i+0xbc>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	6820      	ldr	r0, [r4, #0]
 8007478:	1d19      	adds	r1, r3, #4
 800747a:	6029      	str	r1, [r5, #0]
 800747c:	0601      	lsls	r1, r0, #24
 800747e:	d501      	bpl.n	8007484 <_printf_i+0xec>
 8007480:	681e      	ldr	r6, [r3, #0]
 8007482:	e002      	b.n	800748a <_printf_i+0xf2>
 8007484:	0646      	lsls	r6, r0, #25
 8007486:	d5fb      	bpl.n	8007480 <_printf_i+0xe8>
 8007488:	881e      	ldrh	r6, [r3, #0]
 800748a:	4854      	ldr	r0, [pc, #336]	; (80075dc <_printf_i+0x244>)
 800748c:	2f6f      	cmp	r7, #111	; 0x6f
 800748e:	bf0c      	ite	eq
 8007490:	2308      	moveq	r3, #8
 8007492:	230a      	movne	r3, #10
 8007494:	2100      	movs	r1, #0
 8007496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800749a:	6865      	ldr	r5, [r4, #4]
 800749c:	60a5      	str	r5, [r4, #8]
 800749e:	2d00      	cmp	r5, #0
 80074a0:	bfa2      	ittt	ge
 80074a2:	6821      	ldrge	r1, [r4, #0]
 80074a4:	f021 0104 	bicge.w	r1, r1, #4
 80074a8:	6021      	strge	r1, [r4, #0]
 80074aa:	b90e      	cbnz	r6, 80074b0 <_printf_i+0x118>
 80074ac:	2d00      	cmp	r5, #0
 80074ae:	d04d      	beq.n	800754c <_printf_i+0x1b4>
 80074b0:	4615      	mov	r5, r2
 80074b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80074b6:	fb03 6711 	mls	r7, r3, r1, r6
 80074ba:	5dc7      	ldrb	r7, [r0, r7]
 80074bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074c0:	4637      	mov	r7, r6
 80074c2:	42bb      	cmp	r3, r7
 80074c4:	460e      	mov	r6, r1
 80074c6:	d9f4      	bls.n	80074b2 <_printf_i+0x11a>
 80074c8:	2b08      	cmp	r3, #8
 80074ca:	d10b      	bne.n	80074e4 <_printf_i+0x14c>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	07de      	lsls	r6, r3, #31
 80074d0:	d508      	bpl.n	80074e4 <_printf_i+0x14c>
 80074d2:	6923      	ldr	r3, [r4, #16]
 80074d4:	6861      	ldr	r1, [r4, #4]
 80074d6:	4299      	cmp	r1, r3
 80074d8:	bfde      	ittt	le
 80074da:	2330      	movle	r3, #48	; 0x30
 80074dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074e4:	1b52      	subs	r2, r2, r5
 80074e6:	6122      	str	r2, [r4, #16]
 80074e8:	f8cd a000 	str.w	sl, [sp]
 80074ec:	464b      	mov	r3, r9
 80074ee:	aa03      	add	r2, sp, #12
 80074f0:	4621      	mov	r1, r4
 80074f2:	4640      	mov	r0, r8
 80074f4:	f7ff fee2 	bl	80072bc <_printf_common>
 80074f8:	3001      	adds	r0, #1
 80074fa:	d14c      	bne.n	8007596 <_printf_i+0x1fe>
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007500:	b004      	add	sp, #16
 8007502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007506:	4835      	ldr	r0, [pc, #212]	; (80075dc <_printf_i+0x244>)
 8007508:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800750c:	6829      	ldr	r1, [r5, #0]
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	f851 6b04 	ldr.w	r6, [r1], #4
 8007514:	6029      	str	r1, [r5, #0]
 8007516:	061d      	lsls	r5, r3, #24
 8007518:	d514      	bpl.n	8007544 <_printf_i+0x1ac>
 800751a:	07df      	lsls	r7, r3, #31
 800751c:	bf44      	itt	mi
 800751e:	f043 0320 	orrmi.w	r3, r3, #32
 8007522:	6023      	strmi	r3, [r4, #0]
 8007524:	b91e      	cbnz	r6, 800752e <_printf_i+0x196>
 8007526:	6823      	ldr	r3, [r4, #0]
 8007528:	f023 0320 	bic.w	r3, r3, #32
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	2310      	movs	r3, #16
 8007530:	e7b0      	b.n	8007494 <_printf_i+0xfc>
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	f043 0320 	orr.w	r3, r3, #32
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	2378      	movs	r3, #120	; 0x78
 800753c:	4828      	ldr	r0, [pc, #160]	; (80075e0 <_printf_i+0x248>)
 800753e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007542:	e7e3      	b.n	800750c <_printf_i+0x174>
 8007544:	0659      	lsls	r1, r3, #25
 8007546:	bf48      	it	mi
 8007548:	b2b6      	uxthmi	r6, r6
 800754a:	e7e6      	b.n	800751a <_printf_i+0x182>
 800754c:	4615      	mov	r5, r2
 800754e:	e7bb      	b.n	80074c8 <_printf_i+0x130>
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	6826      	ldr	r6, [r4, #0]
 8007554:	6961      	ldr	r1, [r4, #20]
 8007556:	1d18      	adds	r0, r3, #4
 8007558:	6028      	str	r0, [r5, #0]
 800755a:	0635      	lsls	r5, r6, #24
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	d501      	bpl.n	8007564 <_printf_i+0x1cc>
 8007560:	6019      	str	r1, [r3, #0]
 8007562:	e002      	b.n	800756a <_printf_i+0x1d2>
 8007564:	0670      	lsls	r0, r6, #25
 8007566:	d5fb      	bpl.n	8007560 <_printf_i+0x1c8>
 8007568:	8019      	strh	r1, [r3, #0]
 800756a:	2300      	movs	r3, #0
 800756c:	6123      	str	r3, [r4, #16]
 800756e:	4615      	mov	r5, r2
 8007570:	e7ba      	b.n	80074e8 <_printf_i+0x150>
 8007572:	682b      	ldr	r3, [r5, #0]
 8007574:	1d1a      	adds	r2, r3, #4
 8007576:	602a      	str	r2, [r5, #0]
 8007578:	681d      	ldr	r5, [r3, #0]
 800757a:	6862      	ldr	r2, [r4, #4]
 800757c:	2100      	movs	r1, #0
 800757e:	4628      	mov	r0, r5
 8007580:	f7f8 fe2e 	bl	80001e0 <memchr>
 8007584:	b108      	cbz	r0, 800758a <_printf_i+0x1f2>
 8007586:	1b40      	subs	r0, r0, r5
 8007588:	6060      	str	r0, [r4, #4]
 800758a:	6863      	ldr	r3, [r4, #4]
 800758c:	6123      	str	r3, [r4, #16]
 800758e:	2300      	movs	r3, #0
 8007590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007594:	e7a8      	b.n	80074e8 <_printf_i+0x150>
 8007596:	6923      	ldr	r3, [r4, #16]
 8007598:	462a      	mov	r2, r5
 800759a:	4649      	mov	r1, r9
 800759c:	4640      	mov	r0, r8
 800759e:	47d0      	blx	sl
 80075a0:	3001      	adds	r0, #1
 80075a2:	d0ab      	beq.n	80074fc <_printf_i+0x164>
 80075a4:	6823      	ldr	r3, [r4, #0]
 80075a6:	079b      	lsls	r3, r3, #30
 80075a8:	d413      	bmi.n	80075d2 <_printf_i+0x23a>
 80075aa:	68e0      	ldr	r0, [r4, #12]
 80075ac:	9b03      	ldr	r3, [sp, #12]
 80075ae:	4298      	cmp	r0, r3
 80075b0:	bfb8      	it	lt
 80075b2:	4618      	movlt	r0, r3
 80075b4:	e7a4      	b.n	8007500 <_printf_i+0x168>
 80075b6:	2301      	movs	r3, #1
 80075b8:	4632      	mov	r2, r6
 80075ba:	4649      	mov	r1, r9
 80075bc:	4640      	mov	r0, r8
 80075be:	47d0      	blx	sl
 80075c0:	3001      	adds	r0, #1
 80075c2:	d09b      	beq.n	80074fc <_printf_i+0x164>
 80075c4:	3501      	adds	r5, #1
 80075c6:	68e3      	ldr	r3, [r4, #12]
 80075c8:	9903      	ldr	r1, [sp, #12]
 80075ca:	1a5b      	subs	r3, r3, r1
 80075cc:	42ab      	cmp	r3, r5
 80075ce:	dcf2      	bgt.n	80075b6 <_printf_i+0x21e>
 80075d0:	e7eb      	b.n	80075aa <_printf_i+0x212>
 80075d2:	2500      	movs	r5, #0
 80075d4:	f104 0619 	add.w	r6, r4, #25
 80075d8:	e7f5      	b.n	80075c6 <_printf_i+0x22e>
 80075da:	bf00      	nop
 80075dc:	0800978e 	.word	0x0800978e
 80075e0:	0800979f 	.word	0x0800979f

080075e4 <quorem>:
 80075e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	6903      	ldr	r3, [r0, #16]
 80075ea:	690c      	ldr	r4, [r1, #16]
 80075ec:	42a3      	cmp	r3, r4
 80075ee:	4607      	mov	r7, r0
 80075f0:	f2c0 8081 	blt.w	80076f6 <quorem+0x112>
 80075f4:	3c01      	subs	r4, #1
 80075f6:	f101 0814 	add.w	r8, r1, #20
 80075fa:	f100 0514 	add.w	r5, r0, #20
 80075fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007602:	9301      	str	r3, [sp, #4]
 8007604:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007608:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800760c:	3301      	adds	r3, #1
 800760e:	429a      	cmp	r2, r3
 8007610:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007614:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007618:	fbb2 f6f3 	udiv	r6, r2, r3
 800761c:	d331      	bcc.n	8007682 <quorem+0x9e>
 800761e:	f04f 0e00 	mov.w	lr, #0
 8007622:	4640      	mov	r0, r8
 8007624:	46ac      	mov	ip, r5
 8007626:	46f2      	mov	sl, lr
 8007628:	f850 2b04 	ldr.w	r2, [r0], #4
 800762c:	b293      	uxth	r3, r2
 800762e:	fb06 e303 	mla	r3, r6, r3, lr
 8007632:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007636:	b29b      	uxth	r3, r3
 8007638:	ebaa 0303 	sub.w	r3, sl, r3
 800763c:	f8dc a000 	ldr.w	sl, [ip]
 8007640:	0c12      	lsrs	r2, r2, #16
 8007642:	fa13 f38a 	uxtah	r3, r3, sl
 8007646:	fb06 e202 	mla	r2, r6, r2, lr
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	9b00      	ldr	r3, [sp, #0]
 800764e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007652:	b292      	uxth	r2, r2
 8007654:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007658:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800765c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007660:	4581      	cmp	r9, r0
 8007662:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007666:	f84c 3b04 	str.w	r3, [ip], #4
 800766a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800766e:	d2db      	bcs.n	8007628 <quorem+0x44>
 8007670:	f855 300b 	ldr.w	r3, [r5, fp]
 8007674:	b92b      	cbnz	r3, 8007682 <quorem+0x9e>
 8007676:	9b01      	ldr	r3, [sp, #4]
 8007678:	3b04      	subs	r3, #4
 800767a:	429d      	cmp	r5, r3
 800767c:	461a      	mov	r2, r3
 800767e:	d32e      	bcc.n	80076de <quorem+0xfa>
 8007680:	613c      	str	r4, [r7, #16]
 8007682:	4638      	mov	r0, r7
 8007684:	f001 f8c6 	bl	8008814 <__mcmp>
 8007688:	2800      	cmp	r0, #0
 800768a:	db24      	blt.n	80076d6 <quorem+0xf2>
 800768c:	3601      	adds	r6, #1
 800768e:	4628      	mov	r0, r5
 8007690:	f04f 0c00 	mov.w	ip, #0
 8007694:	f858 2b04 	ldr.w	r2, [r8], #4
 8007698:	f8d0 e000 	ldr.w	lr, [r0]
 800769c:	b293      	uxth	r3, r2
 800769e:	ebac 0303 	sub.w	r3, ip, r3
 80076a2:	0c12      	lsrs	r2, r2, #16
 80076a4:	fa13 f38e 	uxtah	r3, r3, lr
 80076a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076b6:	45c1      	cmp	r9, r8
 80076b8:	f840 3b04 	str.w	r3, [r0], #4
 80076bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80076c0:	d2e8      	bcs.n	8007694 <quorem+0xb0>
 80076c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ca:	b922      	cbnz	r2, 80076d6 <quorem+0xf2>
 80076cc:	3b04      	subs	r3, #4
 80076ce:	429d      	cmp	r5, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	d30a      	bcc.n	80076ea <quorem+0x106>
 80076d4:	613c      	str	r4, [r7, #16]
 80076d6:	4630      	mov	r0, r6
 80076d8:	b003      	add	sp, #12
 80076da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076de:	6812      	ldr	r2, [r2, #0]
 80076e0:	3b04      	subs	r3, #4
 80076e2:	2a00      	cmp	r2, #0
 80076e4:	d1cc      	bne.n	8007680 <quorem+0x9c>
 80076e6:	3c01      	subs	r4, #1
 80076e8:	e7c7      	b.n	800767a <quorem+0x96>
 80076ea:	6812      	ldr	r2, [r2, #0]
 80076ec:	3b04      	subs	r3, #4
 80076ee:	2a00      	cmp	r2, #0
 80076f0:	d1f0      	bne.n	80076d4 <quorem+0xf0>
 80076f2:	3c01      	subs	r4, #1
 80076f4:	e7eb      	b.n	80076ce <quorem+0xea>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e7ee      	b.n	80076d8 <quorem+0xf4>
 80076fa:	0000      	movs	r0, r0
 80076fc:	0000      	movs	r0, r0
	...

08007700 <_dtoa_r>:
 8007700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007704:	ed2d 8b04 	vpush	{d8-d9}
 8007708:	ec57 6b10 	vmov	r6, r7, d0
 800770c:	b093      	sub	sp, #76	; 0x4c
 800770e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007710:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007714:	9106      	str	r1, [sp, #24]
 8007716:	ee10 aa10 	vmov	sl, s0
 800771a:	4604      	mov	r4, r0
 800771c:	9209      	str	r2, [sp, #36]	; 0x24
 800771e:	930c      	str	r3, [sp, #48]	; 0x30
 8007720:	46bb      	mov	fp, r7
 8007722:	b975      	cbnz	r5, 8007742 <_dtoa_r+0x42>
 8007724:	2010      	movs	r0, #16
 8007726:	f000 fddd 	bl	80082e4 <malloc>
 800772a:	4602      	mov	r2, r0
 800772c:	6260      	str	r0, [r4, #36]	; 0x24
 800772e:	b920      	cbnz	r0, 800773a <_dtoa_r+0x3a>
 8007730:	4ba7      	ldr	r3, [pc, #668]	; (80079d0 <_dtoa_r+0x2d0>)
 8007732:	21ea      	movs	r1, #234	; 0xea
 8007734:	48a7      	ldr	r0, [pc, #668]	; (80079d4 <_dtoa_r+0x2d4>)
 8007736:	f001 fa75 	bl	8008c24 <__assert_func>
 800773a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800773e:	6005      	str	r5, [r0, #0]
 8007740:	60c5      	str	r5, [r0, #12]
 8007742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007744:	6819      	ldr	r1, [r3, #0]
 8007746:	b151      	cbz	r1, 800775e <_dtoa_r+0x5e>
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	604a      	str	r2, [r1, #4]
 800774c:	2301      	movs	r3, #1
 800774e:	4093      	lsls	r3, r2
 8007750:	608b      	str	r3, [r1, #8]
 8007752:	4620      	mov	r0, r4
 8007754:	f000 fe1c 	bl	8008390 <_Bfree>
 8007758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	1e3b      	subs	r3, r7, #0
 8007760:	bfaa      	itet	ge
 8007762:	2300      	movge	r3, #0
 8007764:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007768:	f8c8 3000 	strge.w	r3, [r8]
 800776c:	4b9a      	ldr	r3, [pc, #616]	; (80079d8 <_dtoa_r+0x2d8>)
 800776e:	bfbc      	itt	lt
 8007770:	2201      	movlt	r2, #1
 8007772:	f8c8 2000 	strlt.w	r2, [r8]
 8007776:	ea33 030b 	bics.w	r3, r3, fp
 800777a:	d11b      	bne.n	80077b4 <_dtoa_r+0xb4>
 800777c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800777e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007788:	4333      	orrs	r3, r6
 800778a:	f000 8592 	beq.w	80082b2 <_dtoa_r+0xbb2>
 800778e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007790:	b963      	cbnz	r3, 80077ac <_dtoa_r+0xac>
 8007792:	4b92      	ldr	r3, [pc, #584]	; (80079dc <_dtoa_r+0x2dc>)
 8007794:	e022      	b.n	80077dc <_dtoa_r+0xdc>
 8007796:	4b92      	ldr	r3, [pc, #584]	; (80079e0 <_dtoa_r+0x2e0>)
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	3308      	adds	r3, #8
 800779c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	9801      	ldr	r0, [sp, #4]
 80077a2:	b013      	add	sp, #76	; 0x4c
 80077a4:	ecbd 8b04 	vpop	{d8-d9}
 80077a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ac:	4b8b      	ldr	r3, [pc, #556]	; (80079dc <_dtoa_r+0x2dc>)
 80077ae:	9301      	str	r3, [sp, #4]
 80077b0:	3303      	adds	r3, #3
 80077b2:	e7f3      	b.n	800779c <_dtoa_r+0x9c>
 80077b4:	2200      	movs	r2, #0
 80077b6:	2300      	movs	r3, #0
 80077b8:	4650      	mov	r0, sl
 80077ba:	4659      	mov	r1, fp
 80077bc:	f7f9 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 80077c0:	ec4b ab19 	vmov	d9, sl, fp
 80077c4:	4680      	mov	r8, r0
 80077c6:	b158      	cbz	r0, 80077e0 <_dtoa_r+0xe0>
 80077c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077ca:	2301      	movs	r3, #1
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 856b 	beq.w	80082ac <_dtoa_r+0xbac>
 80077d6:	4883      	ldr	r0, [pc, #524]	; (80079e4 <_dtoa_r+0x2e4>)
 80077d8:	6018      	str	r0, [r3, #0]
 80077da:	1e43      	subs	r3, r0, #1
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	e7df      	b.n	80077a0 <_dtoa_r+0xa0>
 80077e0:	ec4b ab10 	vmov	d0, sl, fp
 80077e4:	aa10      	add	r2, sp, #64	; 0x40
 80077e6:	a911      	add	r1, sp, #68	; 0x44
 80077e8:	4620      	mov	r0, r4
 80077ea:	f001 f8b9 	bl	8008960 <__d2b>
 80077ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80077f2:	ee08 0a10 	vmov	s16, r0
 80077f6:	2d00      	cmp	r5, #0
 80077f8:	f000 8084 	beq.w	8007904 <_dtoa_r+0x204>
 80077fc:	ee19 3a90 	vmov	r3, s19
 8007800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007804:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007808:	4656      	mov	r6, sl
 800780a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800780e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007812:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007816:	4b74      	ldr	r3, [pc, #464]	; (80079e8 <_dtoa_r+0x2e8>)
 8007818:	2200      	movs	r2, #0
 800781a:	4630      	mov	r0, r6
 800781c:	4639      	mov	r1, r7
 800781e:	f7f8 fd33 	bl	8000288 <__aeabi_dsub>
 8007822:	a365      	add	r3, pc, #404	; (adr r3, 80079b8 <_dtoa_r+0x2b8>)
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fee6 	bl	80005f8 <__aeabi_dmul>
 800782c:	a364      	add	r3, pc, #400	; (adr r3, 80079c0 <_dtoa_r+0x2c0>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	f7f8 fd2b 	bl	800028c <__adddf3>
 8007836:	4606      	mov	r6, r0
 8007838:	4628      	mov	r0, r5
 800783a:	460f      	mov	r7, r1
 800783c:	f7f8 fe72 	bl	8000524 <__aeabi_i2d>
 8007840:	a361      	add	r3, pc, #388	; (adr r3, 80079c8 <_dtoa_r+0x2c8>)
 8007842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007846:	f7f8 fed7 	bl	80005f8 <__aeabi_dmul>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4630      	mov	r0, r6
 8007850:	4639      	mov	r1, r7
 8007852:	f7f8 fd1b 	bl	800028c <__adddf3>
 8007856:	4606      	mov	r6, r0
 8007858:	460f      	mov	r7, r1
 800785a:	f7f9 f97d 	bl	8000b58 <__aeabi_d2iz>
 800785e:	2200      	movs	r2, #0
 8007860:	9000      	str	r0, [sp, #0]
 8007862:	2300      	movs	r3, #0
 8007864:	4630      	mov	r0, r6
 8007866:	4639      	mov	r1, r7
 8007868:	f7f9 f938 	bl	8000adc <__aeabi_dcmplt>
 800786c:	b150      	cbz	r0, 8007884 <_dtoa_r+0x184>
 800786e:	9800      	ldr	r0, [sp, #0]
 8007870:	f7f8 fe58 	bl	8000524 <__aeabi_i2d>
 8007874:	4632      	mov	r2, r6
 8007876:	463b      	mov	r3, r7
 8007878:	f7f9 f926 	bl	8000ac8 <__aeabi_dcmpeq>
 800787c:	b910      	cbnz	r0, 8007884 <_dtoa_r+0x184>
 800787e:	9b00      	ldr	r3, [sp, #0]
 8007880:	3b01      	subs	r3, #1
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	9b00      	ldr	r3, [sp, #0]
 8007886:	2b16      	cmp	r3, #22
 8007888:	d85a      	bhi.n	8007940 <_dtoa_r+0x240>
 800788a:	9a00      	ldr	r2, [sp, #0]
 800788c:	4b57      	ldr	r3, [pc, #348]	; (80079ec <_dtoa_r+0x2ec>)
 800788e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	ec51 0b19 	vmov	r0, r1, d9
 800789a:	f7f9 f91f 	bl	8000adc <__aeabi_dcmplt>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d050      	beq.n	8007944 <_dtoa_r+0x244>
 80078a2:	9b00      	ldr	r3, [sp, #0]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	2300      	movs	r3, #0
 80078aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80078ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078ae:	1b5d      	subs	r5, r3, r5
 80078b0:	1e6b      	subs	r3, r5, #1
 80078b2:	9305      	str	r3, [sp, #20]
 80078b4:	bf45      	ittet	mi
 80078b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80078ba:	9304      	strmi	r3, [sp, #16]
 80078bc:	2300      	movpl	r3, #0
 80078be:	2300      	movmi	r3, #0
 80078c0:	bf4c      	ite	mi
 80078c2:	9305      	strmi	r3, [sp, #20]
 80078c4:	9304      	strpl	r3, [sp, #16]
 80078c6:	9b00      	ldr	r3, [sp, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	db3d      	blt.n	8007948 <_dtoa_r+0x248>
 80078cc:	9b05      	ldr	r3, [sp, #20]
 80078ce:	9a00      	ldr	r2, [sp, #0]
 80078d0:	920a      	str	r2, [sp, #40]	; 0x28
 80078d2:	4413      	add	r3, r2
 80078d4:	9305      	str	r3, [sp, #20]
 80078d6:	2300      	movs	r3, #0
 80078d8:	9307      	str	r3, [sp, #28]
 80078da:	9b06      	ldr	r3, [sp, #24]
 80078dc:	2b09      	cmp	r3, #9
 80078de:	f200 8089 	bhi.w	80079f4 <_dtoa_r+0x2f4>
 80078e2:	2b05      	cmp	r3, #5
 80078e4:	bfc4      	itt	gt
 80078e6:	3b04      	subgt	r3, #4
 80078e8:	9306      	strgt	r3, [sp, #24]
 80078ea:	9b06      	ldr	r3, [sp, #24]
 80078ec:	f1a3 0302 	sub.w	r3, r3, #2
 80078f0:	bfcc      	ite	gt
 80078f2:	2500      	movgt	r5, #0
 80078f4:	2501      	movle	r5, #1
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	f200 8087 	bhi.w	8007a0a <_dtoa_r+0x30a>
 80078fc:	e8df f003 	tbb	[pc, r3]
 8007900:	59383a2d 	.word	0x59383a2d
 8007904:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007908:	441d      	add	r5, r3
 800790a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800790e:	2b20      	cmp	r3, #32
 8007910:	bfc1      	itttt	gt
 8007912:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007916:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800791a:	fa0b f303 	lslgt.w	r3, fp, r3
 800791e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007922:	bfda      	itte	le
 8007924:	f1c3 0320 	rsble	r3, r3, #32
 8007928:	fa06 f003 	lslle.w	r0, r6, r3
 800792c:	4318      	orrgt	r0, r3
 800792e:	f7f8 fde9 	bl	8000504 <__aeabi_ui2d>
 8007932:	2301      	movs	r3, #1
 8007934:	4606      	mov	r6, r0
 8007936:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800793a:	3d01      	subs	r5, #1
 800793c:	930e      	str	r3, [sp, #56]	; 0x38
 800793e:	e76a      	b.n	8007816 <_dtoa_r+0x116>
 8007940:	2301      	movs	r3, #1
 8007942:	e7b2      	b.n	80078aa <_dtoa_r+0x1aa>
 8007944:	900b      	str	r0, [sp, #44]	; 0x2c
 8007946:	e7b1      	b.n	80078ac <_dtoa_r+0x1ac>
 8007948:	9b04      	ldr	r3, [sp, #16]
 800794a:	9a00      	ldr	r2, [sp, #0]
 800794c:	1a9b      	subs	r3, r3, r2
 800794e:	9304      	str	r3, [sp, #16]
 8007950:	4253      	negs	r3, r2
 8007952:	9307      	str	r3, [sp, #28]
 8007954:	2300      	movs	r3, #0
 8007956:	930a      	str	r3, [sp, #40]	; 0x28
 8007958:	e7bf      	b.n	80078da <_dtoa_r+0x1da>
 800795a:	2300      	movs	r3, #0
 800795c:	9308      	str	r3, [sp, #32]
 800795e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007960:	2b00      	cmp	r3, #0
 8007962:	dc55      	bgt.n	8007a10 <_dtoa_r+0x310>
 8007964:	2301      	movs	r3, #1
 8007966:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800796a:	461a      	mov	r2, r3
 800796c:	9209      	str	r2, [sp, #36]	; 0x24
 800796e:	e00c      	b.n	800798a <_dtoa_r+0x28a>
 8007970:	2301      	movs	r3, #1
 8007972:	e7f3      	b.n	800795c <_dtoa_r+0x25c>
 8007974:	2300      	movs	r3, #0
 8007976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007978:	9308      	str	r3, [sp, #32]
 800797a:	9b00      	ldr	r3, [sp, #0]
 800797c:	4413      	add	r3, r2
 800797e:	9302      	str	r3, [sp, #8]
 8007980:	3301      	adds	r3, #1
 8007982:	2b01      	cmp	r3, #1
 8007984:	9303      	str	r3, [sp, #12]
 8007986:	bfb8      	it	lt
 8007988:	2301      	movlt	r3, #1
 800798a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800798c:	2200      	movs	r2, #0
 800798e:	6042      	str	r2, [r0, #4]
 8007990:	2204      	movs	r2, #4
 8007992:	f102 0614 	add.w	r6, r2, #20
 8007996:	429e      	cmp	r6, r3
 8007998:	6841      	ldr	r1, [r0, #4]
 800799a:	d93d      	bls.n	8007a18 <_dtoa_r+0x318>
 800799c:	4620      	mov	r0, r4
 800799e:	f000 fcb7 	bl	8008310 <_Balloc>
 80079a2:	9001      	str	r0, [sp, #4]
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d13b      	bne.n	8007a20 <_dtoa_r+0x320>
 80079a8:	4b11      	ldr	r3, [pc, #68]	; (80079f0 <_dtoa_r+0x2f0>)
 80079aa:	4602      	mov	r2, r0
 80079ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80079b0:	e6c0      	b.n	8007734 <_dtoa_r+0x34>
 80079b2:	2301      	movs	r3, #1
 80079b4:	e7df      	b.n	8007976 <_dtoa_r+0x276>
 80079b6:	bf00      	nop
 80079b8:	636f4361 	.word	0x636f4361
 80079bc:	3fd287a7 	.word	0x3fd287a7
 80079c0:	8b60c8b3 	.word	0x8b60c8b3
 80079c4:	3fc68a28 	.word	0x3fc68a28
 80079c8:	509f79fb 	.word	0x509f79fb
 80079cc:	3fd34413 	.word	0x3fd34413
 80079d0:	080097bd 	.word	0x080097bd
 80079d4:	080097d4 	.word	0x080097d4
 80079d8:	7ff00000 	.word	0x7ff00000
 80079dc:	080097b9 	.word	0x080097b9
 80079e0:	080097b0 	.word	0x080097b0
 80079e4:	0800978d 	.word	0x0800978d
 80079e8:	3ff80000 	.word	0x3ff80000
 80079ec:	080098c8 	.word	0x080098c8
 80079f0:	0800982f 	.word	0x0800982f
 80079f4:	2501      	movs	r5, #1
 80079f6:	2300      	movs	r3, #0
 80079f8:	9306      	str	r3, [sp, #24]
 80079fa:	9508      	str	r5, [sp, #32]
 80079fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007a00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a04:	2200      	movs	r2, #0
 8007a06:	2312      	movs	r3, #18
 8007a08:	e7b0      	b.n	800796c <_dtoa_r+0x26c>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	9308      	str	r3, [sp, #32]
 8007a0e:	e7f5      	b.n	80079fc <_dtoa_r+0x2fc>
 8007a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a16:	e7b8      	b.n	800798a <_dtoa_r+0x28a>
 8007a18:	3101      	adds	r1, #1
 8007a1a:	6041      	str	r1, [r0, #4]
 8007a1c:	0052      	lsls	r2, r2, #1
 8007a1e:	e7b8      	b.n	8007992 <_dtoa_r+0x292>
 8007a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a22:	9a01      	ldr	r2, [sp, #4]
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	9b03      	ldr	r3, [sp, #12]
 8007a28:	2b0e      	cmp	r3, #14
 8007a2a:	f200 809d 	bhi.w	8007b68 <_dtoa_r+0x468>
 8007a2e:	2d00      	cmp	r5, #0
 8007a30:	f000 809a 	beq.w	8007b68 <_dtoa_r+0x468>
 8007a34:	9b00      	ldr	r3, [sp, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	dd32      	ble.n	8007aa0 <_dtoa_r+0x3a0>
 8007a3a:	4ab7      	ldr	r2, [pc, #732]	; (8007d18 <_dtoa_r+0x618>)
 8007a3c:	f003 030f 	and.w	r3, r3, #15
 8007a40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a48:	9b00      	ldr	r3, [sp, #0]
 8007a4a:	05d8      	lsls	r0, r3, #23
 8007a4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007a50:	d516      	bpl.n	8007a80 <_dtoa_r+0x380>
 8007a52:	4bb2      	ldr	r3, [pc, #712]	; (8007d1c <_dtoa_r+0x61c>)
 8007a54:	ec51 0b19 	vmov	r0, r1, d9
 8007a58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a5c:	f7f8 fef6 	bl	800084c <__aeabi_ddiv>
 8007a60:	f007 070f 	and.w	r7, r7, #15
 8007a64:	4682      	mov	sl, r0
 8007a66:	468b      	mov	fp, r1
 8007a68:	2503      	movs	r5, #3
 8007a6a:	4eac      	ldr	r6, [pc, #688]	; (8007d1c <_dtoa_r+0x61c>)
 8007a6c:	b957      	cbnz	r7, 8007a84 <_dtoa_r+0x384>
 8007a6e:	4642      	mov	r2, r8
 8007a70:	464b      	mov	r3, r9
 8007a72:	4650      	mov	r0, sl
 8007a74:	4659      	mov	r1, fp
 8007a76:	f7f8 fee9 	bl	800084c <__aeabi_ddiv>
 8007a7a:	4682      	mov	sl, r0
 8007a7c:	468b      	mov	fp, r1
 8007a7e:	e028      	b.n	8007ad2 <_dtoa_r+0x3d2>
 8007a80:	2502      	movs	r5, #2
 8007a82:	e7f2      	b.n	8007a6a <_dtoa_r+0x36a>
 8007a84:	07f9      	lsls	r1, r7, #31
 8007a86:	d508      	bpl.n	8007a9a <_dtoa_r+0x39a>
 8007a88:	4640      	mov	r0, r8
 8007a8a:	4649      	mov	r1, r9
 8007a8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a90:	f7f8 fdb2 	bl	80005f8 <__aeabi_dmul>
 8007a94:	3501      	adds	r5, #1
 8007a96:	4680      	mov	r8, r0
 8007a98:	4689      	mov	r9, r1
 8007a9a:	107f      	asrs	r7, r7, #1
 8007a9c:	3608      	adds	r6, #8
 8007a9e:	e7e5      	b.n	8007a6c <_dtoa_r+0x36c>
 8007aa0:	f000 809b 	beq.w	8007bda <_dtoa_r+0x4da>
 8007aa4:	9b00      	ldr	r3, [sp, #0]
 8007aa6:	4f9d      	ldr	r7, [pc, #628]	; (8007d1c <_dtoa_r+0x61c>)
 8007aa8:	425e      	negs	r6, r3
 8007aaa:	4b9b      	ldr	r3, [pc, #620]	; (8007d18 <_dtoa_r+0x618>)
 8007aac:	f006 020f 	and.w	r2, r6, #15
 8007ab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	ec51 0b19 	vmov	r0, r1, d9
 8007abc:	f7f8 fd9c 	bl	80005f8 <__aeabi_dmul>
 8007ac0:	1136      	asrs	r6, r6, #4
 8007ac2:	4682      	mov	sl, r0
 8007ac4:	468b      	mov	fp, r1
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	2502      	movs	r5, #2
 8007aca:	2e00      	cmp	r6, #0
 8007acc:	d17a      	bne.n	8007bc4 <_dtoa_r+0x4c4>
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1d3      	bne.n	8007a7a <_dtoa_r+0x37a>
 8007ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 8082 	beq.w	8007bde <_dtoa_r+0x4de>
 8007ada:	4b91      	ldr	r3, [pc, #580]	; (8007d20 <_dtoa_r+0x620>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	4650      	mov	r0, sl
 8007ae0:	4659      	mov	r1, fp
 8007ae2:	f7f8 fffb 	bl	8000adc <__aeabi_dcmplt>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d079      	beq.n	8007bde <_dtoa_r+0x4de>
 8007aea:	9b03      	ldr	r3, [sp, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d076      	beq.n	8007bde <_dtoa_r+0x4de>
 8007af0:	9b02      	ldr	r3, [sp, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	dd36      	ble.n	8007b64 <_dtoa_r+0x464>
 8007af6:	9b00      	ldr	r3, [sp, #0]
 8007af8:	4650      	mov	r0, sl
 8007afa:	4659      	mov	r1, fp
 8007afc:	1e5f      	subs	r7, r3, #1
 8007afe:	2200      	movs	r2, #0
 8007b00:	4b88      	ldr	r3, [pc, #544]	; (8007d24 <_dtoa_r+0x624>)
 8007b02:	f7f8 fd79 	bl	80005f8 <__aeabi_dmul>
 8007b06:	9e02      	ldr	r6, [sp, #8]
 8007b08:	4682      	mov	sl, r0
 8007b0a:	468b      	mov	fp, r1
 8007b0c:	3501      	adds	r5, #1
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f7f8 fd08 	bl	8000524 <__aeabi_i2d>
 8007b14:	4652      	mov	r2, sl
 8007b16:	465b      	mov	r3, fp
 8007b18:	f7f8 fd6e 	bl	80005f8 <__aeabi_dmul>
 8007b1c:	4b82      	ldr	r3, [pc, #520]	; (8007d28 <_dtoa_r+0x628>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f7f8 fbb4 	bl	800028c <__adddf3>
 8007b24:	46d0      	mov	r8, sl
 8007b26:	46d9      	mov	r9, fp
 8007b28:	4682      	mov	sl, r0
 8007b2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007b2e:	2e00      	cmp	r6, #0
 8007b30:	d158      	bne.n	8007be4 <_dtoa_r+0x4e4>
 8007b32:	4b7e      	ldr	r3, [pc, #504]	; (8007d2c <_dtoa_r+0x62c>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	4640      	mov	r0, r8
 8007b38:	4649      	mov	r1, r9
 8007b3a:	f7f8 fba5 	bl	8000288 <__aeabi_dsub>
 8007b3e:	4652      	mov	r2, sl
 8007b40:	465b      	mov	r3, fp
 8007b42:	4680      	mov	r8, r0
 8007b44:	4689      	mov	r9, r1
 8007b46:	f7f8 ffe7 	bl	8000b18 <__aeabi_dcmpgt>
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	f040 8295 	bne.w	800807a <_dtoa_r+0x97a>
 8007b50:	4652      	mov	r2, sl
 8007b52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b56:	4640      	mov	r0, r8
 8007b58:	4649      	mov	r1, r9
 8007b5a:	f7f8 ffbf 	bl	8000adc <__aeabi_dcmplt>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	f040 8289 	bne.w	8008076 <_dtoa_r+0x976>
 8007b64:	ec5b ab19 	vmov	sl, fp, d9
 8007b68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f2c0 8148 	blt.w	8007e00 <_dtoa_r+0x700>
 8007b70:	9a00      	ldr	r2, [sp, #0]
 8007b72:	2a0e      	cmp	r2, #14
 8007b74:	f300 8144 	bgt.w	8007e00 <_dtoa_r+0x700>
 8007b78:	4b67      	ldr	r3, [pc, #412]	; (8007d18 <_dtoa_r+0x618>)
 8007b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f280 80d5 	bge.w	8007d34 <_dtoa_r+0x634>
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f300 80d1 	bgt.w	8007d34 <_dtoa_r+0x634>
 8007b92:	f040 826f 	bne.w	8008074 <_dtoa_r+0x974>
 8007b96:	4b65      	ldr	r3, [pc, #404]	; (8007d2c <_dtoa_r+0x62c>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	4640      	mov	r0, r8
 8007b9c:	4649      	mov	r1, r9
 8007b9e:	f7f8 fd2b 	bl	80005f8 <__aeabi_dmul>
 8007ba2:	4652      	mov	r2, sl
 8007ba4:	465b      	mov	r3, fp
 8007ba6:	f7f8 ffad 	bl	8000b04 <__aeabi_dcmpge>
 8007baa:	9e03      	ldr	r6, [sp, #12]
 8007bac:	4637      	mov	r7, r6
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	f040 8245 	bne.w	800803e <_dtoa_r+0x93e>
 8007bb4:	9d01      	ldr	r5, [sp, #4]
 8007bb6:	2331      	movs	r3, #49	; 0x31
 8007bb8:	f805 3b01 	strb.w	r3, [r5], #1
 8007bbc:	9b00      	ldr	r3, [sp, #0]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	e240      	b.n	8008046 <_dtoa_r+0x946>
 8007bc4:	07f2      	lsls	r2, r6, #31
 8007bc6:	d505      	bpl.n	8007bd4 <_dtoa_r+0x4d4>
 8007bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bcc:	f7f8 fd14 	bl	80005f8 <__aeabi_dmul>
 8007bd0:	3501      	adds	r5, #1
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	1076      	asrs	r6, r6, #1
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	e777      	b.n	8007aca <_dtoa_r+0x3ca>
 8007bda:	2502      	movs	r5, #2
 8007bdc:	e779      	b.n	8007ad2 <_dtoa_r+0x3d2>
 8007bde:	9f00      	ldr	r7, [sp, #0]
 8007be0:	9e03      	ldr	r6, [sp, #12]
 8007be2:	e794      	b.n	8007b0e <_dtoa_r+0x40e>
 8007be4:	9901      	ldr	r1, [sp, #4]
 8007be6:	4b4c      	ldr	r3, [pc, #304]	; (8007d18 <_dtoa_r+0x618>)
 8007be8:	4431      	add	r1, r6
 8007bea:	910d      	str	r1, [sp, #52]	; 0x34
 8007bec:	9908      	ldr	r1, [sp, #32]
 8007bee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007bf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bf6:	2900      	cmp	r1, #0
 8007bf8:	d043      	beq.n	8007c82 <_dtoa_r+0x582>
 8007bfa:	494d      	ldr	r1, [pc, #308]	; (8007d30 <_dtoa_r+0x630>)
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	f7f8 fe25 	bl	800084c <__aeabi_ddiv>
 8007c02:	4652      	mov	r2, sl
 8007c04:	465b      	mov	r3, fp
 8007c06:	f7f8 fb3f 	bl	8000288 <__aeabi_dsub>
 8007c0a:	9d01      	ldr	r5, [sp, #4]
 8007c0c:	4682      	mov	sl, r0
 8007c0e:	468b      	mov	fp, r1
 8007c10:	4649      	mov	r1, r9
 8007c12:	4640      	mov	r0, r8
 8007c14:	f7f8 ffa0 	bl	8000b58 <__aeabi_d2iz>
 8007c18:	4606      	mov	r6, r0
 8007c1a:	f7f8 fc83 	bl	8000524 <__aeabi_i2d>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4640      	mov	r0, r8
 8007c24:	4649      	mov	r1, r9
 8007c26:	f7f8 fb2f 	bl	8000288 <__aeabi_dsub>
 8007c2a:	3630      	adds	r6, #48	; 0x30
 8007c2c:	f805 6b01 	strb.w	r6, [r5], #1
 8007c30:	4652      	mov	r2, sl
 8007c32:	465b      	mov	r3, fp
 8007c34:	4680      	mov	r8, r0
 8007c36:	4689      	mov	r9, r1
 8007c38:	f7f8 ff50 	bl	8000adc <__aeabi_dcmplt>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d163      	bne.n	8007d08 <_dtoa_r+0x608>
 8007c40:	4642      	mov	r2, r8
 8007c42:	464b      	mov	r3, r9
 8007c44:	4936      	ldr	r1, [pc, #216]	; (8007d20 <_dtoa_r+0x620>)
 8007c46:	2000      	movs	r0, #0
 8007c48:	f7f8 fb1e 	bl	8000288 <__aeabi_dsub>
 8007c4c:	4652      	mov	r2, sl
 8007c4e:	465b      	mov	r3, fp
 8007c50:	f7f8 ff44 	bl	8000adc <__aeabi_dcmplt>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	f040 80b5 	bne.w	8007dc4 <_dtoa_r+0x6c4>
 8007c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c5c:	429d      	cmp	r5, r3
 8007c5e:	d081      	beq.n	8007b64 <_dtoa_r+0x464>
 8007c60:	4b30      	ldr	r3, [pc, #192]	; (8007d24 <_dtoa_r+0x624>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	4650      	mov	r0, sl
 8007c66:	4659      	mov	r1, fp
 8007c68:	f7f8 fcc6 	bl	80005f8 <__aeabi_dmul>
 8007c6c:	4b2d      	ldr	r3, [pc, #180]	; (8007d24 <_dtoa_r+0x624>)
 8007c6e:	4682      	mov	sl, r0
 8007c70:	468b      	mov	fp, r1
 8007c72:	4640      	mov	r0, r8
 8007c74:	4649      	mov	r1, r9
 8007c76:	2200      	movs	r2, #0
 8007c78:	f7f8 fcbe 	bl	80005f8 <__aeabi_dmul>
 8007c7c:	4680      	mov	r8, r0
 8007c7e:	4689      	mov	r9, r1
 8007c80:	e7c6      	b.n	8007c10 <_dtoa_r+0x510>
 8007c82:	4650      	mov	r0, sl
 8007c84:	4659      	mov	r1, fp
 8007c86:	f7f8 fcb7 	bl	80005f8 <__aeabi_dmul>
 8007c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c8c:	9d01      	ldr	r5, [sp, #4]
 8007c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c90:	4682      	mov	sl, r0
 8007c92:	468b      	mov	fp, r1
 8007c94:	4649      	mov	r1, r9
 8007c96:	4640      	mov	r0, r8
 8007c98:	f7f8 ff5e 	bl	8000b58 <__aeabi_d2iz>
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	f7f8 fc41 	bl	8000524 <__aeabi_i2d>
 8007ca2:	3630      	adds	r6, #48	; 0x30
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4640      	mov	r0, r8
 8007caa:	4649      	mov	r1, r9
 8007cac:	f7f8 faec 	bl	8000288 <__aeabi_dsub>
 8007cb0:	f805 6b01 	strb.w	r6, [r5], #1
 8007cb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cb6:	429d      	cmp	r5, r3
 8007cb8:	4680      	mov	r8, r0
 8007cba:	4689      	mov	r9, r1
 8007cbc:	f04f 0200 	mov.w	r2, #0
 8007cc0:	d124      	bne.n	8007d0c <_dtoa_r+0x60c>
 8007cc2:	4b1b      	ldr	r3, [pc, #108]	; (8007d30 <_dtoa_r+0x630>)
 8007cc4:	4650      	mov	r0, sl
 8007cc6:	4659      	mov	r1, fp
 8007cc8:	f7f8 fae0 	bl	800028c <__adddf3>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4640      	mov	r0, r8
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	f7f8 ff20 	bl	8000b18 <__aeabi_dcmpgt>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d173      	bne.n	8007dc4 <_dtoa_r+0x6c4>
 8007cdc:	4652      	mov	r2, sl
 8007cde:	465b      	mov	r3, fp
 8007ce0:	4913      	ldr	r1, [pc, #76]	; (8007d30 <_dtoa_r+0x630>)
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	f7f8 fad0 	bl	8000288 <__aeabi_dsub>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	4640      	mov	r0, r8
 8007cee:	4649      	mov	r1, r9
 8007cf0:	f7f8 fef4 	bl	8000adc <__aeabi_dcmplt>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	f43f af35 	beq.w	8007b64 <_dtoa_r+0x464>
 8007cfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007cfc:	1e6b      	subs	r3, r5, #1
 8007cfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d04:	2b30      	cmp	r3, #48	; 0x30
 8007d06:	d0f8      	beq.n	8007cfa <_dtoa_r+0x5fa>
 8007d08:	9700      	str	r7, [sp, #0]
 8007d0a:	e049      	b.n	8007da0 <_dtoa_r+0x6a0>
 8007d0c:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <_dtoa_r+0x624>)
 8007d0e:	f7f8 fc73 	bl	80005f8 <__aeabi_dmul>
 8007d12:	4680      	mov	r8, r0
 8007d14:	4689      	mov	r9, r1
 8007d16:	e7bd      	b.n	8007c94 <_dtoa_r+0x594>
 8007d18:	080098c8 	.word	0x080098c8
 8007d1c:	080098a0 	.word	0x080098a0
 8007d20:	3ff00000 	.word	0x3ff00000
 8007d24:	40240000 	.word	0x40240000
 8007d28:	401c0000 	.word	0x401c0000
 8007d2c:	40140000 	.word	0x40140000
 8007d30:	3fe00000 	.word	0x3fe00000
 8007d34:	9d01      	ldr	r5, [sp, #4]
 8007d36:	4656      	mov	r6, sl
 8007d38:	465f      	mov	r7, fp
 8007d3a:	4642      	mov	r2, r8
 8007d3c:	464b      	mov	r3, r9
 8007d3e:	4630      	mov	r0, r6
 8007d40:	4639      	mov	r1, r7
 8007d42:	f7f8 fd83 	bl	800084c <__aeabi_ddiv>
 8007d46:	f7f8 ff07 	bl	8000b58 <__aeabi_d2iz>
 8007d4a:	4682      	mov	sl, r0
 8007d4c:	f7f8 fbea 	bl	8000524 <__aeabi_i2d>
 8007d50:	4642      	mov	r2, r8
 8007d52:	464b      	mov	r3, r9
 8007d54:	f7f8 fc50 	bl	80005f8 <__aeabi_dmul>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	4639      	mov	r1, r7
 8007d60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007d64:	f7f8 fa90 	bl	8000288 <__aeabi_dsub>
 8007d68:	f805 6b01 	strb.w	r6, [r5], #1
 8007d6c:	9e01      	ldr	r6, [sp, #4]
 8007d6e:	9f03      	ldr	r7, [sp, #12]
 8007d70:	1bae      	subs	r6, r5, r6
 8007d72:	42b7      	cmp	r7, r6
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	d135      	bne.n	8007de6 <_dtoa_r+0x6e6>
 8007d7a:	f7f8 fa87 	bl	800028c <__adddf3>
 8007d7e:	4642      	mov	r2, r8
 8007d80:	464b      	mov	r3, r9
 8007d82:	4606      	mov	r6, r0
 8007d84:	460f      	mov	r7, r1
 8007d86:	f7f8 fec7 	bl	8000b18 <__aeabi_dcmpgt>
 8007d8a:	b9d0      	cbnz	r0, 8007dc2 <_dtoa_r+0x6c2>
 8007d8c:	4642      	mov	r2, r8
 8007d8e:	464b      	mov	r3, r9
 8007d90:	4630      	mov	r0, r6
 8007d92:	4639      	mov	r1, r7
 8007d94:	f7f8 fe98 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d98:	b110      	cbz	r0, 8007da0 <_dtoa_r+0x6a0>
 8007d9a:	f01a 0f01 	tst.w	sl, #1
 8007d9e:	d110      	bne.n	8007dc2 <_dtoa_r+0x6c2>
 8007da0:	4620      	mov	r0, r4
 8007da2:	ee18 1a10 	vmov	r1, s16
 8007da6:	f000 faf3 	bl	8008390 <_Bfree>
 8007daa:	2300      	movs	r3, #0
 8007dac:	9800      	ldr	r0, [sp, #0]
 8007dae:	702b      	strb	r3, [r5, #0]
 8007db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007db2:	3001      	adds	r0, #1
 8007db4:	6018      	str	r0, [r3, #0]
 8007db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f43f acf1 	beq.w	80077a0 <_dtoa_r+0xa0>
 8007dbe:	601d      	str	r5, [r3, #0]
 8007dc0:	e4ee      	b.n	80077a0 <_dtoa_r+0xa0>
 8007dc2:	9f00      	ldr	r7, [sp, #0]
 8007dc4:	462b      	mov	r3, r5
 8007dc6:	461d      	mov	r5, r3
 8007dc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dcc:	2a39      	cmp	r2, #57	; 0x39
 8007dce:	d106      	bne.n	8007dde <_dtoa_r+0x6de>
 8007dd0:	9a01      	ldr	r2, [sp, #4]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d1f7      	bne.n	8007dc6 <_dtoa_r+0x6c6>
 8007dd6:	9901      	ldr	r1, [sp, #4]
 8007dd8:	2230      	movs	r2, #48	; 0x30
 8007dda:	3701      	adds	r7, #1
 8007ddc:	700a      	strb	r2, [r1, #0]
 8007dde:	781a      	ldrb	r2, [r3, #0]
 8007de0:	3201      	adds	r2, #1
 8007de2:	701a      	strb	r2, [r3, #0]
 8007de4:	e790      	b.n	8007d08 <_dtoa_r+0x608>
 8007de6:	4ba6      	ldr	r3, [pc, #664]	; (8008080 <_dtoa_r+0x980>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	f7f8 fc05 	bl	80005f8 <__aeabi_dmul>
 8007dee:	2200      	movs	r2, #0
 8007df0:	2300      	movs	r3, #0
 8007df2:	4606      	mov	r6, r0
 8007df4:	460f      	mov	r7, r1
 8007df6:	f7f8 fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d09d      	beq.n	8007d3a <_dtoa_r+0x63a>
 8007dfe:	e7cf      	b.n	8007da0 <_dtoa_r+0x6a0>
 8007e00:	9a08      	ldr	r2, [sp, #32]
 8007e02:	2a00      	cmp	r2, #0
 8007e04:	f000 80d7 	beq.w	8007fb6 <_dtoa_r+0x8b6>
 8007e08:	9a06      	ldr	r2, [sp, #24]
 8007e0a:	2a01      	cmp	r2, #1
 8007e0c:	f300 80ba 	bgt.w	8007f84 <_dtoa_r+0x884>
 8007e10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e12:	2a00      	cmp	r2, #0
 8007e14:	f000 80b2 	beq.w	8007f7c <_dtoa_r+0x87c>
 8007e18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e1c:	9e07      	ldr	r6, [sp, #28]
 8007e1e:	9d04      	ldr	r5, [sp, #16]
 8007e20:	9a04      	ldr	r2, [sp, #16]
 8007e22:	441a      	add	r2, r3
 8007e24:	9204      	str	r2, [sp, #16]
 8007e26:	9a05      	ldr	r2, [sp, #20]
 8007e28:	2101      	movs	r1, #1
 8007e2a:	441a      	add	r2, r3
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	9205      	str	r2, [sp, #20]
 8007e30:	f000 fb66 	bl	8008500 <__i2b>
 8007e34:	4607      	mov	r7, r0
 8007e36:	2d00      	cmp	r5, #0
 8007e38:	dd0c      	ble.n	8007e54 <_dtoa_r+0x754>
 8007e3a:	9b05      	ldr	r3, [sp, #20]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	dd09      	ble.n	8007e54 <_dtoa_r+0x754>
 8007e40:	42ab      	cmp	r3, r5
 8007e42:	9a04      	ldr	r2, [sp, #16]
 8007e44:	bfa8      	it	ge
 8007e46:	462b      	movge	r3, r5
 8007e48:	1ad2      	subs	r2, r2, r3
 8007e4a:	9204      	str	r2, [sp, #16]
 8007e4c:	9a05      	ldr	r2, [sp, #20]
 8007e4e:	1aed      	subs	r5, r5, r3
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	9305      	str	r3, [sp, #20]
 8007e54:	9b07      	ldr	r3, [sp, #28]
 8007e56:	b31b      	cbz	r3, 8007ea0 <_dtoa_r+0x7a0>
 8007e58:	9b08      	ldr	r3, [sp, #32]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 80af 	beq.w	8007fbe <_dtoa_r+0x8be>
 8007e60:	2e00      	cmp	r6, #0
 8007e62:	dd13      	ble.n	8007e8c <_dtoa_r+0x78c>
 8007e64:	4639      	mov	r1, r7
 8007e66:	4632      	mov	r2, r6
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 fc09 	bl	8008680 <__pow5mult>
 8007e6e:	ee18 2a10 	vmov	r2, s16
 8007e72:	4601      	mov	r1, r0
 8007e74:	4607      	mov	r7, r0
 8007e76:	4620      	mov	r0, r4
 8007e78:	f000 fb58 	bl	800852c <__multiply>
 8007e7c:	ee18 1a10 	vmov	r1, s16
 8007e80:	4680      	mov	r8, r0
 8007e82:	4620      	mov	r0, r4
 8007e84:	f000 fa84 	bl	8008390 <_Bfree>
 8007e88:	ee08 8a10 	vmov	s16, r8
 8007e8c:	9b07      	ldr	r3, [sp, #28]
 8007e8e:	1b9a      	subs	r2, r3, r6
 8007e90:	d006      	beq.n	8007ea0 <_dtoa_r+0x7a0>
 8007e92:	ee18 1a10 	vmov	r1, s16
 8007e96:	4620      	mov	r0, r4
 8007e98:	f000 fbf2 	bl	8008680 <__pow5mult>
 8007e9c:	ee08 0a10 	vmov	s16, r0
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f000 fb2c 	bl	8008500 <__i2b>
 8007ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	4606      	mov	r6, r0
 8007eae:	f340 8088 	ble.w	8007fc2 <_dtoa_r+0x8c2>
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	4601      	mov	r1, r0
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f000 fbe2 	bl	8008680 <__pow5mult>
 8007ebc:	9b06      	ldr	r3, [sp, #24]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	4606      	mov	r6, r0
 8007ec2:	f340 8081 	ble.w	8007fc8 <_dtoa_r+0x8c8>
 8007ec6:	f04f 0800 	mov.w	r8, #0
 8007eca:	6933      	ldr	r3, [r6, #16]
 8007ecc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ed0:	6918      	ldr	r0, [r3, #16]
 8007ed2:	f000 fac5 	bl	8008460 <__hi0bits>
 8007ed6:	f1c0 0020 	rsb	r0, r0, #32
 8007eda:	9b05      	ldr	r3, [sp, #20]
 8007edc:	4418      	add	r0, r3
 8007ede:	f010 001f 	ands.w	r0, r0, #31
 8007ee2:	f000 8092 	beq.w	800800a <_dtoa_r+0x90a>
 8007ee6:	f1c0 0320 	rsb	r3, r0, #32
 8007eea:	2b04      	cmp	r3, #4
 8007eec:	f340 808a 	ble.w	8008004 <_dtoa_r+0x904>
 8007ef0:	f1c0 001c 	rsb	r0, r0, #28
 8007ef4:	9b04      	ldr	r3, [sp, #16]
 8007ef6:	4403      	add	r3, r0
 8007ef8:	9304      	str	r3, [sp, #16]
 8007efa:	9b05      	ldr	r3, [sp, #20]
 8007efc:	4403      	add	r3, r0
 8007efe:	4405      	add	r5, r0
 8007f00:	9305      	str	r3, [sp, #20]
 8007f02:	9b04      	ldr	r3, [sp, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	dd07      	ble.n	8007f18 <_dtoa_r+0x818>
 8007f08:	ee18 1a10 	vmov	r1, s16
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 fc10 	bl	8008734 <__lshift>
 8007f14:	ee08 0a10 	vmov	s16, r0
 8007f18:	9b05      	ldr	r3, [sp, #20]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	dd05      	ble.n	8007f2a <_dtoa_r+0x82a>
 8007f1e:	4631      	mov	r1, r6
 8007f20:	461a      	mov	r2, r3
 8007f22:	4620      	mov	r0, r4
 8007f24:	f000 fc06 	bl	8008734 <__lshift>
 8007f28:	4606      	mov	r6, r0
 8007f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d06e      	beq.n	800800e <_dtoa_r+0x90e>
 8007f30:	ee18 0a10 	vmov	r0, s16
 8007f34:	4631      	mov	r1, r6
 8007f36:	f000 fc6d 	bl	8008814 <__mcmp>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	da67      	bge.n	800800e <_dtoa_r+0x90e>
 8007f3e:	9b00      	ldr	r3, [sp, #0]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	ee18 1a10 	vmov	r1, s16
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	220a      	movs	r2, #10
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f000 fa41 	bl	80083d4 <__multadd>
 8007f52:	9b08      	ldr	r3, [sp, #32]
 8007f54:	ee08 0a10 	vmov	s16, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 81b1 	beq.w	80082c0 <_dtoa_r+0xbc0>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	4639      	mov	r1, r7
 8007f62:	220a      	movs	r2, #10
 8007f64:	4620      	mov	r0, r4
 8007f66:	f000 fa35 	bl	80083d4 <__multadd>
 8007f6a:	9b02      	ldr	r3, [sp, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	4607      	mov	r7, r0
 8007f70:	f300 808e 	bgt.w	8008090 <_dtoa_r+0x990>
 8007f74:	9b06      	ldr	r3, [sp, #24]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	dc51      	bgt.n	800801e <_dtoa_r+0x91e>
 8007f7a:	e089      	b.n	8008090 <_dtoa_r+0x990>
 8007f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f82:	e74b      	b.n	8007e1c <_dtoa_r+0x71c>
 8007f84:	9b03      	ldr	r3, [sp, #12]
 8007f86:	1e5e      	subs	r6, r3, #1
 8007f88:	9b07      	ldr	r3, [sp, #28]
 8007f8a:	42b3      	cmp	r3, r6
 8007f8c:	bfbf      	itttt	lt
 8007f8e:	9b07      	ldrlt	r3, [sp, #28]
 8007f90:	9607      	strlt	r6, [sp, #28]
 8007f92:	1af2      	sublt	r2, r6, r3
 8007f94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f96:	bfb6      	itet	lt
 8007f98:	189b      	addlt	r3, r3, r2
 8007f9a:	1b9e      	subge	r6, r3, r6
 8007f9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007f9e:	9b03      	ldr	r3, [sp, #12]
 8007fa0:	bfb8      	it	lt
 8007fa2:	2600      	movlt	r6, #0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	bfb7      	itett	lt
 8007fa8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007fac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007fb0:	1a9d      	sublt	r5, r3, r2
 8007fb2:	2300      	movlt	r3, #0
 8007fb4:	e734      	b.n	8007e20 <_dtoa_r+0x720>
 8007fb6:	9e07      	ldr	r6, [sp, #28]
 8007fb8:	9d04      	ldr	r5, [sp, #16]
 8007fba:	9f08      	ldr	r7, [sp, #32]
 8007fbc:	e73b      	b.n	8007e36 <_dtoa_r+0x736>
 8007fbe:	9a07      	ldr	r2, [sp, #28]
 8007fc0:	e767      	b.n	8007e92 <_dtoa_r+0x792>
 8007fc2:	9b06      	ldr	r3, [sp, #24]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	dc18      	bgt.n	8007ffa <_dtoa_r+0x8fa>
 8007fc8:	f1ba 0f00 	cmp.w	sl, #0
 8007fcc:	d115      	bne.n	8007ffa <_dtoa_r+0x8fa>
 8007fce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fd2:	b993      	cbnz	r3, 8007ffa <_dtoa_r+0x8fa>
 8007fd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007fd8:	0d1b      	lsrs	r3, r3, #20
 8007fda:	051b      	lsls	r3, r3, #20
 8007fdc:	b183      	cbz	r3, 8008000 <_dtoa_r+0x900>
 8007fde:	9b04      	ldr	r3, [sp, #16]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	9304      	str	r3, [sp, #16]
 8007fe4:	9b05      	ldr	r3, [sp, #20]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	9305      	str	r3, [sp, #20]
 8007fea:	f04f 0801 	mov.w	r8, #1
 8007fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f47f af6a 	bne.w	8007eca <_dtoa_r+0x7ca>
 8007ff6:	2001      	movs	r0, #1
 8007ff8:	e76f      	b.n	8007eda <_dtoa_r+0x7da>
 8007ffa:	f04f 0800 	mov.w	r8, #0
 8007ffe:	e7f6      	b.n	8007fee <_dtoa_r+0x8ee>
 8008000:	4698      	mov	r8, r3
 8008002:	e7f4      	b.n	8007fee <_dtoa_r+0x8ee>
 8008004:	f43f af7d 	beq.w	8007f02 <_dtoa_r+0x802>
 8008008:	4618      	mov	r0, r3
 800800a:	301c      	adds	r0, #28
 800800c:	e772      	b.n	8007ef4 <_dtoa_r+0x7f4>
 800800e:	9b03      	ldr	r3, [sp, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	dc37      	bgt.n	8008084 <_dtoa_r+0x984>
 8008014:	9b06      	ldr	r3, [sp, #24]
 8008016:	2b02      	cmp	r3, #2
 8008018:	dd34      	ble.n	8008084 <_dtoa_r+0x984>
 800801a:	9b03      	ldr	r3, [sp, #12]
 800801c:	9302      	str	r3, [sp, #8]
 800801e:	9b02      	ldr	r3, [sp, #8]
 8008020:	b96b      	cbnz	r3, 800803e <_dtoa_r+0x93e>
 8008022:	4631      	mov	r1, r6
 8008024:	2205      	movs	r2, #5
 8008026:	4620      	mov	r0, r4
 8008028:	f000 f9d4 	bl	80083d4 <__multadd>
 800802c:	4601      	mov	r1, r0
 800802e:	4606      	mov	r6, r0
 8008030:	ee18 0a10 	vmov	r0, s16
 8008034:	f000 fbee 	bl	8008814 <__mcmp>
 8008038:	2800      	cmp	r0, #0
 800803a:	f73f adbb 	bgt.w	8007bb4 <_dtoa_r+0x4b4>
 800803e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008040:	9d01      	ldr	r5, [sp, #4]
 8008042:	43db      	mvns	r3, r3
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	f04f 0800 	mov.w	r8, #0
 800804a:	4631      	mov	r1, r6
 800804c:	4620      	mov	r0, r4
 800804e:	f000 f99f 	bl	8008390 <_Bfree>
 8008052:	2f00      	cmp	r7, #0
 8008054:	f43f aea4 	beq.w	8007da0 <_dtoa_r+0x6a0>
 8008058:	f1b8 0f00 	cmp.w	r8, #0
 800805c:	d005      	beq.n	800806a <_dtoa_r+0x96a>
 800805e:	45b8      	cmp	r8, r7
 8008060:	d003      	beq.n	800806a <_dtoa_r+0x96a>
 8008062:	4641      	mov	r1, r8
 8008064:	4620      	mov	r0, r4
 8008066:	f000 f993 	bl	8008390 <_Bfree>
 800806a:	4639      	mov	r1, r7
 800806c:	4620      	mov	r0, r4
 800806e:	f000 f98f 	bl	8008390 <_Bfree>
 8008072:	e695      	b.n	8007da0 <_dtoa_r+0x6a0>
 8008074:	2600      	movs	r6, #0
 8008076:	4637      	mov	r7, r6
 8008078:	e7e1      	b.n	800803e <_dtoa_r+0x93e>
 800807a:	9700      	str	r7, [sp, #0]
 800807c:	4637      	mov	r7, r6
 800807e:	e599      	b.n	8007bb4 <_dtoa_r+0x4b4>
 8008080:	40240000 	.word	0x40240000
 8008084:	9b08      	ldr	r3, [sp, #32]
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 80ca 	beq.w	8008220 <_dtoa_r+0xb20>
 800808c:	9b03      	ldr	r3, [sp, #12]
 800808e:	9302      	str	r3, [sp, #8]
 8008090:	2d00      	cmp	r5, #0
 8008092:	dd05      	ble.n	80080a0 <_dtoa_r+0x9a0>
 8008094:	4639      	mov	r1, r7
 8008096:	462a      	mov	r2, r5
 8008098:	4620      	mov	r0, r4
 800809a:	f000 fb4b 	bl	8008734 <__lshift>
 800809e:	4607      	mov	r7, r0
 80080a0:	f1b8 0f00 	cmp.w	r8, #0
 80080a4:	d05b      	beq.n	800815e <_dtoa_r+0xa5e>
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	4620      	mov	r0, r4
 80080aa:	f000 f931 	bl	8008310 <_Balloc>
 80080ae:	4605      	mov	r5, r0
 80080b0:	b928      	cbnz	r0, 80080be <_dtoa_r+0x9be>
 80080b2:	4b87      	ldr	r3, [pc, #540]	; (80082d0 <_dtoa_r+0xbd0>)
 80080b4:	4602      	mov	r2, r0
 80080b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80080ba:	f7ff bb3b 	b.w	8007734 <_dtoa_r+0x34>
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	3202      	adds	r2, #2
 80080c2:	0092      	lsls	r2, r2, #2
 80080c4:	f107 010c 	add.w	r1, r7, #12
 80080c8:	300c      	adds	r0, #12
 80080ca:	f000 f913 	bl	80082f4 <memcpy>
 80080ce:	2201      	movs	r2, #1
 80080d0:	4629      	mov	r1, r5
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 fb2e 	bl	8008734 <__lshift>
 80080d8:	9b01      	ldr	r3, [sp, #4]
 80080da:	f103 0901 	add.w	r9, r3, #1
 80080de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80080e2:	4413      	add	r3, r2
 80080e4:	9305      	str	r3, [sp, #20]
 80080e6:	f00a 0301 	and.w	r3, sl, #1
 80080ea:	46b8      	mov	r8, r7
 80080ec:	9304      	str	r3, [sp, #16]
 80080ee:	4607      	mov	r7, r0
 80080f0:	4631      	mov	r1, r6
 80080f2:	ee18 0a10 	vmov	r0, s16
 80080f6:	f7ff fa75 	bl	80075e4 <quorem>
 80080fa:	4641      	mov	r1, r8
 80080fc:	9002      	str	r0, [sp, #8]
 80080fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008102:	ee18 0a10 	vmov	r0, s16
 8008106:	f000 fb85 	bl	8008814 <__mcmp>
 800810a:	463a      	mov	r2, r7
 800810c:	9003      	str	r0, [sp, #12]
 800810e:	4631      	mov	r1, r6
 8008110:	4620      	mov	r0, r4
 8008112:	f000 fb9b 	bl	800884c <__mdiff>
 8008116:	68c2      	ldr	r2, [r0, #12]
 8008118:	f109 3bff 	add.w	fp, r9, #4294967295
 800811c:	4605      	mov	r5, r0
 800811e:	bb02      	cbnz	r2, 8008162 <_dtoa_r+0xa62>
 8008120:	4601      	mov	r1, r0
 8008122:	ee18 0a10 	vmov	r0, s16
 8008126:	f000 fb75 	bl	8008814 <__mcmp>
 800812a:	4602      	mov	r2, r0
 800812c:	4629      	mov	r1, r5
 800812e:	4620      	mov	r0, r4
 8008130:	9207      	str	r2, [sp, #28]
 8008132:	f000 f92d 	bl	8008390 <_Bfree>
 8008136:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800813a:	ea43 0102 	orr.w	r1, r3, r2
 800813e:	9b04      	ldr	r3, [sp, #16]
 8008140:	430b      	orrs	r3, r1
 8008142:	464d      	mov	r5, r9
 8008144:	d10f      	bne.n	8008166 <_dtoa_r+0xa66>
 8008146:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800814a:	d02a      	beq.n	80081a2 <_dtoa_r+0xaa2>
 800814c:	9b03      	ldr	r3, [sp, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	dd02      	ble.n	8008158 <_dtoa_r+0xa58>
 8008152:	9b02      	ldr	r3, [sp, #8]
 8008154:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008158:	f88b a000 	strb.w	sl, [fp]
 800815c:	e775      	b.n	800804a <_dtoa_r+0x94a>
 800815e:	4638      	mov	r0, r7
 8008160:	e7ba      	b.n	80080d8 <_dtoa_r+0x9d8>
 8008162:	2201      	movs	r2, #1
 8008164:	e7e2      	b.n	800812c <_dtoa_r+0xa2c>
 8008166:	9b03      	ldr	r3, [sp, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	db04      	blt.n	8008176 <_dtoa_r+0xa76>
 800816c:	9906      	ldr	r1, [sp, #24]
 800816e:	430b      	orrs	r3, r1
 8008170:	9904      	ldr	r1, [sp, #16]
 8008172:	430b      	orrs	r3, r1
 8008174:	d122      	bne.n	80081bc <_dtoa_r+0xabc>
 8008176:	2a00      	cmp	r2, #0
 8008178:	ddee      	ble.n	8008158 <_dtoa_r+0xa58>
 800817a:	ee18 1a10 	vmov	r1, s16
 800817e:	2201      	movs	r2, #1
 8008180:	4620      	mov	r0, r4
 8008182:	f000 fad7 	bl	8008734 <__lshift>
 8008186:	4631      	mov	r1, r6
 8008188:	ee08 0a10 	vmov	s16, r0
 800818c:	f000 fb42 	bl	8008814 <__mcmp>
 8008190:	2800      	cmp	r0, #0
 8008192:	dc03      	bgt.n	800819c <_dtoa_r+0xa9c>
 8008194:	d1e0      	bne.n	8008158 <_dtoa_r+0xa58>
 8008196:	f01a 0f01 	tst.w	sl, #1
 800819a:	d0dd      	beq.n	8008158 <_dtoa_r+0xa58>
 800819c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081a0:	d1d7      	bne.n	8008152 <_dtoa_r+0xa52>
 80081a2:	2339      	movs	r3, #57	; 0x39
 80081a4:	f88b 3000 	strb.w	r3, [fp]
 80081a8:	462b      	mov	r3, r5
 80081aa:	461d      	mov	r5, r3
 80081ac:	3b01      	subs	r3, #1
 80081ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081b2:	2a39      	cmp	r2, #57	; 0x39
 80081b4:	d071      	beq.n	800829a <_dtoa_r+0xb9a>
 80081b6:	3201      	adds	r2, #1
 80081b8:	701a      	strb	r2, [r3, #0]
 80081ba:	e746      	b.n	800804a <_dtoa_r+0x94a>
 80081bc:	2a00      	cmp	r2, #0
 80081be:	dd07      	ble.n	80081d0 <_dtoa_r+0xad0>
 80081c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081c4:	d0ed      	beq.n	80081a2 <_dtoa_r+0xaa2>
 80081c6:	f10a 0301 	add.w	r3, sl, #1
 80081ca:	f88b 3000 	strb.w	r3, [fp]
 80081ce:	e73c      	b.n	800804a <_dtoa_r+0x94a>
 80081d0:	9b05      	ldr	r3, [sp, #20]
 80081d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80081d6:	4599      	cmp	r9, r3
 80081d8:	d047      	beq.n	800826a <_dtoa_r+0xb6a>
 80081da:	ee18 1a10 	vmov	r1, s16
 80081de:	2300      	movs	r3, #0
 80081e0:	220a      	movs	r2, #10
 80081e2:	4620      	mov	r0, r4
 80081e4:	f000 f8f6 	bl	80083d4 <__multadd>
 80081e8:	45b8      	cmp	r8, r7
 80081ea:	ee08 0a10 	vmov	s16, r0
 80081ee:	f04f 0300 	mov.w	r3, #0
 80081f2:	f04f 020a 	mov.w	r2, #10
 80081f6:	4641      	mov	r1, r8
 80081f8:	4620      	mov	r0, r4
 80081fa:	d106      	bne.n	800820a <_dtoa_r+0xb0a>
 80081fc:	f000 f8ea 	bl	80083d4 <__multadd>
 8008200:	4680      	mov	r8, r0
 8008202:	4607      	mov	r7, r0
 8008204:	f109 0901 	add.w	r9, r9, #1
 8008208:	e772      	b.n	80080f0 <_dtoa_r+0x9f0>
 800820a:	f000 f8e3 	bl	80083d4 <__multadd>
 800820e:	4639      	mov	r1, r7
 8008210:	4680      	mov	r8, r0
 8008212:	2300      	movs	r3, #0
 8008214:	220a      	movs	r2, #10
 8008216:	4620      	mov	r0, r4
 8008218:	f000 f8dc 	bl	80083d4 <__multadd>
 800821c:	4607      	mov	r7, r0
 800821e:	e7f1      	b.n	8008204 <_dtoa_r+0xb04>
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	9302      	str	r3, [sp, #8]
 8008224:	9d01      	ldr	r5, [sp, #4]
 8008226:	ee18 0a10 	vmov	r0, s16
 800822a:	4631      	mov	r1, r6
 800822c:	f7ff f9da 	bl	80075e4 <quorem>
 8008230:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008234:	9b01      	ldr	r3, [sp, #4]
 8008236:	f805 ab01 	strb.w	sl, [r5], #1
 800823a:	1aea      	subs	r2, r5, r3
 800823c:	9b02      	ldr	r3, [sp, #8]
 800823e:	4293      	cmp	r3, r2
 8008240:	dd09      	ble.n	8008256 <_dtoa_r+0xb56>
 8008242:	ee18 1a10 	vmov	r1, s16
 8008246:	2300      	movs	r3, #0
 8008248:	220a      	movs	r2, #10
 800824a:	4620      	mov	r0, r4
 800824c:	f000 f8c2 	bl	80083d4 <__multadd>
 8008250:	ee08 0a10 	vmov	s16, r0
 8008254:	e7e7      	b.n	8008226 <_dtoa_r+0xb26>
 8008256:	9b02      	ldr	r3, [sp, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	bfc8      	it	gt
 800825c:	461d      	movgt	r5, r3
 800825e:	9b01      	ldr	r3, [sp, #4]
 8008260:	bfd8      	it	le
 8008262:	2501      	movle	r5, #1
 8008264:	441d      	add	r5, r3
 8008266:	f04f 0800 	mov.w	r8, #0
 800826a:	ee18 1a10 	vmov	r1, s16
 800826e:	2201      	movs	r2, #1
 8008270:	4620      	mov	r0, r4
 8008272:	f000 fa5f 	bl	8008734 <__lshift>
 8008276:	4631      	mov	r1, r6
 8008278:	ee08 0a10 	vmov	s16, r0
 800827c:	f000 faca 	bl	8008814 <__mcmp>
 8008280:	2800      	cmp	r0, #0
 8008282:	dc91      	bgt.n	80081a8 <_dtoa_r+0xaa8>
 8008284:	d102      	bne.n	800828c <_dtoa_r+0xb8c>
 8008286:	f01a 0f01 	tst.w	sl, #1
 800828a:	d18d      	bne.n	80081a8 <_dtoa_r+0xaa8>
 800828c:	462b      	mov	r3, r5
 800828e:	461d      	mov	r5, r3
 8008290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008294:	2a30      	cmp	r2, #48	; 0x30
 8008296:	d0fa      	beq.n	800828e <_dtoa_r+0xb8e>
 8008298:	e6d7      	b.n	800804a <_dtoa_r+0x94a>
 800829a:	9a01      	ldr	r2, [sp, #4]
 800829c:	429a      	cmp	r2, r3
 800829e:	d184      	bne.n	80081aa <_dtoa_r+0xaaa>
 80082a0:	9b00      	ldr	r3, [sp, #0]
 80082a2:	3301      	adds	r3, #1
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	2331      	movs	r3, #49	; 0x31
 80082a8:	7013      	strb	r3, [r2, #0]
 80082aa:	e6ce      	b.n	800804a <_dtoa_r+0x94a>
 80082ac:	4b09      	ldr	r3, [pc, #36]	; (80082d4 <_dtoa_r+0xbd4>)
 80082ae:	f7ff ba95 	b.w	80077dc <_dtoa_r+0xdc>
 80082b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f47f aa6e 	bne.w	8007796 <_dtoa_r+0x96>
 80082ba:	4b07      	ldr	r3, [pc, #28]	; (80082d8 <_dtoa_r+0xbd8>)
 80082bc:	f7ff ba8e 	b.w	80077dc <_dtoa_r+0xdc>
 80082c0:	9b02      	ldr	r3, [sp, #8]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	dcae      	bgt.n	8008224 <_dtoa_r+0xb24>
 80082c6:	9b06      	ldr	r3, [sp, #24]
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	f73f aea8 	bgt.w	800801e <_dtoa_r+0x91e>
 80082ce:	e7a9      	b.n	8008224 <_dtoa_r+0xb24>
 80082d0:	0800982f 	.word	0x0800982f
 80082d4:	0800978c 	.word	0x0800978c
 80082d8:	080097b0 	.word	0x080097b0

080082dc <_localeconv_r>:
 80082dc:	4800      	ldr	r0, [pc, #0]	; (80082e0 <_localeconv_r+0x4>)
 80082de:	4770      	bx	lr
 80082e0:	2000019c 	.word	0x2000019c

080082e4 <malloc>:
 80082e4:	4b02      	ldr	r3, [pc, #8]	; (80082f0 <malloc+0xc>)
 80082e6:	4601      	mov	r1, r0
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	f000 bc17 	b.w	8008b1c <_malloc_r>
 80082ee:	bf00      	nop
 80082f0:	20000048 	.word	0x20000048

080082f4 <memcpy>:
 80082f4:	440a      	add	r2, r1
 80082f6:	4291      	cmp	r1, r2
 80082f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80082fc:	d100      	bne.n	8008300 <memcpy+0xc>
 80082fe:	4770      	bx	lr
 8008300:	b510      	push	{r4, lr}
 8008302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800830a:	4291      	cmp	r1, r2
 800830c:	d1f9      	bne.n	8008302 <memcpy+0xe>
 800830e:	bd10      	pop	{r4, pc}

08008310 <_Balloc>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008314:	4604      	mov	r4, r0
 8008316:	460d      	mov	r5, r1
 8008318:	b976      	cbnz	r6, 8008338 <_Balloc+0x28>
 800831a:	2010      	movs	r0, #16
 800831c:	f7ff ffe2 	bl	80082e4 <malloc>
 8008320:	4602      	mov	r2, r0
 8008322:	6260      	str	r0, [r4, #36]	; 0x24
 8008324:	b920      	cbnz	r0, 8008330 <_Balloc+0x20>
 8008326:	4b18      	ldr	r3, [pc, #96]	; (8008388 <_Balloc+0x78>)
 8008328:	4818      	ldr	r0, [pc, #96]	; (800838c <_Balloc+0x7c>)
 800832a:	2166      	movs	r1, #102	; 0x66
 800832c:	f000 fc7a 	bl	8008c24 <__assert_func>
 8008330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008334:	6006      	str	r6, [r0, #0]
 8008336:	60c6      	str	r6, [r0, #12]
 8008338:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800833a:	68f3      	ldr	r3, [r6, #12]
 800833c:	b183      	cbz	r3, 8008360 <_Balloc+0x50>
 800833e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008346:	b9b8      	cbnz	r0, 8008378 <_Balloc+0x68>
 8008348:	2101      	movs	r1, #1
 800834a:	fa01 f605 	lsl.w	r6, r1, r5
 800834e:	1d72      	adds	r2, r6, #5
 8008350:	0092      	lsls	r2, r2, #2
 8008352:	4620      	mov	r0, r4
 8008354:	f000 fb60 	bl	8008a18 <_calloc_r>
 8008358:	b160      	cbz	r0, 8008374 <_Balloc+0x64>
 800835a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800835e:	e00e      	b.n	800837e <_Balloc+0x6e>
 8008360:	2221      	movs	r2, #33	; 0x21
 8008362:	2104      	movs	r1, #4
 8008364:	4620      	mov	r0, r4
 8008366:	f000 fb57 	bl	8008a18 <_calloc_r>
 800836a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800836c:	60f0      	str	r0, [r6, #12]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1e4      	bne.n	800833e <_Balloc+0x2e>
 8008374:	2000      	movs	r0, #0
 8008376:	bd70      	pop	{r4, r5, r6, pc}
 8008378:	6802      	ldr	r2, [r0, #0]
 800837a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800837e:	2300      	movs	r3, #0
 8008380:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008384:	e7f7      	b.n	8008376 <_Balloc+0x66>
 8008386:	bf00      	nop
 8008388:	080097bd 	.word	0x080097bd
 800838c:	08009840 	.word	0x08009840

08008390 <_Bfree>:
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008394:	4605      	mov	r5, r0
 8008396:	460c      	mov	r4, r1
 8008398:	b976      	cbnz	r6, 80083b8 <_Bfree+0x28>
 800839a:	2010      	movs	r0, #16
 800839c:	f7ff ffa2 	bl	80082e4 <malloc>
 80083a0:	4602      	mov	r2, r0
 80083a2:	6268      	str	r0, [r5, #36]	; 0x24
 80083a4:	b920      	cbnz	r0, 80083b0 <_Bfree+0x20>
 80083a6:	4b09      	ldr	r3, [pc, #36]	; (80083cc <_Bfree+0x3c>)
 80083a8:	4809      	ldr	r0, [pc, #36]	; (80083d0 <_Bfree+0x40>)
 80083aa:	218a      	movs	r1, #138	; 0x8a
 80083ac:	f000 fc3a 	bl	8008c24 <__assert_func>
 80083b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083b4:	6006      	str	r6, [r0, #0]
 80083b6:	60c6      	str	r6, [r0, #12]
 80083b8:	b13c      	cbz	r4, 80083ca <_Bfree+0x3a>
 80083ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083bc:	6862      	ldr	r2, [r4, #4]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083c4:	6021      	str	r1, [r4, #0]
 80083c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
 80083cc:	080097bd 	.word	0x080097bd
 80083d0:	08009840 	.word	0x08009840

080083d4 <__multadd>:
 80083d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d8:	690d      	ldr	r5, [r1, #16]
 80083da:	4607      	mov	r7, r0
 80083dc:	460c      	mov	r4, r1
 80083de:	461e      	mov	r6, r3
 80083e0:	f101 0c14 	add.w	ip, r1, #20
 80083e4:	2000      	movs	r0, #0
 80083e6:	f8dc 3000 	ldr.w	r3, [ip]
 80083ea:	b299      	uxth	r1, r3
 80083ec:	fb02 6101 	mla	r1, r2, r1, r6
 80083f0:	0c1e      	lsrs	r6, r3, #16
 80083f2:	0c0b      	lsrs	r3, r1, #16
 80083f4:	fb02 3306 	mla	r3, r2, r6, r3
 80083f8:	b289      	uxth	r1, r1
 80083fa:	3001      	adds	r0, #1
 80083fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008400:	4285      	cmp	r5, r0
 8008402:	f84c 1b04 	str.w	r1, [ip], #4
 8008406:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800840a:	dcec      	bgt.n	80083e6 <__multadd+0x12>
 800840c:	b30e      	cbz	r6, 8008452 <__multadd+0x7e>
 800840e:	68a3      	ldr	r3, [r4, #8]
 8008410:	42ab      	cmp	r3, r5
 8008412:	dc19      	bgt.n	8008448 <__multadd+0x74>
 8008414:	6861      	ldr	r1, [r4, #4]
 8008416:	4638      	mov	r0, r7
 8008418:	3101      	adds	r1, #1
 800841a:	f7ff ff79 	bl	8008310 <_Balloc>
 800841e:	4680      	mov	r8, r0
 8008420:	b928      	cbnz	r0, 800842e <__multadd+0x5a>
 8008422:	4602      	mov	r2, r0
 8008424:	4b0c      	ldr	r3, [pc, #48]	; (8008458 <__multadd+0x84>)
 8008426:	480d      	ldr	r0, [pc, #52]	; (800845c <__multadd+0x88>)
 8008428:	21b5      	movs	r1, #181	; 0xb5
 800842a:	f000 fbfb 	bl	8008c24 <__assert_func>
 800842e:	6922      	ldr	r2, [r4, #16]
 8008430:	3202      	adds	r2, #2
 8008432:	f104 010c 	add.w	r1, r4, #12
 8008436:	0092      	lsls	r2, r2, #2
 8008438:	300c      	adds	r0, #12
 800843a:	f7ff ff5b 	bl	80082f4 <memcpy>
 800843e:	4621      	mov	r1, r4
 8008440:	4638      	mov	r0, r7
 8008442:	f7ff ffa5 	bl	8008390 <_Bfree>
 8008446:	4644      	mov	r4, r8
 8008448:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800844c:	3501      	adds	r5, #1
 800844e:	615e      	str	r6, [r3, #20]
 8008450:	6125      	str	r5, [r4, #16]
 8008452:	4620      	mov	r0, r4
 8008454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008458:	0800982f 	.word	0x0800982f
 800845c:	08009840 	.word	0x08009840

08008460 <__hi0bits>:
 8008460:	0c03      	lsrs	r3, r0, #16
 8008462:	041b      	lsls	r3, r3, #16
 8008464:	b9d3      	cbnz	r3, 800849c <__hi0bits+0x3c>
 8008466:	0400      	lsls	r0, r0, #16
 8008468:	2310      	movs	r3, #16
 800846a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800846e:	bf04      	itt	eq
 8008470:	0200      	lsleq	r0, r0, #8
 8008472:	3308      	addeq	r3, #8
 8008474:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008478:	bf04      	itt	eq
 800847a:	0100      	lsleq	r0, r0, #4
 800847c:	3304      	addeq	r3, #4
 800847e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008482:	bf04      	itt	eq
 8008484:	0080      	lsleq	r0, r0, #2
 8008486:	3302      	addeq	r3, #2
 8008488:	2800      	cmp	r0, #0
 800848a:	db05      	blt.n	8008498 <__hi0bits+0x38>
 800848c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008490:	f103 0301 	add.w	r3, r3, #1
 8008494:	bf08      	it	eq
 8008496:	2320      	moveq	r3, #32
 8008498:	4618      	mov	r0, r3
 800849a:	4770      	bx	lr
 800849c:	2300      	movs	r3, #0
 800849e:	e7e4      	b.n	800846a <__hi0bits+0xa>

080084a0 <__lo0bits>:
 80084a0:	6803      	ldr	r3, [r0, #0]
 80084a2:	f013 0207 	ands.w	r2, r3, #7
 80084a6:	4601      	mov	r1, r0
 80084a8:	d00b      	beq.n	80084c2 <__lo0bits+0x22>
 80084aa:	07da      	lsls	r2, r3, #31
 80084ac:	d423      	bmi.n	80084f6 <__lo0bits+0x56>
 80084ae:	0798      	lsls	r0, r3, #30
 80084b0:	bf49      	itett	mi
 80084b2:	085b      	lsrmi	r3, r3, #1
 80084b4:	089b      	lsrpl	r3, r3, #2
 80084b6:	2001      	movmi	r0, #1
 80084b8:	600b      	strmi	r3, [r1, #0]
 80084ba:	bf5c      	itt	pl
 80084bc:	600b      	strpl	r3, [r1, #0]
 80084be:	2002      	movpl	r0, #2
 80084c0:	4770      	bx	lr
 80084c2:	b298      	uxth	r0, r3
 80084c4:	b9a8      	cbnz	r0, 80084f2 <__lo0bits+0x52>
 80084c6:	0c1b      	lsrs	r3, r3, #16
 80084c8:	2010      	movs	r0, #16
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	b90a      	cbnz	r2, 80084d2 <__lo0bits+0x32>
 80084ce:	3008      	adds	r0, #8
 80084d0:	0a1b      	lsrs	r3, r3, #8
 80084d2:	071a      	lsls	r2, r3, #28
 80084d4:	bf04      	itt	eq
 80084d6:	091b      	lsreq	r3, r3, #4
 80084d8:	3004      	addeq	r0, #4
 80084da:	079a      	lsls	r2, r3, #30
 80084dc:	bf04      	itt	eq
 80084de:	089b      	lsreq	r3, r3, #2
 80084e0:	3002      	addeq	r0, #2
 80084e2:	07da      	lsls	r2, r3, #31
 80084e4:	d403      	bmi.n	80084ee <__lo0bits+0x4e>
 80084e6:	085b      	lsrs	r3, r3, #1
 80084e8:	f100 0001 	add.w	r0, r0, #1
 80084ec:	d005      	beq.n	80084fa <__lo0bits+0x5a>
 80084ee:	600b      	str	r3, [r1, #0]
 80084f0:	4770      	bx	lr
 80084f2:	4610      	mov	r0, r2
 80084f4:	e7e9      	b.n	80084ca <__lo0bits+0x2a>
 80084f6:	2000      	movs	r0, #0
 80084f8:	4770      	bx	lr
 80084fa:	2020      	movs	r0, #32
 80084fc:	4770      	bx	lr
	...

08008500 <__i2b>:
 8008500:	b510      	push	{r4, lr}
 8008502:	460c      	mov	r4, r1
 8008504:	2101      	movs	r1, #1
 8008506:	f7ff ff03 	bl	8008310 <_Balloc>
 800850a:	4602      	mov	r2, r0
 800850c:	b928      	cbnz	r0, 800851a <__i2b+0x1a>
 800850e:	4b05      	ldr	r3, [pc, #20]	; (8008524 <__i2b+0x24>)
 8008510:	4805      	ldr	r0, [pc, #20]	; (8008528 <__i2b+0x28>)
 8008512:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008516:	f000 fb85 	bl	8008c24 <__assert_func>
 800851a:	2301      	movs	r3, #1
 800851c:	6144      	str	r4, [r0, #20]
 800851e:	6103      	str	r3, [r0, #16]
 8008520:	bd10      	pop	{r4, pc}
 8008522:	bf00      	nop
 8008524:	0800982f 	.word	0x0800982f
 8008528:	08009840 	.word	0x08009840

0800852c <__multiply>:
 800852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008530:	4691      	mov	r9, r2
 8008532:	690a      	ldr	r2, [r1, #16]
 8008534:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008538:	429a      	cmp	r2, r3
 800853a:	bfb8      	it	lt
 800853c:	460b      	movlt	r3, r1
 800853e:	460c      	mov	r4, r1
 8008540:	bfbc      	itt	lt
 8008542:	464c      	movlt	r4, r9
 8008544:	4699      	movlt	r9, r3
 8008546:	6927      	ldr	r7, [r4, #16]
 8008548:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800854c:	68a3      	ldr	r3, [r4, #8]
 800854e:	6861      	ldr	r1, [r4, #4]
 8008550:	eb07 060a 	add.w	r6, r7, sl
 8008554:	42b3      	cmp	r3, r6
 8008556:	b085      	sub	sp, #20
 8008558:	bfb8      	it	lt
 800855a:	3101      	addlt	r1, #1
 800855c:	f7ff fed8 	bl	8008310 <_Balloc>
 8008560:	b930      	cbnz	r0, 8008570 <__multiply+0x44>
 8008562:	4602      	mov	r2, r0
 8008564:	4b44      	ldr	r3, [pc, #272]	; (8008678 <__multiply+0x14c>)
 8008566:	4845      	ldr	r0, [pc, #276]	; (800867c <__multiply+0x150>)
 8008568:	f240 115d 	movw	r1, #349	; 0x15d
 800856c:	f000 fb5a 	bl	8008c24 <__assert_func>
 8008570:	f100 0514 	add.w	r5, r0, #20
 8008574:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008578:	462b      	mov	r3, r5
 800857a:	2200      	movs	r2, #0
 800857c:	4543      	cmp	r3, r8
 800857e:	d321      	bcc.n	80085c4 <__multiply+0x98>
 8008580:	f104 0314 	add.w	r3, r4, #20
 8008584:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008588:	f109 0314 	add.w	r3, r9, #20
 800858c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008590:	9202      	str	r2, [sp, #8]
 8008592:	1b3a      	subs	r2, r7, r4
 8008594:	3a15      	subs	r2, #21
 8008596:	f022 0203 	bic.w	r2, r2, #3
 800859a:	3204      	adds	r2, #4
 800859c:	f104 0115 	add.w	r1, r4, #21
 80085a0:	428f      	cmp	r7, r1
 80085a2:	bf38      	it	cc
 80085a4:	2204      	movcc	r2, #4
 80085a6:	9201      	str	r2, [sp, #4]
 80085a8:	9a02      	ldr	r2, [sp, #8]
 80085aa:	9303      	str	r3, [sp, #12]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d80c      	bhi.n	80085ca <__multiply+0x9e>
 80085b0:	2e00      	cmp	r6, #0
 80085b2:	dd03      	ble.n	80085bc <__multiply+0x90>
 80085b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d05a      	beq.n	8008672 <__multiply+0x146>
 80085bc:	6106      	str	r6, [r0, #16]
 80085be:	b005      	add	sp, #20
 80085c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c4:	f843 2b04 	str.w	r2, [r3], #4
 80085c8:	e7d8      	b.n	800857c <__multiply+0x50>
 80085ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80085ce:	f1ba 0f00 	cmp.w	sl, #0
 80085d2:	d024      	beq.n	800861e <__multiply+0xf2>
 80085d4:	f104 0e14 	add.w	lr, r4, #20
 80085d8:	46a9      	mov	r9, r5
 80085da:	f04f 0c00 	mov.w	ip, #0
 80085de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085e2:	f8d9 1000 	ldr.w	r1, [r9]
 80085e6:	fa1f fb82 	uxth.w	fp, r2
 80085ea:	b289      	uxth	r1, r1
 80085ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80085f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80085f4:	f8d9 2000 	ldr.w	r2, [r9]
 80085f8:	4461      	add	r1, ip
 80085fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8008602:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008606:	b289      	uxth	r1, r1
 8008608:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800860c:	4577      	cmp	r7, lr
 800860e:	f849 1b04 	str.w	r1, [r9], #4
 8008612:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008616:	d8e2      	bhi.n	80085de <__multiply+0xb2>
 8008618:	9a01      	ldr	r2, [sp, #4]
 800861a:	f845 c002 	str.w	ip, [r5, r2]
 800861e:	9a03      	ldr	r2, [sp, #12]
 8008620:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008624:	3304      	adds	r3, #4
 8008626:	f1b9 0f00 	cmp.w	r9, #0
 800862a:	d020      	beq.n	800866e <__multiply+0x142>
 800862c:	6829      	ldr	r1, [r5, #0]
 800862e:	f104 0c14 	add.w	ip, r4, #20
 8008632:	46ae      	mov	lr, r5
 8008634:	f04f 0a00 	mov.w	sl, #0
 8008638:	f8bc b000 	ldrh.w	fp, [ip]
 800863c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008640:	fb09 220b 	mla	r2, r9, fp, r2
 8008644:	4492      	add	sl, r2
 8008646:	b289      	uxth	r1, r1
 8008648:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800864c:	f84e 1b04 	str.w	r1, [lr], #4
 8008650:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008654:	f8be 1000 	ldrh.w	r1, [lr]
 8008658:	0c12      	lsrs	r2, r2, #16
 800865a:	fb09 1102 	mla	r1, r9, r2, r1
 800865e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008662:	4567      	cmp	r7, ip
 8008664:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008668:	d8e6      	bhi.n	8008638 <__multiply+0x10c>
 800866a:	9a01      	ldr	r2, [sp, #4]
 800866c:	50a9      	str	r1, [r5, r2]
 800866e:	3504      	adds	r5, #4
 8008670:	e79a      	b.n	80085a8 <__multiply+0x7c>
 8008672:	3e01      	subs	r6, #1
 8008674:	e79c      	b.n	80085b0 <__multiply+0x84>
 8008676:	bf00      	nop
 8008678:	0800982f 	.word	0x0800982f
 800867c:	08009840 	.word	0x08009840

08008680 <__pow5mult>:
 8008680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008684:	4615      	mov	r5, r2
 8008686:	f012 0203 	ands.w	r2, r2, #3
 800868a:	4606      	mov	r6, r0
 800868c:	460f      	mov	r7, r1
 800868e:	d007      	beq.n	80086a0 <__pow5mult+0x20>
 8008690:	4c25      	ldr	r4, [pc, #148]	; (8008728 <__pow5mult+0xa8>)
 8008692:	3a01      	subs	r2, #1
 8008694:	2300      	movs	r3, #0
 8008696:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800869a:	f7ff fe9b 	bl	80083d4 <__multadd>
 800869e:	4607      	mov	r7, r0
 80086a0:	10ad      	asrs	r5, r5, #2
 80086a2:	d03d      	beq.n	8008720 <__pow5mult+0xa0>
 80086a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80086a6:	b97c      	cbnz	r4, 80086c8 <__pow5mult+0x48>
 80086a8:	2010      	movs	r0, #16
 80086aa:	f7ff fe1b 	bl	80082e4 <malloc>
 80086ae:	4602      	mov	r2, r0
 80086b0:	6270      	str	r0, [r6, #36]	; 0x24
 80086b2:	b928      	cbnz	r0, 80086c0 <__pow5mult+0x40>
 80086b4:	4b1d      	ldr	r3, [pc, #116]	; (800872c <__pow5mult+0xac>)
 80086b6:	481e      	ldr	r0, [pc, #120]	; (8008730 <__pow5mult+0xb0>)
 80086b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80086bc:	f000 fab2 	bl	8008c24 <__assert_func>
 80086c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086c4:	6004      	str	r4, [r0, #0]
 80086c6:	60c4      	str	r4, [r0, #12]
 80086c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086d0:	b94c      	cbnz	r4, 80086e6 <__pow5mult+0x66>
 80086d2:	f240 2171 	movw	r1, #625	; 0x271
 80086d6:	4630      	mov	r0, r6
 80086d8:	f7ff ff12 	bl	8008500 <__i2b>
 80086dc:	2300      	movs	r3, #0
 80086de:	f8c8 0008 	str.w	r0, [r8, #8]
 80086e2:	4604      	mov	r4, r0
 80086e4:	6003      	str	r3, [r0, #0]
 80086e6:	f04f 0900 	mov.w	r9, #0
 80086ea:	07eb      	lsls	r3, r5, #31
 80086ec:	d50a      	bpl.n	8008704 <__pow5mult+0x84>
 80086ee:	4639      	mov	r1, r7
 80086f0:	4622      	mov	r2, r4
 80086f2:	4630      	mov	r0, r6
 80086f4:	f7ff ff1a 	bl	800852c <__multiply>
 80086f8:	4639      	mov	r1, r7
 80086fa:	4680      	mov	r8, r0
 80086fc:	4630      	mov	r0, r6
 80086fe:	f7ff fe47 	bl	8008390 <_Bfree>
 8008702:	4647      	mov	r7, r8
 8008704:	106d      	asrs	r5, r5, #1
 8008706:	d00b      	beq.n	8008720 <__pow5mult+0xa0>
 8008708:	6820      	ldr	r0, [r4, #0]
 800870a:	b938      	cbnz	r0, 800871c <__pow5mult+0x9c>
 800870c:	4622      	mov	r2, r4
 800870e:	4621      	mov	r1, r4
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff ff0b 	bl	800852c <__multiply>
 8008716:	6020      	str	r0, [r4, #0]
 8008718:	f8c0 9000 	str.w	r9, [r0]
 800871c:	4604      	mov	r4, r0
 800871e:	e7e4      	b.n	80086ea <__pow5mult+0x6a>
 8008720:	4638      	mov	r0, r7
 8008722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008726:	bf00      	nop
 8008728:	08009990 	.word	0x08009990
 800872c:	080097bd 	.word	0x080097bd
 8008730:	08009840 	.word	0x08009840

08008734 <__lshift>:
 8008734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008738:	460c      	mov	r4, r1
 800873a:	6849      	ldr	r1, [r1, #4]
 800873c:	6923      	ldr	r3, [r4, #16]
 800873e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008742:	68a3      	ldr	r3, [r4, #8]
 8008744:	4607      	mov	r7, r0
 8008746:	4691      	mov	r9, r2
 8008748:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800874c:	f108 0601 	add.w	r6, r8, #1
 8008750:	42b3      	cmp	r3, r6
 8008752:	db0b      	blt.n	800876c <__lshift+0x38>
 8008754:	4638      	mov	r0, r7
 8008756:	f7ff fddb 	bl	8008310 <_Balloc>
 800875a:	4605      	mov	r5, r0
 800875c:	b948      	cbnz	r0, 8008772 <__lshift+0x3e>
 800875e:	4602      	mov	r2, r0
 8008760:	4b2a      	ldr	r3, [pc, #168]	; (800880c <__lshift+0xd8>)
 8008762:	482b      	ldr	r0, [pc, #172]	; (8008810 <__lshift+0xdc>)
 8008764:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008768:	f000 fa5c 	bl	8008c24 <__assert_func>
 800876c:	3101      	adds	r1, #1
 800876e:	005b      	lsls	r3, r3, #1
 8008770:	e7ee      	b.n	8008750 <__lshift+0x1c>
 8008772:	2300      	movs	r3, #0
 8008774:	f100 0114 	add.w	r1, r0, #20
 8008778:	f100 0210 	add.w	r2, r0, #16
 800877c:	4618      	mov	r0, r3
 800877e:	4553      	cmp	r3, sl
 8008780:	db37      	blt.n	80087f2 <__lshift+0xbe>
 8008782:	6920      	ldr	r0, [r4, #16]
 8008784:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008788:	f104 0314 	add.w	r3, r4, #20
 800878c:	f019 091f 	ands.w	r9, r9, #31
 8008790:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008794:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008798:	d02f      	beq.n	80087fa <__lshift+0xc6>
 800879a:	f1c9 0e20 	rsb	lr, r9, #32
 800879e:	468a      	mov	sl, r1
 80087a0:	f04f 0c00 	mov.w	ip, #0
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	fa02 f209 	lsl.w	r2, r2, r9
 80087aa:	ea42 020c 	orr.w	r2, r2, ip
 80087ae:	f84a 2b04 	str.w	r2, [sl], #4
 80087b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087b6:	4298      	cmp	r0, r3
 80087b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80087bc:	d8f2      	bhi.n	80087a4 <__lshift+0x70>
 80087be:	1b03      	subs	r3, r0, r4
 80087c0:	3b15      	subs	r3, #21
 80087c2:	f023 0303 	bic.w	r3, r3, #3
 80087c6:	3304      	adds	r3, #4
 80087c8:	f104 0215 	add.w	r2, r4, #21
 80087cc:	4290      	cmp	r0, r2
 80087ce:	bf38      	it	cc
 80087d0:	2304      	movcc	r3, #4
 80087d2:	f841 c003 	str.w	ip, [r1, r3]
 80087d6:	f1bc 0f00 	cmp.w	ip, #0
 80087da:	d001      	beq.n	80087e0 <__lshift+0xac>
 80087dc:	f108 0602 	add.w	r6, r8, #2
 80087e0:	3e01      	subs	r6, #1
 80087e2:	4638      	mov	r0, r7
 80087e4:	612e      	str	r6, [r5, #16]
 80087e6:	4621      	mov	r1, r4
 80087e8:	f7ff fdd2 	bl	8008390 <_Bfree>
 80087ec:	4628      	mov	r0, r5
 80087ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80087f6:	3301      	adds	r3, #1
 80087f8:	e7c1      	b.n	800877e <__lshift+0x4a>
 80087fa:	3904      	subs	r1, #4
 80087fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008800:	f841 2f04 	str.w	r2, [r1, #4]!
 8008804:	4298      	cmp	r0, r3
 8008806:	d8f9      	bhi.n	80087fc <__lshift+0xc8>
 8008808:	e7ea      	b.n	80087e0 <__lshift+0xac>
 800880a:	bf00      	nop
 800880c:	0800982f 	.word	0x0800982f
 8008810:	08009840 	.word	0x08009840

08008814 <__mcmp>:
 8008814:	b530      	push	{r4, r5, lr}
 8008816:	6902      	ldr	r2, [r0, #16]
 8008818:	690c      	ldr	r4, [r1, #16]
 800881a:	1b12      	subs	r2, r2, r4
 800881c:	d10e      	bne.n	800883c <__mcmp+0x28>
 800881e:	f100 0314 	add.w	r3, r0, #20
 8008822:	3114      	adds	r1, #20
 8008824:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008828:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800882c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008830:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008834:	42a5      	cmp	r5, r4
 8008836:	d003      	beq.n	8008840 <__mcmp+0x2c>
 8008838:	d305      	bcc.n	8008846 <__mcmp+0x32>
 800883a:	2201      	movs	r2, #1
 800883c:	4610      	mov	r0, r2
 800883e:	bd30      	pop	{r4, r5, pc}
 8008840:	4283      	cmp	r3, r0
 8008842:	d3f3      	bcc.n	800882c <__mcmp+0x18>
 8008844:	e7fa      	b.n	800883c <__mcmp+0x28>
 8008846:	f04f 32ff 	mov.w	r2, #4294967295
 800884a:	e7f7      	b.n	800883c <__mcmp+0x28>

0800884c <__mdiff>:
 800884c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008850:	460c      	mov	r4, r1
 8008852:	4606      	mov	r6, r0
 8008854:	4611      	mov	r1, r2
 8008856:	4620      	mov	r0, r4
 8008858:	4690      	mov	r8, r2
 800885a:	f7ff ffdb 	bl	8008814 <__mcmp>
 800885e:	1e05      	subs	r5, r0, #0
 8008860:	d110      	bne.n	8008884 <__mdiff+0x38>
 8008862:	4629      	mov	r1, r5
 8008864:	4630      	mov	r0, r6
 8008866:	f7ff fd53 	bl	8008310 <_Balloc>
 800886a:	b930      	cbnz	r0, 800887a <__mdiff+0x2e>
 800886c:	4b3a      	ldr	r3, [pc, #232]	; (8008958 <__mdiff+0x10c>)
 800886e:	4602      	mov	r2, r0
 8008870:	f240 2132 	movw	r1, #562	; 0x232
 8008874:	4839      	ldr	r0, [pc, #228]	; (800895c <__mdiff+0x110>)
 8008876:	f000 f9d5 	bl	8008c24 <__assert_func>
 800887a:	2301      	movs	r3, #1
 800887c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008884:	bfa4      	itt	ge
 8008886:	4643      	movge	r3, r8
 8008888:	46a0      	movge	r8, r4
 800888a:	4630      	mov	r0, r6
 800888c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008890:	bfa6      	itte	ge
 8008892:	461c      	movge	r4, r3
 8008894:	2500      	movge	r5, #0
 8008896:	2501      	movlt	r5, #1
 8008898:	f7ff fd3a 	bl	8008310 <_Balloc>
 800889c:	b920      	cbnz	r0, 80088a8 <__mdiff+0x5c>
 800889e:	4b2e      	ldr	r3, [pc, #184]	; (8008958 <__mdiff+0x10c>)
 80088a0:	4602      	mov	r2, r0
 80088a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80088a6:	e7e5      	b.n	8008874 <__mdiff+0x28>
 80088a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80088ac:	6926      	ldr	r6, [r4, #16]
 80088ae:	60c5      	str	r5, [r0, #12]
 80088b0:	f104 0914 	add.w	r9, r4, #20
 80088b4:	f108 0514 	add.w	r5, r8, #20
 80088b8:	f100 0e14 	add.w	lr, r0, #20
 80088bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80088c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80088c4:	f108 0210 	add.w	r2, r8, #16
 80088c8:	46f2      	mov	sl, lr
 80088ca:	2100      	movs	r1, #0
 80088cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80088d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80088d4:	fa1f f883 	uxth.w	r8, r3
 80088d8:	fa11 f18b 	uxtah	r1, r1, fp
 80088dc:	0c1b      	lsrs	r3, r3, #16
 80088de:	eba1 0808 	sub.w	r8, r1, r8
 80088e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088ea:	fa1f f888 	uxth.w	r8, r8
 80088ee:	1419      	asrs	r1, r3, #16
 80088f0:	454e      	cmp	r6, r9
 80088f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80088f6:	f84a 3b04 	str.w	r3, [sl], #4
 80088fa:	d8e7      	bhi.n	80088cc <__mdiff+0x80>
 80088fc:	1b33      	subs	r3, r6, r4
 80088fe:	3b15      	subs	r3, #21
 8008900:	f023 0303 	bic.w	r3, r3, #3
 8008904:	3304      	adds	r3, #4
 8008906:	3415      	adds	r4, #21
 8008908:	42a6      	cmp	r6, r4
 800890a:	bf38      	it	cc
 800890c:	2304      	movcc	r3, #4
 800890e:	441d      	add	r5, r3
 8008910:	4473      	add	r3, lr
 8008912:	469e      	mov	lr, r3
 8008914:	462e      	mov	r6, r5
 8008916:	4566      	cmp	r6, ip
 8008918:	d30e      	bcc.n	8008938 <__mdiff+0xec>
 800891a:	f10c 0203 	add.w	r2, ip, #3
 800891e:	1b52      	subs	r2, r2, r5
 8008920:	f022 0203 	bic.w	r2, r2, #3
 8008924:	3d03      	subs	r5, #3
 8008926:	45ac      	cmp	ip, r5
 8008928:	bf38      	it	cc
 800892a:	2200      	movcc	r2, #0
 800892c:	441a      	add	r2, r3
 800892e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008932:	b17b      	cbz	r3, 8008954 <__mdiff+0x108>
 8008934:	6107      	str	r7, [r0, #16]
 8008936:	e7a3      	b.n	8008880 <__mdiff+0x34>
 8008938:	f856 8b04 	ldr.w	r8, [r6], #4
 800893c:	fa11 f288 	uxtah	r2, r1, r8
 8008940:	1414      	asrs	r4, r2, #16
 8008942:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008946:	b292      	uxth	r2, r2
 8008948:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800894c:	f84e 2b04 	str.w	r2, [lr], #4
 8008950:	1421      	asrs	r1, r4, #16
 8008952:	e7e0      	b.n	8008916 <__mdiff+0xca>
 8008954:	3f01      	subs	r7, #1
 8008956:	e7ea      	b.n	800892e <__mdiff+0xe2>
 8008958:	0800982f 	.word	0x0800982f
 800895c:	08009840 	.word	0x08009840

08008960 <__d2b>:
 8008960:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008964:	4689      	mov	r9, r1
 8008966:	2101      	movs	r1, #1
 8008968:	ec57 6b10 	vmov	r6, r7, d0
 800896c:	4690      	mov	r8, r2
 800896e:	f7ff fccf 	bl	8008310 <_Balloc>
 8008972:	4604      	mov	r4, r0
 8008974:	b930      	cbnz	r0, 8008984 <__d2b+0x24>
 8008976:	4602      	mov	r2, r0
 8008978:	4b25      	ldr	r3, [pc, #148]	; (8008a10 <__d2b+0xb0>)
 800897a:	4826      	ldr	r0, [pc, #152]	; (8008a14 <__d2b+0xb4>)
 800897c:	f240 310a 	movw	r1, #778	; 0x30a
 8008980:	f000 f950 	bl	8008c24 <__assert_func>
 8008984:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008988:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800898c:	bb35      	cbnz	r5, 80089dc <__d2b+0x7c>
 800898e:	2e00      	cmp	r6, #0
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	d028      	beq.n	80089e6 <__d2b+0x86>
 8008994:	4668      	mov	r0, sp
 8008996:	9600      	str	r6, [sp, #0]
 8008998:	f7ff fd82 	bl	80084a0 <__lo0bits>
 800899c:	9900      	ldr	r1, [sp, #0]
 800899e:	b300      	cbz	r0, 80089e2 <__d2b+0x82>
 80089a0:	9a01      	ldr	r2, [sp, #4]
 80089a2:	f1c0 0320 	rsb	r3, r0, #32
 80089a6:	fa02 f303 	lsl.w	r3, r2, r3
 80089aa:	430b      	orrs	r3, r1
 80089ac:	40c2      	lsrs	r2, r0
 80089ae:	6163      	str	r3, [r4, #20]
 80089b0:	9201      	str	r2, [sp, #4]
 80089b2:	9b01      	ldr	r3, [sp, #4]
 80089b4:	61a3      	str	r3, [r4, #24]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	bf14      	ite	ne
 80089ba:	2202      	movne	r2, #2
 80089bc:	2201      	moveq	r2, #1
 80089be:	6122      	str	r2, [r4, #16]
 80089c0:	b1d5      	cbz	r5, 80089f8 <__d2b+0x98>
 80089c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80089c6:	4405      	add	r5, r0
 80089c8:	f8c9 5000 	str.w	r5, [r9]
 80089cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089d0:	f8c8 0000 	str.w	r0, [r8]
 80089d4:	4620      	mov	r0, r4
 80089d6:	b003      	add	sp, #12
 80089d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089e0:	e7d5      	b.n	800898e <__d2b+0x2e>
 80089e2:	6161      	str	r1, [r4, #20]
 80089e4:	e7e5      	b.n	80089b2 <__d2b+0x52>
 80089e6:	a801      	add	r0, sp, #4
 80089e8:	f7ff fd5a 	bl	80084a0 <__lo0bits>
 80089ec:	9b01      	ldr	r3, [sp, #4]
 80089ee:	6163      	str	r3, [r4, #20]
 80089f0:	2201      	movs	r2, #1
 80089f2:	6122      	str	r2, [r4, #16]
 80089f4:	3020      	adds	r0, #32
 80089f6:	e7e3      	b.n	80089c0 <__d2b+0x60>
 80089f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a00:	f8c9 0000 	str.w	r0, [r9]
 8008a04:	6918      	ldr	r0, [r3, #16]
 8008a06:	f7ff fd2b 	bl	8008460 <__hi0bits>
 8008a0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a0e:	e7df      	b.n	80089d0 <__d2b+0x70>
 8008a10:	0800982f 	.word	0x0800982f
 8008a14:	08009840 	.word	0x08009840

08008a18 <_calloc_r>:
 8008a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a1a:	fba1 2402 	umull	r2, r4, r1, r2
 8008a1e:	b94c      	cbnz	r4, 8008a34 <_calloc_r+0x1c>
 8008a20:	4611      	mov	r1, r2
 8008a22:	9201      	str	r2, [sp, #4]
 8008a24:	f000 f87a 	bl	8008b1c <_malloc_r>
 8008a28:	9a01      	ldr	r2, [sp, #4]
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	b930      	cbnz	r0, 8008a3c <_calloc_r+0x24>
 8008a2e:	4628      	mov	r0, r5
 8008a30:	b003      	add	sp, #12
 8008a32:	bd30      	pop	{r4, r5, pc}
 8008a34:	220c      	movs	r2, #12
 8008a36:	6002      	str	r2, [r0, #0]
 8008a38:	2500      	movs	r5, #0
 8008a3a:	e7f8      	b.n	8008a2e <_calloc_r+0x16>
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	f7fe f95f 	bl	8006d00 <memset>
 8008a42:	e7f4      	b.n	8008a2e <_calloc_r+0x16>

08008a44 <_free_r>:
 8008a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a46:	2900      	cmp	r1, #0
 8008a48:	d044      	beq.n	8008ad4 <_free_r+0x90>
 8008a4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a4e:	9001      	str	r0, [sp, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f1a1 0404 	sub.w	r4, r1, #4
 8008a56:	bfb8      	it	lt
 8008a58:	18e4      	addlt	r4, r4, r3
 8008a5a:	f000 f925 	bl	8008ca8 <__malloc_lock>
 8008a5e:	4a1e      	ldr	r2, [pc, #120]	; (8008ad8 <_free_r+0x94>)
 8008a60:	9801      	ldr	r0, [sp, #4]
 8008a62:	6813      	ldr	r3, [r2, #0]
 8008a64:	b933      	cbnz	r3, 8008a74 <_free_r+0x30>
 8008a66:	6063      	str	r3, [r4, #4]
 8008a68:	6014      	str	r4, [r2, #0]
 8008a6a:	b003      	add	sp, #12
 8008a6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a70:	f000 b920 	b.w	8008cb4 <__malloc_unlock>
 8008a74:	42a3      	cmp	r3, r4
 8008a76:	d908      	bls.n	8008a8a <_free_r+0x46>
 8008a78:	6825      	ldr	r5, [r4, #0]
 8008a7a:	1961      	adds	r1, r4, r5
 8008a7c:	428b      	cmp	r3, r1
 8008a7e:	bf01      	itttt	eq
 8008a80:	6819      	ldreq	r1, [r3, #0]
 8008a82:	685b      	ldreq	r3, [r3, #4]
 8008a84:	1949      	addeq	r1, r1, r5
 8008a86:	6021      	streq	r1, [r4, #0]
 8008a88:	e7ed      	b.n	8008a66 <_free_r+0x22>
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	b10b      	cbz	r3, 8008a94 <_free_r+0x50>
 8008a90:	42a3      	cmp	r3, r4
 8008a92:	d9fa      	bls.n	8008a8a <_free_r+0x46>
 8008a94:	6811      	ldr	r1, [r2, #0]
 8008a96:	1855      	adds	r5, r2, r1
 8008a98:	42a5      	cmp	r5, r4
 8008a9a:	d10b      	bne.n	8008ab4 <_free_r+0x70>
 8008a9c:	6824      	ldr	r4, [r4, #0]
 8008a9e:	4421      	add	r1, r4
 8008aa0:	1854      	adds	r4, r2, r1
 8008aa2:	42a3      	cmp	r3, r4
 8008aa4:	6011      	str	r1, [r2, #0]
 8008aa6:	d1e0      	bne.n	8008a6a <_free_r+0x26>
 8008aa8:	681c      	ldr	r4, [r3, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	6053      	str	r3, [r2, #4]
 8008aae:	4421      	add	r1, r4
 8008ab0:	6011      	str	r1, [r2, #0]
 8008ab2:	e7da      	b.n	8008a6a <_free_r+0x26>
 8008ab4:	d902      	bls.n	8008abc <_free_r+0x78>
 8008ab6:	230c      	movs	r3, #12
 8008ab8:	6003      	str	r3, [r0, #0]
 8008aba:	e7d6      	b.n	8008a6a <_free_r+0x26>
 8008abc:	6825      	ldr	r5, [r4, #0]
 8008abe:	1961      	adds	r1, r4, r5
 8008ac0:	428b      	cmp	r3, r1
 8008ac2:	bf04      	itt	eq
 8008ac4:	6819      	ldreq	r1, [r3, #0]
 8008ac6:	685b      	ldreq	r3, [r3, #4]
 8008ac8:	6063      	str	r3, [r4, #4]
 8008aca:	bf04      	itt	eq
 8008acc:	1949      	addeq	r1, r1, r5
 8008ace:	6021      	streq	r1, [r4, #0]
 8008ad0:	6054      	str	r4, [r2, #4]
 8008ad2:	e7ca      	b.n	8008a6a <_free_r+0x26>
 8008ad4:	b003      	add	sp, #12
 8008ad6:	bd30      	pop	{r4, r5, pc}
 8008ad8:	2000065c 	.word	0x2000065c

08008adc <sbrk_aligned>:
 8008adc:	b570      	push	{r4, r5, r6, lr}
 8008ade:	4e0e      	ldr	r6, [pc, #56]	; (8008b18 <sbrk_aligned+0x3c>)
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	6831      	ldr	r1, [r6, #0]
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	b911      	cbnz	r1, 8008aee <sbrk_aligned+0x12>
 8008ae8:	f000 f88c 	bl	8008c04 <_sbrk_r>
 8008aec:	6030      	str	r0, [r6, #0]
 8008aee:	4621      	mov	r1, r4
 8008af0:	4628      	mov	r0, r5
 8008af2:	f000 f887 	bl	8008c04 <_sbrk_r>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	d00a      	beq.n	8008b10 <sbrk_aligned+0x34>
 8008afa:	1cc4      	adds	r4, r0, #3
 8008afc:	f024 0403 	bic.w	r4, r4, #3
 8008b00:	42a0      	cmp	r0, r4
 8008b02:	d007      	beq.n	8008b14 <sbrk_aligned+0x38>
 8008b04:	1a21      	subs	r1, r4, r0
 8008b06:	4628      	mov	r0, r5
 8008b08:	f000 f87c 	bl	8008c04 <_sbrk_r>
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d101      	bne.n	8008b14 <sbrk_aligned+0x38>
 8008b10:	f04f 34ff 	mov.w	r4, #4294967295
 8008b14:	4620      	mov	r0, r4
 8008b16:	bd70      	pop	{r4, r5, r6, pc}
 8008b18:	20000660 	.word	0x20000660

08008b1c <_malloc_r>:
 8008b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b20:	1ccd      	adds	r5, r1, #3
 8008b22:	f025 0503 	bic.w	r5, r5, #3
 8008b26:	3508      	adds	r5, #8
 8008b28:	2d0c      	cmp	r5, #12
 8008b2a:	bf38      	it	cc
 8008b2c:	250c      	movcc	r5, #12
 8008b2e:	2d00      	cmp	r5, #0
 8008b30:	4607      	mov	r7, r0
 8008b32:	db01      	blt.n	8008b38 <_malloc_r+0x1c>
 8008b34:	42a9      	cmp	r1, r5
 8008b36:	d905      	bls.n	8008b44 <_malloc_r+0x28>
 8008b38:	230c      	movs	r3, #12
 8008b3a:	603b      	str	r3, [r7, #0]
 8008b3c:	2600      	movs	r6, #0
 8008b3e:	4630      	mov	r0, r6
 8008b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b44:	4e2e      	ldr	r6, [pc, #184]	; (8008c00 <_malloc_r+0xe4>)
 8008b46:	f000 f8af 	bl	8008ca8 <__malloc_lock>
 8008b4a:	6833      	ldr	r3, [r6, #0]
 8008b4c:	461c      	mov	r4, r3
 8008b4e:	bb34      	cbnz	r4, 8008b9e <_malloc_r+0x82>
 8008b50:	4629      	mov	r1, r5
 8008b52:	4638      	mov	r0, r7
 8008b54:	f7ff ffc2 	bl	8008adc <sbrk_aligned>
 8008b58:	1c43      	adds	r3, r0, #1
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	d14d      	bne.n	8008bfa <_malloc_r+0xde>
 8008b5e:	6834      	ldr	r4, [r6, #0]
 8008b60:	4626      	mov	r6, r4
 8008b62:	2e00      	cmp	r6, #0
 8008b64:	d140      	bne.n	8008be8 <_malloc_r+0xcc>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	4631      	mov	r1, r6
 8008b6a:	4638      	mov	r0, r7
 8008b6c:	eb04 0803 	add.w	r8, r4, r3
 8008b70:	f000 f848 	bl	8008c04 <_sbrk_r>
 8008b74:	4580      	cmp	r8, r0
 8008b76:	d13a      	bne.n	8008bee <_malloc_r+0xd2>
 8008b78:	6821      	ldr	r1, [r4, #0]
 8008b7a:	3503      	adds	r5, #3
 8008b7c:	1a6d      	subs	r5, r5, r1
 8008b7e:	f025 0503 	bic.w	r5, r5, #3
 8008b82:	3508      	adds	r5, #8
 8008b84:	2d0c      	cmp	r5, #12
 8008b86:	bf38      	it	cc
 8008b88:	250c      	movcc	r5, #12
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	f7ff ffa5 	bl	8008adc <sbrk_aligned>
 8008b92:	3001      	adds	r0, #1
 8008b94:	d02b      	beq.n	8008bee <_malloc_r+0xd2>
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	442b      	add	r3, r5
 8008b9a:	6023      	str	r3, [r4, #0]
 8008b9c:	e00e      	b.n	8008bbc <_malloc_r+0xa0>
 8008b9e:	6822      	ldr	r2, [r4, #0]
 8008ba0:	1b52      	subs	r2, r2, r5
 8008ba2:	d41e      	bmi.n	8008be2 <_malloc_r+0xc6>
 8008ba4:	2a0b      	cmp	r2, #11
 8008ba6:	d916      	bls.n	8008bd6 <_malloc_r+0xba>
 8008ba8:	1961      	adds	r1, r4, r5
 8008baa:	42a3      	cmp	r3, r4
 8008bac:	6025      	str	r5, [r4, #0]
 8008bae:	bf18      	it	ne
 8008bb0:	6059      	strne	r1, [r3, #4]
 8008bb2:	6863      	ldr	r3, [r4, #4]
 8008bb4:	bf08      	it	eq
 8008bb6:	6031      	streq	r1, [r6, #0]
 8008bb8:	5162      	str	r2, [r4, r5]
 8008bba:	604b      	str	r3, [r1, #4]
 8008bbc:	4638      	mov	r0, r7
 8008bbe:	f104 060b 	add.w	r6, r4, #11
 8008bc2:	f000 f877 	bl	8008cb4 <__malloc_unlock>
 8008bc6:	f026 0607 	bic.w	r6, r6, #7
 8008bca:	1d23      	adds	r3, r4, #4
 8008bcc:	1af2      	subs	r2, r6, r3
 8008bce:	d0b6      	beq.n	8008b3e <_malloc_r+0x22>
 8008bd0:	1b9b      	subs	r3, r3, r6
 8008bd2:	50a3      	str	r3, [r4, r2]
 8008bd4:	e7b3      	b.n	8008b3e <_malloc_r+0x22>
 8008bd6:	6862      	ldr	r2, [r4, #4]
 8008bd8:	42a3      	cmp	r3, r4
 8008bda:	bf0c      	ite	eq
 8008bdc:	6032      	streq	r2, [r6, #0]
 8008bde:	605a      	strne	r2, [r3, #4]
 8008be0:	e7ec      	b.n	8008bbc <_malloc_r+0xa0>
 8008be2:	4623      	mov	r3, r4
 8008be4:	6864      	ldr	r4, [r4, #4]
 8008be6:	e7b2      	b.n	8008b4e <_malloc_r+0x32>
 8008be8:	4634      	mov	r4, r6
 8008bea:	6876      	ldr	r6, [r6, #4]
 8008bec:	e7b9      	b.n	8008b62 <_malloc_r+0x46>
 8008bee:	230c      	movs	r3, #12
 8008bf0:	603b      	str	r3, [r7, #0]
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	f000 f85e 	bl	8008cb4 <__malloc_unlock>
 8008bf8:	e7a1      	b.n	8008b3e <_malloc_r+0x22>
 8008bfa:	6025      	str	r5, [r4, #0]
 8008bfc:	e7de      	b.n	8008bbc <_malloc_r+0xa0>
 8008bfe:	bf00      	nop
 8008c00:	2000065c 	.word	0x2000065c

08008c04 <_sbrk_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	4d06      	ldr	r5, [pc, #24]	; (8008c20 <_sbrk_r+0x1c>)
 8008c08:	2300      	movs	r3, #0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	602b      	str	r3, [r5, #0]
 8008c10:	f7fa fb14 	bl	800323c <_sbrk>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d102      	bne.n	8008c1e <_sbrk_r+0x1a>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b103      	cbz	r3, 8008c1e <_sbrk_r+0x1a>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	20000664 	.word	0x20000664

08008c24 <__assert_func>:
 8008c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c26:	4614      	mov	r4, r2
 8008c28:	461a      	mov	r2, r3
 8008c2a:	4b09      	ldr	r3, [pc, #36]	; (8008c50 <__assert_func+0x2c>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4605      	mov	r5, r0
 8008c30:	68d8      	ldr	r0, [r3, #12]
 8008c32:	b14c      	cbz	r4, 8008c48 <__assert_func+0x24>
 8008c34:	4b07      	ldr	r3, [pc, #28]	; (8008c54 <__assert_func+0x30>)
 8008c36:	9100      	str	r1, [sp, #0]
 8008c38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c3c:	4906      	ldr	r1, [pc, #24]	; (8008c58 <__assert_func+0x34>)
 8008c3e:	462b      	mov	r3, r5
 8008c40:	f000 f80e 	bl	8008c60 <fiprintf>
 8008c44:	f000 fa64 	bl	8009110 <abort>
 8008c48:	4b04      	ldr	r3, [pc, #16]	; (8008c5c <__assert_func+0x38>)
 8008c4a:	461c      	mov	r4, r3
 8008c4c:	e7f3      	b.n	8008c36 <__assert_func+0x12>
 8008c4e:	bf00      	nop
 8008c50:	20000048 	.word	0x20000048
 8008c54:	0800999c 	.word	0x0800999c
 8008c58:	080099a9 	.word	0x080099a9
 8008c5c:	080099d7 	.word	0x080099d7

08008c60 <fiprintf>:
 8008c60:	b40e      	push	{r1, r2, r3}
 8008c62:	b503      	push	{r0, r1, lr}
 8008c64:	4601      	mov	r1, r0
 8008c66:	ab03      	add	r3, sp, #12
 8008c68:	4805      	ldr	r0, [pc, #20]	; (8008c80 <fiprintf+0x20>)
 8008c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c6e:	6800      	ldr	r0, [r0, #0]
 8008c70:	9301      	str	r3, [sp, #4]
 8008c72:	f000 f84f 	bl	8008d14 <_vfiprintf_r>
 8008c76:	b002      	add	sp, #8
 8008c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c7c:	b003      	add	sp, #12
 8008c7e:	4770      	bx	lr
 8008c80:	20000048 	.word	0x20000048

08008c84 <__ascii_mbtowc>:
 8008c84:	b082      	sub	sp, #8
 8008c86:	b901      	cbnz	r1, 8008c8a <__ascii_mbtowc+0x6>
 8008c88:	a901      	add	r1, sp, #4
 8008c8a:	b142      	cbz	r2, 8008c9e <__ascii_mbtowc+0x1a>
 8008c8c:	b14b      	cbz	r3, 8008ca2 <__ascii_mbtowc+0x1e>
 8008c8e:	7813      	ldrb	r3, [r2, #0]
 8008c90:	600b      	str	r3, [r1, #0]
 8008c92:	7812      	ldrb	r2, [r2, #0]
 8008c94:	1e10      	subs	r0, r2, #0
 8008c96:	bf18      	it	ne
 8008c98:	2001      	movne	r0, #1
 8008c9a:	b002      	add	sp, #8
 8008c9c:	4770      	bx	lr
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	e7fb      	b.n	8008c9a <__ascii_mbtowc+0x16>
 8008ca2:	f06f 0001 	mvn.w	r0, #1
 8008ca6:	e7f8      	b.n	8008c9a <__ascii_mbtowc+0x16>

08008ca8 <__malloc_lock>:
 8008ca8:	4801      	ldr	r0, [pc, #4]	; (8008cb0 <__malloc_lock+0x8>)
 8008caa:	f000 bbf1 	b.w	8009490 <__retarget_lock_acquire_recursive>
 8008cae:	bf00      	nop
 8008cb0:	20000668 	.word	0x20000668

08008cb4 <__malloc_unlock>:
 8008cb4:	4801      	ldr	r0, [pc, #4]	; (8008cbc <__malloc_unlock+0x8>)
 8008cb6:	f000 bbec 	b.w	8009492 <__retarget_lock_release_recursive>
 8008cba:	bf00      	nop
 8008cbc:	20000668 	.word	0x20000668

08008cc0 <__sfputc_r>:
 8008cc0:	6893      	ldr	r3, [r2, #8]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	b410      	push	{r4}
 8008cc8:	6093      	str	r3, [r2, #8]
 8008cca:	da08      	bge.n	8008cde <__sfputc_r+0x1e>
 8008ccc:	6994      	ldr	r4, [r2, #24]
 8008cce:	42a3      	cmp	r3, r4
 8008cd0:	db01      	blt.n	8008cd6 <__sfputc_r+0x16>
 8008cd2:	290a      	cmp	r1, #10
 8008cd4:	d103      	bne.n	8008cde <__sfputc_r+0x1e>
 8008cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cda:	f000 b94b 	b.w	8008f74 <__swbuf_r>
 8008cde:	6813      	ldr	r3, [r2, #0]
 8008ce0:	1c58      	adds	r0, r3, #1
 8008ce2:	6010      	str	r0, [r2, #0]
 8008ce4:	7019      	strb	r1, [r3, #0]
 8008ce6:	4608      	mov	r0, r1
 8008ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <__sfputs_r>:
 8008cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	460f      	mov	r7, r1
 8008cf4:	4614      	mov	r4, r2
 8008cf6:	18d5      	adds	r5, r2, r3
 8008cf8:	42ac      	cmp	r4, r5
 8008cfa:	d101      	bne.n	8008d00 <__sfputs_r+0x12>
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	e007      	b.n	8008d10 <__sfputs_r+0x22>
 8008d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d04:	463a      	mov	r2, r7
 8008d06:	4630      	mov	r0, r6
 8008d08:	f7ff ffda 	bl	8008cc0 <__sfputc_r>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d1f3      	bne.n	8008cf8 <__sfputs_r+0xa>
 8008d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d14 <_vfiprintf_r>:
 8008d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d18:	460d      	mov	r5, r1
 8008d1a:	b09d      	sub	sp, #116	; 0x74
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	4698      	mov	r8, r3
 8008d20:	4606      	mov	r6, r0
 8008d22:	b118      	cbz	r0, 8008d2c <_vfiprintf_r+0x18>
 8008d24:	6983      	ldr	r3, [r0, #24]
 8008d26:	b90b      	cbnz	r3, 8008d2c <_vfiprintf_r+0x18>
 8008d28:	f000 fb14 	bl	8009354 <__sinit>
 8008d2c:	4b89      	ldr	r3, [pc, #548]	; (8008f54 <_vfiprintf_r+0x240>)
 8008d2e:	429d      	cmp	r5, r3
 8008d30:	d11b      	bne.n	8008d6a <_vfiprintf_r+0x56>
 8008d32:	6875      	ldr	r5, [r6, #4]
 8008d34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d36:	07d9      	lsls	r1, r3, #31
 8008d38:	d405      	bmi.n	8008d46 <_vfiprintf_r+0x32>
 8008d3a:	89ab      	ldrh	r3, [r5, #12]
 8008d3c:	059a      	lsls	r2, r3, #22
 8008d3e:	d402      	bmi.n	8008d46 <_vfiprintf_r+0x32>
 8008d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d42:	f000 fba5 	bl	8009490 <__retarget_lock_acquire_recursive>
 8008d46:	89ab      	ldrh	r3, [r5, #12]
 8008d48:	071b      	lsls	r3, r3, #28
 8008d4a:	d501      	bpl.n	8008d50 <_vfiprintf_r+0x3c>
 8008d4c:	692b      	ldr	r3, [r5, #16]
 8008d4e:	b9eb      	cbnz	r3, 8008d8c <_vfiprintf_r+0x78>
 8008d50:	4629      	mov	r1, r5
 8008d52:	4630      	mov	r0, r6
 8008d54:	f000 f96e 	bl	8009034 <__swsetup_r>
 8008d58:	b1c0      	cbz	r0, 8008d8c <_vfiprintf_r+0x78>
 8008d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d5c:	07dc      	lsls	r4, r3, #31
 8008d5e:	d50e      	bpl.n	8008d7e <_vfiprintf_r+0x6a>
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	b01d      	add	sp, #116	; 0x74
 8008d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6a:	4b7b      	ldr	r3, [pc, #492]	; (8008f58 <_vfiprintf_r+0x244>)
 8008d6c:	429d      	cmp	r5, r3
 8008d6e:	d101      	bne.n	8008d74 <_vfiprintf_r+0x60>
 8008d70:	68b5      	ldr	r5, [r6, #8]
 8008d72:	e7df      	b.n	8008d34 <_vfiprintf_r+0x20>
 8008d74:	4b79      	ldr	r3, [pc, #484]	; (8008f5c <_vfiprintf_r+0x248>)
 8008d76:	429d      	cmp	r5, r3
 8008d78:	bf08      	it	eq
 8008d7a:	68f5      	ldreq	r5, [r6, #12]
 8008d7c:	e7da      	b.n	8008d34 <_vfiprintf_r+0x20>
 8008d7e:	89ab      	ldrh	r3, [r5, #12]
 8008d80:	0598      	lsls	r0, r3, #22
 8008d82:	d4ed      	bmi.n	8008d60 <_vfiprintf_r+0x4c>
 8008d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d86:	f000 fb84 	bl	8009492 <__retarget_lock_release_recursive>
 8008d8a:	e7e9      	b.n	8008d60 <_vfiprintf_r+0x4c>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d90:	2320      	movs	r3, #32
 8008d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d96:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d9a:	2330      	movs	r3, #48	; 0x30
 8008d9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f60 <_vfiprintf_r+0x24c>
 8008da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008da4:	f04f 0901 	mov.w	r9, #1
 8008da8:	4623      	mov	r3, r4
 8008daa:	469a      	mov	sl, r3
 8008dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008db0:	b10a      	cbz	r2, 8008db6 <_vfiprintf_r+0xa2>
 8008db2:	2a25      	cmp	r2, #37	; 0x25
 8008db4:	d1f9      	bne.n	8008daa <_vfiprintf_r+0x96>
 8008db6:	ebba 0b04 	subs.w	fp, sl, r4
 8008dba:	d00b      	beq.n	8008dd4 <_vfiprintf_r+0xc0>
 8008dbc:	465b      	mov	r3, fp
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f7ff ff93 	bl	8008cee <__sfputs_r>
 8008dc8:	3001      	adds	r0, #1
 8008dca:	f000 80aa 	beq.w	8008f22 <_vfiprintf_r+0x20e>
 8008dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dd0:	445a      	add	r2, fp
 8008dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8008dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 80a2 	beq.w	8008f22 <_vfiprintf_r+0x20e>
 8008dde:	2300      	movs	r3, #0
 8008de0:	f04f 32ff 	mov.w	r2, #4294967295
 8008de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008de8:	f10a 0a01 	add.w	sl, sl, #1
 8008dec:	9304      	str	r3, [sp, #16]
 8008dee:	9307      	str	r3, [sp, #28]
 8008df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008df4:	931a      	str	r3, [sp, #104]	; 0x68
 8008df6:	4654      	mov	r4, sl
 8008df8:	2205      	movs	r2, #5
 8008dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dfe:	4858      	ldr	r0, [pc, #352]	; (8008f60 <_vfiprintf_r+0x24c>)
 8008e00:	f7f7 f9ee 	bl	80001e0 <memchr>
 8008e04:	9a04      	ldr	r2, [sp, #16]
 8008e06:	b9d8      	cbnz	r0, 8008e40 <_vfiprintf_r+0x12c>
 8008e08:	06d1      	lsls	r1, r2, #27
 8008e0a:	bf44      	itt	mi
 8008e0c:	2320      	movmi	r3, #32
 8008e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e12:	0713      	lsls	r3, r2, #28
 8008e14:	bf44      	itt	mi
 8008e16:	232b      	movmi	r3, #43	; 0x2b
 8008e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e20:	2b2a      	cmp	r3, #42	; 0x2a
 8008e22:	d015      	beq.n	8008e50 <_vfiprintf_r+0x13c>
 8008e24:	9a07      	ldr	r2, [sp, #28]
 8008e26:	4654      	mov	r4, sl
 8008e28:	2000      	movs	r0, #0
 8008e2a:	f04f 0c0a 	mov.w	ip, #10
 8008e2e:	4621      	mov	r1, r4
 8008e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e34:	3b30      	subs	r3, #48	; 0x30
 8008e36:	2b09      	cmp	r3, #9
 8008e38:	d94e      	bls.n	8008ed8 <_vfiprintf_r+0x1c4>
 8008e3a:	b1b0      	cbz	r0, 8008e6a <_vfiprintf_r+0x156>
 8008e3c:	9207      	str	r2, [sp, #28]
 8008e3e:	e014      	b.n	8008e6a <_vfiprintf_r+0x156>
 8008e40:	eba0 0308 	sub.w	r3, r0, r8
 8008e44:	fa09 f303 	lsl.w	r3, r9, r3
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	9304      	str	r3, [sp, #16]
 8008e4c:	46a2      	mov	sl, r4
 8008e4e:	e7d2      	b.n	8008df6 <_vfiprintf_r+0xe2>
 8008e50:	9b03      	ldr	r3, [sp, #12]
 8008e52:	1d19      	adds	r1, r3, #4
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	9103      	str	r1, [sp, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	bfbb      	ittet	lt
 8008e5c:	425b      	neglt	r3, r3
 8008e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e62:	9307      	strge	r3, [sp, #28]
 8008e64:	9307      	strlt	r3, [sp, #28]
 8008e66:	bfb8      	it	lt
 8008e68:	9204      	strlt	r2, [sp, #16]
 8008e6a:	7823      	ldrb	r3, [r4, #0]
 8008e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8008e6e:	d10c      	bne.n	8008e8a <_vfiprintf_r+0x176>
 8008e70:	7863      	ldrb	r3, [r4, #1]
 8008e72:	2b2a      	cmp	r3, #42	; 0x2a
 8008e74:	d135      	bne.n	8008ee2 <_vfiprintf_r+0x1ce>
 8008e76:	9b03      	ldr	r3, [sp, #12]
 8008e78:	1d1a      	adds	r2, r3, #4
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	9203      	str	r2, [sp, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bfb8      	it	lt
 8008e82:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e86:	3402      	adds	r4, #2
 8008e88:	9305      	str	r3, [sp, #20]
 8008e8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f70 <_vfiprintf_r+0x25c>
 8008e8e:	7821      	ldrb	r1, [r4, #0]
 8008e90:	2203      	movs	r2, #3
 8008e92:	4650      	mov	r0, sl
 8008e94:	f7f7 f9a4 	bl	80001e0 <memchr>
 8008e98:	b140      	cbz	r0, 8008eac <_vfiprintf_r+0x198>
 8008e9a:	2340      	movs	r3, #64	; 0x40
 8008e9c:	eba0 000a 	sub.w	r0, r0, sl
 8008ea0:	fa03 f000 	lsl.w	r0, r3, r0
 8008ea4:	9b04      	ldr	r3, [sp, #16]
 8008ea6:	4303      	orrs	r3, r0
 8008ea8:	3401      	adds	r4, #1
 8008eaa:	9304      	str	r3, [sp, #16]
 8008eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eb0:	482c      	ldr	r0, [pc, #176]	; (8008f64 <_vfiprintf_r+0x250>)
 8008eb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eb6:	2206      	movs	r2, #6
 8008eb8:	f7f7 f992 	bl	80001e0 <memchr>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d03f      	beq.n	8008f40 <_vfiprintf_r+0x22c>
 8008ec0:	4b29      	ldr	r3, [pc, #164]	; (8008f68 <_vfiprintf_r+0x254>)
 8008ec2:	bb1b      	cbnz	r3, 8008f0c <_vfiprintf_r+0x1f8>
 8008ec4:	9b03      	ldr	r3, [sp, #12]
 8008ec6:	3307      	adds	r3, #7
 8008ec8:	f023 0307 	bic.w	r3, r3, #7
 8008ecc:	3308      	adds	r3, #8
 8008ece:	9303      	str	r3, [sp, #12]
 8008ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed2:	443b      	add	r3, r7
 8008ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed6:	e767      	b.n	8008da8 <_vfiprintf_r+0x94>
 8008ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008edc:	460c      	mov	r4, r1
 8008ede:	2001      	movs	r0, #1
 8008ee0:	e7a5      	b.n	8008e2e <_vfiprintf_r+0x11a>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	3401      	adds	r4, #1
 8008ee6:	9305      	str	r3, [sp, #20]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	f04f 0c0a 	mov.w	ip, #10
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ef4:	3a30      	subs	r2, #48	; 0x30
 8008ef6:	2a09      	cmp	r2, #9
 8008ef8:	d903      	bls.n	8008f02 <_vfiprintf_r+0x1ee>
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0c5      	beq.n	8008e8a <_vfiprintf_r+0x176>
 8008efe:	9105      	str	r1, [sp, #20]
 8008f00:	e7c3      	b.n	8008e8a <_vfiprintf_r+0x176>
 8008f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f06:	4604      	mov	r4, r0
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e7f0      	b.n	8008eee <_vfiprintf_r+0x1da>
 8008f0c:	ab03      	add	r3, sp, #12
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	462a      	mov	r2, r5
 8008f12:	4b16      	ldr	r3, [pc, #88]	; (8008f6c <_vfiprintf_r+0x258>)
 8008f14:	a904      	add	r1, sp, #16
 8008f16:	4630      	mov	r0, r6
 8008f18:	f7fd ff9a 	bl	8006e50 <_printf_float>
 8008f1c:	4607      	mov	r7, r0
 8008f1e:	1c78      	adds	r0, r7, #1
 8008f20:	d1d6      	bne.n	8008ed0 <_vfiprintf_r+0x1bc>
 8008f22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f24:	07d9      	lsls	r1, r3, #31
 8008f26:	d405      	bmi.n	8008f34 <_vfiprintf_r+0x220>
 8008f28:	89ab      	ldrh	r3, [r5, #12]
 8008f2a:	059a      	lsls	r2, r3, #22
 8008f2c:	d402      	bmi.n	8008f34 <_vfiprintf_r+0x220>
 8008f2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f30:	f000 faaf 	bl	8009492 <__retarget_lock_release_recursive>
 8008f34:	89ab      	ldrh	r3, [r5, #12]
 8008f36:	065b      	lsls	r3, r3, #25
 8008f38:	f53f af12 	bmi.w	8008d60 <_vfiprintf_r+0x4c>
 8008f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f3e:	e711      	b.n	8008d64 <_vfiprintf_r+0x50>
 8008f40:	ab03      	add	r3, sp, #12
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	462a      	mov	r2, r5
 8008f46:	4b09      	ldr	r3, [pc, #36]	; (8008f6c <_vfiprintf_r+0x258>)
 8008f48:	a904      	add	r1, sp, #16
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	f7fe fa24 	bl	8007398 <_printf_i>
 8008f50:	e7e4      	b.n	8008f1c <_vfiprintf_r+0x208>
 8008f52:	bf00      	nop
 8008f54:	08009b14 	.word	0x08009b14
 8008f58:	08009b34 	.word	0x08009b34
 8008f5c:	08009af4 	.word	0x08009af4
 8008f60:	080099e2 	.word	0x080099e2
 8008f64:	080099ec 	.word	0x080099ec
 8008f68:	08006e51 	.word	0x08006e51
 8008f6c:	08008cef 	.word	0x08008cef
 8008f70:	080099e8 	.word	0x080099e8

08008f74 <__swbuf_r>:
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f76:	460e      	mov	r6, r1
 8008f78:	4614      	mov	r4, r2
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	b118      	cbz	r0, 8008f86 <__swbuf_r+0x12>
 8008f7e:	6983      	ldr	r3, [r0, #24]
 8008f80:	b90b      	cbnz	r3, 8008f86 <__swbuf_r+0x12>
 8008f82:	f000 f9e7 	bl	8009354 <__sinit>
 8008f86:	4b21      	ldr	r3, [pc, #132]	; (800900c <__swbuf_r+0x98>)
 8008f88:	429c      	cmp	r4, r3
 8008f8a:	d12b      	bne.n	8008fe4 <__swbuf_r+0x70>
 8008f8c:	686c      	ldr	r4, [r5, #4]
 8008f8e:	69a3      	ldr	r3, [r4, #24]
 8008f90:	60a3      	str	r3, [r4, #8]
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	071a      	lsls	r2, r3, #28
 8008f96:	d52f      	bpl.n	8008ff8 <__swbuf_r+0x84>
 8008f98:	6923      	ldr	r3, [r4, #16]
 8008f9a:	b36b      	cbz	r3, 8008ff8 <__swbuf_r+0x84>
 8008f9c:	6923      	ldr	r3, [r4, #16]
 8008f9e:	6820      	ldr	r0, [r4, #0]
 8008fa0:	1ac0      	subs	r0, r0, r3
 8008fa2:	6963      	ldr	r3, [r4, #20]
 8008fa4:	b2f6      	uxtb	r6, r6
 8008fa6:	4283      	cmp	r3, r0
 8008fa8:	4637      	mov	r7, r6
 8008faa:	dc04      	bgt.n	8008fb6 <__swbuf_r+0x42>
 8008fac:	4621      	mov	r1, r4
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f000 f93c 	bl	800922c <_fflush_r>
 8008fb4:	bb30      	cbnz	r0, 8009004 <__swbuf_r+0x90>
 8008fb6:	68a3      	ldr	r3, [r4, #8]
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	60a3      	str	r3, [r4, #8]
 8008fbc:	6823      	ldr	r3, [r4, #0]
 8008fbe:	1c5a      	adds	r2, r3, #1
 8008fc0:	6022      	str	r2, [r4, #0]
 8008fc2:	701e      	strb	r6, [r3, #0]
 8008fc4:	6963      	ldr	r3, [r4, #20]
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	4283      	cmp	r3, r0
 8008fca:	d004      	beq.n	8008fd6 <__swbuf_r+0x62>
 8008fcc:	89a3      	ldrh	r3, [r4, #12]
 8008fce:	07db      	lsls	r3, r3, #31
 8008fd0:	d506      	bpl.n	8008fe0 <__swbuf_r+0x6c>
 8008fd2:	2e0a      	cmp	r6, #10
 8008fd4:	d104      	bne.n	8008fe0 <__swbuf_r+0x6c>
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f000 f927 	bl	800922c <_fflush_r>
 8008fde:	b988      	cbnz	r0, 8009004 <__swbuf_r+0x90>
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe4:	4b0a      	ldr	r3, [pc, #40]	; (8009010 <__swbuf_r+0x9c>)
 8008fe6:	429c      	cmp	r4, r3
 8008fe8:	d101      	bne.n	8008fee <__swbuf_r+0x7a>
 8008fea:	68ac      	ldr	r4, [r5, #8]
 8008fec:	e7cf      	b.n	8008f8e <__swbuf_r+0x1a>
 8008fee:	4b09      	ldr	r3, [pc, #36]	; (8009014 <__swbuf_r+0xa0>)
 8008ff0:	429c      	cmp	r4, r3
 8008ff2:	bf08      	it	eq
 8008ff4:	68ec      	ldreq	r4, [r5, #12]
 8008ff6:	e7ca      	b.n	8008f8e <__swbuf_r+0x1a>
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f000 f81a 	bl	8009034 <__swsetup_r>
 8009000:	2800      	cmp	r0, #0
 8009002:	d0cb      	beq.n	8008f9c <__swbuf_r+0x28>
 8009004:	f04f 37ff 	mov.w	r7, #4294967295
 8009008:	e7ea      	b.n	8008fe0 <__swbuf_r+0x6c>
 800900a:	bf00      	nop
 800900c:	08009b14 	.word	0x08009b14
 8009010:	08009b34 	.word	0x08009b34
 8009014:	08009af4 	.word	0x08009af4

08009018 <__ascii_wctomb>:
 8009018:	b149      	cbz	r1, 800902e <__ascii_wctomb+0x16>
 800901a:	2aff      	cmp	r2, #255	; 0xff
 800901c:	bf85      	ittet	hi
 800901e:	238a      	movhi	r3, #138	; 0x8a
 8009020:	6003      	strhi	r3, [r0, #0]
 8009022:	700a      	strbls	r2, [r1, #0]
 8009024:	f04f 30ff 	movhi.w	r0, #4294967295
 8009028:	bf98      	it	ls
 800902a:	2001      	movls	r0, #1
 800902c:	4770      	bx	lr
 800902e:	4608      	mov	r0, r1
 8009030:	4770      	bx	lr
	...

08009034 <__swsetup_r>:
 8009034:	4b32      	ldr	r3, [pc, #200]	; (8009100 <__swsetup_r+0xcc>)
 8009036:	b570      	push	{r4, r5, r6, lr}
 8009038:	681d      	ldr	r5, [r3, #0]
 800903a:	4606      	mov	r6, r0
 800903c:	460c      	mov	r4, r1
 800903e:	b125      	cbz	r5, 800904a <__swsetup_r+0x16>
 8009040:	69ab      	ldr	r3, [r5, #24]
 8009042:	b913      	cbnz	r3, 800904a <__swsetup_r+0x16>
 8009044:	4628      	mov	r0, r5
 8009046:	f000 f985 	bl	8009354 <__sinit>
 800904a:	4b2e      	ldr	r3, [pc, #184]	; (8009104 <__swsetup_r+0xd0>)
 800904c:	429c      	cmp	r4, r3
 800904e:	d10f      	bne.n	8009070 <__swsetup_r+0x3c>
 8009050:	686c      	ldr	r4, [r5, #4]
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009058:	0719      	lsls	r1, r3, #28
 800905a:	d42c      	bmi.n	80090b6 <__swsetup_r+0x82>
 800905c:	06dd      	lsls	r5, r3, #27
 800905e:	d411      	bmi.n	8009084 <__swsetup_r+0x50>
 8009060:	2309      	movs	r3, #9
 8009062:	6033      	str	r3, [r6, #0]
 8009064:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009068:	81a3      	strh	r3, [r4, #12]
 800906a:	f04f 30ff 	mov.w	r0, #4294967295
 800906e:	e03e      	b.n	80090ee <__swsetup_r+0xba>
 8009070:	4b25      	ldr	r3, [pc, #148]	; (8009108 <__swsetup_r+0xd4>)
 8009072:	429c      	cmp	r4, r3
 8009074:	d101      	bne.n	800907a <__swsetup_r+0x46>
 8009076:	68ac      	ldr	r4, [r5, #8]
 8009078:	e7eb      	b.n	8009052 <__swsetup_r+0x1e>
 800907a:	4b24      	ldr	r3, [pc, #144]	; (800910c <__swsetup_r+0xd8>)
 800907c:	429c      	cmp	r4, r3
 800907e:	bf08      	it	eq
 8009080:	68ec      	ldreq	r4, [r5, #12]
 8009082:	e7e6      	b.n	8009052 <__swsetup_r+0x1e>
 8009084:	0758      	lsls	r0, r3, #29
 8009086:	d512      	bpl.n	80090ae <__swsetup_r+0x7a>
 8009088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800908a:	b141      	cbz	r1, 800909e <__swsetup_r+0x6a>
 800908c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009090:	4299      	cmp	r1, r3
 8009092:	d002      	beq.n	800909a <__swsetup_r+0x66>
 8009094:	4630      	mov	r0, r6
 8009096:	f7ff fcd5 	bl	8008a44 <_free_r>
 800909a:	2300      	movs	r3, #0
 800909c:	6363      	str	r3, [r4, #52]	; 0x34
 800909e:	89a3      	ldrh	r3, [r4, #12]
 80090a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090a4:	81a3      	strh	r3, [r4, #12]
 80090a6:	2300      	movs	r3, #0
 80090a8:	6063      	str	r3, [r4, #4]
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	f043 0308 	orr.w	r3, r3, #8
 80090b4:	81a3      	strh	r3, [r4, #12]
 80090b6:	6923      	ldr	r3, [r4, #16]
 80090b8:	b94b      	cbnz	r3, 80090ce <__swsetup_r+0x9a>
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090c4:	d003      	beq.n	80090ce <__swsetup_r+0x9a>
 80090c6:	4621      	mov	r1, r4
 80090c8:	4630      	mov	r0, r6
 80090ca:	f000 fa09 	bl	80094e0 <__smakebuf_r>
 80090ce:	89a0      	ldrh	r0, [r4, #12]
 80090d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090d4:	f010 0301 	ands.w	r3, r0, #1
 80090d8:	d00a      	beq.n	80090f0 <__swsetup_r+0xbc>
 80090da:	2300      	movs	r3, #0
 80090dc:	60a3      	str	r3, [r4, #8]
 80090de:	6963      	ldr	r3, [r4, #20]
 80090e0:	425b      	negs	r3, r3
 80090e2:	61a3      	str	r3, [r4, #24]
 80090e4:	6923      	ldr	r3, [r4, #16]
 80090e6:	b943      	cbnz	r3, 80090fa <__swsetup_r+0xc6>
 80090e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090ec:	d1ba      	bne.n	8009064 <__swsetup_r+0x30>
 80090ee:	bd70      	pop	{r4, r5, r6, pc}
 80090f0:	0781      	lsls	r1, r0, #30
 80090f2:	bf58      	it	pl
 80090f4:	6963      	ldrpl	r3, [r4, #20]
 80090f6:	60a3      	str	r3, [r4, #8]
 80090f8:	e7f4      	b.n	80090e4 <__swsetup_r+0xb0>
 80090fa:	2000      	movs	r0, #0
 80090fc:	e7f7      	b.n	80090ee <__swsetup_r+0xba>
 80090fe:	bf00      	nop
 8009100:	20000048 	.word	0x20000048
 8009104:	08009b14 	.word	0x08009b14
 8009108:	08009b34 	.word	0x08009b34
 800910c:	08009af4 	.word	0x08009af4

08009110 <abort>:
 8009110:	b508      	push	{r3, lr}
 8009112:	2006      	movs	r0, #6
 8009114:	f000 fa4c 	bl	80095b0 <raise>
 8009118:	2001      	movs	r0, #1
 800911a:	f7fa f817 	bl	800314c <_exit>
	...

08009120 <__sflush_r>:
 8009120:	898a      	ldrh	r2, [r1, #12]
 8009122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009126:	4605      	mov	r5, r0
 8009128:	0710      	lsls	r0, r2, #28
 800912a:	460c      	mov	r4, r1
 800912c:	d458      	bmi.n	80091e0 <__sflush_r+0xc0>
 800912e:	684b      	ldr	r3, [r1, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	dc05      	bgt.n	8009140 <__sflush_r+0x20>
 8009134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009136:	2b00      	cmp	r3, #0
 8009138:	dc02      	bgt.n	8009140 <__sflush_r+0x20>
 800913a:	2000      	movs	r0, #0
 800913c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009142:	2e00      	cmp	r6, #0
 8009144:	d0f9      	beq.n	800913a <__sflush_r+0x1a>
 8009146:	2300      	movs	r3, #0
 8009148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800914c:	682f      	ldr	r7, [r5, #0]
 800914e:	602b      	str	r3, [r5, #0]
 8009150:	d032      	beq.n	80091b8 <__sflush_r+0x98>
 8009152:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	075a      	lsls	r2, r3, #29
 8009158:	d505      	bpl.n	8009166 <__sflush_r+0x46>
 800915a:	6863      	ldr	r3, [r4, #4]
 800915c:	1ac0      	subs	r0, r0, r3
 800915e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009160:	b10b      	cbz	r3, 8009166 <__sflush_r+0x46>
 8009162:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009164:	1ac0      	subs	r0, r0, r3
 8009166:	2300      	movs	r3, #0
 8009168:	4602      	mov	r2, r0
 800916a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800916c:	6a21      	ldr	r1, [r4, #32]
 800916e:	4628      	mov	r0, r5
 8009170:	47b0      	blx	r6
 8009172:	1c43      	adds	r3, r0, #1
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	d106      	bne.n	8009186 <__sflush_r+0x66>
 8009178:	6829      	ldr	r1, [r5, #0]
 800917a:	291d      	cmp	r1, #29
 800917c:	d82c      	bhi.n	80091d8 <__sflush_r+0xb8>
 800917e:	4a2a      	ldr	r2, [pc, #168]	; (8009228 <__sflush_r+0x108>)
 8009180:	40ca      	lsrs	r2, r1
 8009182:	07d6      	lsls	r6, r2, #31
 8009184:	d528      	bpl.n	80091d8 <__sflush_r+0xb8>
 8009186:	2200      	movs	r2, #0
 8009188:	6062      	str	r2, [r4, #4]
 800918a:	04d9      	lsls	r1, r3, #19
 800918c:	6922      	ldr	r2, [r4, #16]
 800918e:	6022      	str	r2, [r4, #0]
 8009190:	d504      	bpl.n	800919c <__sflush_r+0x7c>
 8009192:	1c42      	adds	r2, r0, #1
 8009194:	d101      	bne.n	800919a <__sflush_r+0x7a>
 8009196:	682b      	ldr	r3, [r5, #0]
 8009198:	b903      	cbnz	r3, 800919c <__sflush_r+0x7c>
 800919a:	6560      	str	r0, [r4, #84]	; 0x54
 800919c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800919e:	602f      	str	r7, [r5, #0]
 80091a0:	2900      	cmp	r1, #0
 80091a2:	d0ca      	beq.n	800913a <__sflush_r+0x1a>
 80091a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091a8:	4299      	cmp	r1, r3
 80091aa:	d002      	beq.n	80091b2 <__sflush_r+0x92>
 80091ac:	4628      	mov	r0, r5
 80091ae:	f7ff fc49 	bl	8008a44 <_free_r>
 80091b2:	2000      	movs	r0, #0
 80091b4:	6360      	str	r0, [r4, #52]	; 0x34
 80091b6:	e7c1      	b.n	800913c <__sflush_r+0x1c>
 80091b8:	6a21      	ldr	r1, [r4, #32]
 80091ba:	2301      	movs	r3, #1
 80091bc:	4628      	mov	r0, r5
 80091be:	47b0      	blx	r6
 80091c0:	1c41      	adds	r1, r0, #1
 80091c2:	d1c7      	bne.n	8009154 <__sflush_r+0x34>
 80091c4:	682b      	ldr	r3, [r5, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d0c4      	beq.n	8009154 <__sflush_r+0x34>
 80091ca:	2b1d      	cmp	r3, #29
 80091cc:	d001      	beq.n	80091d2 <__sflush_r+0xb2>
 80091ce:	2b16      	cmp	r3, #22
 80091d0:	d101      	bne.n	80091d6 <__sflush_r+0xb6>
 80091d2:	602f      	str	r7, [r5, #0]
 80091d4:	e7b1      	b.n	800913a <__sflush_r+0x1a>
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091dc:	81a3      	strh	r3, [r4, #12]
 80091de:	e7ad      	b.n	800913c <__sflush_r+0x1c>
 80091e0:	690f      	ldr	r7, [r1, #16]
 80091e2:	2f00      	cmp	r7, #0
 80091e4:	d0a9      	beq.n	800913a <__sflush_r+0x1a>
 80091e6:	0793      	lsls	r3, r2, #30
 80091e8:	680e      	ldr	r6, [r1, #0]
 80091ea:	bf08      	it	eq
 80091ec:	694b      	ldreq	r3, [r1, #20]
 80091ee:	600f      	str	r7, [r1, #0]
 80091f0:	bf18      	it	ne
 80091f2:	2300      	movne	r3, #0
 80091f4:	eba6 0807 	sub.w	r8, r6, r7
 80091f8:	608b      	str	r3, [r1, #8]
 80091fa:	f1b8 0f00 	cmp.w	r8, #0
 80091fe:	dd9c      	ble.n	800913a <__sflush_r+0x1a>
 8009200:	6a21      	ldr	r1, [r4, #32]
 8009202:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009204:	4643      	mov	r3, r8
 8009206:	463a      	mov	r2, r7
 8009208:	4628      	mov	r0, r5
 800920a:	47b0      	blx	r6
 800920c:	2800      	cmp	r0, #0
 800920e:	dc06      	bgt.n	800921e <__sflush_r+0xfe>
 8009210:	89a3      	ldrh	r3, [r4, #12]
 8009212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009216:	81a3      	strh	r3, [r4, #12]
 8009218:	f04f 30ff 	mov.w	r0, #4294967295
 800921c:	e78e      	b.n	800913c <__sflush_r+0x1c>
 800921e:	4407      	add	r7, r0
 8009220:	eba8 0800 	sub.w	r8, r8, r0
 8009224:	e7e9      	b.n	80091fa <__sflush_r+0xda>
 8009226:	bf00      	nop
 8009228:	20400001 	.word	0x20400001

0800922c <_fflush_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	690b      	ldr	r3, [r1, #16]
 8009230:	4605      	mov	r5, r0
 8009232:	460c      	mov	r4, r1
 8009234:	b913      	cbnz	r3, 800923c <_fflush_r+0x10>
 8009236:	2500      	movs	r5, #0
 8009238:	4628      	mov	r0, r5
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	b118      	cbz	r0, 8009246 <_fflush_r+0x1a>
 800923e:	6983      	ldr	r3, [r0, #24]
 8009240:	b90b      	cbnz	r3, 8009246 <_fflush_r+0x1a>
 8009242:	f000 f887 	bl	8009354 <__sinit>
 8009246:	4b14      	ldr	r3, [pc, #80]	; (8009298 <_fflush_r+0x6c>)
 8009248:	429c      	cmp	r4, r3
 800924a:	d11b      	bne.n	8009284 <_fflush_r+0x58>
 800924c:	686c      	ldr	r4, [r5, #4]
 800924e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d0ef      	beq.n	8009236 <_fflush_r+0xa>
 8009256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009258:	07d0      	lsls	r0, r2, #31
 800925a:	d404      	bmi.n	8009266 <_fflush_r+0x3a>
 800925c:	0599      	lsls	r1, r3, #22
 800925e:	d402      	bmi.n	8009266 <_fflush_r+0x3a>
 8009260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009262:	f000 f915 	bl	8009490 <__retarget_lock_acquire_recursive>
 8009266:	4628      	mov	r0, r5
 8009268:	4621      	mov	r1, r4
 800926a:	f7ff ff59 	bl	8009120 <__sflush_r>
 800926e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009270:	07da      	lsls	r2, r3, #31
 8009272:	4605      	mov	r5, r0
 8009274:	d4e0      	bmi.n	8009238 <_fflush_r+0xc>
 8009276:	89a3      	ldrh	r3, [r4, #12]
 8009278:	059b      	lsls	r3, r3, #22
 800927a:	d4dd      	bmi.n	8009238 <_fflush_r+0xc>
 800927c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800927e:	f000 f908 	bl	8009492 <__retarget_lock_release_recursive>
 8009282:	e7d9      	b.n	8009238 <_fflush_r+0xc>
 8009284:	4b05      	ldr	r3, [pc, #20]	; (800929c <_fflush_r+0x70>)
 8009286:	429c      	cmp	r4, r3
 8009288:	d101      	bne.n	800928e <_fflush_r+0x62>
 800928a:	68ac      	ldr	r4, [r5, #8]
 800928c:	e7df      	b.n	800924e <_fflush_r+0x22>
 800928e:	4b04      	ldr	r3, [pc, #16]	; (80092a0 <_fflush_r+0x74>)
 8009290:	429c      	cmp	r4, r3
 8009292:	bf08      	it	eq
 8009294:	68ec      	ldreq	r4, [r5, #12]
 8009296:	e7da      	b.n	800924e <_fflush_r+0x22>
 8009298:	08009b14 	.word	0x08009b14
 800929c:	08009b34 	.word	0x08009b34
 80092a0:	08009af4 	.word	0x08009af4

080092a4 <std>:
 80092a4:	2300      	movs	r3, #0
 80092a6:	b510      	push	{r4, lr}
 80092a8:	4604      	mov	r4, r0
 80092aa:	e9c0 3300 	strd	r3, r3, [r0]
 80092ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092b2:	6083      	str	r3, [r0, #8]
 80092b4:	8181      	strh	r1, [r0, #12]
 80092b6:	6643      	str	r3, [r0, #100]	; 0x64
 80092b8:	81c2      	strh	r2, [r0, #14]
 80092ba:	6183      	str	r3, [r0, #24]
 80092bc:	4619      	mov	r1, r3
 80092be:	2208      	movs	r2, #8
 80092c0:	305c      	adds	r0, #92	; 0x5c
 80092c2:	f7fd fd1d 	bl	8006d00 <memset>
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <std+0x38>)
 80092c8:	6263      	str	r3, [r4, #36]	; 0x24
 80092ca:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <std+0x3c>)
 80092cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80092ce:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <std+0x40>)
 80092d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092d2:	4b05      	ldr	r3, [pc, #20]	; (80092e8 <std+0x44>)
 80092d4:	6224      	str	r4, [r4, #32]
 80092d6:	6323      	str	r3, [r4, #48]	; 0x30
 80092d8:	bd10      	pop	{r4, pc}
 80092da:	bf00      	nop
 80092dc:	080095e9 	.word	0x080095e9
 80092e0:	0800960b 	.word	0x0800960b
 80092e4:	08009643 	.word	0x08009643
 80092e8:	08009667 	.word	0x08009667

080092ec <_cleanup_r>:
 80092ec:	4901      	ldr	r1, [pc, #4]	; (80092f4 <_cleanup_r+0x8>)
 80092ee:	f000 b8af 	b.w	8009450 <_fwalk_reent>
 80092f2:	bf00      	nop
 80092f4:	0800922d 	.word	0x0800922d

080092f8 <__sfmoreglue>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	2268      	movs	r2, #104	; 0x68
 80092fc:	1e4d      	subs	r5, r1, #1
 80092fe:	4355      	muls	r5, r2
 8009300:	460e      	mov	r6, r1
 8009302:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009306:	f7ff fc09 	bl	8008b1c <_malloc_r>
 800930a:	4604      	mov	r4, r0
 800930c:	b140      	cbz	r0, 8009320 <__sfmoreglue+0x28>
 800930e:	2100      	movs	r1, #0
 8009310:	e9c0 1600 	strd	r1, r6, [r0]
 8009314:	300c      	adds	r0, #12
 8009316:	60a0      	str	r0, [r4, #8]
 8009318:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800931c:	f7fd fcf0 	bl	8006d00 <memset>
 8009320:	4620      	mov	r0, r4
 8009322:	bd70      	pop	{r4, r5, r6, pc}

08009324 <__sfp_lock_acquire>:
 8009324:	4801      	ldr	r0, [pc, #4]	; (800932c <__sfp_lock_acquire+0x8>)
 8009326:	f000 b8b3 	b.w	8009490 <__retarget_lock_acquire_recursive>
 800932a:	bf00      	nop
 800932c:	20000669 	.word	0x20000669

08009330 <__sfp_lock_release>:
 8009330:	4801      	ldr	r0, [pc, #4]	; (8009338 <__sfp_lock_release+0x8>)
 8009332:	f000 b8ae 	b.w	8009492 <__retarget_lock_release_recursive>
 8009336:	bf00      	nop
 8009338:	20000669 	.word	0x20000669

0800933c <__sinit_lock_acquire>:
 800933c:	4801      	ldr	r0, [pc, #4]	; (8009344 <__sinit_lock_acquire+0x8>)
 800933e:	f000 b8a7 	b.w	8009490 <__retarget_lock_acquire_recursive>
 8009342:	bf00      	nop
 8009344:	2000066a 	.word	0x2000066a

08009348 <__sinit_lock_release>:
 8009348:	4801      	ldr	r0, [pc, #4]	; (8009350 <__sinit_lock_release+0x8>)
 800934a:	f000 b8a2 	b.w	8009492 <__retarget_lock_release_recursive>
 800934e:	bf00      	nop
 8009350:	2000066a 	.word	0x2000066a

08009354 <__sinit>:
 8009354:	b510      	push	{r4, lr}
 8009356:	4604      	mov	r4, r0
 8009358:	f7ff fff0 	bl	800933c <__sinit_lock_acquire>
 800935c:	69a3      	ldr	r3, [r4, #24]
 800935e:	b11b      	cbz	r3, 8009368 <__sinit+0x14>
 8009360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009364:	f7ff bff0 	b.w	8009348 <__sinit_lock_release>
 8009368:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800936c:	6523      	str	r3, [r4, #80]	; 0x50
 800936e:	4b13      	ldr	r3, [pc, #76]	; (80093bc <__sinit+0x68>)
 8009370:	4a13      	ldr	r2, [pc, #76]	; (80093c0 <__sinit+0x6c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	62a2      	str	r2, [r4, #40]	; 0x28
 8009376:	42a3      	cmp	r3, r4
 8009378:	bf04      	itt	eq
 800937a:	2301      	moveq	r3, #1
 800937c:	61a3      	streq	r3, [r4, #24]
 800937e:	4620      	mov	r0, r4
 8009380:	f000 f820 	bl	80093c4 <__sfp>
 8009384:	6060      	str	r0, [r4, #4]
 8009386:	4620      	mov	r0, r4
 8009388:	f000 f81c 	bl	80093c4 <__sfp>
 800938c:	60a0      	str	r0, [r4, #8]
 800938e:	4620      	mov	r0, r4
 8009390:	f000 f818 	bl	80093c4 <__sfp>
 8009394:	2200      	movs	r2, #0
 8009396:	60e0      	str	r0, [r4, #12]
 8009398:	2104      	movs	r1, #4
 800939a:	6860      	ldr	r0, [r4, #4]
 800939c:	f7ff ff82 	bl	80092a4 <std>
 80093a0:	68a0      	ldr	r0, [r4, #8]
 80093a2:	2201      	movs	r2, #1
 80093a4:	2109      	movs	r1, #9
 80093a6:	f7ff ff7d 	bl	80092a4 <std>
 80093aa:	68e0      	ldr	r0, [r4, #12]
 80093ac:	2202      	movs	r2, #2
 80093ae:	2112      	movs	r1, #18
 80093b0:	f7ff ff78 	bl	80092a4 <std>
 80093b4:	2301      	movs	r3, #1
 80093b6:	61a3      	str	r3, [r4, #24]
 80093b8:	e7d2      	b.n	8009360 <__sinit+0xc>
 80093ba:	bf00      	nop
 80093bc:	08009778 	.word	0x08009778
 80093c0:	080092ed 	.word	0x080092ed

080093c4 <__sfp>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	4607      	mov	r7, r0
 80093c8:	f7ff ffac 	bl	8009324 <__sfp_lock_acquire>
 80093cc:	4b1e      	ldr	r3, [pc, #120]	; (8009448 <__sfp+0x84>)
 80093ce:	681e      	ldr	r6, [r3, #0]
 80093d0:	69b3      	ldr	r3, [r6, #24]
 80093d2:	b913      	cbnz	r3, 80093da <__sfp+0x16>
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7ff ffbd 	bl	8009354 <__sinit>
 80093da:	3648      	adds	r6, #72	; 0x48
 80093dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	d503      	bpl.n	80093ec <__sfp+0x28>
 80093e4:	6833      	ldr	r3, [r6, #0]
 80093e6:	b30b      	cbz	r3, 800942c <__sfp+0x68>
 80093e8:	6836      	ldr	r6, [r6, #0]
 80093ea:	e7f7      	b.n	80093dc <__sfp+0x18>
 80093ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093f0:	b9d5      	cbnz	r5, 8009428 <__sfp+0x64>
 80093f2:	4b16      	ldr	r3, [pc, #88]	; (800944c <__sfp+0x88>)
 80093f4:	60e3      	str	r3, [r4, #12]
 80093f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093fa:	6665      	str	r5, [r4, #100]	; 0x64
 80093fc:	f000 f847 	bl	800948e <__retarget_lock_init_recursive>
 8009400:	f7ff ff96 	bl	8009330 <__sfp_lock_release>
 8009404:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009408:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800940c:	6025      	str	r5, [r4, #0]
 800940e:	61a5      	str	r5, [r4, #24]
 8009410:	2208      	movs	r2, #8
 8009412:	4629      	mov	r1, r5
 8009414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009418:	f7fd fc72 	bl	8006d00 <memset>
 800941c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009424:	4620      	mov	r0, r4
 8009426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009428:	3468      	adds	r4, #104	; 0x68
 800942a:	e7d9      	b.n	80093e0 <__sfp+0x1c>
 800942c:	2104      	movs	r1, #4
 800942e:	4638      	mov	r0, r7
 8009430:	f7ff ff62 	bl	80092f8 <__sfmoreglue>
 8009434:	4604      	mov	r4, r0
 8009436:	6030      	str	r0, [r6, #0]
 8009438:	2800      	cmp	r0, #0
 800943a:	d1d5      	bne.n	80093e8 <__sfp+0x24>
 800943c:	f7ff ff78 	bl	8009330 <__sfp_lock_release>
 8009440:	230c      	movs	r3, #12
 8009442:	603b      	str	r3, [r7, #0]
 8009444:	e7ee      	b.n	8009424 <__sfp+0x60>
 8009446:	bf00      	nop
 8009448:	08009778 	.word	0x08009778
 800944c:	ffff0001 	.word	0xffff0001

08009450 <_fwalk_reent>:
 8009450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009454:	4606      	mov	r6, r0
 8009456:	4688      	mov	r8, r1
 8009458:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800945c:	2700      	movs	r7, #0
 800945e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009462:	f1b9 0901 	subs.w	r9, r9, #1
 8009466:	d505      	bpl.n	8009474 <_fwalk_reent+0x24>
 8009468:	6824      	ldr	r4, [r4, #0]
 800946a:	2c00      	cmp	r4, #0
 800946c:	d1f7      	bne.n	800945e <_fwalk_reent+0xe>
 800946e:	4638      	mov	r0, r7
 8009470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009474:	89ab      	ldrh	r3, [r5, #12]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d907      	bls.n	800948a <_fwalk_reent+0x3a>
 800947a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800947e:	3301      	adds	r3, #1
 8009480:	d003      	beq.n	800948a <_fwalk_reent+0x3a>
 8009482:	4629      	mov	r1, r5
 8009484:	4630      	mov	r0, r6
 8009486:	47c0      	blx	r8
 8009488:	4307      	orrs	r7, r0
 800948a:	3568      	adds	r5, #104	; 0x68
 800948c:	e7e9      	b.n	8009462 <_fwalk_reent+0x12>

0800948e <__retarget_lock_init_recursive>:
 800948e:	4770      	bx	lr

08009490 <__retarget_lock_acquire_recursive>:
 8009490:	4770      	bx	lr

08009492 <__retarget_lock_release_recursive>:
 8009492:	4770      	bx	lr

08009494 <__swhatbuf_r>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	460e      	mov	r6, r1
 8009498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800949c:	2900      	cmp	r1, #0
 800949e:	b096      	sub	sp, #88	; 0x58
 80094a0:	4614      	mov	r4, r2
 80094a2:	461d      	mov	r5, r3
 80094a4:	da08      	bge.n	80094b8 <__swhatbuf_r+0x24>
 80094a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	602a      	str	r2, [r5, #0]
 80094ae:	061a      	lsls	r2, r3, #24
 80094b0:	d410      	bmi.n	80094d4 <__swhatbuf_r+0x40>
 80094b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094b6:	e00e      	b.n	80094d6 <__swhatbuf_r+0x42>
 80094b8:	466a      	mov	r2, sp
 80094ba:	f000 f8fb 	bl	80096b4 <_fstat_r>
 80094be:	2800      	cmp	r0, #0
 80094c0:	dbf1      	blt.n	80094a6 <__swhatbuf_r+0x12>
 80094c2:	9a01      	ldr	r2, [sp, #4]
 80094c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094cc:	425a      	negs	r2, r3
 80094ce:	415a      	adcs	r2, r3
 80094d0:	602a      	str	r2, [r5, #0]
 80094d2:	e7ee      	b.n	80094b2 <__swhatbuf_r+0x1e>
 80094d4:	2340      	movs	r3, #64	; 0x40
 80094d6:	2000      	movs	r0, #0
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	b016      	add	sp, #88	; 0x58
 80094dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080094e0 <__smakebuf_r>:
 80094e0:	898b      	ldrh	r3, [r1, #12]
 80094e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094e4:	079d      	lsls	r5, r3, #30
 80094e6:	4606      	mov	r6, r0
 80094e8:	460c      	mov	r4, r1
 80094ea:	d507      	bpl.n	80094fc <__smakebuf_r+0x1c>
 80094ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094f0:	6023      	str	r3, [r4, #0]
 80094f2:	6123      	str	r3, [r4, #16]
 80094f4:	2301      	movs	r3, #1
 80094f6:	6163      	str	r3, [r4, #20]
 80094f8:	b002      	add	sp, #8
 80094fa:	bd70      	pop	{r4, r5, r6, pc}
 80094fc:	ab01      	add	r3, sp, #4
 80094fe:	466a      	mov	r2, sp
 8009500:	f7ff ffc8 	bl	8009494 <__swhatbuf_r>
 8009504:	9900      	ldr	r1, [sp, #0]
 8009506:	4605      	mov	r5, r0
 8009508:	4630      	mov	r0, r6
 800950a:	f7ff fb07 	bl	8008b1c <_malloc_r>
 800950e:	b948      	cbnz	r0, 8009524 <__smakebuf_r+0x44>
 8009510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009514:	059a      	lsls	r2, r3, #22
 8009516:	d4ef      	bmi.n	80094f8 <__smakebuf_r+0x18>
 8009518:	f023 0303 	bic.w	r3, r3, #3
 800951c:	f043 0302 	orr.w	r3, r3, #2
 8009520:	81a3      	strh	r3, [r4, #12]
 8009522:	e7e3      	b.n	80094ec <__smakebuf_r+0xc>
 8009524:	4b0d      	ldr	r3, [pc, #52]	; (800955c <__smakebuf_r+0x7c>)
 8009526:	62b3      	str	r3, [r6, #40]	; 0x28
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	6020      	str	r0, [r4, #0]
 800952c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009530:	81a3      	strh	r3, [r4, #12]
 8009532:	9b00      	ldr	r3, [sp, #0]
 8009534:	6163      	str	r3, [r4, #20]
 8009536:	9b01      	ldr	r3, [sp, #4]
 8009538:	6120      	str	r0, [r4, #16]
 800953a:	b15b      	cbz	r3, 8009554 <__smakebuf_r+0x74>
 800953c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009540:	4630      	mov	r0, r6
 8009542:	f000 f8c9 	bl	80096d8 <_isatty_r>
 8009546:	b128      	cbz	r0, 8009554 <__smakebuf_r+0x74>
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	f023 0303 	bic.w	r3, r3, #3
 800954e:	f043 0301 	orr.w	r3, r3, #1
 8009552:	81a3      	strh	r3, [r4, #12]
 8009554:	89a0      	ldrh	r0, [r4, #12]
 8009556:	4305      	orrs	r5, r0
 8009558:	81a5      	strh	r5, [r4, #12]
 800955a:	e7cd      	b.n	80094f8 <__smakebuf_r+0x18>
 800955c:	080092ed 	.word	0x080092ed

08009560 <_raise_r>:
 8009560:	291f      	cmp	r1, #31
 8009562:	b538      	push	{r3, r4, r5, lr}
 8009564:	4604      	mov	r4, r0
 8009566:	460d      	mov	r5, r1
 8009568:	d904      	bls.n	8009574 <_raise_r+0x14>
 800956a:	2316      	movs	r3, #22
 800956c:	6003      	str	r3, [r0, #0]
 800956e:	f04f 30ff 	mov.w	r0, #4294967295
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009576:	b112      	cbz	r2, 800957e <_raise_r+0x1e>
 8009578:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800957c:	b94b      	cbnz	r3, 8009592 <_raise_r+0x32>
 800957e:	4620      	mov	r0, r4
 8009580:	f000 f830 	bl	80095e4 <_getpid_r>
 8009584:	462a      	mov	r2, r5
 8009586:	4601      	mov	r1, r0
 8009588:	4620      	mov	r0, r4
 800958a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800958e:	f000 b817 	b.w	80095c0 <_kill_r>
 8009592:	2b01      	cmp	r3, #1
 8009594:	d00a      	beq.n	80095ac <_raise_r+0x4c>
 8009596:	1c59      	adds	r1, r3, #1
 8009598:	d103      	bne.n	80095a2 <_raise_r+0x42>
 800959a:	2316      	movs	r3, #22
 800959c:	6003      	str	r3, [r0, #0]
 800959e:	2001      	movs	r0, #1
 80095a0:	e7e7      	b.n	8009572 <_raise_r+0x12>
 80095a2:	2400      	movs	r4, #0
 80095a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095a8:	4628      	mov	r0, r5
 80095aa:	4798      	blx	r3
 80095ac:	2000      	movs	r0, #0
 80095ae:	e7e0      	b.n	8009572 <_raise_r+0x12>

080095b0 <raise>:
 80095b0:	4b02      	ldr	r3, [pc, #8]	; (80095bc <raise+0xc>)
 80095b2:	4601      	mov	r1, r0
 80095b4:	6818      	ldr	r0, [r3, #0]
 80095b6:	f7ff bfd3 	b.w	8009560 <_raise_r>
 80095ba:	bf00      	nop
 80095bc:	20000048 	.word	0x20000048

080095c0 <_kill_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d07      	ldr	r5, [pc, #28]	; (80095e0 <_kill_r+0x20>)
 80095c4:	2300      	movs	r3, #0
 80095c6:	4604      	mov	r4, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	4611      	mov	r1, r2
 80095cc:	602b      	str	r3, [r5, #0]
 80095ce:	f7f9 fdad 	bl	800312c <_kill>
 80095d2:	1c43      	adds	r3, r0, #1
 80095d4:	d102      	bne.n	80095dc <_kill_r+0x1c>
 80095d6:	682b      	ldr	r3, [r5, #0]
 80095d8:	b103      	cbz	r3, 80095dc <_kill_r+0x1c>
 80095da:	6023      	str	r3, [r4, #0]
 80095dc:	bd38      	pop	{r3, r4, r5, pc}
 80095de:	bf00      	nop
 80095e0:	20000664 	.word	0x20000664

080095e4 <_getpid_r>:
 80095e4:	f7f9 bd9a 	b.w	800311c <_getpid>

080095e8 <__sread>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	460c      	mov	r4, r1
 80095ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f0:	f000 f894 	bl	800971c <_read_r>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	bfab      	itete	ge
 80095f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095fa:	89a3      	ldrhlt	r3, [r4, #12]
 80095fc:	181b      	addge	r3, r3, r0
 80095fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009602:	bfac      	ite	ge
 8009604:	6563      	strge	r3, [r4, #84]	; 0x54
 8009606:	81a3      	strhlt	r3, [r4, #12]
 8009608:	bd10      	pop	{r4, pc}

0800960a <__swrite>:
 800960a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800960e:	461f      	mov	r7, r3
 8009610:	898b      	ldrh	r3, [r1, #12]
 8009612:	05db      	lsls	r3, r3, #23
 8009614:	4605      	mov	r5, r0
 8009616:	460c      	mov	r4, r1
 8009618:	4616      	mov	r6, r2
 800961a:	d505      	bpl.n	8009628 <__swrite+0x1e>
 800961c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009620:	2302      	movs	r3, #2
 8009622:	2200      	movs	r2, #0
 8009624:	f000 f868 	bl	80096f8 <_lseek_r>
 8009628:	89a3      	ldrh	r3, [r4, #12]
 800962a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800962e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009632:	81a3      	strh	r3, [r4, #12]
 8009634:	4632      	mov	r2, r6
 8009636:	463b      	mov	r3, r7
 8009638:	4628      	mov	r0, r5
 800963a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800963e:	f000 b817 	b.w	8009670 <_write_r>

08009642 <__sseek>:
 8009642:	b510      	push	{r4, lr}
 8009644:	460c      	mov	r4, r1
 8009646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800964a:	f000 f855 	bl	80096f8 <_lseek_r>
 800964e:	1c43      	adds	r3, r0, #1
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	bf15      	itete	ne
 8009654:	6560      	strne	r0, [r4, #84]	; 0x54
 8009656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800965a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800965e:	81a3      	strheq	r3, [r4, #12]
 8009660:	bf18      	it	ne
 8009662:	81a3      	strhne	r3, [r4, #12]
 8009664:	bd10      	pop	{r4, pc}

08009666 <__sclose>:
 8009666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800966a:	f000 b813 	b.w	8009694 <_close_r>
	...

08009670 <_write_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4d07      	ldr	r5, [pc, #28]	; (8009690 <_write_r+0x20>)
 8009674:	4604      	mov	r4, r0
 8009676:	4608      	mov	r0, r1
 8009678:	4611      	mov	r1, r2
 800967a:	2200      	movs	r2, #0
 800967c:	602a      	str	r2, [r5, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	f7f9 fd8b 	bl	800319a <_write>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d102      	bne.n	800968e <_write_r+0x1e>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	b103      	cbz	r3, 800968e <_write_r+0x1e>
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	bd38      	pop	{r3, r4, r5, pc}
 8009690:	20000664 	.word	0x20000664

08009694 <_close_r>:
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	4d06      	ldr	r5, [pc, #24]	; (80096b0 <_close_r+0x1c>)
 8009698:	2300      	movs	r3, #0
 800969a:	4604      	mov	r4, r0
 800969c:	4608      	mov	r0, r1
 800969e:	602b      	str	r3, [r5, #0]
 80096a0:	f7f9 fd97 	bl	80031d2 <_close>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d102      	bne.n	80096ae <_close_r+0x1a>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	b103      	cbz	r3, 80096ae <_close_r+0x1a>
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	20000664 	.word	0x20000664

080096b4 <_fstat_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4d07      	ldr	r5, [pc, #28]	; (80096d4 <_fstat_r+0x20>)
 80096b8:	2300      	movs	r3, #0
 80096ba:	4604      	mov	r4, r0
 80096bc:	4608      	mov	r0, r1
 80096be:	4611      	mov	r1, r2
 80096c0:	602b      	str	r3, [r5, #0]
 80096c2:	f7f9 fd92 	bl	80031ea <_fstat>
 80096c6:	1c43      	adds	r3, r0, #1
 80096c8:	d102      	bne.n	80096d0 <_fstat_r+0x1c>
 80096ca:	682b      	ldr	r3, [r5, #0]
 80096cc:	b103      	cbz	r3, 80096d0 <_fstat_r+0x1c>
 80096ce:	6023      	str	r3, [r4, #0]
 80096d0:	bd38      	pop	{r3, r4, r5, pc}
 80096d2:	bf00      	nop
 80096d4:	20000664 	.word	0x20000664

080096d8 <_isatty_r>:
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	4d06      	ldr	r5, [pc, #24]	; (80096f4 <_isatty_r+0x1c>)
 80096dc:	2300      	movs	r3, #0
 80096de:	4604      	mov	r4, r0
 80096e0:	4608      	mov	r0, r1
 80096e2:	602b      	str	r3, [r5, #0]
 80096e4:	f7f9 fd91 	bl	800320a <_isatty>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d102      	bne.n	80096f2 <_isatty_r+0x1a>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	b103      	cbz	r3, 80096f2 <_isatty_r+0x1a>
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	bd38      	pop	{r3, r4, r5, pc}
 80096f4:	20000664 	.word	0x20000664

080096f8 <_lseek_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d07      	ldr	r5, [pc, #28]	; (8009718 <_lseek_r+0x20>)
 80096fc:	4604      	mov	r4, r0
 80096fe:	4608      	mov	r0, r1
 8009700:	4611      	mov	r1, r2
 8009702:	2200      	movs	r2, #0
 8009704:	602a      	str	r2, [r5, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	f7f9 fd8a 	bl	8003220 <_lseek>
 800970c:	1c43      	adds	r3, r0, #1
 800970e:	d102      	bne.n	8009716 <_lseek_r+0x1e>
 8009710:	682b      	ldr	r3, [r5, #0]
 8009712:	b103      	cbz	r3, 8009716 <_lseek_r+0x1e>
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	bd38      	pop	{r3, r4, r5, pc}
 8009718:	20000664 	.word	0x20000664

0800971c <_read_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	4d07      	ldr	r5, [pc, #28]	; (800973c <_read_r+0x20>)
 8009720:	4604      	mov	r4, r0
 8009722:	4608      	mov	r0, r1
 8009724:	4611      	mov	r1, r2
 8009726:	2200      	movs	r2, #0
 8009728:	602a      	str	r2, [r5, #0]
 800972a:	461a      	mov	r2, r3
 800972c:	f7f9 fd18 	bl	8003160 <_read>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	d102      	bne.n	800973a <_read_r+0x1e>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	b103      	cbz	r3, 800973a <_read_r+0x1e>
 8009738:	6023      	str	r3, [r4, #0]
 800973a:	bd38      	pop	{r3, r4, r5, pc}
 800973c:	20000664 	.word	0x20000664

08009740 <_init>:
 8009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009742:	bf00      	nop
 8009744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009746:	bc08      	pop	{r3}
 8009748:	469e      	mov	lr, r3
 800974a:	4770      	bx	lr

0800974c <_fini>:
 800974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974e:	bf00      	nop
 8009750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009752:	bc08      	pop	{r3}
 8009754:	469e      	mov	lr, r3
 8009756:	4770      	bx	lr
